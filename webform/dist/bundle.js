(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
$.noConflict();


	var app = angular.module('LCP', [
        'ui.bootstrap',
        'ngAnimate',
        'ajoslin.promise-tracker',
        'navigation.navigationBlocker',
        'translate.languageChanger',
        'ui.multiselect',
        'tabs.formTabs',
        'ui.errorMapper',
        'monospaced.elastic',
        'ngOrderObjectBy',
        'notifications']);

    app.run(function($rootScope, promiseTracker, $location, tabService) {
        $rootScope.loadingTracker = promiseTracker({});
        tabService.setTabs([
            {"id":"BasicData",            "active" : true},
            {"id":"ListOfPlants",         "active" : false},
            {"id":"PlantDetails",         "active" : false},
            {"id":"EnergyInput",          "active" : false},
            {"id":"TotalEmissionsToAir",  "active" : false},
            {"id":"Desulphurisation",     "active" : false},
            {"id":"UsefulHeat",             "active" : false},
            {"id":"Notes",                "active" : false}]);
    });

    app.config(function (languageChangerProvider) {
        languageChangerProvider.setDefaultLanguage('en');
        languageChangerProvider.setLanguageFilePrefix('lcp-labels-');
        languageChangerProvider.setAvailableLanguages({ "item" :[{
            "code": "bg",
            "label": "Български (bg)"}, {
            "code": "es",
                "label": "Español (es)"}, {
            "code": "cs",
                "label": "Čeština (cs)"}, {
            "code": "da",
                "label": "Dansk (da)"}, {
            "code": "de",
                "label": "Deutsch (de)"}, {
            "code": "et",
                "label": "Eesti (et)"}, {
            "code": "el",
                "label": "ελληνικά (el)"}, {
            "code": "en",
                "label": "English (en)"}, {
            "code": "fr",
                "label": "Français (fr)"}, {
            "code": "hr",
                "label": "Hrvatski (hr)"}, {
            "code": "it",
                "label": "Italiano (it)"}, {
            "code": "lv",
                "label": "Latviešu valoda (lv)"}, {
            "code": "lt",
                "label": "Lietuvių kalba (lt)"}, {
            "code": "hu",
                "label": "Magyar (hu)"}, {
            "code": "hr",
                "label": "Hrvatski (hr)"}, {
            "code": "mt",
                "label": "Malti (mt)"}, {
            "code": "nl",
                "label": "Nederlands (nl)"}, {
            "code": "pl",
                "label": "Polski (pl)"}, {
            "code": "pt",
                "label": "Português (pt)"}, {
            "code": "ro",
                "label": "Română (ro)"}, {
            "code": "sk",
                "label": "Slovenčina (sk)"}, {
            "code": "sl",
                "label": "Slovenščina (sl)"}, {
            "code": "fi",
                "label": "Suomi (fi)"}, {
            "code": "sv",
                "label": "Svenska (sv)"}] })
    });

    // request parameters
    var baseUri = getParameterByName('base_uri');
    var fileId = getParameterByName('fileId');
    var envelope = getParameterByName('envelope');
    var sessionId = getParameterByName('sessionid');
    var countryCode = getParameterByName('countrycode');
    countryCode = countryCode === "GB" ? "UK" : countryCode;
    var DD_VOCABULARY_BASE_URI = "https://dd.eionet.europa.eu/vocabulary/";

    app.controller("questionnaire", function ($scope, $rootScope, dataRepository, languageChanger, $sce, $location, $timeout, $anchorScroll, $notification, $http, $filter ,$q) {

     
        $scope.codeList = {};
        $scope.regionsCodelist = {};

		$scope.base = $location.host()+ $location.port() + getParameterByName('base_uri');
        //$scope.availableLanguages = languageChanger.getAvailableLanguages();

        dataRepository.getEmptyInstance().error(function(){alert("Failed to read empty instance XML file.");}).success(function(instance) {
            $scope.emptyInstance = instance;
        });

        dataRepository.getInstance().error(function(){alert("Failed to read instance XML file.");}).success(function(instance) {
            if (!angular.isDefined(instance.LCPQuestionnaire)){
                // add labelLanguage attribute to correct location
                $scope.instance = {};
                $scope.instance.LCPQuestionnaire = {};
                $scope.instance.LCPQuestionnaire['@xmlns:xsi'] = instance.LCPQuestionnaire['@xmlns:xsi'];
                $scope.instance.LCPQuestionnaire['@xsi:noNamespaceSchemaLocation'] = instance.LCPQuestionnaire['@xsi:noNamespaceSchemaLocation'];
                $scope.instance.LCPQuestionnaire['@xml:lang'] = instance.LCPQuestionnaire['@xml:lang'];
                $scope.instance.LCPQuestionnaire.BasicData = instance.LCPQuestionnaire.BasicData;
                $scope.instance.LCPQuestionnaire.ListOfPlants = instance.LCPQuestionnaire.ListOfPlants;

            }
            else {
                $scope.instance = instance;
            }

            if ($scope.instance.LCPQuestionnaire.ListOfPlants && $scope.instance.LCPQuestionnaire.ListOfPlants.Plant) {

                // if therσυσe is only 1 plant, then convert it to array
                if (!angular.isArray($scope.instance.LCPQuestionnaire.ListOfPlants.Plant)) {
                    $scope.instance.LCPQuestionnaire.ListOfPlants.Plant = [$scope.instance.LCPQuestionnaire.ListOfPlants.Plant];
                }
                // remove the first empty row, if exists
                if ($scope.instance.LCPQuestionnaire.ListOfPlants.Plant.length == 1 &&
                        (!$scope.instance.LCPQuestionnaire.ListOfPlants.Plant[0] ||
                                (!$scope.instance.LCPQuestionnaire.ListOfPlants.Plant[0]['PlantName'] && !$scope.instance.LCPQuestionnaire.ListOfPlants.Plant[0]['PlantId']))){
                    $scope.instance.LCPQuestionnaire.ListOfPlants.Plant = [];

                    // Load predefined country specific plants
                    if( countryCode != null) {
                        var eprtrCountryCode = countryCode === "GB" ? "UK" : countryCode === "GR" ? "EL" : countryCode;
                        // var url = "lcp_plants-" + countryCode + ".json";
                        var url = "http://semantic.eea.europa.eu/sparql?format=application/json&query=";
                        var sparql = " PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>" +
                                    " PREFIX cr: <http://cr.eionet.europa.eu/ontologies/contreg.rdf#> " +
                                    " PREFIX prtr: <http://prtr.ec.europa.eu/rdf/schema.rdf#> " +
                                    " PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>" +
                                    " PREFIX lcpType: <http://semantic.eea.europa.eu/project/lcp_data/lcp_plants.csv/> " +
                                    " PREFIX lcp: <http://semantic.eea.europa.eu/project/lcp_data/lcp_plants.csv#> " +
                                    " SELECT *" +
                                    " WHERE {" +
                                    " {" +
                                        " [] a lcpType:lcpPlant ;" +
                                        " lcp:PlantName ?PlantName;" +
                                        " lcp:MemberState ?MemberState;" +
                                        " lcp:EPRTRNationalId ?EPRTRNationalId;" +
                                        " lcp:Unique_Plant_ID ?PlantId." +

                                        " ?facility a prtr:Facility ;" +
                                        " prtr:facilityName ?facilityName;" +
                                        " prtr:streetName ?streetName;" +
                                        " prtr:postalCode  ?postalCode;" +
                                        " geo:lat ?lat;" +
                                        " geo:long ?long;" +
                                        " prtr:inCountry ?inCountry ;" +
                                        " prtr:latestReport ?latestReport." +
                                        " ?inCountry prtr:code ?EPRTRCountryCode." +
                                        " ?latestReport prtr:nationalID ?EPRTRNationalId;" +
                                        " prtr:forNUTS ?forNUTS;" +
                                        " prtr:reportingYear ?reportingYear." +
                                        " ?forNUTS prtr:code ?regionCode." +
                                        " OPTIONAL { ?facility prtr:buildingNumber ?buildingNumber. }" +
                                        " OPTIONAL { ?facility prtr:city ?city. }" +
                                        " FILTER( ?EPRTRCountryCode= '" + eprtrCountryCode + "' and ?MemberState = '" + countryCode + "' and ?MemberState != 'SK' )" +
                                    " } " +
                                    " UNION" +
                                    " {" +
                                        " ?plant a lcpType:lcpPlant ;" +
                                        " lcp:PlantName ?PlantName;" +
                                        " lcp:MemberState ?MemberState;" +
                                        " lcp:EPRTRNationalId ?EPRTRNationalId;" +
                                        " lcp:Unique_Plant_ID ?PlantId." +
                                        " OPTIONAL {  ?plant lcp:FacilityName ?facilityName. }" +
                                        " OPTIONAL {  ?plant lcp:Longitude ?long. }" +
                                        " OPTIONAL {  ?plant lcp:Latitude ?lat. }" +
                                        " OPTIONAL {  ?plant lcp:Address1 ?streetName. }" +
                                        " OPTIONAL {  ?plant lcp:City ?city. }" +
                                        " OPTIONAL {  ?plant lcp:PostalCode ?postalCode.}" +
                                        " OPTIONAL {  ?plant lcp:Region ?regionCode. }" +
                                        " OPTIONAL {" +
                                            " ?facility a prtr:Facility ;" +
                                            " prtr:inCountry ?inCountry ;" +
                                            " prtr:latestReport ?latestReport." +
                                            " ?latestReport prtr:nationalID ?EPRTRNationalId." +
                                            " ?inCountry prtr:code ?EPRTRCountryCode." +
                                            " FILTER( ?EPRTRCountryCode= '"+ eprtrCountryCode + "'  )" +
                                        " }" +
                                        " FILTER( ?MemberState = '" + countryCode +"' and (!bound(?facility) or  ?MemberState = 'SK' ) ) " +
                                    " }" +
                                 " } ORDER BY ?PlantId ";

                        url = baseUri + '/restProxy?uri=' + encodeURIComponent(url + encodeURIComponent(sparql));
        //                console.log('plants url is:'+url);
                        $http.get(url, {tracker : $rootScope.loadingTracker})
                                .error(function(){alert("Failed to pre-load plants data from E-PRTR database.");})
                                .success(function(eprtrData) {
                                    if (eprtrData.results.bindings.length > 0) {
                                        var plantsDict = {} ;
                                        for (var i= 0; i < eprtrData.results.bindings.length; i++) {
                                            var responsePlant = eprtrData.results.bindings[i];
                                            var plant = null ;
                                            if (   plantsDict[ responsePlant.PlantId.value] && plantsDict [ responsePlant.PlantId.value] > responsePlant.reportingYear.value  ) {
                                                // some plants have reports under different facilities. we keep the for most new reportingYear
                                                continue ;
                                            }
                                            else if ( ! plantsDict[ responsePlant.PlantId.value] ){
                                                $scope.addItem('LCPQuestionnaire.ListOfPlants.Plant');
                                            }

                                            plant = $scope.instance.LCPQuestionnaire.ListOfPlants.Plant[ $scope.instance.LCPQuestionnaire.ListOfPlants.Plant.length - 1 ];
                                            if (!plant.PlantLocation) plant.PlantLocation = {};
                                            if (!plant.GeographicalCoordinate) plant.GeographicalCoordinate = {};

                                            plant.PlantId = responsePlant.PlantId.value ;
                                            plant.PlantName = responsePlant.PlantName.value;
                                            plant.EPRTRNationalId = responsePlant.EPRTRNationalId.value;
                                            plant.PlantLocation.StreetName = responsePlant.streetName.value;
                                            if (!isEmpty(responsePlant.buildingNumber.value)) {
                                                plant.PlantLocation.BuildingNumber += " " + responsePlant.buildingNumber.value;
                                            }
                                            plant.PlantLocation.City = responsePlant.city.value;
                                            plant.PlantLocation.Region = responsePlant.regionCode.value;
                                            plant.PlantLocation.PostalCode = responsePlant.postalCode.value;
                                            plant.GeographicalCoordinate.Longitude = responsePlant.long.value;
                                            plant.GeographicalCoordinate.Latitude = responsePlant.lat.value;
                                            plant.FacilityName = responsePlant.facilityName.value;

                                            plantsDict [plant.PlantId ] = responsePlant.reportingYear.value || 2013;
                                        }
                                        $rootScope.$broadcast('updateFilter');
                                        $notification.info("Info", "Previous EPRTR plants have been pre-loaded.");

                                    }
                                    else {
                                        alert("The system could not find any plant for country " + countryCode);
                                    }
                                });
                    }
                }
            }
            else {
                $scope.instance.LCPQuestionnaire.ListOfPlants = {"Plant" : []};
            }
            if( countryCode != null){

                $scope.countryCodeBoolean =true;
                $scope.instance.LCPQuestionnaire.BasicData.MemberState = countryCode.toUpperCase();
                $scope.memberStateValue = countryCode;
            }

            if( $scope.instance.LCPQuestionnaire.BasicData.MemberState != null ){
                $scope.countryCodeBoolean =true;
                $scope.memberStateValue = $scope.instance.LCPQuestionnaire.BasicData.MemberState;
                $scope.stateValue = $scope.instance.LCPQuestionnaire.BasicData.MemberState;
                $scope.instance.LCPQuestionnaire.BasicData.State = $scope.stateValue;
                $scope.regionsCodelist = dataRepository.loadRegionsCodelist($scope.memberStateValue);
            }

            $scope.$broadcast('instanceReady');
        });

   
        
        $scope.reportingYears = [];
        $scope.reportingYears.push ('2016');
        $scope.plantDetailsOtherSectorFieldsView = {iron_steel:"Iron and Steel",esi:"Electricity production",district_heating:"District heating",chp:"Combined heat and power generation",other:"Other"};

        // new
        $scope.currentListOfPlantsTable = null;
        $scope.selectedListOfPlantsTable = null;
        $scope.translationData = {};
        $rootScope.bulkEditListOfPlants=false;
        //$scope.status = submissionService.getStatus();
        $scope.profileFilled = true;
        $scope.editReference = false;
        $scope.changedReference = "";
        $scope.editUserIdentity = false;
        $scope.changedUserIdentity = "";
        $scope.editCountry = false;
        $scope.changedCountry = "";
        $scope.regionsCodelist = {};
        $scope.regionsCountry = null;
        $scope.isIE9 = $rootScope.isIE9;

        $scope.checkBoxDeleteCommit = false;
        // new end
        //determine ie version, code snippet is taken from: http://msdn.microsoft.com/en-us/library/ms537509%28v=vs.85%29.aspx
        var rv = -1; // Return value assumes failure.
        if (navigator.appName == 'Microsoft Internet Explorer')
        {
            var ua = navigator.userAgent;
            var re  = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
            if (re.exec(ua) != null)
                rv = parseFloat( RegExp.$1 );
        }
        //see: http://stackoverflow.com/questions/17907445/how-to-detect-ie11
        else if (navigator.appName == 'Netscape')
        {
            var ua = navigator.userAgent;
            var re  = new RegExp("Trident/.*rv:([0-9]{1,}[\.0-9]{0,})");
            if (re.exec(ua) != null)
                rv = parseFloat( RegExp.$1 );
        }

        $rootScope.ieVersionNumberOutOfCuriosityVariable = rv;
        if (rv > 0 && rv <= 9.0){
            $rootScope.isIE9 = true;
        }else{
            $rootScope.isIE9 = false;
        }
        $rootScope.$watch('isIE9', function(newValue, oldValue) {
            if (!newValue) {
                return;
            } else {
                $scope.isIE9 = $rootScope.isIE9;
            }
        })


        //$scope.countryCodeBoolean =  countryCode != null  ;
        $scope.countryCodeVal =  countryCode;


        dataRepository.loadCodeList();
        dataRepository.loadOldLCPCodeList();
        dataRepository.loadCombustionPlantCodeList();
        dataRepository.loadDerogationValueCodeList();
        dataRepository.loadOtherSolidFuelCodeList();
        dataRepository.loadOtherGasesousFuelCodeList();
        dataRepository.loadMonthValueCodeList();
        $scope.codeList = dataRepository.getCodeList();

       
    
        $scope.conversionLink = "";
        $scope.instanceInfo = {};
        dataRepository.loadInstanceInfo().error(function(){console.log("Failed to readfile info from server.");}).success(function(info) {
            angular.copy(info, $scope.instanceInfo);
            if ($scope.instanceInfo.conversions) {
                var htmlConversionId = $filter('filter')($scope.instanceInfo.conversions, {resultType: 'HTML'})[0].id;
                $scope.conversionLink = $scope.instanceInfo.conversionLink + htmlConversionId;
            }
        })


        // Remove row from ng-repeat.
        $scope.remove = function(array,  rowElement, showMsg){

            ////console.log(rowElement);
            ////console.log(countNonEmptyProperties(rowElement));
            if(showMsg == true){
                if (countNonEmptyProperties(rowElement) > 0) {
                    if (!confirm('Are you sure you want to delete the data in this row?')){
                        return;
                    }
                }
            }
            var index = array.indexOf(rowElement);
            array.splice(index, 1);
            $rootScope.$broadcast('updateFilter');
        };


        // get code list label by code
        $scope.getCodeListLabel = function(codelist, code) {
            //Do not try to get codeList before it actually exists.
            if (!$scope.codeList) {
                return;
            }

            //Escape codelists that are not arrays by default (has only one element)
            // This code can be removed when changes are made to codeList file.
            if (!($scope.codeList.LCPCodelists[codelist].item.length > 0)
                    && $scope.codeList.LCPCodelists[codelist].item.code == code) {
                return $scope.codeList.LCPCodelists[codelist].item.label;
            }

            var retValue;
            for (var i=0 ; i<=$scope.codeList.LCPCodelists[codelist].item.length - 1; i++) {
                if ($scope.codeList.LCPCodelists[codelist].item[i].code == code) {
                    retValue = $scope.codeList.LCPCodelists[codelist].item[i].label;
                    break;
                }
            }
            return retValue;
        };


        $scope.addItem = function(path) {

            var tokens = path.split(".");
            var result = $scope.instance;
            while(tokens.length) {
                result = result[tokens.shift()];
            }
            if (!(result instanceof Array)) {
                result = [];
            }
            // Need to make copy of object otherwise it gets same $$hashkey and it cannot be used in ng-repeat.
            // Other solution would be to get empty instance every time that would be slower.
            var copyOfEmptyInstance = clone($scope.getInstanceByPath('emptyInstance', path));
            result.push(copyOfEmptyInstance);
            return copyOfEmptyInstance;
        };

        $scope.getNextPlantId = function ( plantId_candidate ) {
            //
            var q = $q.defer ();

            var formNextPlantId = 1;
            var newPlantId = null;

            function pad(num, size) {
                var s = num+"";
                while (s.length < size) s = "0" + s;
                return s;
            }

            function checkSDS ( newPlantId ) {
                var url = "http://semantic.eea.europa.eu/sparql?format=application/json&query=";

                var sparql =
                    " PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>" +
                    " PREFIX lcpType: <http://semantic.eea.europa.eu/project/lcp_data/lcp_plants.csv/>" +
                    " PREFIX lcp: <http://semantic.eea.europa.eu/project/lcp_data/lcp_plants.csv#>" +
                    " SELECT *" +
                    " WHERE {" +
                    " ?plant a lcpType:lcpPlant ;" +
                    " lcp:Unique_Plant_ID ?PlantId." +
                    " FILTER ( ?PlantId = '" + newPlantId +"' )" +
                    " }" ;

                url = baseUri + '/restProxy?uri=' + encodeURIComponent(url + encodeURIComponent(sparql));
                $http.get(url, {tracker : $rootScope.loadingTracker})
                            .error(function(){alert("Failed to read data from remote database. Please check your connection."); q.reject();})
                            .success(function(eprtrData) {
                                if (eprtrData.results.bindings.length > 0) { // plandId exists in db
                                    // check against the next increment of plantid
                                    newPlantId =   ($scope.memberStateValue || $scope.instance.LCPQuestionnaire.BasicData.MemberState) + pad( parseInt( newPlantId.slice(2) ) + 1 , 4 ) ;
                                    $scope.getNextPlantId ( newPlantId ) . then ( function ( value ) {
                                        q.resolve ( value ) ;
                                    } ) ;
                                }
                                else { // plantid not reserved. resolve the promise
                                    q.resolve ( newPlantId ) ;
                                }
                });
            }

            if ( plantId_candidate == null )
            { // plantId_candidate == null on the first call of the function
                // we get the max plant id of the current plants on th form
                // and the max plant id from sds
                // then we will check for id collisions and increment by one the id and recheck, until a 'free' plant id is found

                var orderBy = $filter('orderBy');
                var orderedItems = orderBy( $scope.instance.LCPQuestionnaire.ListOfPlants.Plant, "PlantId", true);

                for (var i=0; i < orderedItems.length; i++) {
                            if (!isEmpty(orderedItems[i].PlantId ) && orderedItems[i].PlantId !== "" ) {
                                formNextPlantId = parseInt(orderedItems[i].PlantId.substring(orderedItems[i].PlantId.length - 4 )) + 1;
                                break;
                            }
                }


                // ---- query the sds for the max id
                var url = "http://semantic.eea.europa.eu/sparql?format=application/json&query=";

                var sparql =
                    " PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>" +
                    " PREFIX lcpType: <http://semantic.eea.europa.eu/project/lcp_data/plant_IDs.csv/>" +
                    " PREFIX lcp: <http://semantic.eea.europa.eu/project/lcp_data/plant_IDs.csv#> " +
                    " SELECT *" +
                    " WHERE {" +
                    " [] a lcpType:lcpPlantIds ;" +
                    " lcp:Unique_Plant_ID ?PlantId." +
                    " FILTER ( regex(?PlantId,'" +  ($scope.memberStateValue || $scope.instance.LCPQuestionnaire.BasicData.MemberState) +"') )" +
                    " }  ORDER BY DESC(?PlantId) LIMIT 1 " ;

                url = baseUri + '/restProxy?uri=' + encodeURIComponent(url + encodeURIComponent(sparql));
                $http.get(url, {tracker : $rootScope.loadingTracker})
                            .error(function(){alert("Failed to read data from remote databse. Please check your connection"); q.reject();})
                            .success(function(eprtrData) {
                                var nextId;
                                if ( eprtrData.results.bindings.length > 0 ) {
                                nextId = parseInt( eprtrData.results.bindings[0].PlantId.value.slice(2) ) + 1 ;
                                if ( formNextPlantId > nextId ) nextId = formNextPlantId ;
                            }
                                else nextId = formNextPlantId;

                                    newPlantId =   ($scope.memberStateValue || $scope.instance.LCPQuestionnaire.BasicData.MemberState) +
                                                    pad(  nextId , 4 ) ;
                                    checkSDS ( newPlantId ) ;

                });

            }
            else {
                checkSDS ( plantId_candidate ) ;
            }

            return q.promise ;

        }

        $scope.getMaxPlantId = function() {
            var orderBy = $filter('orderBy');
            var orderedItems = orderBy( $scope.instance.LCPQuestionnaire.ListOfPlants.Plant, "PlantId", true);
            var nextPlantId = 1;
            var newPlantId = null;
            var exists = null;

            for (var i=0; i < orderedItems.length; i++) {
                if (!isEmpty(orderedItems[i].PlantId ) && orderedItems[i].PlantId !== "" ) {
                    nextPlantId = parseInt(orderedItems[i].PlantId.substring(orderedItems[i].PlantId.length - 4 )) + 1;
                    break;
                }
            }
            // format the id : XXNNNN, where XX is the memberstate code and NNNN is a unique integer
            function pad(num, size) {
                var s = num+"";
                while (s.length < size) s = "0" + s;
                return s;
            }

            newPlantId =  ($scope.memberStateValue || $scope.instance.LCPQuestionnaire.BasicData.MemberState) + pad( nextPlantId, 4);

            return newPlantId;
        }

        $rootScope.getInstanceByPath = function(root, identifier) {
            //console.log(root);
            if (!$scope.instance) {
                return null;
            }

            var tokens = root.split(".");
            //console.log(tokens);
            var result = $scope;

            while(tokens.length) {
                result = result[tokens.shift()];
                if (!result) {
                    return null;
                }
            }

            tokens = identifier.split(".");

            while(tokens.length) {
                result = result[tokens.shift()];
            }

            return result;
        };

        $rootScope.getPlantByPath = function(plant, identifier) {
            //console.log(root);
            if (!$scope.instance) {
                return null;
            }

            var result;
            //console.log(tokens);
            if(plant != null){
             result = plant;
            }


            var tokens = identifier.split(".");

            while(tokens.length) {
                result = result[tokens.shift()];
            }

            return result;
        };

        // save instance data.
        $scope.saveInstance = function(){

            //$scope.submitted = true;
            var passedTheQas = $scope.runQAtests();
            var formComplete = $scope.isFormComplete();

			dataRepository.saveInstance($scope.instance).error(function(){

                $notification.error("Save", "Data was not saved !");})

            .success(function(response){
                if ( response.code === 0 ) {
                  alert("There was an error during the save operation. Data is not saved.")
                  return;
                }

                if ($scope.appForm.$invalid || ( !formComplete) ) {
                    $notification.info("Save", "Data was saved, but the questionnaire is incomplete.");
                }
                else if (!passedTheQas) {
                    $notification.info("Save", "Data was saved, but the questionnaire did not pass some QAs.");
                }
                else {
                    $notification.success("Save", "Data is saved successfully.");
                }

                $scope.appForm.$setPristine(true);

            });

        };

         $scope.hasArticle31DerogationValue = function(item){
             // check against this value: http://dd.eionet.europa.eu/vocabularyconcept/euregistryonindustrialsites/DerogationValue/Article31/
             if(item.PlantDetails!=null && item.PlantDetails.Derogation!= null){
                 if(item.PlantDetails.Derogation.indexOf("Article31") !== -1) {
                    return true;
                }
                else {
                    return false;
                }
             }
             return false;
         }

         $scope.hasArticle35DerogationValue = function(item){
             // check against this value: http://dd.eionet.europa.eu/vocabularyconcept/euregistryonindustrialsites/DerogationValue/Article35/
             if(item.PlantDetails!=null && item.PlantDetails.Derogation!= null){
                 if(item.PlantDetails.Derogation.indexOf("Article35") !== -1) {
                    return true;
                }
                else {
                    return false;
                }
             }
             return false;
         }


         $scope.addDesulphurizationValuesForEachMonth=function(i,plant){
                 plant.Desulphurisation.push({
                    "MonthValue":$scope.codeList.MonthlyDesulphurisation[i].MonthValue,
                    "DesulphurisationRate": $scope.codeList.MonthlyDesulphurisation[i].DesulphurisationRate,
                    "SulphurContent": $scope.codeList.MonthlyDesulphurisation[i].SulphurContent,
                    "TechnicalJustification": $scope.codeList.MonthlyDesulphurisation[i].TechnicalJustification,
                 })
         }
        $scope.isFormComplete = function () {
            // returns true if the required fields for all plant are filled; false if not ~

            var res = true;
            var plants = $scope.instance.LCPQuestionnaire.ListOfPlants.Plant;
            var plant = null;
            var j = null;

            for ( i=0 ; i < plants.length; i++) {
                plant = plants[i];
                // list of plants
                if ( isEmpty (plant.PlantId) || isEmpty( plant.GeographicalCoordinate.Latitude) || isEmpty ( plant.GeographicalCoordinate.Longitude)   )
                    res = false;

                // plant details
                if ( isEmpty ( plant.PlantDetails.MWth) )
                    res = false;

    

                if (res === false) break;
            }

            return res;


        }


        $scope.runQAtests = function () {

            // conform the instance if needed

            var res = true;
            var plants = $scope.instance.LCPQuestionnaire.ListOfPlants.Plant;

            if (plants.length != $scope.instance.LCPQuestionnaire.BasicData.NumberOfPlants)
                res = false;

            var sectors = {};
            var status  = {};

   //         for (i in $scope.codeList.LCPCodelists.sectors.concepts) {  sectors[ $scope.codeList.LCPCodelists.sectors.concepts[ i ] ['@id'] ] = 1 ; }
            // sectors is a dictionary of valid other sector values

        //    for (i in $scope.codeList.LCPCodelists.status.concepts) {  status[ $scope.codeList.LCPCodelists.status.concepts[ i ] ['@id'] ] = 1 ; }

            var names = {};
            var dublicates = {};
            var refDay = new Date("2003-11-27");

            for ( i=0 ; i < plants.length; i++) {

                // LCP 1.1
                // not refinery

                if ( !plants[i].PlantDetails) continue; // some times a null plant was present at the end of the array

                // coordinates
                if ( plants[i].GeographicalCoordinate.Longitude > 180 || plants[i].GeographicalCoordinate.Longitude < -180)
                    res = false;

                if ( plants[i].GeographicalCoordinate.Latitude > 90 || plants[i].GeographicalCoordinate.Latitude < -90)
                    res = false;
                //
           //     if ( !( plants[i].PlantDetails.Refineries) && ( !( plants[i].PlantDetails.OtherSector  )  || ! (sectors[plants[i].PlantDetails.OtherSector ] )) ){
                    // ^^ checks that if not Refineries, that OtherSector is filled with one of the permitted values(fetched from DD)
            //        res = false;
             //   }

          

                // LCP 2.1 Unequivocal naming of plants
                if ( names[ plants[i].PlantName ] != undefined ) {
                    // dublicate found
                    dublicates[i] = 1;
                    dublicates[ names[ plants [i].PlantName ] ] = 1;
                    //names[$scope.instance.LCPQuestionnaire.ListOfPlants.Plant[i].PlantName ].push(i);
                }
                else
                    names[ plants [i].PlantName] = i;

                // LCP 3.2

                if ( plants[i].PlantDetails.MWth < 50 ){
                    // error
                    res = false;
                }
                else if ( plants[i].PlantDetails.MWth > 10000){
                    // warning
                    console.log(i);
                }

                // LCP 3.4
              
                // LCP 3.5
             
                // LCP 3.6
                // valid dates(if date submitted)
                if ( !$scope.validDateFormat(plants[i].PlantDetails.DateOfStartOfOperation)) {
                        res = false;
                    }
               
           

            }// end for
            if ( JSON.stringify(dublicates) !== "{}") {
                // duplicates holds the plants with same names
                console.log(dublicates);
                res = false;
            }
            if ( res === true )  $scope.conformTheInstance();
            return res;
        }

        $scope.conformTheInstance = function () {

            var plants = $scope.instance.LCPQuestionnaire.ListOfPlants.Plant;
            for (j in plants){

                plant = plants[j];

                delete plant.Delete;

                
                if ( plant.plantDetails!=null && plant.PlantDetails.Refineries !== true ){
                    plant.PlantDetails.Refineries = false;
                }
                if (plant.plantDetails!=null && plant.PlantDetails.Refineries === true ){
                    //plant.PlantDetails.OtherSector = null;
                }
               

            }

        }

        $scope.ifFormIsValidSaveInstance = function(form){
            if (!form.$invalid) {
                $scope.saveInstance();
            }

        }

        $scope.validationOnOff = function() {
            $scope.submitted = !$scope.submitted;
        };

        // save instance data.
        $scope.close = function(){
            if (baseUri == ''){baseUri = "/"};
            var windowLocation = (envelope && envelope.length > 0) ? envelope : baseUri;
            if ($scope.appForm.$dirty){
                if (confirm('You have made changes in the questionnaire! \n\n Do you want to leave without saving the data?')){
                    window.location = windowLocation;
                }
            }
            else {
                ////console.log("Failed to confirm");
                window.location = windowLocation;
            }
        };
        // convert XML to HTML in new window.
        $scope.printPreview = function(){
            dataRepository.saveInstance($scope.instance).success(function(){
				var win = window.open($scope.conversionLink, '_blank');
				win.focus;
			});
        };
        $scope.closeBulkEditListOfPlants = function(form){
            //if (form && form == 'ListOfPlants'){
                //remove empty rows
                for(var i = $scope.instance.LCPQuestionnaire.ListOfPlants.Plant.length - 1; i >= 0; i--){

                    var plant = $scope.instance.LCPQuestionnaire.ListOfPlants.Plant[i];

                    if ( plant.PlantLocation!=null && isEmpty(plant.PlantName)  && isEmpty(plant.EPRTRNationalId) &&
                           isEmpty(plant.PlantLocation.Address1) && isEmpty(plant.PlantLocation.Address2) &&
                           isEmpty(plant.PlantLocation.City) && isEmpty(plant.PlantLocation.Region) && isEmpty(plant.PlantLocation.PostalCode) &&
                           isEmpty(plant.GeographicalCoordinate.Longitude) && isEmpty(plant.GeographicalCoordinate.Latitude) && isEmpty(plant.FacilityName))

                    {
                        $scope.instance.LCPQuestionnaire.ListOfPlants.Plant.splice(i, 1);
                        continue;
                    }
                    // fill in plant IDs

                    if ( isEmpty(plant.PlantId) ) {
                        var promise = $scope.getNextPlantId () ;
                        var newPlant = plant;
                        // using $q promise API, to ask the server first for id collisions.
                        promise.then ( function ( plantid ) {
                            newPlant.PlantId = plantid ;
                        });

                    }
                }
            //}
            $scope.conformTheInstance();
            //
            $rootScope.bulkEditListOfPlants = false;
            $rootScope.$broadcast('updateFilter');
        };
        $scope.openBulkEditListOfPlants = function(form) {
            if (form && form === 'ListOfPlants') {
                $scope.addItem('LCPQuestionnaire.ListOfPlants.Plant');
            }
            if ($scope.instance.LCPQuestionnaire.ListOfPlants.Plant.length === 0) {

                $notification.info("Edit", "Add some plants from List of Plants first.");

            }
            else
            $rootScope.bulkEditListOfPlants = true;
        };

        $scope.windowSearch = window.location.search;

        $scope.getHelpInfo = function(divId) {
            //console.log(divId);
            var infoDiv = document.getElementById(divId);
            //console.log(infoDiv);
            return $sce.trustAsHtml(infoDiv.innerHTML);
        };

        $scope.changeInfoToggle = function(overInfoToggle) {
            $scope.showInfo = overInfoToggle;
        };

        $scope.phoneNumberPattern = /^[ 0-9\(\)\+\-]{7,25}$/;
        $scope.positiveIntegerPattern = /^\d+$/;
        $scope.positiveDecimalNumberPattern = /^\d*\.?\d*$/;
        $scope.binaryNumberPattern= /^(0(\.\d+)?|1(\.0+)?)$/;
        $scope.decimalNumberPattern =/^[+-]?(\d*\.?\d*)$/;
        $scope.dateFormat = /^(19|20)\d\d([-])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])$/;

        $scope.websiteAddressPattern = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
        $scope.percentagePattern = /^100$|^[0-9]{1,2}$|^[0-9]{1,2}\,[0-9]{1,3}$/;
        $scope.longitudeNumberPattern = /^[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$/;

        $scope.latitudeNumberPattern = /^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?)$/;

        $scope.isFixedQuestion = function(dataPath) {
            var tokens = dataPath.split('.');
            var lastToken = tokens.pop();
            ////console.log(lastToken);
            ////console.log(lastToken == 'FixedQuestion');
            return (lastToken == 'FixedQuestion');
        }

        $scope.clearSubFormData = function(dataPaths, identifierPath, changeValueTo) {

            var elementCount = 0;
            for (var i = 0; i < dataPaths.length; i++) {
                var formElementInstance = $scope.getInstanceByPath('instance.LCPQuestionnaire', dataPaths[i]);
                elementCount += countNonEmptyProperties(formElementInstance, $scope.isFixedQuestion(dataPaths[i]));
            }

            // Need to get parent path of yes/no question otherwise assigning new value
            // to property does not work.
            var tokens = identifierPath.split('.');

            // Parent property of actual yes/no question
            var subFormInstanceIdentifier = tokens.shift();

            // Parent instance object that contains actual yes/no question property
            var parentInstance = $scope.getInstanceByPath('instance.LCPQuestionnaire', subFormInstanceIdentifier);
            var objectName = tokens.shift();

            var needsToClearData = true;

            if (needsToClearData) {
                // When element count is more than 0 then we have to ask confirmation from user whether to delete the data.
                if (elementCount > 0 && !confirm('When changing answer all data under this sub-form will be lost?')){
                    // toke.shift() extracts yes/no question name.
                    // Assing yes value to question
                    parentInstance[objectName] =  changeValueTo;
                    return;
                } else {
                    for (var i = 0; i < dataPaths.length; i++) {
                        var formElementInstance = $scope.getInstanceByPath('instance.LCPQuestionnaire', dataPaths[i]);

                        // For fields where there is only one field and it can be null. Just ignore it.
                        if (!formElementInstance) {
                            continue;
                        }

                        // This if-else is to differentiate just a string field from array or object.
                        if (formElementInstance instanceof Array || !formElementInstance.length) {
                            clearObject(formElementInstance, $scope.isFixedQuestion(dataPaths[i]));
                        } else {
                            var tokens = dataPaths[i].split('.');
                            var objectIdentifier = tokens.shift();
                            var parentObject = $scope.getInstanceByPath('instance.LCPQuestionnaire', objectIdentifier);
                            parentObject[tokens.shift()] = null;
                        }
                    }
                }
            } else {
                // Do nothing.
            }
        };

        $rootScope.TypeOfCombustionPlantFurtherDetails = false;

        $scope.isTypeOfCombustionPlantOther = function (plant) {
            if (plant.PlantDetails.TypeOfCombustionPlant === 'Others') {
                $rootScope.TypeOfCombustionPlantFurtherDetails = true;
            } else {
                $rootScope.TypeOfCombustionPlantFurtherDetails = false;
            }
        };

        //TODO format error message to handle different limits better
        $scope.errorMessages = {
            "required_field" : "This is a required field",
            "unique_abbreviation" : "Please provide a unique abbreviation ",
            "valid_telephone" : "Please enter a valid telephone number (at least 7 digits) ",
            "valid_email" : "Please enter a valid email address ",
            "valid_url" : "Please enter a valid URL ",
            "yes_or_no" : "Please choose yes or no ",
            "number_greater_than_zero" : "Please provide a number greater than 0 ",
            "data_entry_must_be_unique" : "Data entry must be unique ID code ",
            "must_be_less_than" : "Please provide a number less than ",
            "must_be_greater_than" : "Please provide a number greater or equal to ",
            "must_be_percentage" : "Please provide a percentage between 0 and 100 ",
            "whole_number_greater_than_zero" : "Please provide a whole number greater than 0 ",
            "unique_identification_code" : "Please enter a unique identification code ",
            "valid_longitude" : "Please provide a number between -180 and 180",
            "valid_latitude" : "Please provide a number between -90 and 90",
            "positive_decimal" : "Please provide a positive decimal number  ",
            "positive_decimal01" : "Please provide a positive decimal number between 0 and 1",
            "positive_integer" : "Please provide a positive integer ",
            "article_format" : "Please use the edit menu to correct the article format"

        };


        $scope.getErrorMessage = function(errorCode) {
            return $scope.errorMessages[errorCode];
        };

        $scope.showError = function(modelController, errorCode) {
            return modelController.$error[errorCode] && modelController.$invalid
                    && !(errorCode === 'required' && modelController.$error['pattern'] && modelController.$error['pattern'] ==true);// && modelController.$dirty;
        };
        $scope.showErrorIfSubmitted = function(modelController, errorCode, submitted) {
            return submitted && $scope.showError(modelController, errorCode);
        };


        $scope.isGreaterThanZero = function(inputValue) {
            return $scope.submitted == false && ( Number(inputValue) > 0);
        };

        $scope.isPositiveNumber = function(inputValue) {
            var boolean = true ;

            if ( isEmpty (inputValue) ) return false;

            if(!isEmpty(inputValue)  ){
                boolean = $scope.positiveIntegerPattern.test(inputValue);
            }
            return boolean;
        };

        $scope.isPositiveDecimal = function(inputValue) {

            // returns false if empty, or if not decimal(by regex comparison)
            if ( isEmpty (inputValue) ) return false;

            return $scope.positiveDecimalNumberPattern.test(inputValue);

        };
        

        $scope.validDateFormat = function( inputDate){
            // allows empty values for simplicity sake
            if ( isEmpty(inputDate)) return true;
            return $scope.dateFormat.test( inputDate );

        }

        $scope.isDegree = function(inputValue, degrees, submitted) {

            return ($scope.submitted == true && !isEmpty(inputValue) && !(Number(degrees) >= Number(inputValue) && Number(inputValue) >= -Number(degrees)));
        };

        $scope.isRequired = function(inputValue) {
            return  $scope.submitted == true && isEmpty(inputValue);
        };

        $scope.isModalRequired = function(inputValue) {
            var boolean = false;

            if(isEmpty(inputValue)){
                boolean=  true;
            }
            if(inputValue == undefined){
                boolean=  true;

            }
            else{
                if(inputValue.length == 0){
                    boolean=  true;
                }
            }

           /* if(inputValue == null){
                boolean=  true;
            }*/
            return   boolean;


        };


        $scope.checkboxClearInputs = function(plant, checkboxPath, dependingInputs) {
            var tokens1 = checkboxPath.split('.');
            var objectIdentifier1 = tokens1.shift();
            var checkboxObject = $scope.getPlantByPath(plant, objectIdentifier1);
            var property1 = tokens1[tokens1.length-1];
            var checkboxValue = checkboxObject[property1];

            if(checkboxValue == false){
                var inputPathArray = [];
                var isNotEmpty= false;
                var paths = dependingInputs.split(':');

                //Adding checkbox depending inputs to array
                for (var i = 0; i < paths.length; i++) {
                    var tokens2 = paths[i].split('.');
                    var objectIdentifier2 = tokens2.shift();
                    var parentObject = $scope.getPlantByPath(plant, objectIdentifier2);
                    var property = tokens2[tokens2.length-1];
                    var object = parentObject[property];
                    if($scope.positiveDecimalNumberPattern.test(object)){
                        object = object.toString();
                    }
                    //Error handling:  String in numeric field
                    if(object == null){
                        object = "";
                        isNotEmpty = false;
                    }
                    if(object == undefined){
                        object = "";
                        isNotEmpty = true;
                    }
                    inputPathArray.push(object)
                }

                //Is inputs empty
                for (var j = 0; j < inputPathArray.length; j++) {
                    if(inputPathArray[j].length > 0){
                        isNotEmpty = true;
                    }
                }


                if(checkboxValue == false && isNotEmpty){
                    if(confirm("Do you wish to clear data from depending input(s)?")){
                        for (var k = 0; k < paths.length; k++) {
                            var tokens3 = paths[k].split('.');
                            var objectIdentifier3 = tokens3.shift();
                            var parentObject2 = $scope.getPlantByPath(plant, objectIdentifier3);
                            var property2 = tokens3[tokens3.length-1];
                            parentObject2[property2] = "";

                        }
                    }else{
                    //checkbox rollback
                        checkboxObject[property1] = true;
                    }
                    return;
                }
            }
            else{
                var inputPathArray = [];
                var isNotEmpty= false;
                var paths = dependingInputs.split(':');

                //Adding checkbox depending inputs to array
                for (var i = 0; i < paths.length; i++) {
                    var tokens2 = paths[i].split('.');
                    var objectIdentifier2 = tokens2.shift();
                    var parentObject = $scope.getPlantByPath(plant, objectIdentifier2);
                    var property = tokens2[tokens2.length-1];
                    var object = parentObject[property];
                    if($scope.positiveDecimalNumberPattern.test(object)){
                        object = object.toString();
                    }
                    //Error handling:  String in numeric field
                    if(object == undefined){
                        object = "";
                        isNotEmpty = true;
                    }
                    inputPathArray.push(object)
                }

                //Is inputs empty
                for (var j = 0; j < inputPathArray.length; j++) {
                    if(inputPathArray[j].length > 0){
                        isNotEmpty = true;
                    }
                }

                if (tokens1 == 'Refineries' && checkboxValue == true && isNotEmpty){

                    if(confirm("Do you wish to clear data from depending input(s)?")){
                        for (var k = 0; k < paths.length; k++) {
                            var tokens3 = paths[k].split('.');
                            var objectIdentifier3 = tokens3.shift();
                            var parentObject2 = $scope.getPlantByPath(plant, objectIdentifier3);
                            var property2 = tokens3[tokens3.length-1];
                            parentObject2[property2] = "";

                        }
                    }else{
                        //checkbox rollback
                        checkboxObject[property1] = true;
                    }
                    return;
                }
            }
        }    ;

        $scope.isDesulphurizationRateEmpty = function (desulphurisation) {
            if (desulphurisation == null || desulphurisation.Months==null || desulphurisation.Months.Month==null  || desulphurisation.Months.Month.length==1) {
                return true;
            }
            if(desulphurisation.Months.Month.isArray){
            desulphurisation.Months.Month.forEach(function (element) {
                if (element.DesulphurisationRate == null) {
                    return true;
                }
            }, this);
        }
            return false;
        };

        $scope.isSulphurContentEmpty = function (desulphurisation) {
            if (desulphurisation == null || desulphurisation.Months==null || desulphurisation.Months.Month==null  || desulphurisation.Months.Month.length==1) {
                return true;
            }

            if(desulphurisation.Months.Month.isArray){                
            desulphurisation.Months.Month.forEach(function (element) {
                if (element.SulphurContent == null) {
                    return true;
                }

            }, this);
        }
            return false;
        };
        $scope.isTechnicalJustificationEmpty = function (desulphurisation) {
            if (desulphurisation == null || desulphurisation.Months==null || desulphurisation.Months.Month==null  || desulphurisation.Months.Month.length==1) {
                return true;
            }
            if(desulphurisation.Months.Month.isArray){
                
            desulphurisation.Months.Month.forEach(function (element) {

                if (element.TechnicalJustification == null || element.TechnicalJustification == '') {
                    return true;
                }

            }, this);
        }
            return false;
        };
        
    });
    function isEmpty(value){
        // returns true on undefined, empty array, empty string
        if(value === 0){
            return false;
        }
        else{
            return (!value || value === undefined || value.length === 0 || value === "" );
        }
    }



    // get instance data and save instance data
    app.factory('dataRepository', function($rootScope, $http) {
        var codeLists = {};
        //var lcpVocabularySetBaseUri = 'http://test.tripledev.ee/datadict/vocabulary/lcp/';
        //var lcpVocabularySetBaseUri = DD_VOCABULARY_BASE_URI + 'habides/';
     
     
        var EPRTRandlLCPVocabularySetBaseUri = DD_VOCABULARY_BASE_URI + 'EPRTRandLCP/';
        var EPRTRandLCPvocabularies =['CombustionPlantCategoryValue', 'CountryCodeValue', 'EPRTRPollutantCodeValue', 'FuelInputValue',
         'LCPPollutantCodeValue', 'MediumCodeValue', 'MethodClassificationValue', 'MethodCodeValue', 'MonthValue', 
         'OtherGaseousFuelValue', 'OtherSolidFuelValue', 'ReasonValue', 'UnitCodeValue', 'WasteClassificationValue',
          'WasteTreatmentValue'];
        var EPRTRandLCPvocabularyIdentifiersInCode = ['CombustionPlantCategoryValue', 'CountryCodeValue', 'EPRTRPollutantCodeValue', 'FuelInputValue',
         'LCPPollutantCodeValue', 'MediumCodeValue', 'MethodClassificationValue', 'MethodCodeValue', 'MonthValue', 
         'OtherGaseousFuelValue', 'OtherSolidFuelValue', 'ReasonValue', 'UnitCodeValue', 'WasteClassificationValue',
          'WasteTreatmentValue'];
        
      
  var lcpVocabularySetBaseUri = DD_VOCABULARY_BASE_URI + 'lcp/';
        var lcpVocabularies = ['lcpcountries','plantstatus','sectors'];
        var lcpVocabularyIdentifiersInCode = ['countries', 'status', 'sectors'];

        var commonVocabularySetBaseUri = DD_VOCABULARY_BASE_URI + 'common/';

        //define undefined members, i dont know if this is really necessary!!!
        codeLists.LCPCodelists = {};
        codeLists.OldLCPCodelists={};
        codeLists.CombustionPlantCodeLists={};
        codeLists.DerogationValueCodeLists={};
        codeLists.OtherSolidFuelCodeLists={};
        codeLists.OtherGasesousFuelCodeLists={};
        codeLists.MonthValueCodeLists={};
        codeLists.MonthlyDesulphurisation={};

        var regionCodeLists = {};
        for (var i = 0; i < EPRTRandLCPvocabularies.length; i++){
            codeLists.LCPCodelists[EPRTRandLCPvocabularyIdentifiersInCode[i]] = {};
        }
        for (var i = 0; i < lcpVocabularies.length; i++){
            codeLists.OldLCPCodelists[lcpVocabularyIdentifiersInCode[i]] = {};
        }
        return {
            getInstance: function() {
                var url = null;
                if (fileId){
                    url = getWebQUrl("/download/converted_user_file");
                }
				else {
                    url = "lcp-instance-test.json";
				}
                return $http.get(url, {tracker : $rootScope.loadingTracker});
            },
            saveInstance: function (data) {
                var url = getWebQUrl("/saveXml");
                fixUndefined(data);
                return $http.post(url, data, {tracker : $rootScope.loadingTracker});
            },
            getCodeList: function() {
                return codeLists;
            },
            loadCodeList: function(language) {
                //finds file in project folder
                var defaultlanguage = 'en';
                var currentLanguage = !language? defaultlanguage : language;

                for (var i = 0; i < EPRTRandLCPvocabularies.length; i++) {
                    var url = EPRTRandlLCPVocabularySetBaseUri + EPRTRandLCPvocabularies[i] + '/json?lang=' + currentLanguage;

                    if ($rootScope.isIE9 || window.isIE9){
                        url = baseUri + '/restProxy?uri=' + encodeURIComponent(url);
                    }

                    $http.get(url, {tracker: $rootScope.loadingTracker})
                            .error(function(data, status, headers, config){
                                alert("Failed to read code lists. Data = " +  data + ", status = " + status);})
                            .success((function(i){return function (newCodeList) {
                        angular.copy(newCodeList, codeLists.LCPCodelists[EPRTRandLCPvocabularyIdentifiersInCode[i]]);
                        ////console.log("received " + vocabularyIdentifiersInCode[i]);
                    }})(i));
                } 
            }, 
            loadOldLCPCodeList: function(language) {
                //finds file in project folder
                var defaultlanguage = 'en';
                var currentLanguage = !language? defaultlanguage : language;

                for (var i = 0; i < lcpVocabularies.length; i++) {
                    var url = lcpVocabularySetBaseUri + lcpVocabularies[i] + '/json?lang=' + currentLanguage;

                    if ($rootScope.isIE9 || window.isIE9){
                        url = baseUri + '/restProxy?uri=' + encodeURIComponent(url);
                    }

                    $http.get(url, {tracker: $rootScope.loadingTracker})
                            .error(function(data, status, headers, config){
                                alert("Failed to read code lists. Data = " +  data + ", status = " + status);})
                            .success((function(i){return function (newCodeList) {
                                console.log("newCodeList "+newCodeList);
                        angular.copy(newCodeList, codeLists.OldLCPCodelists[lcpVocabularyIdentifiersInCode[i]]);
                        ////console.log("received " + vocabularyIdentifiersInCode[i]);
                    }})(i));
                } 
            }, 
             loadCombustionPlantCodeList: function(language){
                // we do not need the for each of the above loadCodeList method, since in the above , it has to make seperate calls
                // for each vocabulary, whereas we do not have to.
                var defaultlanguage = 'en';
                var currentLanguage = !language? defaultlanguage : language;
                var url = 'http://dd.eionet.europa.eu/vocabulary/EPRTRandLCP/CombustionPlantCategoryValue/json';
                $http.get(url, {tracker: $rootScope.loadingTracker})
                .error(function(data, status, headers, config){
                    alert("Failed to read code lists. Data = " +  data + ", status = " + status);})
                .success( function (newCodeList) {
            angular.copy(newCodeList, codeLists.CombustionPlantCodeLists);
            ////console.log("received " + vocabularyIdentifiersInCode[i]);
                  });
            },
            loadDerogationValueCodeList: function(language){
                // we do not need the for each of the above loadCodeList method, since in the above , it has to make seperate calls
                // for each vocabulary, whereas we do not have to.
                var defaultlanguage = 'en';
                var currentLanguage = !language? defaultlanguage : language;
                var url = 'http://dd.eionet.europa.eu/vocabulary/euregistryonindustrialsites/DerogationValue/json';
                $http.get(url, {tracker: $rootScope.loadingTracker})
                .error(function(data, status, headers, config){
                    alert("Failed to read code lists. Data = " +  data + ", status = " + status);})
                .success( function (newCodeList) {
            angular.copy(newCodeList, codeLists.DerogationValueCodeLists);
            ////console.log("received " + vocabularyIdentifiersInCode[i]);
                  });
            },
            loadOtherSolidFuelCodeList: function(language){
                // we do not need the for each of the above loadCodeList method, since in the above , it has to make seperate calls
                // for each vocabulary, whereas we do not have to.
                var defaultlanguage = 'en';
                var currentLanguage = !language? defaultlanguage : language;
                var url = 'http://dd.eionet.europa.eu/vocabulary/EPRTRandLCP/OtherSolidFuelValue/json';
                $http.get(url, {tracker: $rootScope.loadingTracker})
                .error(function(data, status, headers, config){
                    alert("Failed to read code lists. Data = " +  data + ", status = " + status);})
                .success( function (newCodeList) {
                    //Push "Other" value to the end of the Array
                    var otherElement ={};
                    newCodeList.concepts.forEach(function(element) {
                        if(element['@id']=='Other'){
                            var OtherElementIndex = newCodeList.concepts.indexOf(element);
                            newCodeList.concepts.splice(OtherElementIndex,1);
                             Object.assign(otherElement,element);
                        }
                    }, this);
                    newCodeList.concepts.push(otherElement);
            angular.copy(newCodeList, codeLists.OtherSolidFuelCodeLists);
                  });
            },
            loadOtherGasesousFuelCodeList: function(language){
                // we do not need the for each of the above loadCodeList method, since in the above , it has to make seperate calls
                // for each vocabulary, whereas we do not have to.
                var defaultlanguage = 'en';
                var currentLanguage = !language? defaultlanguage : language;
                var url = 'http://dd.eionet.europa.eu/vocabulary/EPRTRandLCP/OtherGaseousFuelValue/json';
                $http.get(url, {tracker: $rootScope.loadingTracker})
                .error(function(data, status, headers, config){
                    alert("Failed to read code lists. Data = " +  data + ", status = " + status);})
                .success( function (newCodeList) {
                        //Push "Other" value to the end of the Array
                        var otherElement ={};
                        newCodeList.concepts.forEach(function(element) {
                            if(element['@id']=='Other'){
                                var OtherElementIndex = newCodeList.concepts.indexOf(element);
                                newCodeList.concepts.splice(OtherElementIndex,1);
                                 Object.assign(otherElement,element);
                            }
                        }, this);
                        newCodeList.concepts.push(otherElement);
            angular.copy(newCodeList, codeLists.OtherGasesousFuelCodeLists);
            ////console.log("received " + vocabularyIdentifiersInCode[i]);
                  });
            },
            loadMonthValueCodeList: function(language){
                // we do not need the for each of the above loadCodeList method, since in the above , it has to make seperate calls
                // for each vocabulary, whereas we do not have to.
                var defaultlanguage = 'en';
                var currentLanguage = !language? defaultlanguage : language;
                var url = 'http://dd.eionet.europa.eu/vocabulary/EPRTRandLCP/MonthValue/json';
                $http.get(url, {tracker: $rootScope.loadingTracker})
                .error(function(data, status, headers, config){
                    alert("Failed to read code lists. Data = " +  data + ", status = " + status);})
                .success( function (newCodeList) {
            angular.copy(newCodeList, codeLists.MonthValueCodeLists);
            ////console.log("received " + vocabularyIdentifiersInCode[i]);
            angular.forEach(codeLists.MonthValueCodeLists.concepts, function(value, key){
                          codeLists.MonthlyDesulphurisation[key]={
                    "DesulphurisationRate": '',
                    "MonthValue":value.prefLabel[0]['@value'],
                    "SulphurContent": '',
                    "TechnicalJustification": ''
                    };
                });
            });
        },
       
            loadRegionsCodelist: function(country) {
                var url = DD_VOCABULARY_BASE_URI + "common/nuts/json?id=" + country;
                if ($rootScope.isIE9 || window.isIE9){
                    url = baseUri + '/restProxy?uri=' + encodeURIComponent(url);
                }
                //console.log(url);
                $http.get(url, {tracker: $rootScope.loadingTracker})
                        .error(function(data, status, headers, config){alert("Failed to read regions code lists.");})
                        .success(function (newCodeList) {
                            angular.copy(newCodeList, regionCodeLists);
                            if(regionCodeLists.concepts.length == 0){
                                var url = DD_VOCABULARY_BASE_URI + "lcp/lcpcountries/json?id=" + country;
                                if ($rootScope.isIE9 || window.isIE9){
                                    url = baseUri + '/restProxy?uri=' + encodeURIComponent(url);
                                }
                                $http.get(url, {tracker: $rootScope.loadingTracker})
                                    .error(function(data, status, headers, config){alert("Failed to read regions code lists.");})
                                    .success(function (plantDetailsOtherSectorFieldsViewnewCodeList) {
                                    angular.copy(newCodeList, regionCodeLists);
                                });
                            }
                        });
                return regionCodeLists;
            },
            getEmptyInstance: function() {
                var url = 'lcp-instance-empty.xml?format=json';
                return $http.get(url, {tracker : $rootScope.loadingTracker});
            },
            loadInstanceInfo: function (data) {
                var url = getWebQUrl("/file/info");
                return $http.get(url, data, {tracker : $rootScope.loadingTracker});
            }
        }
    });

    // new
    app.filter('offset', function() {
        return function(input, start) {
            if (!input || !(input instanceof Array)) {
                return;
            }
            start = parseInt(start, 10);
            return input.slice(start);
        };
    });

  /**  app.filter('formatDerogation', function () {
        return function (x) {
            var result = "";
            if (x != null &&x.isArray) {
                x.forEach(function (entry) {
                    result += entry;
                    result += '\n';
                });
            }
            return result;
        };
    });
     **/
    app.controller('ModalCtrl', function ($scope, $rootScope, $modal, $http) {
        //saves Main form validation stage
        $scope.mainFormSubmitted = $scope.submitted;
        $scope.plant;
        $scope.originalPlant;

        $scope.submitted = false;
        $scope.editBoolean = false;
        /*$scope.edit = function (plant){
            $scope.editBoolean = true;
            $scope.plant= plant;
            $scope.open('lg');
        }*/
        $scope.add = function (){
            $scope.submitted = false;
            $scope.editBoolean = false;
            $scope.plant = null;
            $scope.open('lg');
        }
        $rootScope.$watch('selectedPlant', function(newValue, oldValue) {
            if (newValue && newValue != null ){
                $scope.submitted = true;
                $scope.editBoolean = true;
                $scope.originalPlant =  newValue;
                $scope.plant = angular.copy(newValue);
                $rootScope.selectedPlant = null;
                $scope.open('lg', $rootScope.modalPageCaseId);
            }
        });
        $scope.openAdd = function(){
            
            $rootScope.modalPageCaseId = "ListOfPlants";
            $rootScope.selectedPlant = null;
            $scope.open('lg','ListOfPlants');
        }
        $scope.loadDataFromEPRTR = function(plant) {
            console.log('loadDataFromEPRTR function invoked');
            var countryCode = $scope.instance.LCPQuestionnaire.BasicData.MemberState;
            if (countryCode && countryCode.length == 2 && plant ) {

                var eprtrCountryCode = countryCode === "GB" ? "UK" : countryCode === "GR" ? "EL" : countryCode;

                var url = "http://semantic.eea.europa.eu/sparql?format=application/json&query=";
                var sparql = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> " +
                        " PREFIX cr: <http://cr.eionet.europa.eu/ontologies/contreg.rdf#> " +
                        " PREFIX prtr: <http://prtr.ec.europa.eu/rdf/schema.rdf#> " +
                        " PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> " +
                        " SELECT ?countryCode ?NationalID ?facilityID ?facilityName ?streetName ?buildingNumber ?postalCode ?city ?lat ?long ?reportingYear" +
                        " WHERE { ?facility a prtr:Facility ; " +
                        " prtr:facilityID ?facilityID ; " +
                        " prtr:facilityName ?facilityName ; " +
                        " prtr:streetName ?streetName; " +
                        "prtr:buildingNumber  ?buildingNumber ; "+
                        " prtr:postalCode  ?postalCode ; " +
                        " prtr:city ?city ; " +
                        " geo:lat ?lat ; " +
                        " geo:long ?long ; " +
                        " prtr:latestReport ?latestreport ;" +
                        " prtr:inCountry ?inCountry . " +
                        " ?inCountry prtr:code ?countryCode . " +
                        " ?latestreport prtr:nationalID ?NationalID ;" +
                        " prtr:reportingYear ?reportingYear." +
                        " FILTER (?countryCode = '" + eprtrCountryCode + "' and UCASE(?NationalID) = UCASE('" + plant.EPRTRNationalId + "' ) ) } ORDER BY DESC(?reportingYear) LIMIT 1";
                url = baseUri + '/restProxy?uri=' + encodeURIComponent(url + encodeURIComponent(sparql));
                console.log('url for sparql eprtr data is:'+url);
                $http.get(url, {tracker : $rootScope.loadingTracker})
                        .error(function(){alert("Failed to read data from E-PRTR.");})
                        .success(function(eprtrData) {
                            if (eprtrData.results.bindings.length > 0) {
                            var facility = eprtrData.results.bindings[0];
                            if (confirm("The system found the following facility: " + facility.facilityName.value + ", " + facility.streetName.value + ", " + facility.postalCode.value +
                                    ", "  + facility.city.value + ". \n\n Do you want to use the data on plant level?" )) {
                                    if (!plant.PlantLocation) plant.PlantLocation = {};
                                    if (!plant.GeographicalCoordinate) plant.GeographicalCoordinate = {};
                                    plant.PlantLocation.StreetName = facility.streetName.value;
                                    if (!isEmpty(facility.buildingNumber.value)) {
                                        plant.PlantLocation.BuildingNumber += " " + facility.buildingNumber.value;
                                    }
                                    plant.PlantLocation.City =facility.city.value;
                                    plant.PlantLocation.PostalCode = facility.postalCode.value;
                                    plant.PlantLocation.BuildingNumber = facility.buildingNumber.value;
                                    plant.GeographicalCoordinate.Longitude = facility.long.value;
                                    plant.GeographicalCoordinate.Latitude = facility.lat.value;
                                    plant.FacilityName = facility.facilityName.value;
                               }
                            }
                            else {
                                alert("The system could not find any facility with NationalID=" + plant.EPRTRNationalId);
                            }
                        });
            }
            else {
                alert("Member state is not selected on Basic Data form!");
            }
        };
        //edit(
        $scope.open = function (size,modalPageId) {
            //console.log(modalPageId);
            //console.log($rootScope.modalPageCaseId== undefined);
            //console.log($rootScope.modalPageCaseId=="ListOfPlants");
            //console.log($rootScope.modalPageCaseId=="PlantDetails");
            var modalInstance;
            //For adding new plant
            if(modalPageId == undefined){
 //               if ( $scope.instance.LCPQuestionnaire.BasicData.MemberState!=null )
//{               
                modalInstance = $modal.open({

                    templateUrl: 'ListOfPlantModalContent.html',
                    controller: 'ListOfPlantsModalInstanceCtrl',
                    size: size,
                    scope: $scope,
                    windowClass: 'app-modal-window',
                    resolve: {
                        plant: function () {
                            return  $scope.plant;
                        }
                    }

                });
            //   }else{
             //      alert("Please fill in the Member State from Basic Info first.");
             //      return;
             //  }
               
            }
            //For editing plant
            if(modalPageId == "ListOfPlants"){
                modalInstance = $modal.open({

                    templateUrl: 'ListOfPlantModalContent.html',
                    controller: 'ListOfPlantsModalInstanceCtrl',
                    size: size,
                    scope: $scope,
                    windowClass: 'app-modal-window',
                    resolve: {
                        plant: function () {
                            return  $scope.plant;
                        }
                    }

                });
            }
            if(modalPageId == "PlantDetails"){
                 modalInstance = $modal.open({

                    templateUrl: 'PlantDetailsModalContent.html',
                    controller: 'PlantDetailsModalInstanceCtrl',
                    size: size,
                    scope: $scope,
                    windowClass: 'app-modal-window',
                    resolve: {
                        plant: function () {
                            return  $scope.plant;
                        }
                    }

                });
            }
            if(modalPageId=="TotalEmissionsToAir"){
                modalInstance = $modal.open({

                    templateUrl: 'TotalEmissionsToAirModalContent.html',
                    controller: 'TotalEmissionsToAirModalInstanceCtrl',
                    size: size,
                    scope: $scope,
                    windowClass: 'app-modal-window',
                    resolve: {
                        plant: function () {
                            return  $scope.plant;
                        }
                    }

                });
            }
            if(modalPageId=="EnergyInput"){
                modalInstance = $modal.open({

                    templateUrl: 'EnergyInputModalContent.html',
                    controller: 'EnergyInputModalInstanceCtrl',
                    size: size,
                    scope: $scope,
                    windowClass: 'app-modal-window',
                    resolve: {
                        plant: function () {
                            return  $scope.plant;
                        }
                    }

                });
            }
            if(modalPageId=="Desulphurisation"){
                modalInstance = $modal.open({

                    templateUrl: 'DesulphurisationModalContent.html',
                    controller: 'DesulphurisationModalInstanceCtrl',
                    size: size,
                    scope: $scope,
                    windowClass: 'app-modal-window',
                    resolve: {
                        plant: function () {
                            return  $scope.plant;
                        }
                    }

                });
            }
            if(modalPageId=="UsefulHeat"){
                modalInstance = $modal.open({

                    templateUrl: 'UsefulHeatModalContent.html',
                    controller: 'UsefulHeatModalInstanceCtrl',
                    size: size,
                    scope: $scope,
                    windowClass: 'app-modal-window',
                    resolve: {
                        plant: function () {
                            return  $scope.plant;
                        }
                    }

                });
            }

            modalInstance.result.then(function (selectedItem) {
                $scope.selected = selectedItem;
            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        };
    });

    app.controller('ListOfPlantsModalInstanceCtrl', function ($rootScope, $scope, $modalInstance, plant,dataRepository) {
        var edit = false;

        if(plant != undefined){
            edit = true;
        }

        if (JSON.stringify( $scope.regionsCodelist ) === "{}")  {

            if ( $scope.instance.LCPQuestionnaire.BasicData.MemberState )
                $scope.regionsCodelist = dataRepository.loadRegionsCodelist($scope.instance.LCPQuestionnaire.BasicData.MemberState);
            else {
                alert("Please fill in the Member State from Basic Info first.");
                $scope.submitted = $scope.mainFormSubmitted;
             //   $modalInstance.dismiss('cancel');
                $modalInstance.close();
            }
        }

        $scope.ok = function (plant) {

            $scope.submitted = true;
            if(plant != undefined){
                if(plant.PlantName != null && plant.GeographicalCoordinate.Longitude != null &&
                        (180 >= plant.GeographicalCoordinate.Longitude && plant.GeographicalCoordinate.Longitude >= -180)  &&
                        plant.GeographicalCoordinate.Latitude != null && (90 >= plant.GeographicalCoordinate.Latitude && plant.GeographicalCoordinate.Latitude >= -90)){
                    if(!edit){

                        if ( plant.PlantLocation == null ) plant.PlantLocation = {} ;

                        var lastPlant = $scope.addItem('LCPQuestionnaire.ListOfPlants.Plant');
                        var promise = $scope.getNextPlantId () ;
                        // using $q promise API, to ask the server first for id collisions.
                        promise.then ( function ( plantid ) {

                            lastPlant.PlantId = plantid ;
                            lastPlant.PlantName =  plant.PlantName;
                            lastPlant.EPRTRNationalId =  plant.EPRTRNationalId;
                            lastPlant.PlantLocation.StreetName =  plant.PlantLocation.StreetName;
                         //   lastPlant.PlantLocation.Address2 =  plant.PlantLocation.Address2;
                            lastPlant.PlantLocation.City =  plant.PlantLocation.City;
                            lastPlant.PlantLocation.Region =  plant.PlantLocation.Region;
                            lastPlant.PlantLocation.PostalCode =  plant.PlantLocation.PostalCode;
                            lastPlant.PlantLocation.BuildingNumber =  plant.PlantLocation.BuildingNumber;
                            lastPlant.PlantLocation.CountryCode =  $scope.instance.LCPQuestionnaire.BasicData.MemberState;
                            lastPlant.GeographicalCoordinate.Longitude =  plant.GeographicalCoordinate.Longitude;
                            lastPlant.GeographicalCoordinate.Latitude =  plant.GeographicalCoordinate.Latitude;
                            lastPlant.FacilityName =  plant.FacilityName;
                            lastPlant.Comments =  plant.Comments;

                            $rootScope.$broadcast('updateFilter');

                            //load Main form validation stage
                            $scope.submitted = $scope.mainFormSubmitted;
                            $scope.saveInstance();
                             $modalInstance.close(plant);

                        })

                    }
                    else{
                        var lastPlant = $scope.originalPlant;
                        lastPlant.PlantName =  plant.PlantName;
                        lastPlant.EPRTRNationalId =  plant.EPRTRNationalId;
                        lastPlant.PlantLocation.StreetName =  plant.PlantLocation.StreetName;
                        //lastPlant.PlantLocation.Address2 =  plant.PlantLocation.Address2;
                        lastPlant.PlantLocation.City =  plant.PlantLocation.City;
                        lastPlant.PlantLocation.Region =  plant.PlantLocation.Region;
                        lastPlant.PlantLocation.BuildingNumber =  plant.PlantLocation.BuildingNumber;
                        lastPlant.PlantLocation.PostalCode =  plant.PlantLocation.PostalCode;
                        lastPlant.PlantLocation.CountryCode = $scope.instance.LCPQuestionnaire.BasicData.MemberState;
                        lastPlant.GeographicalCoordinate.Longitude =  plant.GeographicalCoordinate.Longitude;
                        lastPlant.GeographicalCoordinate.Latitude =  plant.GeographicalCoordinate.Latitude;
                        lastPlant.FacilityName =  plant.FacilityName;
                        lastPlant.Comments =  plant.Comments;

                        $rootScope.$broadcast('updateFilter');

                        //load Main form validation stage
                        $scope.submitted = $scope.mainFormSubmitted;
                            $scope.saveInstance();
                                             $modalInstance.close(plant);


                     }

                } else{
                     $scope.submitted = true;
                     alert("Please fill in all mandatory fields!");
                 }
            } else{
                 $scope.submitted = true;
                 alert("Please fill in all mandatory fields!");
             }

        };
        $scope.saveAndAdd =  function(plant){
            $scope.ok(plant);
            saveInstance();
        }
        $scope.cancel = function () {
            //load Main form validation stage
            $scope.submitted = $scope.mainFormSubmitted;
            $modalInstance.dismiss('cancel');
        };
    });
    app.controller('PlantDetailsModalInstanceCtrl', function ($rootScope, $filter, $scope, $modalInstance, plant) {
        $scope.ok = function (plant) {
            if (!$scope.modalPlantDetails.$invalid) {
                var lastPlant = $scope.originalPlant;
                lastPlant.PlantDetails.MWth =  plant.PlantDetails.MWth;
                lastPlant.PlantDetails.DateOfStartOfOperation =  plant.PlantDetails.DateOfStartOfOperation;
                lastPlant.PlantDetails.Refineries =  $filter('lowercase')(plant.PlantDetails.Refineries);
                lastPlant.PlantDetails.OtherSector =  plant.PlantDetails.OtherSector;
                lastPlant.PlantDetails.OperatingHours =  plant.PlantDetails.OperatingHours;                
                lastPlant.PlantDetails.Comments =  plant.PlantDetails.Comments;
                
                lastPlant.PlantDetails.TypeOfCombustionPlant = plant.PlantDetails.TypeOfCombustionPlant;
                lastPlant.PlantDetails.TypeOfCombustionPlantFurtherDetails = plant.PlantDetails.TypeOfCombustionPlantFurtherDetails;
                lastPlant.PlantDetails.Derogation = plant.PlantDetails.Derogation;
    

                $rootScope.$broadcast('updateFilter');

                //load Main form validation stage
                $scope.submitted = $scope.mainFormSubmitted;
                $scope.modalPlantDetails.$setPristine(true);
                $modalInstance.close(plant);
            }
            else{
                $scope.submitted = true;
                alert("Please fill in all mandatory fields! ");
            }


        }

        $scope.cancel = function () {
            //load Main form validation stage
            $scope.submitted = $scope.mainFormSubmitted;
            $modalInstance.dismiss('cancel');
        };
    });

    app.controller('TotalEmissionsToAirModalInstanceCtrl', function ($rootScope, $scope, $modalInstance, plant) {

        $scope.ok = function (plant) {
            if (!$scope.modalTotalEmissionsToAir.$invalid) {
                var lastPlant = $scope.originalPlant;

                lastPlant.EnergyInputAndTotalEmissionsToAir.TotalEmissionsToAir.SO2 =  plant.EnergyInputAndTotalEmissionsToAir.TotalEmissionsToAir.SO2;
                lastPlant.EnergyInputAndTotalEmissionsToAir.TotalEmissionsToAir.NOx =  plant.EnergyInputAndTotalEmissionsToAir.TotalEmissionsToAir.NOx;
                lastPlant.EnergyInputAndTotalEmissionsToAir.TotalEmissionsToAir.TSP =  plant.EnergyInputAndTotalEmissionsToAir.TotalEmissionsToAir.TSP;

                $rootScope.$broadcast('updateFilter');

                //load Main form validation stage
                $scope.submitted = $scope.mainFormSubmitted;
                $scope.modalTotalEmissionsToAir.$setPristine(true);
                $modalInstance.close(plant);
            }
            else{
                $scope.submitted = true;
                alert("Please fill in all mandatory fields! ");
            }


        }

        $scope.cancel = function () {
            //load Main form validation stage
            $scope.submitted = $scope.mainFormSubmitted;
            $modalInstance.dismiss('cancel');
        };
    });
app.controller('EnergyInputModalInstanceCtrl', function ($rootScope, $scope, $modalInstance, plant) {

        $scope.ok = function (plant) {
            if (!$scope.modalEnergyInput.$invalid) {
                var lastPlant = $scope.originalPlant;

                lastPlant.EnergyInputAndTotalEmissionsToAir.EnergyInput.Biomass =  plant.EnergyInputAndTotalEmissionsToAir.EnergyInput.Biomass;
                lastPlant.EnergyInputAndTotalEmissionsToAir.EnergyInput.Biomass =  plant.EnergyInputAndTotalEmissionsToAir.EnergyInput.Biomass;  
                lastPlant.EnergyInputAndTotalEmissionsToAir.EnergyInput.Coal =  plant.EnergyInputAndTotalEmissionsToAir.EnergyInput.Coal;      
                lastPlant.EnergyInputAndTotalEmissionsToAir.EnergyInput.Lignite =  plant.EnergyInputAndTotalEmissionsToAir.EnergyInput.Lignite;      
                lastPlant.EnergyInputAndTotalEmissionsToAir.EnergyInput.Peat =  plant.EnergyInputAndTotalEmissionsToAir.EnergyInput.Peat;      
                lastPlant.EnergyInputAndTotalEmissionsToAir.EnergyInput.OtherSolidFuels.Category =  plant.EnergyInputAndTotalEmissionsToAir.EnergyInput.OtherSolidFuels.Category;
                lastPlant.EnergyInputAndTotalEmissionsToAir.EnergyInput.OtherSolidFuels.Value =  plant.EnergyInputAndTotalEmissionsToAir.EnergyInput.OtherSolidFuels.Value;
                lastPlant.EnergyInputAndTotalEmissionsToAir.EnergyInput.LiquidFuels =  plant.EnergyInputAndTotalEmissionsToAir.EnergyInput.LiquidFuels;
                lastPlant.EnergyInputAndTotalEmissionsToAir.EnergyInput.NaturalGas =  plant.EnergyInputAndTotalEmissionsToAir.EnergyInput.NaturalGas;
                lastPlant.EnergyInputAndTotalEmissionsToAir.EnergyInput.OtherGases.Category =  plant.EnergyInputAndTotalEmissionsToAir.EnergyInput.OtherGases.Category;
                lastPlant.EnergyInputAndTotalEmissionsToAir.EnergyInput.OtherGases.Value =  plant.EnergyInputAndTotalEmissionsToAir.EnergyInput.OtherGases.Value;

                $rootScope.$broadcast('updateFilter');

                //load Main form validation stage
                $scope.submitted = $scope.mainFormSubmitted;
                $scope.modalEnergyInput.$setPristine(true);
                $modalInstance.close(plant);
            }
            else{
                $scope.submitted = true;
                alert("Please fill in all mandatory fields! ");
            }


        }

        $scope.cancel = function () {
            //load Main form validation stage
            $scope.submitted = $scope.mainFormSubmitted;
            $modalInstance.dismiss('cancel');
        };
    });

    
            app.controller('DesulphurisationModalInstanceCtrl', function ($rootScope, $scope, $modalInstance, plant) {

                //We check if Month is an array and if not initialize it as an array in order to then fill it below.
                if(plant.Desulphurisation.Months==null || plant.Desulphurisation.Months.Month==null  || plant.Desulphurisation.Months.Month.constructor === Object || plant.Desulphurisation.Months.Month.length==1) {
                    plant.Desulphurisation.Months.Month=[];
                //If Months Empty , initialize them before the modal
                angular.forEach($scope.codeList.MonthlyDesulphurisation, function (value, key) {
                    if (plant.Desulphurisation.Months.Month[key]==null){
                         plant.Desulphurisation.Months.Month.push({
                                "MonthValue": value.MonthValue,
                                "DesulphurisationRate": null,
                                "SulphurContent": null,
                                "TechnicalJustification": null
                            });
                    }

                })
                }
               

                $scope.ok = function (plant) {
                    if (!$scope.modalDesulphurisation.$invalid) {
                        var lastPlant = $scope.originalPlant;
                        angular.forEach($scope.codeList.MonthlyDesulphurisation, function (value, key) {
                     /**       plant.Desulphurisation.Months.Month.push({
                                "MonthValue": value.MonthValue,
                                "DesulphurisationRate": value.DesulphurisationRate,
                                "SulphurContent": value.SulphurContent,
                                "TechnicalJustification": value.TechnicalJustification
                            });
                        **/
                        })

                        lastPlant.Desulphurisation = plant.Desulphurisation;
                        $rootScope.$broadcast('updateFilter');
                        //load Main form validation stage
                        $scope.submitted = $scope.mainFormSubmitted;
                        $scope.modalDesulphurisation.$setPristine(true);
                        $modalInstance.close(plant);

                    }
                    else {
                        $scope.submitted = true;
                        alert("Please fill in all mandatory fields! ");
                    }


                }

                $scope.cancel = function () {
                    //load Main form validation stage
                    $scope.submitted = $scope.mainFormSubmitted;
                    $modalInstance.dismiss('cancel');
                };
            });

            app.controller('UsefulHeatModalInstanceCtrl', function ($rootScope, $scope, $modalInstance, plant) {
                
                        $scope.ok = function (plant) {
                            if (!$scope.modalUsefulHeat.$invalid) {
                                var lastPlant = $scope.originalPlant;
                
                                lastPlant.UsefulHeat.UsefulHeatProportion =  plant.UsefulHeat.UsefulHeatProportion;
                              
                                $rootScope.$broadcast('updateFilter');
                
                                //load Main form validation stage
                                $scope.submitted = $scope.mainFormSubmitted;
                                $scope.modalUsefulHeat.$setPristine(true);
                                $modalInstance.close(plant);
                            }
                            else{
                                $scope.submitted = true;
                                alert("Please fill in all mandatory fields! ");
                            }
                
                
                        }
                
                        $scope.cancel = function () {
                            //load Main form validation stage
                            $scope.submitted = $scope.mainFormSubmitted;
                            $modalInstance.dismiss('cancel');
                        };
                    });

  
    app.filter('true_false', function() {
        return function(text, length, end) {
            if (text && (text === true || text === 'TRUE')) {
                return 'Yes';
            }
            return 'No';
        }
    });

    app.controller("PaginationCtrl", function($scope, $filter, $rootScope, $modal) {



        var orderBy = $filter('orderBy');
        /*
            if (!angular.isArray($scope.instance.LCPQuestionnaire.ListOfPlants)){
                $scope.instance.LCPQuestionnaire.ListOfPlants = [$scope.instance.LCPQuestionnaire.ListOfPlants];
            }
        */


        $scope.itemsPerPage = 50;
        $scope.currentPage = 0;
        $scope.maxPages = 15;
        $scope.searchText = "";
        $scope.filteredItems = [];
        $scope.predicateAttribute = 'PlantId';
        $scope.showMessage = false;
        $scope.predicate = function(item) {
            return item[$scope.predicateAttribute];
        }
        $scope.reverse = false;



        $scope.order = function(attribute, order) {
            $scope.predicateAttribute = attribute;
            $scope.reverse = order;
            $scope.filteredItems = orderBy($scope.filteredItems, $scope.predicate, $scope.reverse);
        };

        $scope.$on('instanceReady', function(event, data) {

            $scope.filteredItems = $scope.getFilteredItems();
        });

        $scope.$on('updateFilter', function(event, data) {

            $scope.filteredItems = $scope.getFilteredItems();
            $scope.order($scope.predicateAttribute, $scope.reverse);
        });

        $scope.range = function() {
            if (!$scope.instance) {
                return;
            }

            var rangeSize = ($scope.pageCount() >= $scope.MaxPages)? $scope.MaxPages : $scope.pageCount()+1;
            var ret = [];
            var start;

            start = $scope.currentPage;
            if ( start > $scope.pageCount()-rangeSize ) {
                start = $scope.pageCount()-rangeSize+1;
            }

            for (var i=start; i<start+rangeSize; i++) {
                ret.push(i);
            }
            return ret;
        };

        $scope.prevPage = function() {
            if ($scope.currentPage > 0) {
                $scope.currentPage--;
            }
        };

        $scope.prevPageDisabled = function() {
            return $scope.currentPage === 0 ? "disabled" : "";
        };

        $scope.getFilteredItems = function() {
            if (!$scope.instance) {
                return;
            }
            return $filter('filter')($scope.instance.LCPQuestionnaire.ListOfPlants.Plant, $scope.searchText);
        }

        $scope.refreshItems = function() {
            ////console.log("Filter changed. Getting new items...");
            $scope.filteredItems = $scope.getFilteredItems();
        };

        $scope.$watch('searchText', function(newValue, oldValue) {
            ////console.log("Filter changed. Getting new items...");
            $scope.filteredItems = $scope.getFilteredItems();
            if(newValue != oldValue){
                $scope.setPage(0);
            }
        });

        $scope.pageCount = function() {
            if (!$scope.instance || !$scope.filteredItems) {
                return;
            }

            var items = $scope.filteredItems;
            var count = Math.ceil(items.length/$scope.itemsPerPage)-1;
            return count;
        };

        $scope.nextPage = function() {
            if ($scope.currentPage < $scope.pageCount()) {
                $scope.currentPage++;
            }
        };

        $scope.nextPageDisabled = function() {
            return $scope.currentPage === $scope.pageCount() ? "disabled" : "";
        };

        $scope.setPage = function(n) {
            $scope.currentPage = n;
        };
        $scope.deleteSelected = function(selectedItems){
            var i;
            for (i = 0; i < selectedItems.length; ++i) {
                if(selectedItems[i].Delete != undefined){
                    if(selectedItems[i].Delete == true){
                        if ((countNonEmptyProperties(selectedItems[i]) > 0) && $scope.showMessage == false) {
                            if (!confirm('Are you sure you want to delete the selected rows?')){
                                $scope.showMessage = false;
                                return;
                                                                                        }
                            else{
                                $scope.showMessage = true;
                                }
                        }
                        $scope.remove($scope.instance.LCPQuestionnaire.ListOfPlants.Plant, selectedItems[i], false);
                    }
                }

            }

            $scope.showMessage = false;
            $rootScope.$broadcast('updateFilter');
        }
        $scope.edit = function (plant, modalPageId) {
            //$rootScope.$broadcast('editPlant', plant);
            $rootScope.selectedPlant = plant;
            $rootScope.modalPageCaseId = modalPageId;
/*
            var modalInstance = $modal.open({
                templateUrl: 'ListOfPlantModalContent.html',
                controller: 'ListOfPlantsModalInstanceCtrl',
                size: 'lg',
                scope: $scope,
                windowClass: 'app-modal-window',
                resolve: {
                    plant: function () {
                        return  plant;
                    }
                }
            });
            */
        };

        //orderObjectBy pagination
        //$scope.plantObjects = $scope.instance.LCPQuestionnaire.ListOfPlants.Plant;
        $scope.criteria = 'PlantName';
        $scope.direction = false;
        $scope.setCriteria = function(criteria) {
            if ($scope.criteria === criteria) {
                $scope.direction = !$scope.direction;
            } else {
                $scope.criteria = criteria;
                $scope.direction  = false;
            }
        }
    });


    // new end

    function getWebQUrl(path){
        var url = baseUri + path;
        url += "?fileId=" + fileId;
        if (sessionId && sessionId != null) {
            url += "&sessionid=" + sessionId;
        }
        return url;
    }
    // helper function for getting query string parameter values. AngularJS solution $location.search() doesn't work in IE8.
    function getParameterByName(name) {
        var searchArr = window.location.search.split('?');
        var search = '?' + searchArr[searchArr.length - 1];
        var match = new RegExp('[?&]' + name + '=([^&]*)').exec(search);
        return match && decodeURIComponent(match[1].replace(/\+/g, ' '));
    };

    function getHandsontableColHeaders(form) {
        if (form == 'ListOfPlants'){
            return ["Plant Name", "Plant Id", "E-PRTR national ID", "Street Name ", "City", "Region", "Postal code","Country Code","Building Number", "Longitude", "Latitude", "Facility name", "Comments"]
        }
        else if (form == 'PlantDetails'){
            return ["Plant name", "Plant ID", "MWth","Type of Combustion Plant", "Date of start of operation", "Refineries",  "Other Sector", "Operating Hours", "Derogation", "Comments"]
        }
        else if (form == 'EnergyInput'){
            return ["Plant name", "Plant ID", "Biomass (TJ)","Coal","Lignite","Peat", "Other solid fuels (TJ) Category","Other solid fuels (TJ) Value" , "Liquid fuels (TJ)", "Natural gas (TJ)", "Other gases (TJ) Category","Other gases (TJ) Value", "SO2 (t)", "NOx (t)", "Dust (t)"]
        }
        else if (form == 'TotalEmissionsToAir'){
            return ["Plant name", "Plant ID", "SO2 (t)", "NOx (t)", "TSP (t)"]
        }
        else if (form == 'Desulphurisation'){
            return ["Desulphurisation Rate", "Sulphur Content", "Technical Justification", "Month"]
        }
        else if (form == 'UsefulHeat'){
            return ["Plant name", "Plant ID","UsefulHeat Proportion"]
        }
        else {
            //default is the first table
            return ["Plant Name", "Plant Id", "E-PRTR national ID", "Address 1", "Address 2", "City", "Region", "Postal code", "Longitude", "Latitude", "Facility name"]
        }
    }
	app.directive('uiHandsontable', function () {
	return {
		restrict: 'A',
		scope: {
			data: '=',
            status: '=',
            formname: '='
		},
		replace: true,
		link: function (scope, elem, attrs) {
            scope.$watch('status', function(newValue, oldValue) {
                // console.log('watch:' + newValue + '; form=' + scope.formname);
                if(newValue == true && angular.isArray(scope.data)){
                    elem.handsontable('loadData', scope.data);
                }
            });
            //console.log(scope.formname);
            var data = scope.data;
            var formname = scope.formname;
            var container = elem;

            elem.handsontable({
			    data: data,
                    contextMenu:false,// ['row_above', 'row_below', 'remove_row'],
				rowHeaders: false,
                columnSorting: false,
                stretchH: 'all',
                fixedColumnsLeft: 2,
                minSpareRows: 0, // formname === 'ListOfPlants' ? 1 : 0,
            //    minRows:0,
                minSpareCols: 0,
                //maxRows: formname === 'ListOfPlants' ? 200 : data.length,
                //maxCols: data.numberOfColumns,
                colHeaders: getHandsontableColHeaders(formname),
      /**          modifyRow: function(row){
                    var ht = container.handsontable('getInstance');
                 //   var rowsNeeded = data.length - ht.countEmptyRows();
               //     console.log('rowIndex:'+row);
               if(row!=0){
                    var data = this.getData(row);
                    console.log("rowData"+data);
               }
                  //  for (var index = 0; index < rowsNeeded; index++) {
                  //  elem.handsontable('alter', 'insert_row');
                   // }
                 },
                 **/
                columns:
                        (formname === 'ListOfPlants' ?
                            [
                                {data: "PlantName"}, {data: "PlantId"},
                                {data: "EPRTRNationalId"},
                                {data: "PlantLocation.StreetName"},
                                  {data: "PlantLocation.City"}, {data: "PlantLocation.Region"}, {data: "PlantLocation.PostalCode"},{data: "PlantLocation.CountryCode"},{data: "PlantLocation.BuildingNumber"},
                                {data: "GeographicalCoordinate.Longitude", type: 'numeric', format: '0.[00000]'},
                                 {data: "GeographicalCoordinate.Latitude", type: 'numeric', format: '0.[00000]'},
                                {data: "FacilityName"},{data: "Comments"}
                            ]
                    : formname == 'PlantDetails' ?
                            [
                                {data: "PlantName", readOnly: true}, {data: "PlantId", readOnly: true},
                                {data: "PlantDetails.MWth"},
                                {data: "PlantDetails.TypeOfCombustionPlant"},
                                {data: "PlantDetails.DateOfStartOfOperation"},                                
                                {data: "PlantDetails.Refineries", type: 'checkbox'}, {data: "PlantDetails.OtherSector", type: 'dropdown', source: [{iron_steel:"iron_steel"}, "esi", "district_heating", "chp", "other"]},
                                {data: "PlantDetails.OperatingHours", type: 'numeric'},
                                {data: "PlantDetails.Derogation"},                                
                                {data: "PlantDetails.Comments"}
                            ]
                   : formname == 'EnergyInput' ?
                            [
                                {data: "PlantName", readOnly: true}, {data: "PlantId", readOnly: true},
                                {data: "EnergyInputAndTotalEmissionsToAir.EnergyInput.Biomass", type: 'numeric', format: '0.[00000]'},
                                {data: "EnergyInputAndTotalEmissionsToAir.EnergyInput.Coal", type: 'numeric', format: '0.[00000]'},
                                {data: "EnergyInputAndTotalEmissionsToAir.EnergyInput.Lignite", type: 'numeric', format: '0.[00000]'},
                                {data: "EnergyInputAndTotalEmissionsToAir.EnergyInput.Peat", type: 'numeric', format: '0.[00000]'},
                                {data: "EnergyInputAndTotalEmissionsToAir.EnergyInput.OtherSolidFuels.Category"},
                                {data: "EnergyInputAndTotalEmissionsToAir.EnergyInput.OtherSolidFuels.Value", type: 'numeric', format: '0.[00000]'},
                                {data: "EnergyInputAndTotalEmissionsToAir.EnergyInput.LiquidFuels", type: 'numeric', format: '0.[00000]'},
                                {data: "EnergyInputAndTotalEmissionsToAir.EnergyInput.NaturalGas", type: 'numeric', format: '0.[00000]'},
                                {data: "EnergyInputAndTotalEmissionsToAir.EnergyInput.OtherGases.Category"},
                                {data: "EnergyInputAndTotalEmissionsToAir.EnergyInput.OtherGases.Value", type: 'numeric', format: '0.[00000]'},

                            ]         
                    : formname == 'TotalEmissionsToAir' ?
                            [
                                {data: "PlantName", readOnly: true}, {data: "PlantId", readOnly: true},
                                {data: "EnergyInputAndTotalEmissionsToAir.TotalEmissionsToAir.SO2", type: 'numeric', format: '0.[00000]'},
                                {data: "EnergyInputAndTotalEmissionsToAir.TotalEmissionsToAir.NOx", type: 'numeric', format: '0.[00000]'},
                                {data: "EnergyInputAndTotalEmissionsToAir.TotalEmissionsToAir.TSP", type: 'numeric', format: '0.[00000]'}
                            ]
                    : formname == 'Desulphurisation' ?
                           [
                                {data: "PlantName", readOnly: true}, {data: "PlantId", readOnly: true},
                                {data: "Desulphurisation.DesulphurisationRate", type: 'numeric', format: '0.[00000]'},
                                {data: "Desulphurisation.SulphurContent", type: 'numeric', format: '0.[00000]'},
                                {data: "Desulphurisation.TechnicalJustification" }
                            ]
                    : formname == 'UsefulHeat' ?
                            [
                                {data: "PlantName", readOnly: true}, {data: "PlantId", readOnly: true},
                                {data: "UsefulHeat.UsefulHeatProportion", type: 'numeric', format: '0.[00000]'},
                            ]
                   
                    :[]),
                    onSelection: function (row, col, row2, col2) {
                        var meta = container.handsontable('getCellMeta', row2, col2);
                        if (meta.readOnly) {
                            container.handsontable('updateSettings', {fillHandle: false});
                        }
                        else {
                            container.handsontable('updateSettings', {fillHandle: true});
                        }
                    },
                cells: function (row, col, prop) {
                    var cellProperties = {};
                    if (conditionalReadonlyFields.indexOf(prop) >= 0) {
                        this.renderer = numericConditionalreadOnlyRenderer;
                    }
                    return cellProperties;
                }
        });
    }
	}
});
    var conditionalReadonlyFields = ["PlantDetails.CapacityAddedMW", "PlantDetails.CapacityAffectedMW", "PlantDetails.OtherSector", "PlantDetails.GasTurbineThermalInput",
        "PlantDetails.BoilerThermalInput", "PlantDetails.GasEngineThermalInput", "PlantDetails.DieselEngineTurbineThermalInput", "PlantDetails.DieselEngineTurbineThermalInput",
        "PlantDetails.OtherTypeOfCombustion", "PlantDetails.OtherThermalInput",
        "OptOutsAndNERP.CapacityOptedOutMW", "OptOutsAndNERP.HoursOperated",
        "LcpArt15.OperatingHours", "LcpArt15.ElvSO2",
        "LcpArt15.NotaBeneElvSO2", "LcpArt15.DesulphurisationRate", "LcpArt15.SInput",
        "LcpArt15.AnnexVI_A_Footnote2_OperatingHours", "LcpArt15.ElvNOx",
        "LcpArt15.VolatileContents", "LcpArt15.AnnexVI_A_Footnote3_ElvNOx"]
    function numericConditionalreadOnlyRenderer(instance, td, row, col, prop, value, cellProperties) {

        if (prop === "PlantDetails.OtherTypeOfCombustion") {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
        }
        else if (prop === "PlantDetails.OtherSector") {
            Handsontable.renderers.AutocompleteRenderer.apply(this, arguments);
        }
        else {
            Handsontable.renderers.NumericRenderer.apply(this, arguments);
        }
        var colIndex = (
                (prop === "PlantDetails.OtherThermalInput" || prop ===  "OptOutsAndNERP.HoursOperated"
                                || prop === "LcpArt15.ElvSO2" || prop ===  "LcpArt15.DesulphurisationRate"
                                || prop === "LcpArt15.ElvNOx" || prop ===  "LcpArt15.AnnexVI_A_Footnote3_ElvNOx")
                                ? col - 2 : (prop === "LcpArt15.SInput") ? col - 3 : col - 1);
        var booleanValue = prop === "PlantDetails.OtherSector" ? false : true;
        var checkboxValue = instance.getDataAtCell(row, colIndex) === null || instance.getDataAtCell(row, colIndex) === '' ? false : instance.getDataAtCell(row, colIndex);
        if (checkboxValue != booleanValue ) {
            cellProperties.readOnly = true;
            td.style.background = '#EEE';
        }
    }

},{}],2:[function(require,module,exports){
/*
 * angular-elastic v2.3.3
 * (c) 2014 Monospaced http://monospaced.com
 * License: MIT
 */

angular.module('monospaced.elastic', [])

  .constant('msdElasticConfig', {
    append: ''
  })

  .directive('msdElastic', ['$timeout', '$window', 'msdElasticConfig', function($timeout, $window, config) {
    'use strict';

    return {
      require: 'ngModel',
      restrict: 'A, C',
      link: function(scope, element, attrs, ngModel) {

        // cache a reference to the DOM element
        var ta = element[0],
            $ta = element;

        // ensure the element is a textarea, and browser is capable
        if (ta.nodeName !== 'TEXTAREA' || !$window.getComputedStyle) {
          return;
        }

        // set these properties before measuring dimensions
        $ta.css({
          'overflow': 'hidden',
          'overflow-y': 'hidden',
          'word-wrap': 'break-word'
        });

        // force text reflow
        var text = ta.value;
        ta.value = '';
        ta.value = text;

        var appendText = attrs.msdElastic || config.append,
            append = appendText === '\\n' ? '\n' : appendText,
            $win = angular.element($window),
            mirrorStyle = 'position: absolute; top: -999px; right: auto; bottom: auto; left: 0 ;' +
                          'overflow: hidden; -webkit-box-sizing: content-box;' +
                          '-moz-box-sizing: content-box; box-sizing: content-box;' +
                          'min-height: 0 !important; height: 0 !important; padding: 0;' +
                          'word-wrap: break-word; border: 0;',
            $mirror = angular.element('<textarea tabindex="-1" ' +
                                      'style="' + mirrorStyle + '"/>').data('elastic', true),
            mirror = $mirror[0],
            taStyle = getComputedStyle(ta),
            resize = taStyle.getPropertyValue('resize'),
            borderBox = taStyle.getPropertyValue('box-sizing') === 'border-box' ||
                        taStyle.getPropertyValue('-moz-box-sizing') === 'border-box' ||
                        taStyle.getPropertyValue('-webkit-box-sizing') === 'border-box',
            boxOuter = !borderBox ? {width: 0, height: 0} : {
                          width:  parseInt(taStyle.getPropertyValue('border-right-width'), 10) +
                                  parseInt(taStyle.getPropertyValue('padding-right'), 10) +
                                  parseInt(taStyle.getPropertyValue('padding-left'), 10) +
                                  parseInt(taStyle.getPropertyValue('border-left-width'), 10),
                          height: parseInt(taStyle.getPropertyValue('border-top-width'), 10) +
                                  parseInt(taStyle.getPropertyValue('padding-top'), 10) +
                                  parseInt(taStyle.getPropertyValue('padding-bottom'), 10) +
                                  parseInt(taStyle.getPropertyValue('border-bottom-width'), 10)
                        },
            minHeightValue = parseInt(taStyle.getPropertyValue('min-height'), 10),
            heightValue = parseInt(taStyle.getPropertyValue('height'), 10),
            minHeight = Math.max(minHeightValue, heightValue) - boxOuter.height,
            maxHeight = parseInt(taStyle.getPropertyValue('max-height'), 10),
            mirrored,
            active,
            copyStyle = ['font-family',
                         'font-size',
                         'font-weight',
                         'font-style',
                         'letter-spacing',
                         'line-height',
                         'text-transform',
                         'word-spacing',
                         'text-indent'];

        // exit if elastic already applied (or is the mirror element)
        if ($ta.data('elastic')) {
          return;
        }

        // Opera returns max-height of -1 if not set
        maxHeight = maxHeight && maxHeight > 0 ? maxHeight : 9e4;

        // append mirror to the DOM
        if (mirror.parentNode !== document.body) {
          angular.element(document.body).append(mirror);
        }

        // set resize and apply elastic
        $ta.css({
          'resize': (resize === 'none' || resize === 'vertical') ? 'none' : 'horizontal'
        }).data('elastic', true);

        /*
         * methods
         */

        function initMirror() {
          mirrored = ta;
          // copy the essential styles from the textarea to the mirror
          taStyle = getComputedStyle(ta);
          angular.forEach(copyStyle, function(val) {
            mirrorStyle += val + ':' + taStyle.getPropertyValue(val) + ';';
          });
          mirror.setAttribute('style', mirrorStyle);
        }

        function adjust() {
          var taHeight,
              mirrorHeight,
              width,
              overflow;

          if (mirrored !== ta) {
            initMirror();
          }

          // active flag prevents actions in function from calling adjust again
          if (!active) {
            active = true;

            mirror.value = ta.value + append; // optional whitespace to improve animation
            mirror.style.overflowY = ta.style.overflowY;

            taHeight = ta.style.height === '' ? 'auto' : parseInt(ta.style.height, 10);

            // update mirror width in case the textarea width has changed
            width = parseInt(getComputedStyle(ta).getPropertyValue('width'), 10) - boxOuter.width;
            mirror.style.width = width + 'px';

            mirrorHeight = mirror.scrollHeight;

            if (mirrorHeight > maxHeight) {
              mirrorHeight = maxHeight;
              overflow = 'scroll';
            } else if (mirrorHeight < minHeight) {
              mirrorHeight = minHeight;
            }
            mirrorHeight += boxOuter.height;

            ta.style.overflowY = overflow || 'hidden';

            if (taHeight !== mirrorHeight) {
              ta.style.height = mirrorHeight + 'px';
              scope.$emit('elastic:resize', $ta);
            }

            // small delay to prevent an infinite loop
            $timeout(function() {
              active = false;
            }, 1);

          }
        }

        function forceAdjust() {
          active = false;
          adjust();
        }

        /*
         * initialise
         */

        // listen
        if ('onpropertychange' in ta && 'oninput' in ta) {
          // IE9
          ta['oninput'] = ta.onkeyup = adjust;
        } else {
          ta['oninput'] = adjust;
        }

        $win.bind('resize', forceAdjust);

        scope.$watch(function() {
          return ngModel.$modelValue;
        }, function(newValue) {
          forceAdjust();
        });

        scope.$on('elastic:adjust', function() {
          forceAdjust();
        });

        $timeout(adjust);

        /*
         * destroy
         */

        scope.$on('$destroy', function() {
          $mirror.remove();
          $win.unbind('resize', forceAdjust);
        });
      }
    };

  }]);

},{}],3:[function(require,module,exports){
/*
 AngularJS v1.2.16
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(O,U,s){'use strict';function t(b){return function(){var a=arguments[0],c,a="["+(b?b+":":"")+a+"] http://errors.angularjs.org/1.2.16/"+(b?b+"/":"")+a;for(c=1;c<arguments.length;c++)a=a+(1==c?"?":"&")+"p"+(c-1)+"="+encodeURIComponent("function"==typeof arguments[c]?arguments[c].toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof arguments[c]?"undefined":"string"!=typeof arguments[c]?JSON.stringify(arguments[c]):arguments[c]);return Error(a)}}function ab(b){if(null==b||Ca(b))return!1;
var a=b.length;return 1===b.nodeType&&a?!0:w(b)||M(b)||0===a||"number"===typeof a&&0<a&&a-1 in b}function q(b,a,c){var d;if(b)if(P(b))for(d in b)"prototype"==d||("length"==d||"name"==d||b.hasOwnProperty&&!b.hasOwnProperty(d))||a.call(c,b[d],d);else if(b.forEach&&b.forEach!==q)b.forEach(a,c);else if(ab(b))for(d=0;d<b.length;d++)a.call(c,b[d],d);else for(d in b)b.hasOwnProperty(d)&&a.call(c,b[d],d);return b}function Qb(b){var a=[],c;for(c in b)b.hasOwnProperty(c)&&a.push(c);return a.sort()}function Sc(b,
a,c){for(var d=Qb(b),e=0;e<d.length;e++)a.call(c,b[d[e]],d[e]);return d}function Rb(b){return function(a,c){b(c,a)}}function bb(){for(var b=ka.length,a;b;){b--;a=ka[b].charCodeAt(0);if(57==a)return ka[b]="A",ka.join("");if(90==a)ka[b]="0";else return ka[b]=String.fromCharCode(a+1),ka.join("")}ka.unshift("0");return ka.join("")}function Sb(b,a){a?b.$$hashKey=a:delete b.$$hashKey}function D(b){var a=b.$$hashKey;q(arguments,function(a){a!==b&&q(a,function(a,c){b[c]=a})});Sb(b,a);return b}function Y(b){return parseInt(b,
10)}function Tb(b,a){return D(new (D(function(){},{prototype:b})),a)}function C(){}function Da(b){return b}function aa(b){return function(){return b}}function E(b){return"undefined"===typeof b}function B(b){return"undefined"!==typeof b}function X(b){return null!=b&&"object"===typeof b}function w(b){return"string"===typeof b}function vb(b){return"number"===typeof b}function Na(b){return"[object Date]"===wa.call(b)}function M(b){return"[object Array]"===wa.call(b)}function P(b){return"function"===typeof b}
function cb(b){return"[object RegExp]"===wa.call(b)}function Ca(b){return b&&b.document&&b.location&&b.alert&&b.setInterval}function Tc(b){return!(!b||!(b.nodeName||b.prop&&b.attr&&b.find))}function Uc(b,a,c){var d=[];q(b,function(b,g,f){d.push(a.call(c,b,g,f))});return d}function db(b,a){if(b.indexOf)return b.indexOf(a);for(var c=0;c<b.length;c++)if(a===b[c])return c;return-1}function Oa(b,a){var c=db(b,a);0<=c&&b.splice(c,1);return a}function ba(b,a){if(Ca(b)||b&&b.$evalAsync&&b.$watch)throw Pa("cpws");
if(a){if(b===a)throw Pa("cpi");if(M(b))for(var c=a.length=0;c<b.length;c++)a.push(ba(b[c]));else{c=a.$$hashKey;q(a,function(b,c){delete a[c]});for(var d in b)a[d]=ba(b[d]);Sb(a,c)}}else(a=b)&&(M(b)?a=ba(b,[]):Na(b)?a=new Date(b.getTime()):cb(b)?a=RegExp(b.source):X(b)&&(a=ba(b,{})));return a}function Ub(b,a){a=a||{};for(var c in b)!b.hasOwnProperty(c)||"$"===c.charAt(0)&&"$"===c.charAt(1)||(a[c]=b[c]);return a}function xa(b,a){if(b===a)return!0;if(null===b||null===a)return!1;if(b!==b&&a!==a)return!0;
var c=typeof b,d;if(c==typeof a&&"object"==c)if(M(b)){if(!M(a))return!1;if((c=b.length)==a.length){for(d=0;d<c;d++)if(!xa(b[d],a[d]))return!1;return!0}}else{if(Na(b))return Na(a)&&b.getTime()==a.getTime();if(cb(b)&&cb(a))return b.toString()==a.toString();if(b&&b.$evalAsync&&b.$watch||a&&a.$evalAsync&&a.$watch||Ca(b)||Ca(a)||M(a))return!1;c={};for(d in b)if("$"!==d.charAt(0)&&!P(b[d])){if(!xa(b[d],a[d]))return!1;c[d]=!0}for(d in a)if(!c.hasOwnProperty(d)&&"$"!==d.charAt(0)&&a[d]!==s&&!P(a[d]))return!1;
return!0}return!1}function Vb(){return U.securityPolicy&&U.securityPolicy.isActive||U.querySelector&&!(!U.querySelector("[ng-csp]")&&!U.querySelector("[data-ng-csp]"))}function eb(b,a){var c=2<arguments.length?ya.call(arguments,2):[];return!P(a)||a instanceof RegExp?a:c.length?function(){return arguments.length?a.apply(b,c.concat(ya.call(arguments,0))):a.apply(b,c)}:function(){return arguments.length?a.apply(b,arguments):a.call(b)}}function Vc(b,a){var c=a;"string"===typeof b&&"$"===b.charAt(0)?c=
s:Ca(a)?c="$WINDOW":a&&U===a?c="$DOCUMENT":a&&(a.$evalAsync&&a.$watch)&&(c="$SCOPE");return c}function qa(b,a){return"undefined"===typeof b?s:JSON.stringify(b,Vc,a?"  ":null)}function Wb(b){return w(b)?JSON.parse(b):b}function Qa(b){"function"===typeof b?b=!0:b&&0!==b.length?(b=K(""+b),b=!("f"==b||"0"==b||"false"==b||"no"==b||"n"==b||"[]"==b)):b=!1;return b}function ha(b){b=y(b).clone();try{b.empty()}catch(a){}var c=y("<div>").append(b).html();try{return 3===b[0].nodeType?K(c):c.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,
function(a,b){return"<"+K(b)})}catch(d){return K(c)}}function Xb(b){try{return decodeURIComponent(b)}catch(a){}}function Yb(b){var a={},c,d;q((b||"").split("&"),function(b){b&&(c=b.split("="),d=Xb(c[0]),B(d)&&(b=B(c[1])?Xb(c[1]):!0,a[d]?M(a[d])?a[d].push(b):a[d]=[a[d],b]:a[d]=b))});return a}function Zb(b){var a=[];q(b,function(b,d){M(b)?q(b,function(b){a.push(za(d,!0)+(!0===b?"":"="+za(b,!0)))}):a.push(za(d,!0)+(!0===b?"":"="+za(b,!0)))});return a.length?a.join("&"):""}function wb(b){return za(b,
!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function za(b,a){return encodeURIComponent(b).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,a?"%20":"+")}function Wc(b,a){function c(a){a&&d.push(a)}var d=[b],e,g,f=["ng:app","ng-app","x-ng-app","data-ng-app"],h=/\sng[:\-]app(:\s*([\w\d_]+);?)?\s/;q(f,function(a){f[a]=!0;c(U.getElementById(a));a=a.replace(":","\\:");b.querySelectorAll&&(q(b.querySelectorAll("."+a),c),q(b.querySelectorAll("."+
a+"\\:"),c),q(b.querySelectorAll("["+a+"]"),c))});q(d,function(a){if(!e){var b=h.exec(" "+a.className+" ");b?(e=a,g=(b[2]||"").replace(/\s+/g,",")):q(a.attributes,function(b){!e&&f[b.name]&&(e=a,g=b.value)})}});e&&a(e,g?[g]:[])}function $b(b,a){var c=function(){b=y(b);if(b.injector()){var c=b[0]===U?"document":ha(b);throw Pa("btstrpd",c);}a=a||[];a.unshift(["$provide",function(a){a.value("$rootElement",b)}]);a.unshift("ng");c=ac(a);c.invoke(["$rootScope","$rootElement","$compile","$injector","$animate",
function(a,b,c,d,e){a.$apply(function(){b.data("$injector",d);c(b)(a)})}]);return c},d=/^NG_DEFER_BOOTSTRAP!/;if(O&&!d.test(O.name))return c();O.name=O.name.replace(d,"");Ea.resumeBootstrap=function(b){q(b,function(b){a.push(b)});c()}}function fb(b,a){a=a||"_";return b.replace(Xc,function(b,d){return(d?a:"")+b.toLowerCase()})}function xb(b,a,c){if(!b)throw Pa("areq",a||"?",c||"required");return b}function Ra(b,a,c){c&&M(b)&&(b=b[b.length-1]);xb(P(b),a,"not a function, got "+(b&&"object"==typeof b?
b.constructor.name||"Object":typeof b));return b}function Aa(b,a){if("hasOwnProperty"===b)throw Pa("badname",a);}function bc(b,a,c){if(!a)return b;a=a.split(".");for(var d,e=b,g=a.length,f=0;f<g;f++)d=a[f],b&&(b=(e=b)[d]);return!c&&P(b)?eb(e,b):b}function yb(b){var a=b[0];b=b[b.length-1];if(a===b)return y(a);var c=[a];do{a=a.nextSibling;if(!a)break;c.push(a)}while(a!==b);return y(c)}function Yc(b){var a=t("$injector"),c=t("ng");b=b.angular||(b.angular={});b.$$minErr=b.$$minErr||t;return b.module||
(b.module=function(){var b={};return function(e,g,f){if("hasOwnProperty"===e)throw c("badname","module");g&&b.hasOwnProperty(e)&&(b[e]=null);return b[e]||(b[e]=function(){function b(a,d,e){return function(){c[e||"push"]([a,d,arguments]);return n}}if(!g)throw a("nomod",e);var c=[],d=[],m=b("$injector","invoke"),n={_invokeQueue:c,_runBlocks:d,requires:g,name:e,provider:b("$provide","provider"),factory:b("$provide","factory"),service:b("$provide","service"),value:b("$provide","value"),constant:b("$provide",
"constant","unshift"),animation:b("$animateProvider","register"),filter:b("$filterProvider","register"),controller:b("$controllerProvider","register"),directive:b("$compileProvider","directive"),config:m,run:function(a){d.push(a);return this}};f&&m(f);return n}())}}())}function Zc(b){D(b,{bootstrap:$b,copy:ba,extend:D,equals:xa,element:y,forEach:q,injector:ac,noop:C,bind:eb,toJson:qa,fromJson:Wb,identity:Da,isUndefined:E,isDefined:B,isString:w,isFunction:P,isObject:X,isNumber:vb,isElement:Tc,isArray:M,
version:$c,isDate:Na,lowercase:K,uppercase:Fa,callbacks:{counter:0},$$minErr:t,$$csp:Vb});Sa=Yc(O);try{Sa("ngLocale")}catch(a){Sa("ngLocale",[]).provider("$locale",ad)}Sa("ng",["ngLocale"],["$provide",function(a){a.provider({$$sanitizeUri:bd});a.provider("$compile",cc).directive({a:cd,input:dc,textarea:dc,form:dd,script:ed,select:fd,style:gd,option:hd,ngBind:id,ngBindHtml:jd,ngBindTemplate:kd,ngClass:ld,ngClassEven:md,ngClassOdd:nd,ngCloak:od,ngController:pd,ngForm:qd,ngHide:rd,ngIf:sd,ngInclude:td,
ngInit:ud,ngNonBindable:vd,ngPluralize:wd,ngRepeat:xd,ngShow:yd,ngStyle:zd,ngSwitch:Ad,ngSwitchWhen:Bd,ngSwitchDefault:Cd,ngOptions:Dd,ngTransclude:Ed,ngModel:Fd,ngList:Gd,ngChange:Hd,required:ec,ngRequired:ec,ngValue:Id}).directive({ngInclude:Jd}).directive(zb).directive(fc);a.provider({$anchorScroll:Kd,$animate:Ld,$browser:Md,$cacheFactory:Nd,$controller:Od,$document:Pd,$exceptionHandler:Qd,$filter:gc,$interpolate:Rd,$interval:Sd,$http:Td,$httpBackend:Ud,$location:Vd,$log:Wd,$parse:Xd,$rootScope:Yd,
$q:Zd,$sce:$d,$sceDelegate:ae,$sniffer:be,$templateCache:ce,$timeout:de,$window:ee,$$rAF:fe,$$asyncCallback:ge})}])}function Ta(b){return b.replace(he,function(a,b,d,e){return e?d.toUpperCase():d}).replace(ie,"Moz$1")}function Ab(b,a,c,d){function e(b){var e=c&&b?[this.filter(b)]:[this],l=a,k,m,n,p,r,z;if(!d||null!=b)for(;e.length;)for(k=e.shift(),m=0,n=k.length;m<n;m++)for(p=y(k[m]),l?p.triggerHandler("$destroy"):l=!l,r=0,p=(z=p.children()).length;r<p;r++)e.push(Ga(z[r]));return g.apply(this,arguments)}
var g=Ga.fn[b],g=g.$original||g;e.$original=g;Ga.fn[b]=e}function N(b){if(b instanceof N)return b;w(b)&&(b=ca(b));if(!(this instanceof N)){if(w(b)&&"<"!=b.charAt(0))throw Bb("nosel");return new N(b)}if(w(b)){var a=b;b=U;var c;if(c=je.exec(a))b=[b.createElement(c[1])];else{var d=b,e;b=d.createDocumentFragment();c=[];if(Cb.test(a)){d=b.appendChild(d.createElement("div"));e=(ke.exec(a)||["",""])[1].toLowerCase();e=ea[e]||ea._default;d.innerHTML="<div>&#160;</div>"+e[1]+a.replace(le,"<$1></$2>")+e[2];
d.removeChild(d.firstChild);for(a=e[0];a--;)d=d.lastChild;a=0;for(e=d.childNodes.length;a<e;++a)c.push(d.childNodes[a]);d=b.firstChild;d.textContent=""}else c.push(d.createTextNode(a));b.textContent="";b.innerHTML="";b=c}Db(this,b);y(U.createDocumentFragment()).append(this)}else Db(this,b)}function Eb(b){return b.cloneNode(!0)}function Ha(b){hc(b);var a=0;for(b=b.childNodes||[];a<b.length;a++)Ha(b[a])}function ic(b,a,c,d){if(B(d))throw Bb("offargs");var e=la(b,"events");la(b,"handle")&&(E(a)?q(e,
function(a,c){Fb(b,c,a);delete e[c]}):q(a.split(" "),function(a){E(c)?(Fb(b,a,e[a]),delete e[a]):Oa(e[a]||[],c)}))}function hc(b,a){var c=b[gb],d=Ua[c];d&&(a?delete Ua[c].data[a]:(d.handle&&(d.events.$destroy&&d.handle({},"$destroy"),ic(b)),delete Ua[c],b[gb]=s))}function la(b,a,c){var d=b[gb],d=Ua[d||-1];if(B(c))d||(b[gb]=d=++me,d=Ua[d]={}),d[a]=c;else return d&&d[a]}function jc(b,a,c){var d=la(b,"data"),e=B(c),g=!e&&B(a),f=g&&!X(a);d||f||la(b,"data",d={});if(e)d[a]=c;else if(g){if(f)return d&&d[a];
D(d,a)}else return d}function Gb(b,a){return b.getAttribute?-1<(" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+a+" "):!1}function hb(b,a){a&&b.setAttribute&&q(a.split(" "),function(a){b.setAttribute("class",ca((" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+ca(a)+" "," ")))})}function ib(b,a){if(a&&b.setAttribute){var c=(" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");q(a.split(" "),function(a){a=ca(a);-1===c.indexOf(" "+a+" ")&&
(c+=a+" ")});b.setAttribute("class",ca(c))}}function Db(b,a){if(a){a=a.nodeName||!B(a.length)||Ca(a)?[a]:a;for(var c=0;c<a.length;c++)b.push(a[c])}}function kc(b,a){return jb(b,"$"+(a||"ngController")+"Controller")}function jb(b,a,c){b=y(b);9==b[0].nodeType&&(b=b.find("html"));for(a=M(a)?a:[a];b.length;){for(var d=b[0],e=0,g=a.length;e<g;e++)if((c=b.data(a[e]))!==s)return c;b=y(d.parentNode||11===d.nodeType&&d.host)}}function lc(b){for(var a=0,c=b.childNodes;a<c.length;a++)Ha(c[a]);for(;b.firstChild;)b.removeChild(b.firstChild)}
function mc(b,a){var c=kb[a.toLowerCase()];return c&&nc[b.nodeName]&&c}function ne(b,a){var c=function(c,e){c.preventDefault||(c.preventDefault=function(){c.returnValue=!1});c.stopPropagation||(c.stopPropagation=function(){c.cancelBubble=!0});c.target||(c.target=c.srcElement||U);if(E(c.defaultPrevented)){var g=c.preventDefault;c.preventDefault=function(){c.defaultPrevented=!0;g.call(c)};c.defaultPrevented=!1}c.isDefaultPrevented=function(){return c.defaultPrevented||!1===c.returnValue};var f=Ub(a[e||
c.type]||[]);q(f,function(a){a.call(b,c)});8>=S?(c.preventDefault=null,c.stopPropagation=null,c.isDefaultPrevented=null):(delete c.preventDefault,delete c.stopPropagation,delete c.isDefaultPrevented)};c.elem=b;return c}function Ia(b){var a=typeof b,c;"object"==a&&null!==b?"function"==typeof(c=b.$$hashKey)?c=b.$$hashKey():c===s&&(c=b.$$hashKey=bb()):c=b;return a+":"+c}function Va(b){q(b,this.put,this)}function oc(b){var a,c;"function"==typeof b?(a=b.$inject)||(a=[],b.length&&(c=b.toString().replace(oe,
""),c=c.match(pe),q(c[1].split(qe),function(b){b.replace(re,function(b,c,d){a.push(d)})})),b.$inject=a):M(b)?(c=b.length-1,Ra(b[c],"fn"),a=b.slice(0,c)):Ra(b,"fn",!0);return a}function ac(b){function a(a){return function(b,c){if(X(b))q(b,Rb(a));else return a(b,c)}}function c(a,b){Aa(a,"service");if(P(b)||M(b))b=n.instantiate(b);if(!b.$get)throw Wa("pget",a);return m[a+h]=b}function d(a,b){return c(a,{$get:b})}function e(a){var b=[],c,d,g,h;q(a,function(a){if(!k.get(a)){k.put(a,!0);try{if(w(a))for(c=
Sa(a),b=b.concat(e(c.requires)).concat(c._runBlocks),d=c._invokeQueue,g=0,h=d.length;g<h;g++){var f=d[g],l=n.get(f[0]);l[f[1]].apply(l,f[2])}else P(a)?b.push(n.invoke(a)):M(a)?b.push(n.invoke(a)):Ra(a,"module")}catch(m){throw M(a)&&(a=a[a.length-1]),m.message&&(m.stack&&-1==m.stack.indexOf(m.message))&&(m=m.message+"\n"+m.stack),Wa("modulerr",a,m.stack||m.message||m);}}});return b}function g(a,b){function c(d){if(a.hasOwnProperty(d)){if(a[d]===f)throw Wa("cdep",l.join(" <- "));return a[d]}try{return l.unshift(d),
a[d]=f,a[d]=b(d)}catch(e){throw a[d]===f&&delete a[d],e;}finally{l.shift()}}function d(a,b,e){var g=[],h=oc(a),f,l,k;l=0;for(f=h.length;l<f;l++){k=h[l];if("string"!==typeof k)throw Wa("itkn",k);g.push(e&&e.hasOwnProperty(k)?e[k]:c(k))}a.$inject||(a=a[f]);return a.apply(b,g)}return{invoke:d,instantiate:function(a,b){var c=function(){},e;c.prototype=(M(a)?a[a.length-1]:a).prototype;c=new c;e=d(a,c,b);return X(e)||P(e)?e:c},get:c,annotate:oc,has:function(b){return m.hasOwnProperty(b+h)||a.hasOwnProperty(b)}}}
var f={},h="Provider",l=[],k=new Va,m={$provide:{provider:a(c),factory:a(d),service:a(function(a,b){return d(a,["$injector",function(a){return a.instantiate(b)}])}),value:a(function(a,b){return d(a,aa(b))}),constant:a(function(a,b){Aa(a,"constant");m[a]=b;p[a]=b}),decorator:function(a,b){var c=n.get(a+h),d=c.$get;c.$get=function(){var a=r.invoke(d,c);return r.invoke(b,null,{$delegate:a})}}}},n=m.$injector=g(m,function(){throw Wa("unpr",l.join(" <- "));}),p={},r=p.$injector=g(p,function(a){a=n.get(a+
h);return r.invoke(a.$get,a)});q(e(b),function(a){r.invoke(a||C)});return r}function Kd(){var b=!0;this.disableAutoScrolling=function(){b=!1};this.$get=["$window","$location","$rootScope",function(a,c,d){function e(a){var b=null;q(a,function(a){b||"a"!==K(a.nodeName)||(b=a)});return b}function g(){var b=c.hash(),d;b?(d=f.getElementById(b))?d.scrollIntoView():(d=e(f.getElementsByName(b)))?d.scrollIntoView():"top"===b&&a.scrollTo(0,0):a.scrollTo(0,0)}var f=a.document;b&&d.$watch(function(){return c.hash()},
function(){d.$evalAsync(g)});return g}]}function ge(){this.$get=["$$rAF","$timeout",function(b,a){return b.supported?function(a){return b(a)}:function(b){return a(b,0,!1)}}]}function se(b,a,c,d){function e(a){try{a.apply(null,ya.call(arguments,1))}finally{if(z--,0===z)for(;u.length;)try{u.pop()()}catch(b){c.error(b)}}}function g(a,b){(function T(){q(F,function(a){a()});v=b(T,a)})()}function f(){x=null;J!=h.url()&&(J=h.url(),q(ma,function(a){a(h.url())}))}var h=this,l=a[0],k=b.location,m=b.history,
n=b.setTimeout,p=b.clearTimeout,r={};h.isMock=!1;var z=0,u=[];h.$$completeOutstandingRequest=e;h.$$incOutstandingRequestCount=function(){z++};h.notifyWhenNoOutstandingRequests=function(a){q(F,function(a){a()});0===z?a():u.push(a)};var F=[],v;h.addPollFn=function(a){E(v)&&g(100,n);F.push(a);return a};var J=k.href,A=a.find("base"),x=null;h.url=function(a,c){k!==b.location&&(k=b.location);m!==b.history&&(m=b.history);if(a){if(J!=a)return J=a,d.history?c?m.replaceState(null,"",a):(m.pushState(null,"",
a),A.attr("href",A.attr("href"))):(x=a,c?k.replace(a):k.href=a),h}else return x||k.href.replace(/%27/g,"'")};var ma=[],L=!1;h.onUrlChange=function(a){if(!L){if(d.history)y(b).on("popstate",f);if(d.hashchange)y(b).on("hashchange",f);else h.addPollFn(f);L=!0}ma.push(a);return a};h.baseHref=function(){var a=A.attr("href");return a?a.replace(/^(https?\:)?\/\/[^\/]*/,""):""};var Q={},da="",H=h.baseHref();h.cookies=function(a,b){var d,e,g,h;if(a)b===s?l.cookie=escape(a)+"=;path="+H+";expires=Thu, 01 Jan 1970 00:00:00 GMT":
w(b)&&(d=(l.cookie=escape(a)+"="+escape(b)+";path="+H).length+1,4096<d&&c.warn("Cookie '"+a+"' possibly not set or overflowed because it was too large ("+d+" > 4096 bytes)!"));else{if(l.cookie!==da)for(da=l.cookie,d=da.split("; "),Q={},g=0;g<d.length;g++)e=d[g],h=e.indexOf("="),0<h&&(a=unescape(e.substring(0,h)),Q[a]===s&&(Q[a]=unescape(e.substring(h+1))));return Q}};h.defer=function(a,b){var c;z++;c=n(function(){delete r[c];e(a)},b||0);r[c]=!0;return c};h.defer.cancel=function(a){return r[a]?(delete r[a],
p(a),e(C),!0):!1}}function Md(){this.$get=["$window","$log","$sniffer","$document",function(b,a,c,d){return new se(b,d,a,c)}]}function Nd(){this.$get=function(){function b(b,d){function e(a){a!=n&&(p?p==a&&(p=a.n):p=a,g(a.n,a.p),g(a,n),n=a,n.n=null)}function g(a,b){a!=b&&(a&&(a.p=b),b&&(b.n=a))}if(b in a)throw t("$cacheFactory")("iid",b);var f=0,h=D({},d,{id:b}),l={},k=d&&d.capacity||Number.MAX_VALUE,m={},n=null,p=null;return a[b]={put:function(a,b){if(k<Number.MAX_VALUE){var c=m[a]||(m[a]={key:a});
e(c)}if(!E(b))return a in l||f++,l[a]=b,f>k&&this.remove(p.key),b},get:function(a){if(k<Number.MAX_VALUE){var b=m[a];if(!b)return;e(b)}return l[a]},remove:function(a){if(k<Number.MAX_VALUE){var b=m[a];if(!b)return;b==n&&(n=b.p);b==p&&(p=b.n);g(b.n,b.p);delete m[a]}delete l[a];f--},removeAll:function(){l={};f=0;m={};n=p=null},destroy:function(){m=h=l=null;delete a[b]},info:function(){return D({},h,{size:f})}}}var a={};b.info=function(){var b={};q(a,function(a,e){b[e]=a.info()});return b};b.get=function(b){return a[b]};
return b}}function ce(){this.$get=["$cacheFactory",function(b){return b("templates")}]}function cc(b,a){var c={},d="Directive",e=/^\s*directive\:\s*([\d\w\-_]+)\s+(.*)$/,g=/(([\d\w\-_]+)(?:\:([^;]+))?;?)/,f=/^(on[a-z]+|formaction)$/;this.directive=function l(a,e){Aa(a,"directive");w(a)?(xb(e,"directiveFactory"),c.hasOwnProperty(a)||(c[a]=[],b.factory(a+d,["$injector","$exceptionHandler",function(b,d){var e=[];q(c[a],function(c,g){try{var f=b.invoke(c);P(f)?f={compile:aa(f)}:!f.compile&&f.link&&(f.compile=
aa(f.link));f.priority=f.priority||0;f.index=g;f.name=f.name||a;f.require=f.require||f.controller&&f.name;f.restrict=f.restrict||"A";e.push(f)}catch(l){d(l)}});return e}])),c[a].push(e)):q(a,Rb(l));return this};this.aHrefSanitizationWhitelist=function(b){return B(b)?(a.aHrefSanitizationWhitelist(b),this):a.aHrefSanitizationWhitelist()};this.imgSrcSanitizationWhitelist=function(b){return B(b)?(a.imgSrcSanitizationWhitelist(b),this):a.imgSrcSanitizationWhitelist()};this.$get=["$injector","$interpolate",
"$exceptionHandler","$http","$templateCache","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(a,b,m,n,p,r,z,u,F,v,J,A){function x(a,b,c,d,e){a instanceof y||(a=y(a));q(a,function(b,c){3==b.nodeType&&b.nodeValue.match(/\S+/)&&(a[c]=y(b).wrap("<span></span>").parent()[0])});var g=L(a,b,a,c,d,e);ma(a,"ng-scope");return function(b,c,d){xb(b,"scope");var e=c?Ja.clone.call(a):a;q(d,function(a,b){e.data("$"+b+"Controller",a)});d=0;for(var f=e.length;d<f;d++){var l=
e[d].nodeType;1!==l&&9!==l||e.eq(d).data("$scope",b)}c&&c(e,b);g&&g(b,e,e);return e}}function ma(a,b){try{a.addClass(b)}catch(c){}}function L(a,b,c,d,e,g){function f(a,c,d,e){var g,k,m,r,n,p,z;g=c.length;var I=Array(g);for(n=0;n<g;n++)I[n]=c[n];z=n=0;for(p=l.length;n<p;z++)k=I[z],c=l[n++],g=l[n++],m=y(k),c?(c.scope?(r=a.$new(),m.data("$scope",r)):r=a,(m=c.transclude)||!e&&b?c(g,r,k,d,Q(a,m||b)):c(g,r,k,d,e)):g&&g(a,k.childNodes,s,e)}for(var l=[],k,m,r,n,p=0;p<a.length;p++)k=new Hb,m=da(a[p],[],k,
0===p?d:s,e),(g=m.length?ia(m,a[p],k,b,c,null,[],[],g):null)&&g.scope&&ma(y(a[p]),"ng-scope"),k=g&&g.terminal||!(r=a[p].childNodes)||!r.length?null:L(r,g?g.transclude:b),l.push(g,k),n=n||g||k,g=null;return n?f:null}function Q(a,b){return function(c,d,e){var g=!1;c||(c=a.$new(),g=c.$$transcluded=!0);d=b(c,d,e);if(g)d.on("$destroy",eb(c,c.$destroy));return d}}function da(a,b,c,d,f){var k=c.$attr,l;switch(a.nodeType){case 1:T(b,na(Ka(a).toLowerCase()),"E",d,f);var m,r,n;l=a.attributes;for(var p=0,z=
l&&l.length;p<z;p++){var u=!1,F=!1;m=l[p];if(!S||8<=S||m.specified){r=m.name;n=na(r);W.test(n)&&(r=fb(n.substr(6),"-"));var J=n.replace(/(Start|End)$/,"");n===J+"Start"&&(u=r,F=r.substr(0,r.length-5)+"end",r=r.substr(0,r.length-6));n=na(r.toLowerCase());k[n]=r;c[n]=m=ca(m.value);mc(a,n)&&(c[n]=!0);N(a,b,m,n);T(b,n,"A",d,f,u,F)}}a=a.className;if(w(a)&&""!==a)for(;l=g.exec(a);)n=na(l[2]),T(b,n,"C",d,f)&&(c[n]=ca(l[3])),a=a.substr(l.index+l[0].length);break;case 3:t(b,a.nodeValue);break;case 8:try{if(l=
e.exec(a.nodeValue))n=na(l[1]),T(b,n,"M",d,f)&&(c[n]=ca(l[2]))}catch(x){}}b.sort(E);return b}function H(a,b,c){var d=[],e=0;if(b&&a.hasAttribute&&a.hasAttribute(b)){do{if(!a)throw ja("uterdir",b,c);1==a.nodeType&&(a.hasAttribute(b)&&e++,a.hasAttribute(c)&&e--);d.push(a);a=a.nextSibling}while(0<e)}else d.push(a);return y(d)}function R(a,b,c){return function(d,e,g,f,l){e=H(e[0],b,c);return a(d,e,g,f,l)}}function ia(a,c,d,e,g,f,l,n,p){function u(a,b,c,d){if(a){c&&(a=R(a,c,d));a.require=G.require;if(Q===
G||G.$$isolateScope)a=qc(a,{isolateScope:!0});l.push(a)}if(b){c&&(b=R(b,c,d));b.require=G.require;if(Q===G||G.$$isolateScope)b=qc(b,{isolateScope:!0});n.push(b)}}function F(a,b,c){var d,e="data",g=!1;if(w(a)){for(;"^"==(d=a.charAt(0))||"?"==d;)a=a.substr(1),"^"==d&&(e="inheritedData"),g=g||"?"==d;d=null;c&&"data"===e&&(d=c[a]);d=d||b[e]("$"+a+"Controller");if(!d&&!g)throw ja("ctreq",a,t);}else M(a)&&(d=[],q(a,function(a){d.push(F(a,b,c))}));return d}function J(a,e,g,f,p){function u(a,b){var c;2>arguments.length&&
(b=a,a=s);D&&(c=lb);return p(a,b,c)}var I,x,v,A,R,H,lb={},da;I=c===g?d:Ub(d,new Hb(y(g),d.$attr));x=I.$$element;if(Q){var T=/^\s*([@=&])(\??)\s*(\w*)\s*$/;f=y(g);H=e.$new(!0);ia&&ia===Q.$$originalDirective?f.data("$isolateScope",H):f.data("$isolateScopeNoTemplate",H);ma(f,"ng-isolate-scope");q(Q.scope,function(a,c){var d=a.match(T)||[],g=d[3]||c,f="?"==d[2],d=d[1],l,m,n,p;H.$$isolateBindings[c]=d+g;switch(d){case "@":I.$observe(g,function(a){H[c]=a});I.$$observers[g].$$scope=e;I[g]&&(H[c]=b(I[g])(e));
break;case "=":if(f&&!I[g])break;m=r(I[g]);p=m.literal?xa:function(a,b){return a===b};n=m.assign||function(){l=H[c]=m(e);throw ja("nonassign",I[g],Q.name);};l=H[c]=m(e);H.$watch(function(){var a=m(e);p(a,H[c])||(p(a,l)?n(e,a=H[c]):H[c]=a);return l=a},null,m.literal);break;case "&":m=r(I[g]);H[c]=function(a){return m(e,a)};break;default:throw ja("iscp",Q.name,c,a);}})}da=p&&u;L&&q(L,function(a){var b={$scope:a===Q||a.$$isolateScope?H:e,$element:x,$attrs:I,$transclude:da},c;R=a.controller;"@"==R&&(R=
I[a.name]);c=z(R,b);lb[a.name]=c;D||x.data("$"+a.name+"Controller",c);a.controllerAs&&(b.$scope[a.controllerAs]=c)});f=0;for(v=l.length;f<v;f++)try{A=l[f],A(A.isolateScope?H:e,x,I,A.require&&F(A.require,x,lb),da)}catch(G){m(G,ha(x))}f=e;Q&&(Q.template||null===Q.templateUrl)&&(f=H);a&&a(f,g.childNodes,s,p);for(f=n.length-1;0<=f;f--)try{A=n[f],A(A.isolateScope?H:e,x,I,A.require&&F(A.require,x,lb),da)}catch(B){m(B,ha(x))}}p=p||{};for(var v=-Number.MAX_VALUE,A,L=p.controllerDirectives,Q=p.newIsolateScopeDirective,
ia=p.templateDirective,T=p.nonTlbTranscludeDirective,E=!1,D=p.hasElementTranscludeDirective,Z=d.$$element=y(c),G,t,V,Xa=e,O,N=0,S=a.length;N<S;N++){G=a[N];var ra=G.$$start,W=G.$$end;ra&&(Z=H(c,ra,W));V=s;if(v>G.priority)break;if(V=G.scope)A=A||G,G.templateUrl||(K("new/isolated scope",Q,G,Z),X(V)&&(Q=G));t=G.name;!G.templateUrl&&G.controller&&(V=G.controller,L=L||{},K("'"+t+"' controller",L[t],G,Z),L[t]=G);if(V=G.transclude)E=!0,G.$$tlb||(K("transclusion",T,G,Z),T=G),"element"==V?(D=!0,v=G.priority,
V=H(c,ra,W),Z=d.$$element=y(U.createComment(" "+t+": "+d[t]+" ")),c=Z[0],mb(g,y(ya.call(V,0)),c),Xa=x(V,e,v,f&&f.name,{nonTlbTranscludeDirective:T})):(V=y(Eb(c)).contents(),Z.empty(),Xa=x(V,e));if(G.template)if(K("template",ia,G,Z),ia=G,V=P(G.template)?G.template(Z,d):G.template,V=Y(V),G.replace){f=G;V=Cb.test(V)?y(V):[];c=V[0];if(1!=V.length||1!==c.nodeType)throw ja("tplrt",t,"");mb(g,Z,c);S={$attr:{}};V=da(c,[],S);var $=a.splice(N+1,a.length-(N+1));Q&&pc(V);a=a.concat(V).concat($);B(d,S);S=a.length}else Z.html(V);
if(G.templateUrl)K("template",ia,G,Z),ia=G,G.replace&&(f=G),J=C(a.splice(N,a.length-N),Z,d,g,Xa,l,n,{controllerDirectives:L,newIsolateScopeDirective:Q,templateDirective:ia,nonTlbTranscludeDirective:T}),S=a.length;else if(G.compile)try{O=G.compile(Z,d,Xa),P(O)?u(null,O,ra,W):O&&u(O.pre,O.post,ra,W)}catch(aa){m(aa,ha(Z))}G.terminal&&(J.terminal=!0,v=Math.max(v,G.priority))}J.scope=A&&!0===A.scope;J.transclude=E&&Xa;p.hasElementTranscludeDirective=D;return J}function pc(a){for(var b=0,c=a.length;b<c;b++)a[b]=
Tb(a[b],{$$isolateScope:!0})}function T(b,e,g,f,k,n,r){if(e===k)return null;k=null;if(c.hasOwnProperty(e)){var p;e=a.get(e+d);for(var z=0,u=e.length;z<u;z++)try{p=e[z],(f===s||f>p.priority)&&-1!=p.restrict.indexOf(g)&&(n&&(p=Tb(p,{$$start:n,$$end:r})),b.push(p),k=p)}catch(F){m(F)}}return k}function B(a,b){var c=b.$attr,d=a.$attr,e=a.$$element;q(a,function(d,e){"$"!=e.charAt(0)&&(b[e]&&(d+=("style"===e?";":" ")+b[e]),a.$set(e,d,!0,c[e]))});q(b,function(b,g){"class"==g?(ma(e,b),a["class"]=(a["class"]?
a["class"]+" ":"")+b):"style"==g?(e.attr("style",e.attr("style")+";"+b),a.style=(a.style?a.style+";":"")+b):"$"==g.charAt(0)||a.hasOwnProperty(g)||(a[g]=b,d[g]=c[g])})}function C(a,b,c,d,e,g,f,l){var k=[],m,r,z=b[0],u=a.shift(),F=D({},u,{templateUrl:null,transclude:null,replace:null,$$originalDirective:u}),x=P(u.templateUrl)?u.templateUrl(b,c):u.templateUrl;b.empty();n.get(v.getTrustedResourceUrl(x),{cache:p}).success(function(n){var p,J;n=Y(n);if(u.replace){n=Cb.test(n)?y(n):[];p=n[0];if(1!=n.length||
1!==p.nodeType)throw ja("tplrt",u.name,x);n={$attr:{}};mb(d,b,p);var v=da(p,[],n);X(u.scope)&&pc(v);a=v.concat(a);B(c,n)}else p=z,b.html(n);a.unshift(F);m=ia(a,p,c,e,b,u,g,f,l);q(d,function(a,c){a==p&&(d[c]=b[0])});for(r=L(b[0].childNodes,e);k.length;){n=k.shift();J=k.shift();var A=k.shift(),R=k.shift(),v=b[0];if(J!==z){var H=J.className;l.hasElementTranscludeDirective&&u.replace||(v=Eb(p));mb(A,y(J),v);ma(y(v),H)}J=m.transclude?Q(n,m.transclude):R;m(r,n,v,d,J)}k=null}).error(function(a,b,c,d){throw ja("tpload",
d.url);});return function(a,b,c,d,e){k?(k.push(b),k.push(c),k.push(d),k.push(e)):m(r,b,c,d,e)}}function E(a,b){var c=b.priority-a.priority;return 0!==c?c:a.name!==b.name?a.name<b.name?-1:1:a.index-b.index}function K(a,b,c,d){if(b)throw ja("multidir",b.name,c.name,a,ha(d));}function t(a,c){var d=b(c,!0);d&&a.push({priority:0,compile:aa(function(a,b){var c=b.parent(),e=c.data("$binding")||[];e.push(d);ma(c.data("$binding",e),"ng-binding");a.$watch(d,function(a){b[0].nodeValue=a})})})}function O(a,b){if("srcdoc"==
b)return v.HTML;var c=Ka(a);if("xlinkHref"==b||"FORM"==c&&"action"==b||"IMG"!=c&&("src"==b||"ngSrc"==b))return v.RESOURCE_URL}function N(a,c,d,e){var g=b(d,!0);if(g){if("multiple"===e&&"SELECT"===Ka(a))throw ja("selmulti",ha(a));c.push({priority:100,compile:function(){return{pre:function(c,d,l){d=l.$$observers||(l.$$observers={});if(f.test(e))throw ja("nodomevents");if(g=b(l[e],!0,O(a,e)))l[e]=g(c),(d[e]||(d[e]=[])).$$inter=!0,(l.$$observers&&l.$$observers[e].$$scope||c).$watch(g,function(a,b){"class"===
e&&a!=b?l.$updateClass(a,b):l.$set(e,a)})}}}})}}function mb(a,b,c){var d=b[0],e=b.length,g=d.parentNode,f,l;if(a)for(f=0,l=a.length;f<l;f++)if(a[f]==d){a[f++]=c;l=f+e-1;for(var k=a.length;f<k;f++,l++)l<k?a[f]=a[l]:delete a[f];a.length-=e-1;break}g&&g.replaceChild(c,d);a=U.createDocumentFragment();a.appendChild(d);c[y.expando]=d[y.expando];d=1;for(e=b.length;d<e;d++)g=b[d],y(g).remove(),a.appendChild(g),delete b[d];b[0]=c;b.length=1}function qc(a,b){return D(function(){return a.apply(null,arguments)},
a,b)}var Hb=function(a,b){this.$$element=a;this.$attr=b||{}};Hb.prototype={$normalize:na,$addClass:function(a){a&&0<a.length&&J.addClass(this.$$element,a)},$removeClass:function(a){a&&0<a.length&&J.removeClass(this.$$element,a)},$updateClass:function(a,b){var c=rc(a,b),d=rc(b,a);0===c.length?J.removeClass(this.$$element,d):0===d.length?J.addClass(this.$$element,c):J.setClass(this.$$element,c,d)},$set:function(a,b,c,d){var e=mc(this.$$element[0],a);e&&(this.$$element.prop(a,b),d=e);this[a]=b;d?this.$attr[a]=
d:(d=this.$attr[a])||(this.$attr[a]=d=fb(a,"-"));e=Ka(this.$$element);if("A"===e&&"href"===a||"IMG"===e&&"src"===a)this[a]=b=A(b,"src"===a);!1!==c&&(null===b||b===s?this.$$element.removeAttr(d):this.$$element.attr(d,b));(c=this.$$observers)&&q(c[a],function(a){try{a(b)}catch(c){m(c)}})},$observe:function(a,b){var c=this,d=c.$$observers||(c.$$observers={}),e=d[a]||(d[a]=[]);e.push(b);u.$evalAsync(function(){e.$$inter||b(c[a])});return b}};var Z=b.startSymbol(),ra=b.endSymbol(),Y="{{"==Z||"}}"==ra?
Da:function(a){return a.replace(/\{\{/g,Z).replace(/}}/g,ra)},W=/^ngAttr[A-Z]/;return x}]}function na(b){return Ta(b.replace(te,""))}function rc(b,a){var c="",d=b.split(/\s+/),e=a.split(/\s+/),g=0;a:for(;g<d.length;g++){for(var f=d[g],h=0;h<e.length;h++)if(f==e[h])continue a;c+=(0<c.length?" ":"")+f}return c}function Od(){var b={},a=/^(\S+)(\s+as\s+(\w+))?$/;this.register=function(a,d){Aa(a,"controller");X(a)?D(b,a):b[a]=d};this.$get=["$injector","$window",function(c,d){return function(e,g){var f,
h,l;w(e)&&(f=e.match(a),h=f[1],l=f[3],e=b.hasOwnProperty(h)?b[h]:bc(g.$scope,h,!0)||bc(d,h,!0),Ra(e,h,!0));f=c.instantiate(e,g);if(l){if(!g||"object"!=typeof g.$scope)throw t("$controller")("noscp",h||e.name,l);g.$scope[l]=f}return f}}]}function Pd(){this.$get=["$window",function(b){return y(b.document)}]}function Qd(){this.$get=["$log",function(b){return function(a,c){b.error.apply(b,arguments)}}]}function sc(b){var a={},c,d,e;if(!b)return a;q(b.split("\n"),function(b){e=b.indexOf(":");c=K(ca(b.substr(0,
e)));d=ca(b.substr(e+1));c&&(a[c]=a[c]?a[c]+(", "+d):d)});return a}function tc(b){var a=X(b)?b:s;return function(c){a||(a=sc(b));return c?a[K(c)]||null:a}}function uc(b,a,c){if(P(c))return c(b,a);q(c,function(c){b=c(b,a)});return b}function Td(){var b=/^\s*(\[|\{[^\{])/,a=/[\}\]]\s*$/,c=/^\)\]\}',?\n/,d={"Content-Type":"application/json;charset=utf-8"},e=this.defaults={transformResponse:[function(d){w(d)&&(d=d.replace(c,""),b.test(d)&&a.test(d)&&(d=Wb(d)));return d}],transformRequest:[function(a){return X(a)&&
"[object File]"!==wa.call(a)&&"[object Blob]"!==wa.call(a)?qa(a):a}],headers:{common:{Accept:"application/json, text/plain, */*"},post:ba(d),put:ba(d),patch:ba(d)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN"},g=this.interceptors=[],f=this.responseInterceptors=[];this.$get=["$httpBackend","$browser","$cacheFactory","$rootScope","$q","$injector",function(a,b,c,d,n,p){function r(a){function c(a){var b=D({},a,{data:uc(a.data,a.headers,d.transformResponse)});return 200<=a.status&&300>a.status?
b:n.reject(b)}var d={method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse},g=function(a){function b(a){var c;q(a,function(b,d){P(b)&&(c=b(),null!=c?a[d]=c:delete a[d])})}var c=e.headers,d=D({},a.headers),g,f,c=D({},c.common,c[K(a.method)]);b(c);b(d);a:for(g in c){a=K(g);for(f in d)if(K(f)===a)continue a;d[g]=c[g]}return d}(a);D(d,a);d.headers=g;d.method=Fa(d.method);(a=Ib(d.url)?b.cookies()[d.xsrfCookieName||e.xsrfCookieName]:s)&&(g[d.xsrfHeaderName||e.xsrfHeaderName]=
a);var f=[function(a){g=a.headers;var b=uc(a.data,tc(g),a.transformRequest);E(a.data)&&q(g,function(a,b){"content-type"===K(b)&&delete g[b]});E(a.withCredentials)&&!E(e.withCredentials)&&(a.withCredentials=e.withCredentials);return z(a,b,g).then(c,c)},s],h=n.when(d);for(q(v,function(a){(a.request||a.requestError)&&f.unshift(a.request,a.requestError);(a.response||a.responseError)&&f.push(a.response,a.responseError)});f.length;){a=f.shift();var k=f.shift(),h=h.then(a,k)}h.success=function(a){h.then(function(b){a(b.data,
b.status,b.headers,d)});return h};h.error=function(a){h.then(null,function(b){a(b.data,b.status,b.headers,d)});return h};return h}function z(b,c,g){function f(a,b,c,e){v&&(200<=a&&300>a?v.put(s,[a,b,sc(c),e]):v.remove(s));l(b,a,c,e);d.$$phase||d.$apply()}function l(a,c,d,e){c=Math.max(c,0);(200<=c&&300>c?p.resolve:p.reject)({data:a,status:c,headers:tc(d),config:b,statusText:e})}function k(){var a=db(r.pendingRequests,b);-1!==a&&r.pendingRequests.splice(a,1)}var p=n.defer(),z=p.promise,v,q,s=u(b.url,
b.params);r.pendingRequests.push(b);z.then(k,k);(b.cache||e.cache)&&(!1!==b.cache&&"GET"==b.method)&&(v=X(b.cache)?b.cache:X(e.cache)?e.cache:F);if(v)if(q=v.get(s),B(q)){if(q.then)return q.then(k,k),q;M(q)?l(q[1],q[0],ba(q[2]),q[3]):l(q,200,{},"OK")}else v.put(s,z);E(q)&&a(b.method,s,c,f,g,b.timeout,b.withCredentials,b.responseType);return z}function u(a,b){if(!b)return a;var c=[];Sc(b,function(a,b){null===a||E(a)||(M(a)||(a=[a]),q(a,function(a){X(a)&&(a=qa(a));c.push(za(b)+"="+za(a))}))});0<c.length&&
(a+=(-1==a.indexOf("?")?"?":"&")+c.join("&"));return a}var F=c("$http"),v=[];q(g,function(a){v.unshift(w(a)?p.get(a):p.invoke(a))});q(f,function(a,b){var c=w(a)?p.get(a):p.invoke(a);v.splice(b,0,{response:function(a){return c(n.when(a))},responseError:function(a){return c(n.reject(a))}})});r.pendingRequests=[];(function(a){q(arguments,function(a){r[a]=function(b,c){return r(D(c||{},{method:a,url:b}))}})})("get","delete","head","jsonp");(function(a){q(arguments,function(a){r[a]=function(b,c,d){return r(D(d||
{},{method:a,url:b,data:c}))}})})("post","put");r.defaults=e;return r}]}function ue(b){if(8>=S&&(!b.match(/^(get|post|head|put|delete|options)$/i)||!O.XMLHttpRequest))return new O.ActiveXObject("Microsoft.XMLHTTP");if(O.XMLHttpRequest)return new O.XMLHttpRequest;throw t("$httpBackend")("noxhr");}function Ud(){this.$get=["$browser","$window","$document",function(b,a,c){return ve(b,ue,b.defer,a.angular.callbacks,c[0])}]}function ve(b,a,c,d,e){function g(a,b){var c=e.createElement("script"),d=function(){c.onreadystatechange=
c.onload=c.onerror=null;e.body.removeChild(c);b&&b()};c.type="text/javascript";c.src=a;S&&8>=S?c.onreadystatechange=function(){/loaded|complete/.test(c.readyState)&&d()}:c.onload=c.onerror=function(){d()};e.body.appendChild(c);return d}var f=-1;return function(e,l,k,m,n,p,r,z){function u(){v=f;A&&A();x&&x.abort()}function F(a,d,e,g,f){L&&c.cancel(L);A=x=null;0===d&&(d=e?200:"file"==sa(l).protocol?404:0);a(1223===d?204:d,e,g,f||"");b.$$completeOutstandingRequest(C)}var v;b.$$incOutstandingRequestCount();
l=l||b.url();if("jsonp"==K(e)){var J="_"+(d.counter++).toString(36);d[J]=function(a){d[J].data=a};var A=g(l.replace("JSON_CALLBACK","angular.callbacks."+J),function(){d[J].data?F(m,200,d[J].data):F(m,v||-2);d[J]=Ea.noop})}else{var x=a(e);x.open(e,l,!0);q(n,function(a,b){B(a)&&x.setRequestHeader(b,a)});x.onreadystatechange=function(){if(x&&4==x.readyState){var a=null,b=null;v!==f&&(a=x.getAllResponseHeaders(),b="response"in x?x.response:x.responseText);F(m,v||x.status,b,a,x.statusText||"")}};r&&(x.withCredentials=
!0);if(z)try{x.responseType=z}catch(s){if("json"!==z)throw s;}x.send(k||null)}if(0<p)var L=c(u,p);else p&&p.then&&p.then(u)}}function Rd(){var b="{{",a="}}";this.startSymbol=function(a){return a?(b=a,this):b};this.endSymbol=function(b){return b?(a=b,this):a};this.$get=["$parse","$exceptionHandler","$sce",function(c,d,e){function g(g,k,m){for(var n,p,r=0,z=[],u=g.length,F=!1,v=[];r<u;)-1!=(n=g.indexOf(b,r))&&-1!=(p=g.indexOf(a,n+f))?(r!=n&&z.push(g.substring(r,n)),z.push(r=c(F=g.substring(n+f,p))),
r.exp=F,r=p+h,F=!0):(r!=u&&z.push(g.substring(r)),r=u);(u=z.length)||(z.push(""),u=1);if(m&&1<z.length)throw vc("noconcat",g);if(!k||F)return v.length=u,r=function(a){try{for(var b=0,c=u,f;b<c;b++)"function"==typeof(f=z[b])&&(f=f(a),f=m?e.getTrusted(m,f):e.valueOf(f),null===f||E(f)?f="":"string"!=typeof f&&(f=qa(f))),v[b]=f;return v.join("")}catch(h){a=vc("interr",g,h.toString()),d(a)}},r.exp=g,r.parts=z,r}var f=b.length,h=a.length;g.startSymbol=function(){return b};g.endSymbol=function(){return a};
return g}]}function Sd(){this.$get=["$rootScope","$window","$q",function(b,a,c){function d(d,f,h,l){var k=a.setInterval,m=a.clearInterval,n=c.defer(),p=n.promise,r=0,z=B(l)&&!l;h=B(h)?h:0;p.then(null,null,d);p.$$intervalId=k(function(){n.notify(r++);0<h&&r>=h&&(n.resolve(r),m(p.$$intervalId),delete e[p.$$intervalId]);z||b.$apply()},f);e[p.$$intervalId]=n;return p}var e={};d.cancel=function(a){return a&&a.$$intervalId in e?(e[a.$$intervalId].reject("canceled"),clearInterval(a.$$intervalId),delete e[a.$$intervalId],
!0):!1};return d}]}function ad(){this.$get=function(){return{id:"en-us",NUMBER_FORMATS:{DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{minInt:1,minFrac:0,maxFrac:3,posPre:"",posSuf:"",negPre:"-",negSuf:"",gSize:3,lgSize:3},{minInt:1,minFrac:2,maxFrac:2,posPre:"\u00a4",posSuf:"",negPre:"(\u00a4",negSuf:")",gSize:3,lgSize:3}],CURRENCY_SYM:"$"},DATETIME_FORMATS:{MONTH:"January February March April May June July August September October November December".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),AMPMS:["AM","PM"],medium:"MMM d, y h:mm:ss a","short":"M/d/yy h:mm a",fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",mediumDate:"MMM d, y",shortDate:"M/d/yy",mediumTime:"h:mm:ss a",shortTime:"h:mm a"},pluralCat:function(b){return 1===b?"one":"other"}}}}function wc(b){b=b.split("/");for(var a=b.length;a--;)b[a]=wb(b[a]);return b.join("/")}function xc(b,a,c){b=sa(b,c);a.$$protocol=
b.protocol;a.$$host=b.hostname;a.$$port=Y(b.port)||we[b.protocol]||null}function yc(b,a,c){var d="/"!==b.charAt(0);d&&(b="/"+b);b=sa(b,c);a.$$path=decodeURIComponent(d&&"/"===b.pathname.charAt(0)?b.pathname.substring(1):b.pathname);a.$$search=Yb(b.search);a.$$hash=decodeURIComponent(b.hash);a.$$path&&"/"!=a.$$path.charAt(0)&&(a.$$path="/"+a.$$path)}function oa(b,a){if(0===a.indexOf(b))return a.substr(b.length)}function Ya(b){var a=b.indexOf("#");return-1==a?b:b.substr(0,a)}function Jb(b){return b.substr(0,
Ya(b).lastIndexOf("/")+1)}function zc(b,a){this.$$html5=!0;a=a||"";var c=Jb(b);xc(b,this,b);this.$$parse=function(a){var e=oa(c,a);if(!w(e))throw Kb("ipthprfx",a,c);yc(e,this,b);this.$$path||(this.$$path="/");this.$$compose()};this.$$compose=function(){var a=Zb(this.$$search),b=this.$$hash?"#"+wb(this.$$hash):"";this.$$url=wc(this.$$path)+(a?"?"+a:"")+b;this.$$absUrl=c+this.$$url.substr(1)};this.$$rewrite=function(d){var e;if((e=oa(b,d))!==s)return d=e,(e=oa(a,e))!==s?c+(oa("/",e)||e):b+d;if((e=oa(c,
d))!==s)return c+e;if(c==d+"/")return c}}function Lb(b,a){var c=Jb(b);xc(b,this,b);this.$$parse=function(d){var e=oa(b,d)||oa(c,d),e="#"==e.charAt(0)?oa(a,e):this.$$html5?e:"";if(!w(e))throw Kb("ihshprfx",d,a);yc(e,this,b);d=this.$$path;var g=/^\/?.*?:(\/.*)/;0===e.indexOf(b)&&(e=e.replace(b,""));g.exec(e)||(d=(e=g.exec(d))?e[1]:d);this.$$path=d;this.$$compose()};this.$$compose=function(){var c=Zb(this.$$search),e=this.$$hash?"#"+wb(this.$$hash):"";this.$$url=wc(this.$$path)+(c?"?"+c:"")+e;this.$$absUrl=
b+(this.$$url?a+this.$$url:"")};this.$$rewrite=function(a){if(Ya(b)==Ya(a))return a}}function Ac(b,a){this.$$html5=!0;Lb.apply(this,arguments);var c=Jb(b);this.$$rewrite=function(d){var e;if(b==Ya(d))return d;if(e=oa(c,d))return b+a+e;if(c===d+"/")return c}}function nb(b){return function(){return this[b]}}function Bc(b,a){return function(c){if(E(c))return this[b];this[b]=a(c);this.$$compose();return this}}function Vd(){var b="",a=!1;this.hashPrefix=function(a){return B(a)?(b=a,this):b};this.html5Mode=
function(b){return B(b)?(a=b,this):a};this.$get=["$rootScope","$browser","$sniffer","$rootElement",function(c,d,e,g){function f(a){c.$broadcast("$locationChangeSuccess",h.absUrl(),a)}var h,l=d.baseHref(),k=d.url();a?(l=k.substring(0,k.indexOf("/",k.indexOf("//")+2))+(l||"/"),e=e.history?zc:Ac):(l=Ya(k),e=Lb);h=new e(l,"#"+b);h.$$parse(h.$$rewrite(k));g.on("click",function(a){if(!a.ctrlKey&&!a.metaKey&&2!=a.which){for(var b=y(a.target);"a"!==K(b[0].nodeName);)if(b[0]===g[0]||!(b=b.parent())[0])return;
var e=b.prop("href");X(e)&&"[object SVGAnimatedString]"===e.toString()&&(e=sa(e.animVal).href);var f=h.$$rewrite(e);e&&(!b.attr("target")&&f&&!a.isDefaultPrevented())&&(a.preventDefault(),f!=d.url()&&(h.$$parse(f),c.$apply(),O.angular["ff-684208-preventDefault"]=!0))}});h.absUrl()!=k&&d.url(h.absUrl(),!0);d.onUrlChange(function(a){h.absUrl()!=a&&(c.$evalAsync(function(){var b=h.absUrl();h.$$parse(a);c.$broadcast("$locationChangeStart",a,b).defaultPrevented?(h.$$parse(b),d.url(b)):f(b)}),c.$$phase||
c.$digest())});var m=0;c.$watch(function(){var a=d.url(),b=h.$$replace;m&&a==h.absUrl()||(m++,c.$evalAsync(function(){c.$broadcast("$locationChangeStart",h.absUrl(),a).defaultPrevented?h.$$parse(a):(d.url(h.absUrl(),b),f(a))}));h.$$replace=!1;return m});return h}]}function Wd(){var b=!0,a=this;this.debugEnabled=function(a){return B(a)?(b=a,this):b};this.$get=["$window",function(c){function d(a){a instanceof Error&&(a.stack?a=a.message&&-1===a.stack.indexOf(a.message)?"Error: "+a.message+"\n"+a.stack:
a.stack:a.sourceURL&&(a=a.message+"\n"+a.sourceURL+":"+a.line));return a}function e(a){var b=c.console||{},e=b[a]||b.log||C;a=!1;try{a=!!e.apply}catch(l){}return a?function(){var a=[];q(arguments,function(b){a.push(d(b))});return e.apply(b,a)}:function(a,b){e(a,null==b?"":b)}}return{log:e("log"),info:e("info"),warn:e("warn"),error:e("error"),debug:function(){var c=e("debug");return function(){b&&c.apply(a,arguments)}}()}}]}function fa(b,a){if("constructor"===b)throw Ba("isecfld",a);return b}function Za(b,
a){if(b){if(b.constructor===b)throw Ba("isecfn",a);if(b.document&&b.location&&b.alert&&b.setInterval)throw Ba("isecwindow",a);if(b.children&&(b.nodeName||b.prop&&b.attr&&b.find))throw Ba("isecdom",a);}return b}function ob(b,a,c,d,e){e=e||{};a=a.split(".");for(var g,f=0;1<a.length;f++){g=fa(a.shift(),d);var h=b[g];h||(h={},b[g]=h);b=h;b.then&&e.unwrapPromises&&(ta(d),"$$v"in b||function(a){a.then(function(b){a.$$v=b})}(b),b.$$v===s&&(b.$$v={}),b=b.$$v)}g=fa(a.shift(),d);return b[g]=c}function Cc(b,
a,c,d,e,g,f){fa(b,g);fa(a,g);fa(c,g);fa(d,g);fa(e,g);return f.unwrapPromises?function(f,l){var k=l&&l.hasOwnProperty(b)?l:f,m;if(null==k)return k;(k=k[b])&&k.then&&(ta(g),"$$v"in k||(m=k,m.$$v=s,m.then(function(a){m.$$v=a})),k=k.$$v);if(!a)return k;if(null==k)return s;(k=k[a])&&k.then&&(ta(g),"$$v"in k||(m=k,m.$$v=s,m.then(function(a){m.$$v=a})),k=k.$$v);if(!c)return k;if(null==k)return s;(k=k[c])&&k.then&&(ta(g),"$$v"in k||(m=k,m.$$v=s,m.then(function(a){m.$$v=a})),k=k.$$v);if(!d)return k;if(null==
k)return s;(k=k[d])&&k.then&&(ta(g),"$$v"in k||(m=k,m.$$v=s,m.then(function(a){m.$$v=a})),k=k.$$v);if(!e)return k;if(null==k)return s;(k=k[e])&&k.then&&(ta(g),"$$v"in k||(m=k,m.$$v=s,m.then(function(a){m.$$v=a})),k=k.$$v);return k}:function(g,f){var k=f&&f.hasOwnProperty(b)?f:g;if(null==k)return k;k=k[b];if(!a)return k;if(null==k)return s;k=k[a];if(!c)return k;if(null==k)return s;k=k[c];if(!d)return k;if(null==k)return s;k=k[d];return e?null==k?s:k=k[e]:k}}function xe(b,a){fa(b,a);return function(a,
d){return null==a?s:(d&&d.hasOwnProperty(b)?d:a)[b]}}function ye(b,a,c){fa(b,c);fa(a,c);return function(c,e){if(null==c)return s;c=(e&&e.hasOwnProperty(b)?e:c)[b];return null==c?s:c[a]}}function Dc(b,a,c){if(Mb.hasOwnProperty(b))return Mb[b];var d=b.split("."),e=d.length,g;if(a.unwrapPromises||1!==e)if(a.unwrapPromises||2!==e)if(a.csp)g=6>e?Cc(d[0],d[1],d[2],d[3],d[4],c,a):function(b,g){var f=0,h;do h=Cc(d[f++],d[f++],d[f++],d[f++],d[f++],c,a)(b,g),g=s,b=h;while(f<e);return h};else{var f="var p;\n";
q(d,function(b,d){fa(b,c);f+="if(s == null) return undefined;\ns="+(d?"s":'((k&&k.hasOwnProperty("'+b+'"))?k:s)')+'["'+b+'"];\n'+(a.unwrapPromises?'if (s && s.then) {\n pw("'+c.replace(/(["\r\n])/g,"\\$1")+'");\n if (!("$$v" in s)) {\n p=s;\n p.$$v = undefined;\n p.then(function(v) {p.$$v=v;});\n}\n s=s.$$v\n}\n':"")});var f=f+"return s;",h=new Function("s","k","pw",f);h.toString=aa(f);g=a.unwrapPromises?function(a,b){return h(a,b,ta)}:h}else g=ye(d[0],d[1],c);else g=xe(d[0],c);"hasOwnProperty"!==
b&&(Mb[b]=g);return g}function Xd(){var b={},a={csp:!1,unwrapPromises:!1,logPromiseWarnings:!0};this.unwrapPromises=function(b){return B(b)?(a.unwrapPromises=!!b,this):a.unwrapPromises};this.logPromiseWarnings=function(b){return B(b)?(a.logPromiseWarnings=b,this):a.logPromiseWarnings};this.$get=["$filter","$sniffer","$log",function(c,d,e){a.csp=d.csp;ta=function(b){a.logPromiseWarnings&&!Ec.hasOwnProperty(b)&&(Ec[b]=!0,e.warn("[$parse] Promise found in the expression `"+b+"`. Automatic unwrapping of promises in Angular expressions is deprecated."))};
return function(d){var e;switch(typeof d){case "string":if(b.hasOwnProperty(d))return b[d];e=new Nb(a);e=(new $a(e,c,a)).parse(d,!1);"hasOwnProperty"!==d&&(b[d]=e);return e;case "function":return d;default:return C}}}]}function Zd(){this.$get=["$rootScope","$exceptionHandler",function(b,a){return ze(function(a){b.$evalAsync(a)},a)}]}function ze(b,a){function c(a){return a}function d(a){return f(a)}var e=function(){var f=[],k,m;return m={resolve:function(a){if(f){var c=f;f=s;k=g(a);c.length&&b(function(){for(var a,
b=0,d=c.length;b<d;b++)a=c[b],k.then(a[0],a[1],a[2])})}},reject:function(a){m.resolve(h(a))},notify:function(a){if(f){var c=f;f.length&&b(function(){for(var b,d=0,e=c.length;d<e;d++)b=c[d],b[2](a)})}},promise:{then:function(b,g,h){var m=e(),u=function(d){try{m.resolve((P(b)?b:c)(d))}catch(e){m.reject(e),a(e)}},F=function(b){try{m.resolve((P(g)?g:d)(b))}catch(c){m.reject(c),a(c)}},v=function(b){try{m.notify((P(h)?h:c)(b))}catch(d){a(d)}};f?f.push([u,F,v]):k.then(u,F,v);return m.promise},"catch":function(a){return this.then(null,
a)},"finally":function(a){function b(a,c){var d=e();c?d.resolve(a):d.reject(a);return d.promise}function d(e,g){var f=null;try{f=(a||c)()}catch(h){return b(h,!1)}return f&&P(f.then)?f.then(function(){return b(e,g)},function(a){return b(a,!1)}):b(e,g)}return this.then(function(a){return d(a,!0)},function(a){return d(a,!1)})}}}},g=function(a){return a&&P(a.then)?a:{then:function(c){var d=e();b(function(){d.resolve(c(a))});return d.promise}}},f=function(a){var b=e();b.reject(a);return b.promise},h=function(c){return{then:function(g,
f){var h=e();b(function(){try{h.resolve((P(f)?f:d)(c))}catch(b){h.reject(b),a(b)}});return h.promise}}};return{defer:e,reject:f,when:function(h,k,m,n){var p=e(),r,z=function(b){try{return(P(k)?k:c)(b)}catch(d){return a(d),f(d)}},u=function(b){try{return(P(m)?m:d)(b)}catch(c){return a(c),f(c)}},F=function(b){try{return(P(n)?n:c)(b)}catch(d){a(d)}};b(function(){g(h).then(function(a){r||(r=!0,p.resolve(g(a).then(z,u,F)))},function(a){r||(r=!0,p.resolve(u(a)))},function(a){r||p.notify(F(a))})});return p.promise},
all:function(a){var b=e(),c=0,d=M(a)?[]:{};q(a,function(a,e){c++;g(a).then(function(a){d.hasOwnProperty(e)||(d[e]=a,--c||b.resolve(d))},function(a){d.hasOwnProperty(e)||b.reject(a)})});0===c&&b.resolve(d);return b.promise}}}function fe(){this.$get=["$window","$timeout",function(b,a){var c=b.requestAnimationFrame||b.webkitRequestAnimationFrame||b.mozRequestAnimationFrame,d=b.cancelAnimationFrame||b.webkitCancelAnimationFrame||b.mozCancelAnimationFrame||b.webkitCancelRequestAnimationFrame,e=!!c,g=e?
function(a){var b=c(a);return function(){d(b)}}:function(b){var c=a(b,16.66,!1);return function(){a.cancel(c)}};g.supported=e;return g}]}function Yd(){var b=10,a=t("$rootScope"),c=null;this.digestTtl=function(a){arguments.length&&(b=a);return b};this.$get=["$injector","$exceptionHandler","$parse","$browser",function(d,e,g,f){function h(){this.$id=bb();this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null;this["this"]=this.$root=this;
this.$$destroyed=!1;this.$$asyncQueue=[];this.$$postDigestQueue=[];this.$$listeners={};this.$$listenerCount={};this.$$isolateBindings={}}function l(b){if(p.$$phase)throw a("inprog",p.$$phase);p.$$phase=b}function k(a,b){var c=g(a);Ra(c,b);return c}function m(a,b,c){do a.$$listenerCount[c]-=b,0===a.$$listenerCount[c]&&delete a.$$listenerCount[c];while(a=a.$parent)}function n(){}h.prototype={constructor:h,$new:function(a){a?(a=new h,a.$root=this.$root,a.$$asyncQueue=this.$$asyncQueue,a.$$postDigestQueue=
this.$$postDigestQueue):(a=function(){},a.prototype=this,a=new a,a.$id=bb());a["this"]=a;a.$$listeners={};a.$$listenerCount={};a.$parent=this;a.$$watchers=a.$$nextSibling=a.$$childHead=a.$$childTail=null;a.$$prevSibling=this.$$childTail;this.$$childHead?this.$$childTail=this.$$childTail.$$nextSibling=a:this.$$childHead=this.$$childTail=a;return a},$watch:function(a,b,d){var e=k(a,"watch"),g=this.$$watchers,f={fn:b,last:n,get:e,exp:a,eq:!!d};c=null;if(!P(b)){var h=k(b||C,"listener");f.fn=function(a,
b,c){h(c)}}if("string"==typeof a&&e.constant){var l=f.fn;f.fn=function(a,b,c){l.call(this,a,b,c);Oa(g,f)}}g||(g=this.$$watchers=[]);g.unshift(f);return function(){Oa(g,f);c=null}},$watchCollection:function(a,b){var c=this,d,e,f,h=1<b.length,l=0,k=g(a),m=[],n={},p=!0,q=0;return this.$watch(function(){d=k(c);var a,b;if(X(d))if(ab(d))for(e!==m&&(e=m,q=e.length=0,l++),a=d.length,q!==a&&(l++,e.length=q=a),b=0;b<a;b++)e[b]!==e[b]&&d[b]!==d[b]||e[b]===d[b]||(l++,e[b]=d[b]);else{e!==n&&(e=n={},q=0,l++);a=
0;for(b in d)d.hasOwnProperty(b)&&(a++,e.hasOwnProperty(b)?e[b]!==d[b]&&(l++,e[b]=d[b]):(q++,e[b]=d[b],l++));if(q>a)for(b in l++,e)e.hasOwnProperty(b)&&!d.hasOwnProperty(b)&&(q--,delete e[b])}else e!==d&&(e=d,l++);return l},function(){p?(p=!1,b(d,d,c)):b(d,f,c);if(h)if(X(d))if(ab(d)){f=Array(d.length);for(var a=0;a<d.length;a++)f[a]=d[a]}else for(a in f={},d)Fc.call(d,a)&&(f[a]=d[a]);else f=d})},$digest:function(){var d,g,f,h,k=this.$$asyncQueue,m=this.$$postDigestQueue,q,x,s=b,L,Q=[],y,H,R;l("$digest");
c=null;do{x=!1;for(L=this;k.length;){try{R=k.shift(),R.scope.$eval(R.expression)}catch(B){p.$$phase=null,e(B)}c=null}a:do{if(h=L.$$watchers)for(q=h.length;q--;)try{if(d=h[q])if((g=d.get(L))!==(f=d.last)&&!(d.eq?xa(g,f):"number"==typeof g&&"number"==typeof f&&isNaN(g)&&isNaN(f)))x=!0,c=d,d.last=d.eq?ba(g):g,d.fn(g,f===n?g:f,L),5>s&&(y=4-s,Q[y]||(Q[y]=[]),H=P(d.exp)?"fn: "+(d.exp.name||d.exp.toString()):d.exp,H+="; newVal: "+qa(g)+"; oldVal: "+qa(f),Q[y].push(H));else if(d===c){x=!1;break a}}catch(w){p.$$phase=
null,e(w)}if(!(h=L.$$childHead||L!==this&&L.$$nextSibling))for(;L!==this&&!(h=L.$$nextSibling);)L=L.$parent}while(L=h);if((x||k.length)&&!s--)throw p.$$phase=null,a("infdig",b,qa(Q));}while(x||k.length);for(p.$$phase=null;m.length;)try{m.shift()()}catch(T){e(T)}},$destroy:function(){if(!this.$$destroyed){var a=this.$parent;this.$broadcast("$destroy");this.$$destroyed=!0;this!==p&&(q(this.$$listenerCount,eb(null,m,this)),a.$$childHead==this&&(a.$$childHead=this.$$nextSibling),a.$$childTail==this&&
(a.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$parent=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=this.$root=null,this.$$listeners={},this.$$watchers=this.$$asyncQueue=this.$$postDigestQueue=[],this.$destroy=this.$digest=this.$apply=C,this.$on=this.$watch=function(){return C})}},$eval:function(a,b){return g(a)(this,b)},$evalAsync:function(a){p.$$phase||
p.$$asyncQueue.length||f.defer(function(){p.$$asyncQueue.length&&p.$digest()});this.$$asyncQueue.push({scope:this,expression:a})},$$postDigest:function(a){this.$$postDigestQueue.push(a)},$apply:function(a){try{return l("$apply"),this.$eval(a)}catch(b){e(b)}finally{p.$$phase=null;try{p.$digest()}catch(c){throw e(c),c;}}},$on:function(a,b){var c=this.$$listeners[a];c||(this.$$listeners[a]=c=[]);c.push(b);var d=this;do d.$$listenerCount[a]||(d.$$listenerCount[a]=0),d.$$listenerCount[a]++;while(d=d.$parent);
var e=this;return function(){c[db(c,b)]=null;m(e,1,a)}},$emit:function(a,b){var c=[],d,g=this,f=!1,h={name:a,targetScope:g,stopPropagation:function(){f=!0},preventDefault:function(){h.defaultPrevented=!0},defaultPrevented:!1},l=[h].concat(ya.call(arguments,1)),k,m;do{d=g.$$listeners[a]||c;h.currentScope=g;k=0;for(m=d.length;k<m;k++)if(d[k])try{d[k].apply(null,l)}catch(n){e(n)}else d.splice(k,1),k--,m--;if(f)break;g=g.$parent}while(g);return h},$broadcast:function(a,b){for(var c=this,d=this,g={name:a,
targetScope:this,preventDefault:function(){g.defaultPrevented=!0},defaultPrevented:!1},f=[g].concat(ya.call(arguments,1)),h,k;c=d;){g.currentScope=c;d=c.$$listeners[a]||[];h=0;for(k=d.length;h<k;h++)if(d[h])try{d[h].apply(null,f)}catch(l){e(l)}else d.splice(h,1),h--,k--;if(!(d=c.$$listenerCount[a]&&c.$$childHead||c!==this&&c.$$nextSibling))for(;c!==this&&!(d=c.$$nextSibling);)c=c.$parent}return g}};var p=new h;return p}]}function bd(){var b=/^\s*(https?|ftp|mailto|tel|file):/,a=/^\s*(https?|ftp|file):|data:image\//;
this.aHrefSanitizationWhitelist=function(a){return B(a)?(b=a,this):b};this.imgSrcSanitizationWhitelist=function(b){return B(b)?(a=b,this):a};this.$get=function(){return function(c,d){var e=d?a:b,g;if(!S||8<=S)if(g=sa(c).href,""!==g&&!g.match(e))return"unsafe:"+g;return c}}}function Ae(b){if("self"===b)return b;if(w(b)){if(-1<b.indexOf("***"))throw ua("iwcard",b);b=b.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08").replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*");return RegExp("^"+
b+"$")}if(cb(b))return RegExp("^"+b.source+"$");throw ua("imatcher");}function Gc(b){var a=[];B(b)&&q(b,function(b){a.push(Ae(b))});return a}function ae(){this.SCE_CONTEXTS=ga;var b=["self"],a=[];this.resourceUrlWhitelist=function(a){arguments.length&&(b=Gc(a));return b};this.resourceUrlBlacklist=function(b){arguments.length&&(a=Gc(b));return a};this.$get=["$injector",function(c){function d(a){var b=function(a){this.$$unwrapTrustedValue=function(){return a}};a&&(b.prototype=new a);b.prototype.valueOf=
function(){return this.$$unwrapTrustedValue()};b.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()};return b}var e=function(a){throw ua("unsafe");};c.has("$sanitize")&&(e=c.get("$sanitize"));var g=d(),f={};f[ga.HTML]=d(g);f[ga.CSS]=d(g);f[ga.URL]=d(g);f[ga.JS]=d(g);f[ga.RESOURCE_URL]=d(f[ga.URL]);return{trustAs:function(a,b){var c=f.hasOwnProperty(a)?f[a]:null;if(!c)throw ua("icontext",a,b);if(null===b||b===s||""===b)return b;if("string"!==typeof b)throw ua("itype",a);return new c(b)},
getTrusted:function(c,d){if(null===d||d===s||""===d)return d;var g=f.hasOwnProperty(c)?f[c]:null;if(g&&d instanceof g)return d.$$unwrapTrustedValue();if(c===ga.RESOURCE_URL){var g=sa(d.toString()),m,n,p=!1;m=0;for(n=b.length;m<n;m++)if("self"===b[m]?Ib(g):b[m].exec(g.href)){p=!0;break}if(p)for(m=0,n=a.length;m<n;m++)if("self"===a[m]?Ib(g):a[m].exec(g.href)){p=!1;break}if(p)return d;throw ua("insecurl",d.toString());}if(c===ga.HTML)return e(d);throw ua("unsafe");},valueOf:function(a){return a instanceof
g?a.$$unwrapTrustedValue():a}}}]}function $d(){var b=!0;this.enabled=function(a){arguments.length&&(b=!!a);return b};this.$get=["$parse","$sniffer","$sceDelegate",function(a,c,d){if(b&&c.msie&&8>c.msieDocumentMode)throw ua("iequirks");var e=ba(ga);e.isEnabled=function(){return b};e.trustAs=d.trustAs;e.getTrusted=d.getTrusted;e.valueOf=d.valueOf;b||(e.trustAs=e.getTrusted=function(a,b){return b},e.valueOf=Da);e.parseAs=function(b,c){var d=a(c);return d.literal&&d.constant?d:function(a,c){return e.getTrusted(b,
d(a,c))}};var g=e.parseAs,f=e.getTrusted,h=e.trustAs;q(ga,function(a,b){var c=K(b);e[Ta("parse_as_"+c)]=function(b){return g(a,b)};e[Ta("get_trusted_"+c)]=function(b){return f(a,b)};e[Ta("trust_as_"+c)]=function(b){return h(a,b)}});return e}]}function be(){this.$get=["$window","$document",function(b,a){var c={},d=Y((/android (\d+)/.exec(K((b.navigator||{}).userAgent))||[])[1]),e=/Boxee/i.test((b.navigator||{}).userAgent),g=a[0]||{},f=g.documentMode,h,l=/^(Moz|webkit|O|ms)(?=[A-Z])/,k=g.body&&g.body.style,
m=!1,n=!1;if(k){for(var p in k)if(m=l.exec(p)){h=m[0];h=h.substr(0,1).toUpperCase()+h.substr(1);break}h||(h="WebkitOpacity"in k&&"webkit");m=!!("transition"in k||h+"Transition"in k);n=!!("animation"in k||h+"Animation"in k);!d||m&&n||(m=w(g.body.style.webkitTransition),n=w(g.body.style.webkitAnimation))}return{history:!(!b.history||!b.history.pushState||4>d||e),hashchange:"onhashchange"in b&&(!f||7<f),hasEvent:function(a){if("input"==a&&9==S)return!1;if(E(c[a])){var b=g.createElement("div");c[a]="on"+
a in b}return c[a]},csp:Vb(),vendorPrefix:h,transitions:m,animations:n,android:d,msie:S,msieDocumentMode:f}}]}function de(){this.$get=["$rootScope","$browser","$q","$exceptionHandler",function(b,a,c,d){function e(e,h,l){var k=c.defer(),m=k.promise,n=B(l)&&!l;h=a.defer(function(){try{k.resolve(e())}catch(a){k.reject(a),d(a)}finally{delete g[m.$$timeoutId]}n||b.$apply()},h);m.$$timeoutId=h;g[h]=k;return m}var g={};e.cancel=function(b){return b&&b.$$timeoutId in g?(g[b.$$timeoutId].reject("canceled"),
delete g[b.$$timeoutId],a.defer.cancel(b.$$timeoutId)):!1};return e}]}function sa(b,a){var c=b;S&&(W.setAttribute("href",c),c=W.href);W.setAttribute("href",c);return{href:W.href,protocol:W.protocol?W.protocol.replace(/:$/,""):"",host:W.host,search:W.search?W.search.replace(/^\?/,""):"",hash:W.hash?W.hash.replace(/^#/,""):"",hostname:W.hostname,port:W.port,pathname:"/"===W.pathname.charAt(0)?W.pathname:"/"+W.pathname}}function Ib(b){b=w(b)?sa(b):b;return b.protocol===Hc.protocol&&b.host===Hc.host}
function ee(){this.$get=aa(O)}function gc(b){function a(d,e){if(X(d)){var g={};q(d,function(b,c){g[c]=a(c,b)});return g}return b.factory(d+c,e)}var c="Filter";this.register=a;this.$get=["$injector",function(a){return function(b){return a.get(b+c)}}];a("currency",Ic);a("date",Jc);a("filter",Be);a("json",Ce);a("limitTo",De);a("lowercase",Ee);a("number",Kc);a("orderBy",Lc);a("uppercase",Fe)}function Be(){return function(b,a,c){if(!M(b))return b;var d=typeof c,e=[];e.check=function(a){for(var b=0;b<e.length;b++)if(!e[b](a))return!1;
return!0};"function"!==d&&(c="boolean"===d&&c?function(a,b){return Ea.equals(a,b)}:function(a,b){if(a&&b&&"object"===typeof a&&"object"===typeof b){for(var d in a)if("$"!==d.charAt(0)&&Fc.call(a,d)&&c(a[d],b[d]))return!0;return!1}b=(""+b).toLowerCase();return-1<(""+a).toLowerCase().indexOf(b)});var g=function(a,b){if("string"==typeof b&&"!"===b.charAt(0))return!g(a,b.substr(1));switch(typeof a){case "boolean":case "number":case "string":return c(a,b);case "object":switch(typeof b){case "object":return c(a,
b);default:for(var d in a)if("$"!==d.charAt(0)&&g(a[d],b))return!0}return!1;case "array":for(d=0;d<a.length;d++)if(g(a[d],b))return!0;return!1;default:return!1}};switch(typeof a){case "boolean":case "number":case "string":a={$:a};case "object":for(var f in a)(function(b){"undefined"!=typeof a[b]&&e.push(function(c){return g("$"==b?c:c&&c[b],a[b])})})(f);break;case "function":e.push(a);break;default:return b}d=[];for(f=0;f<b.length;f++){var h=b[f];e.check(h)&&d.push(h)}return d}}function Ic(b){var a=
b.NUMBER_FORMATS;return function(b,d){E(d)&&(d=a.CURRENCY_SYM);return Mc(b,a.PATTERNS[1],a.GROUP_SEP,a.DECIMAL_SEP,2).replace(/\u00A4/g,d)}}function Kc(b){var a=b.NUMBER_FORMATS;return function(b,d){return Mc(b,a.PATTERNS[0],a.GROUP_SEP,a.DECIMAL_SEP,d)}}function Mc(b,a,c,d,e){if(null==b||!isFinite(b)||X(b))return"";var g=0>b;b=Math.abs(b);var f=b+"",h="",l=[],k=!1;if(-1!==f.indexOf("e")){var m=f.match(/([\d\.]+)e(-?)(\d+)/);m&&"-"==m[2]&&m[3]>e+1?f="0":(h=f,k=!0)}if(k)0<e&&(-1<b&&1>b)&&(h=b.toFixed(e));
else{f=(f.split(Nc)[1]||"").length;E(e)&&(e=Math.min(Math.max(a.minFrac,f),a.maxFrac));f=Math.pow(10,e);b=Math.round(b*f)/f;b=(""+b).split(Nc);f=b[0];b=b[1]||"";var m=0,n=a.lgSize,p=a.gSize;if(f.length>=n+p)for(m=f.length-n,k=0;k<m;k++)0===(m-k)%p&&0!==k&&(h+=c),h+=f.charAt(k);for(k=m;k<f.length;k++)0===(f.length-k)%n&&0!==k&&(h+=c),h+=f.charAt(k);for(;b.length<e;)b+="0";e&&"0"!==e&&(h+=d+b.substr(0,e))}l.push(g?a.negPre:a.posPre);l.push(h);l.push(g?a.negSuf:a.posSuf);return l.join("")}function Ob(b,
a,c){var d="";0>b&&(d="-",b=-b);for(b=""+b;b.length<a;)b="0"+b;c&&(b=b.substr(b.length-a));return d+b}function $(b,a,c,d){c=c||0;return function(e){e=e["get"+b]();if(0<c||e>-c)e+=c;0===e&&-12==c&&(e=12);return Ob(e,a,d)}}function pb(b,a){return function(c,d){var e=c["get"+b](),g=Fa(a?"SHORT"+b:b);return d[g][e]}}function Jc(b){function a(a){var b;if(b=a.match(c)){a=new Date(0);var g=0,f=0,h=b[8]?a.setUTCFullYear:a.setFullYear,l=b[8]?a.setUTCHours:a.setHours;b[9]&&(g=Y(b[9]+b[10]),f=Y(b[9]+b[11]));
h.call(a,Y(b[1]),Y(b[2])-1,Y(b[3]));g=Y(b[4]||0)-g;f=Y(b[5]||0)-f;h=Y(b[6]||0);b=Math.round(1E3*parseFloat("0."+(b[7]||0)));l.call(a,g,f,h,b)}return a}var c=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(c,e){var g="",f=[],h,l;e=e||"mediumDate";e=b.DATETIME_FORMATS[e]||e;w(c)&&(c=Ge.test(c)?Y(c):a(c));vb(c)&&(c=new Date(c));if(!Na(c))return c;for(;e;)(l=He.exec(e))?(f=f.concat(ya.call(l,1)),e=f.pop()):(f.push(e),e=null);q(f,function(a){h=
Ie[a];g+=h?h(c,b.DATETIME_FORMATS):a.replace(/(^'|'$)/g,"").replace(/''/g,"'")});return g}}function Ce(){return function(b){return qa(b,!0)}}function De(){return function(b,a){if(!M(b)&&!w(b))return b;a=Y(a);if(w(b))return a?0<=a?b.slice(0,a):b.slice(a,b.length):"";var c=[],d,e;a>b.length?a=b.length:a<-b.length&&(a=-b.length);0<a?(d=0,e=a):(d=b.length+a,e=b.length);for(;d<e;d++)c.push(b[d]);return c}}function Lc(b){return function(a,c,d){function e(a,b){return Qa(b)?function(b,c){return a(c,b)}:a}
function g(a,b){var c=typeof a,d=typeof b;return c==d?("string"==c&&(a=a.toLowerCase(),b=b.toLowerCase()),a===b?0:a<b?-1:1):c<d?-1:1}if(!M(a)||!c)return a;c=M(c)?c:[c];c=Uc(c,function(a){var c=!1,d=a||Da;if(w(a)){if("+"==a.charAt(0)||"-"==a.charAt(0))c="-"==a.charAt(0),a=a.substring(1);d=b(a);if(d.constant){var f=d();return e(function(a,b){return g(a[f],b[f])},c)}}return e(function(a,b){return g(d(a),d(b))},c)});for(var f=[],h=0;h<a.length;h++)f.push(a[h]);return f.sort(e(function(a,b){for(var d=
0;d<c.length;d++){var e=c[d](a,b);if(0!==e)return e}return 0},d))}}function va(b){P(b)&&(b={link:b});b.restrict=b.restrict||"AC";return aa(b)}function Oc(b,a,c,d){function e(a,c){c=c?"-"+fb(c,"-"):"";d.removeClass(b,(a?qb:rb)+c);d.addClass(b,(a?rb:qb)+c)}var g=this,f=b.parent().controller("form")||sb,h=0,l=g.$error={},k=[];g.$name=a.name||a.ngForm;g.$dirty=!1;g.$pristine=!0;g.$valid=!0;g.$invalid=!1;f.$addControl(g);b.addClass(La);e(!0);g.$addControl=function(a){Aa(a.$name,"input");k.push(a);a.$name&&
(g[a.$name]=a)};g.$removeControl=function(a){a.$name&&g[a.$name]===a&&delete g[a.$name];q(l,function(b,c){g.$setValidity(c,!0,a)});Oa(k,a)};g.$setValidity=function(a,b,c){var d=l[a];if(b)d&&(Oa(d,c),d.length||(h--,h||(e(b),g.$valid=!0,g.$invalid=!1),l[a]=!1,e(!0,a),f.$setValidity(a,!0,g)));else{h||e(b);if(d){if(-1!=db(d,c))return}else l[a]=d=[],h++,e(!1,a),f.$setValidity(a,!1,g);d.push(c);g.$valid=!1;g.$invalid=!0}};g.$setDirty=function(){d.removeClass(b,La);d.addClass(b,tb);g.$dirty=!0;g.$pristine=
!1;f.$setDirty()};g.$setPristine=function(){d.removeClass(b,tb);d.addClass(b,La);g.$dirty=!1;g.$pristine=!0;q(k,function(a){a.$setPristine()})}}function pa(b,a,c,d){b.$setValidity(a,c);return c?d:s}function Je(b,a,c){var d=c.prop("validity");X(d)&&b.$parsers.push(function(c){if(b.$error[a]||!(d.badInput||d.customError||d.typeMismatch)||d.valueMissing)return c;b.$setValidity(a,!1)})}function ub(b,a,c,d,e,g){var f=a.prop("validity");if(!e.android){var h=!1;a.on("compositionstart",function(a){h=!0});
a.on("compositionend",function(){h=!1;l()})}var l=function(){if(!h){var e=a.val();Qa(c.ngTrim||"T")&&(e=ca(e));if(d.$viewValue!==e||f&&""===e&&!f.valueMissing)b.$$phase?d.$setViewValue(e):b.$apply(function(){d.$setViewValue(e)})}};if(e.hasEvent("input"))a.on("input",l);else{var k,m=function(){k||(k=g.defer(function(){l();k=null}))};a.on("keydown",function(a){a=a.keyCode;91===a||(15<a&&19>a||37<=a&&40>=a)||m()});if(e.hasEvent("paste"))a.on("paste cut",m)}a.on("change",l);d.$render=function(){a.val(d.$isEmpty(d.$viewValue)?
"":d.$viewValue)};var n=c.ngPattern;n&&((e=n.match(/^\/(.*)\/([gim]*)$/))?(n=RegExp(e[1],e[2]),e=function(a){return pa(d,"pattern",d.$isEmpty(a)||n.test(a),a)}):e=function(c){var e=b.$eval(n);if(!e||!e.test)throw t("ngPattern")("noregexp",n,e,ha(a));return pa(d,"pattern",d.$isEmpty(c)||e.test(c),c)},d.$formatters.push(e),d.$parsers.push(e));if(c.ngMinlength){var p=Y(c.ngMinlength);e=function(a){return pa(d,"minlength",d.$isEmpty(a)||a.length>=p,a)};d.$parsers.push(e);d.$formatters.push(e)}if(c.ngMaxlength){var r=
Y(c.ngMaxlength);e=function(a){return pa(d,"maxlength",d.$isEmpty(a)||a.length<=r,a)};d.$parsers.push(e);d.$formatters.push(e)}}function Pb(b,a){b="ngClass"+b;return["$animate",function(c){function d(a,b){var c=[],d=0;a:for(;d<a.length;d++){for(var e=a[d],m=0;m<b.length;m++)if(e==b[m])continue a;c.push(e)}return c}function e(a){if(!M(a)){if(w(a))return a.split(" ");if(X(a)){var b=[];q(a,function(a,c){a&&b.push(c)});return b}}return a}return{restrict:"AC",link:function(g,f,h){function l(a,b){var c=
f.data("$classCounts")||{},d=[];q(a,function(a){if(0<b||c[a])c[a]=(c[a]||0)+b,c[a]===+(0<b)&&d.push(a)});f.data("$classCounts",c);return d.join(" ")}function k(b){if(!0===a||g.$index%2===a){var k=e(b||[]);if(!m){var r=l(k,1);h.$addClass(r)}else if(!xa(b,m)){var q=e(m),r=d(k,q),k=d(q,k),k=l(k,-1),r=l(r,1);0===r.length?c.removeClass(f,k):0===k.length?c.addClass(f,r):c.setClass(f,r,k)}}m=ba(b)}var m;g.$watch(h[b],k,!0);h.$observe("class",function(a){k(g.$eval(h[b]))});"ngClass"!==b&&g.$watch("$index",
function(c,d){var f=c&1;if(f!==d&1){var k=e(g.$eval(h[b]));f===a?(f=l(k,1),h.$addClass(f)):(f=l(k,-1),h.$removeClass(f))}})}}}]}var K=function(b){return w(b)?b.toLowerCase():b},Fc=Object.prototype.hasOwnProperty,Fa=function(b){return w(b)?b.toUpperCase():b},S,y,Ga,ya=[].slice,Ke=[].push,wa=Object.prototype.toString,Pa=t("ng"),Ea=O.angular||(O.angular={}),Sa,Ka,ka=["0","0","0"];S=Y((/msie (\d+)/.exec(K(navigator.userAgent))||[])[1]);isNaN(S)&&(S=Y((/trident\/.*; rv:(\d+)/.exec(K(navigator.userAgent))||
[])[1]));C.$inject=[];Da.$inject=[];var ca=function(){return String.prototype.trim?function(b){return w(b)?b.trim():b}:function(b){return w(b)?b.replace(/^\s\s*/,"").replace(/\s\s*$/,""):b}}();Ka=9>S?function(b){b=b.nodeName?b:b[0];return b.scopeName&&"HTML"!=b.scopeName?Fa(b.scopeName+":"+b.nodeName):b.nodeName}:function(b){return b.nodeName?b.nodeName:b[0].nodeName};var Xc=/[A-Z]/g,$c={full:"1.2.16",major:1,minor:2,dot:16,codeName:"badger-enumeration"},Ua=N.cache={},gb=N.expando="ng-"+(new Date).getTime(),
me=1,Pc=O.document.addEventListener?function(b,a,c){b.addEventListener(a,c,!1)}:function(b,a,c){b.attachEvent("on"+a,c)},Fb=O.document.removeEventListener?function(b,a,c){b.removeEventListener(a,c,!1)}:function(b,a,c){b.detachEvent("on"+a,c)};N._data=function(b){return this.cache[b[this.expando]]||{}};var he=/([\:\-\_]+(.))/g,ie=/^moz([A-Z])/,Bb=t("jqLite"),je=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,Cb=/<|&#?\w+;/,ke=/<([\w:]+)/,le=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ea=
{option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ea.optgroup=ea.option;ea.tbody=ea.tfoot=ea.colgroup=ea.caption=ea.thead;ea.th=ea.td;var Ja=N.prototype={ready:function(b){function a(){c||(c=!0,b())}var c=!1;"complete"===U.readyState?setTimeout(a):(this.on("DOMContentLoaded",a),N(O).on("load",a))},toString:function(){var b=
[];q(this,function(a){b.push(""+a)});return"["+b.join(", ")+"]"},eq:function(b){return 0<=b?y(this[b]):y(this[this.length+b])},length:0,push:Ke,sort:[].sort,splice:[].splice},kb={};q("multiple selected checked disabled readOnly required open".split(" "),function(b){kb[K(b)]=b});var nc={};q("input select option textarea button form details".split(" "),function(b){nc[Fa(b)]=!0});q({data:jc,inheritedData:jb,scope:function(b){return y(b).data("$scope")||jb(b.parentNode||b,["$isolateScope","$scope"])},
isolateScope:function(b){return y(b).data("$isolateScope")||y(b).data("$isolateScopeNoTemplate")},controller:kc,injector:function(b){return jb(b,"$injector")},removeAttr:function(b,a){b.removeAttribute(a)},hasClass:Gb,css:function(b,a,c){a=Ta(a);if(B(c))b.style[a]=c;else{var d;8>=S&&(d=b.currentStyle&&b.currentStyle[a],""===d&&(d="auto"));d=d||b.style[a];8>=S&&(d=""===d?s:d);return d}},attr:function(b,a,c){var d=K(a);if(kb[d])if(B(c))c?(b[a]=!0,b.setAttribute(a,d)):(b[a]=!1,b.removeAttribute(d));
else return b[a]||(b.attributes.getNamedItem(a)||C).specified?d:s;else if(B(c))b.setAttribute(a,c);else if(b.getAttribute)return b=b.getAttribute(a,2),null===b?s:b},prop:function(b,a,c){if(B(c))b[a]=c;else return b[a]},text:function(){function b(b,d){var e=a[b.nodeType];if(E(d))return e?b[e]:"";b[e]=d}var a=[];9>S?(a[1]="innerText",a[3]="nodeValue"):a[1]=a[3]="textContent";b.$dv="";return b}(),val:function(b,a){if(E(a)){if("SELECT"===Ka(b)&&b.multiple){var c=[];q(b.options,function(a){a.selected&&
c.push(a.value||a.text)});return 0===c.length?null:c}return b.value}b.value=a},html:function(b,a){if(E(a))return b.innerHTML;for(var c=0,d=b.childNodes;c<d.length;c++)Ha(d[c]);b.innerHTML=a},empty:lc},function(b,a){N.prototype[a]=function(a,d){var e,g;if(b!==lc&&(2==b.length&&b!==Gb&&b!==kc?a:d)===s){if(X(a)){for(e=0;e<this.length;e++)if(b===jc)b(this[e],a);else for(g in a)b(this[e],g,a[g]);return this}e=b.$dv;g=e===s?Math.min(this.length,1):this.length;for(var f=0;f<g;f++){var h=b(this[f],a,d);e=
e?e+h:h}return e}for(e=0;e<this.length;e++)b(this[e],a,d);return this}});q({removeData:hc,dealoc:Ha,on:function a(c,d,e,g){if(B(g))throw Bb("onargs");var f=la(c,"events"),h=la(c,"handle");f||la(c,"events",f={});h||la(c,"handle",h=ne(c,f));q(d.split(" "),function(d){var g=f[d];if(!g){if("mouseenter"==d||"mouseleave"==d){var m=U.body.contains||U.body.compareDocumentPosition?function(a,c){var d=9===a.nodeType?a.documentElement:a,e=c&&c.parentNode;return a===e||!!(e&&1===e.nodeType&&(d.contains?d.contains(e):
a.compareDocumentPosition&&a.compareDocumentPosition(e)&16))}:function(a,c){if(c)for(;c=c.parentNode;)if(c===a)return!0;return!1};f[d]=[];a(c,{mouseleave:"mouseout",mouseenter:"mouseover"}[d],function(a){var c=a.relatedTarget;c&&(c===this||m(this,c))||h(a,d)})}else Pc(c,d,h),f[d]=[];g=f[d]}g.push(e)})},off:ic,one:function(a,c,d){a=y(a);a.on(c,function g(){a.off(c,d);a.off(c,g)});a.on(c,d)},replaceWith:function(a,c){var d,e=a.parentNode;Ha(a);q(new N(c),function(c){d?e.insertBefore(c,d.nextSibling):
e.replaceChild(c,a);d=c})},children:function(a){var c=[];q(a.childNodes,function(a){1===a.nodeType&&c.push(a)});return c},contents:function(a){return a.contentDocument||a.childNodes||[]},append:function(a,c){q(new N(c),function(c){1!==a.nodeType&&11!==a.nodeType||a.appendChild(c)})},prepend:function(a,c){if(1===a.nodeType){var d=a.firstChild;q(new N(c),function(c){a.insertBefore(c,d)})}},wrap:function(a,c){c=y(c)[0];var d=a.parentNode;d&&d.replaceChild(c,a);c.appendChild(a)},remove:function(a){Ha(a);
var c=a.parentNode;c&&c.removeChild(a)},after:function(a,c){var d=a,e=a.parentNode;q(new N(c),function(a){e.insertBefore(a,d.nextSibling);d=a})},addClass:ib,removeClass:hb,toggleClass:function(a,c,d){c&&q(c.split(" "),function(c){var g=d;E(g)&&(g=!Gb(a,c));(g?ib:hb)(a,c)})},parent:function(a){return(a=a.parentNode)&&11!==a.nodeType?a:null},next:function(a){if(a.nextElementSibling)return a.nextElementSibling;for(a=a.nextSibling;null!=a&&1!==a.nodeType;)a=a.nextSibling;return a},find:function(a,c){return a.getElementsByTagName?
a.getElementsByTagName(c):[]},clone:Eb,triggerHandler:function(a,c,d){c=(la(a,"events")||{})[c];d=d||[];var e=[{preventDefault:C,stopPropagation:C}];q(c,function(c){c.apply(a,e.concat(d))})}},function(a,c){N.prototype[c]=function(c,e,g){for(var f,h=0;h<this.length;h++)E(f)?(f=a(this[h],c,e,g),B(f)&&(f=y(f))):Db(f,a(this[h],c,e,g));return B(f)?f:this};N.prototype.bind=N.prototype.on;N.prototype.unbind=N.prototype.off});Va.prototype={put:function(a,c){this[Ia(a)]=c},get:function(a){return this[Ia(a)]},
remove:function(a){var c=this[a=Ia(a)];delete this[a];return c}};var pe=/^function\s*[^\(]*\(\s*([^\)]*)\)/m,qe=/,/,re=/^\s*(_?)(\S+?)\1\s*$/,oe=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,Wa=t("$injector"),Le=t("$animate"),Ld=["$provide",function(a){this.$$selectors={};this.register=function(c,d){var e=c+"-animation";if(c&&"."!=c.charAt(0))throw Le("notcsel",c);this.$$selectors[c.substr(1)]=e;a.factory(e,d)};this.classNameFilter=function(a){1===arguments.length&&(this.$$classNameFilter=a instanceof RegExp?
a:null);return this.$$classNameFilter};this.$get=["$timeout","$$asyncCallback",function(a,d){return{enter:function(a,c,f,h){f?f.after(a):(c&&c[0]||(c=f.parent()),c.append(a));h&&d(h)},leave:function(a,c){a.remove();c&&d(c)},move:function(a,c,d,h){this.enter(a,c,d,h)},addClass:function(a,c,f){c=w(c)?c:M(c)?c.join(" "):"";q(a,function(a){ib(a,c)});f&&d(f)},removeClass:function(a,c,f){c=w(c)?c:M(c)?c.join(" "):"";q(a,function(a){hb(a,c)});f&&d(f)},setClass:function(a,c,f,h){q(a,function(a){ib(a,c);hb(a,
f)});h&&d(h)},enabled:C}}]}],ja=t("$compile");cc.$inject=["$provide","$$sanitizeUriProvider"];var te=/^(x[\:\-_]|data[\:\-_])/i,vc=t("$interpolate"),Me=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,we={http:80,https:443,ftp:21},Kb=t("$location");Ac.prototype=Lb.prototype=zc.prototype={$$html5:!1,$$replace:!1,absUrl:nb("$$absUrl"),url:function(a,c){if(E(a))return this.$$url;var d=Me.exec(a);d[1]&&this.path(decodeURIComponent(d[1]));(d[2]||d[1])&&this.search(d[3]||"");this.hash(d[5]||"",c);return this},protocol:nb("$$protocol"),
host:nb("$$host"),port:nb("$$port"),path:Bc("$$path",function(a){return"/"==a.charAt(0)?a:"/"+a}),search:function(a,c){switch(arguments.length){case 0:return this.$$search;case 1:if(w(a))this.$$search=Yb(a);else if(X(a))this.$$search=a;else throw Kb("isrcharg");break;default:E(c)||null===c?delete this.$$search[a]:this.$$search[a]=c}this.$$compose();return this},hash:Bc("$$hash",Da),replace:function(){this.$$replace=!0;return this}};var Ba=t("$parse"),Ec={},ta,Ma={"null":function(){return null},"true":function(){return!0},
"false":function(){return!1},undefined:C,"+":function(a,c,d,e){d=d(a,c);e=e(a,c);return B(d)?B(e)?d+e:d:B(e)?e:s},"-":function(a,c,d,e){d=d(a,c);e=e(a,c);return(B(d)?d:0)-(B(e)?e:0)},"*":function(a,c,d,e){return d(a,c)*e(a,c)},"/":function(a,c,d,e){return d(a,c)/e(a,c)},"%":function(a,c,d,e){return d(a,c)%e(a,c)},"^":function(a,c,d,e){return d(a,c)^e(a,c)},"=":C,"===":function(a,c,d,e){return d(a,c)===e(a,c)},"!==":function(a,c,d,e){return d(a,c)!==e(a,c)},"==":function(a,c,d,e){return d(a,c)==e(a,
c)},"!=":function(a,c,d,e){return d(a,c)!=e(a,c)},"<":function(a,c,d,e){return d(a,c)<e(a,c)},">":function(a,c,d,e){return d(a,c)>e(a,c)},"<=":function(a,c,d,e){return d(a,c)<=e(a,c)},">=":function(a,c,d,e){return d(a,c)>=e(a,c)},"&&":function(a,c,d,e){return d(a,c)&&e(a,c)},"||":function(a,c,d,e){return d(a,c)||e(a,c)},"&":function(a,c,d,e){return d(a,c)&e(a,c)},"|":function(a,c,d,e){return e(a,c)(a,c,d(a,c))},"!":function(a,c,d){return!d(a,c)}},Ne={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},
Nb=function(a){this.options=a};Nb.prototype={constructor:Nb,lex:function(a){this.text=a;this.index=0;this.ch=s;this.lastCh=":";this.tokens=[];var c;for(a=[];this.index<this.text.length;){this.ch=this.text.charAt(this.index);if(this.is("\"'"))this.readString(this.ch);else if(this.isNumber(this.ch)||this.is(".")&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(this.ch))this.readIdent(),this.was("{,")&&("{"===a[0]&&(c=this.tokens[this.tokens.length-1]))&&(c.json=-1===c.text.indexOf("."));
else if(this.is("(){}[].,;:?"))this.tokens.push({index:this.index,text:this.ch,json:this.was(":[,")&&this.is("{[")||this.is("}]:,")}),this.is("{[")&&a.unshift(this.ch),this.is("}]")&&a.shift(),this.index++;else if(this.isWhitespace(this.ch)){this.index++;continue}else{var d=this.ch+this.peek(),e=d+this.peek(2),g=Ma[this.ch],f=Ma[d],h=Ma[e];h?(this.tokens.push({index:this.index,text:e,fn:h}),this.index+=3):f?(this.tokens.push({index:this.index,text:d,fn:f}),this.index+=2):g?(this.tokens.push({index:this.index,
text:this.ch,fn:g,json:this.was("[,:")&&this.is("+-")}),this.index+=1):this.throwError("Unexpected next character ",this.index,this.index+1)}this.lastCh=this.ch}return this.tokens},is:function(a){return-1!==a.indexOf(this.ch)},was:function(a){return-1!==a.indexOf(this.lastCh)},peek:function(a){a=a||1;return this.index+a<this.text.length?this.text.charAt(this.index+a):!1},isNumber:function(a){return"0"<=a&&"9">=a},isWhitespace:function(a){return" "===a||"\r"===a||"\t"===a||"\n"===a||"\v"===a||"\u00a0"===
a},isIdent:function(a){return"a"<=a&&"z">=a||"A"<=a&&"Z">=a||"_"===a||"$"===a},isExpOperator:function(a){return"-"===a||"+"===a||this.isNumber(a)},throwError:function(a,c,d){d=d||this.index;c=B(c)?"s "+c+"-"+this.index+" ["+this.text.substring(c,d)+"]":" "+d;throw Ba("lexerr",a,c,this.text);},readNumber:function(){for(var a="",c=this.index;this.index<this.text.length;){var d=K(this.text.charAt(this.index));if("."==d||this.isNumber(d))a+=d;else{var e=this.peek();if("e"==d&&this.isExpOperator(e))a+=
d;else if(this.isExpOperator(d)&&e&&this.isNumber(e)&&"e"==a.charAt(a.length-1))a+=d;else if(!this.isExpOperator(d)||e&&this.isNumber(e)||"e"!=a.charAt(a.length-1))break;else this.throwError("Invalid exponent")}this.index++}a*=1;this.tokens.push({index:c,text:a,json:!0,fn:function(){return a}})},readIdent:function(){for(var a=this,c="",d=this.index,e,g,f,h;this.index<this.text.length;){h=this.text.charAt(this.index);if("."===h||this.isIdent(h)||this.isNumber(h))"."===h&&(e=this.index),c+=h;else break;
this.index++}if(e)for(g=this.index;g<this.text.length;){h=this.text.charAt(g);if("("===h){f=c.substr(e-d+1);c=c.substr(0,e-d);this.index=g;break}if(this.isWhitespace(h))g++;else break}d={index:d,text:c};if(Ma.hasOwnProperty(c))d.fn=Ma[c],d.json=Ma[c];else{var l=Dc(c,this.options,this.text);d.fn=D(function(a,c){return l(a,c)},{assign:function(d,e){return ob(d,c,e,a.text,a.options)}})}this.tokens.push(d);f&&(this.tokens.push({index:e,text:".",json:!1}),this.tokens.push({index:e+1,text:f,json:!1}))},
readString:function(a){var c=this.index;this.index++;for(var d="",e=a,g=!1;this.index<this.text.length;){var f=this.text.charAt(this.index),e=e+f;if(g)"u"===f?(f=this.text.substring(this.index+1,this.index+5),f.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+f+"]"),this.index+=4,d+=String.fromCharCode(parseInt(f,16))):d=(g=Ne[f])?d+g:d+f,g=!1;else if("\\"===f)g=!0;else{if(f===a){this.index++;this.tokens.push({index:c,text:e,string:d,json:!0,fn:function(){return d}});return}d+=
f}this.index++}this.throwError("Unterminated quote",c)}};var $a=function(a,c,d){this.lexer=a;this.$filter=c;this.options=d};$a.ZERO=D(function(){return 0},{constant:!0});$a.prototype={constructor:$a,parse:function(a,c){this.text=a;this.json=c;this.tokens=this.lexer.lex(a);c&&(this.assignment=this.logicalOR,this.functionCall=this.fieldAccess=this.objectIndex=this.filterChain=function(){this.throwError("is not valid json",{text:a,index:0})});var d=c?this.primary():this.statements();0!==this.tokens.length&&
this.throwError("is an unexpected token",this.tokens[0]);d.literal=!!d.literal;d.constant=!!d.constant;return d},primary:function(){var a;if(this.expect("("))a=this.filterChain(),this.consume(")");else if(this.expect("["))a=this.arrayDeclaration();else if(this.expect("{"))a=this.object();else{var c=this.expect();(a=c.fn)||this.throwError("not a primary expression",c);c.json&&(a.constant=!0,a.literal=!0)}for(var d;c=this.expect("(","[",".");)"("===c.text?(a=this.functionCall(a,d),d=null):"["===c.text?
(d=a,a=this.objectIndex(a)):"."===c.text?(d=a,a=this.fieldAccess(a)):this.throwError("IMPOSSIBLE");return a},throwError:function(a,c){throw Ba("syntax",c.text,a,c.index+1,this.text,this.text.substring(c.index));},peekToken:function(){if(0===this.tokens.length)throw Ba("ueoe",this.text);return this.tokens[0]},peek:function(a,c,d,e){if(0<this.tokens.length){var g=this.tokens[0],f=g.text;if(f===a||f===c||f===d||f===e||!(a||c||d||e))return g}return!1},expect:function(a,c,d,e){return(a=this.peek(a,c,d,
e))?(this.json&&!a.json&&this.throwError("is not valid json",a),this.tokens.shift(),a):!1},consume:function(a){this.expect(a)||this.throwError("is unexpected, expecting ["+a+"]",this.peek())},unaryFn:function(a,c){return D(function(d,e){return a(d,e,c)},{constant:c.constant})},ternaryFn:function(a,c,d){return D(function(e,g){return a(e,g)?c(e,g):d(e,g)},{constant:a.constant&&c.constant&&d.constant})},binaryFn:function(a,c,d){return D(function(e,g){return c(e,g,a,d)},{constant:a.constant&&d.constant})},
statements:function(){for(var a=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&a.push(this.filterChain()),!this.expect(";"))return 1===a.length?a[0]:function(c,d){for(var e,g=0;g<a.length;g++){var f=a[g];f&&(e=f(c,d))}return e}},filterChain:function(){for(var a=this.expression(),c;;)if(c=this.expect("|"))a=this.binaryFn(a,c.fn,this.filter());else return a},filter:function(){for(var a=this.expect(),c=this.$filter(a.text),d=[];;)if(a=this.expect(":"))d.push(this.expression());else{var e=
function(a,e,h){h=[h];for(var l=0;l<d.length;l++)h.push(d[l](a,e));return c.apply(a,h)};return function(){return e}}},expression:function(){return this.assignment()},assignment:function(){var a=this.ternary(),c,d;return(d=this.expect("="))?(a.assign||this.throwError("implies assignment but ["+this.text.substring(0,d.index)+"] can not be assigned to",d),c=this.ternary(),function(d,g){return a.assign(d,c(d,g),g)}):a},ternary:function(){var a=this.logicalOR(),c,d;if(this.expect("?")){c=this.ternary();
if(d=this.expect(":"))return this.ternaryFn(a,c,this.ternary());this.throwError("expected :",d)}else return a},logicalOR:function(){for(var a=this.logicalAND(),c;;)if(c=this.expect("||"))a=this.binaryFn(a,c.fn,this.logicalAND());else return a},logicalAND:function(){var a=this.equality(),c;if(c=this.expect("&&"))a=this.binaryFn(a,c.fn,this.logicalAND());return a},equality:function(){var a=this.relational(),c;if(c=this.expect("==","!=","===","!=="))a=this.binaryFn(a,c.fn,this.equality());return a},
relational:function(){var a=this.additive(),c;if(c=this.expect("<",">","<=",">="))a=this.binaryFn(a,c.fn,this.relational());return a},additive:function(){for(var a=this.multiplicative(),c;c=this.expect("+","-");)a=this.binaryFn(a,c.fn,this.multiplicative());return a},multiplicative:function(){for(var a=this.unary(),c;c=this.expect("*","/","%");)a=this.binaryFn(a,c.fn,this.unary());return a},unary:function(){var a;return this.expect("+")?this.primary():(a=this.expect("-"))?this.binaryFn($a.ZERO,a.fn,
this.unary()):(a=this.expect("!"))?this.unaryFn(a.fn,this.unary()):this.primary()},fieldAccess:function(a){var c=this,d=this.expect().text,e=Dc(d,this.options,this.text);return D(function(c,d,h){return e(h||a(c,d))},{assign:function(e,f,h){return ob(a(e,h),d,f,c.text,c.options)}})},objectIndex:function(a){var c=this,d=this.expression();this.consume("]");return D(function(e,g){var f=a(e,g),h=d(e,g),l;if(!f)return s;(f=Za(f[h],c.text))&&(f.then&&c.options.unwrapPromises)&&(l=f,"$$v"in f||(l.$$v=s,l.then(function(a){l.$$v=
a})),f=f.$$v);return f},{assign:function(e,g,f){var h=d(e,f);return Za(a(e,f),c.text)[h]=g}})},functionCall:function(a,c){var d=[];if(")"!==this.peekToken().text){do d.push(this.expression());while(this.expect(","))}this.consume(")");var e=this;return function(g,f){for(var h=[],l=c?c(g,f):g,k=0;k<d.length;k++)h.push(d[k](g,f));k=a(g,f,l)||C;Za(l,e.text);Za(k,e.text);h=k.apply?k.apply(l,h):k(h[0],h[1],h[2],h[3],h[4]);return Za(h,e.text)}},arrayDeclaration:function(){var a=[],c=!0;if("]"!==this.peekToken().text){do{if(this.peek("]"))break;
var d=this.expression();a.push(d);d.constant||(c=!1)}while(this.expect(","))}this.consume("]");return D(function(c,d){for(var f=[],h=0;h<a.length;h++)f.push(a[h](c,d));return f},{literal:!0,constant:c})},object:function(){var a=[],c=!0;if("}"!==this.peekToken().text){do{if(this.peek("}"))break;var d=this.expect(),d=d.string||d.text;this.consume(":");var e=this.expression();a.push({key:d,value:e});e.constant||(c=!1)}while(this.expect(","))}this.consume("}");return D(function(c,d){for(var e={},l=0;l<
a.length;l++){var k=a[l];e[k.key]=k.value(c,d)}return e},{literal:!0,constant:c})}};var Mb={},ua=t("$sce"),ga={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},W=U.createElement("a"),Hc=sa(O.location.href,!0);gc.$inject=["$provide"];Ic.$inject=["$locale"];Kc.$inject=["$locale"];var Nc=".",Ie={yyyy:$("FullYear",4),yy:$("FullYear",2,0,!0),y:$("FullYear",1),MMMM:pb("Month"),MMM:pb("Month",!0),MM:$("Month",2,1),M:$("Month",1,1),dd:$("Date",2),d:$("Date",1),HH:$("Hours",2),H:$("Hours",
1),hh:$("Hours",2,-12),h:$("Hours",1,-12),mm:$("Minutes",2),m:$("Minutes",1),ss:$("Seconds",2),s:$("Seconds",1),sss:$("Milliseconds",3),EEEE:pb("Day"),EEE:pb("Day",!0),a:function(a,c){return 12>a.getHours()?c.AMPMS[0]:c.AMPMS[1]},Z:function(a){a=-1*a.getTimezoneOffset();return a=(0<=a?"+":"")+(Ob(Math[0<a?"floor":"ceil"](a/60),2)+Ob(Math.abs(a%60),2))}},He=/((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,Ge=/^\-?\d+$/;Jc.$inject=["$locale"];var Ee=aa(K),Fe=aa(Fa);Lc.$inject=
["$parse"];var cd=aa({restrict:"E",compile:function(a,c){8>=S&&(c.href||c.name||c.$set("href",""),a.append(U.createComment("IE fix")));if(!c.href&&!c.xlinkHref&&!c.name)return function(a,c){var g="[object SVGAnimatedString]"===wa.call(c.prop("href"))?"xlink:href":"href";c.on("click",function(a){c.attr(g)||a.preventDefault()})}}}),zb={};q(kb,function(a,c){if("multiple"!=a){var d=na("ng-"+c);zb[d]=function(){return{priority:100,link:function(a,g,f){a.$watch(f[d],function(a){f.$set(c,!!a)})}}}}});q(["src",
"srcset","href"],function(a){var c=na("ng-"+a);zb[c]=function(){return{priority:99,link:function(d,e,g){var f=a,h=a;"href"===a&&"[object SVGAnimatedString]"===wa.call(e.prop("href"))&&(h="xlinkHref",g.$attr[h]="xlink:href",f=null);g.$observe(c,function(a){a&&(g.$set(h,a),S&&f&&e.prop(f,g[h]))})}}}});var sb={$addControl:C,$removeControl:C,$setValidity:C,$setDirty:C,$setPristine:C};Oc.$inject=["$element","$attrs","$scope","$animate"];var Qc=function(a){return["$timeout",function(c){return{name:"form",
restrict:a?"EAC":"E",controller:Oc,compile:function(){return{pre:function(a,e,g,f){if(!g.action){var h=function(a){a.preventDefault?a.preventDefault():a.returnValue=!1};Pc(e[0],"submit",h);e.on("$destroy",function(){c(function(){Fb(e[0],"submit",h)},0,!1)})}var l=e.parent().controller("form"),k=g.name||g.ngForm;k&&ob(a,k,f,k);if(l)e.on("$destroy",function(){l.$removeControl(f);k&&ob(a,k,s,k);D(f,sb)})}}}}}]},dd=Qc(),qd=Qc(!0),Oe=/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,
Pe=/^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9-]+(\.[a-z0-9-]+)*$/i,Qe=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/,Rc={text:ub,number:function(a,c,d,e,g,f){ub(a,c,d,e,g,f);e.$parsers.push(function(a){var c=e.$isEmpty(a);if(c||Qe.test(a))return e.$setValidity("number",!0),""===a?null:c?a:parseFloat(a);e.$setValidity("number",!1);return s});Je(e,"number",c);e.$formatters.push(function(a){return e.$isEmpty(a)?"":""+a});d.min&&(a=function(a){var c=parseFloat(d.min);return pa(e,"min",e.$isEmpty(a)||a>=c,a)},e.$parsers.push(a),
e.$formatters.push(a));d.max&&(a=function(a){var c=parseFloat(d.max);return pa(e,"max",e.$isEmpty(a)||a<=c,a)},e.$parsers.push(a),e.$formatters.push(a));e.$formatters.push(function(a){return pa(e,"number",e.$isEmpty(a)||vb(a),a)})},url:function(a,c,d,e,g,f){ub(a,c,d,e,g,f);a=function(a){return pa(e,"url",e.$isEmpty(a)||Oe.test(a),a)};e.$formatters.push(a);e.$parsers.push(a)},email:function(a,c,d,e,g,f){ub(a,c,d,e,g,f);a=function(a){return pa(e,"email",e.$isEmpty(a)||Pe.test(a),a)};e.$formatters.push(a);
e.$parsers.push(a)},radio:function(a,c,d,e){E(d.name)&&c.attr("name",bb());c.on("click",function(){c[0].checked&&a.$apply(function(){e.$setViewValue(d.value)})});e.$render=function(){c[0].checked=d.value==e.$viewValue};d.$observe("value",e.$render)},checkbox:function(a,c,d,e){var g=d.ngTrueValue,f=d.ngFalseValue;w(g)||(g=!0);w(f)||(f=!1);c.on("click",function(){a.$apply(function(){e.$setViewValue(c[0].checked)})});e.$render=function(){c[0].checked=e.$viewValue};e.$isEmpty=function(a){return a!==g};
e.$formatters.push(function(a){return a===g});e.$parsers.push(function(a){return a?g:f})},hidden:C,button:C,submit:C,reset:C,file:C},dc=["$browser","$sniffer",function(a,c){return{restrict:"E",require:"?ngModel",link:function(d,e,g,f){f&&(Rc[K(g.type)]||Rc.text)(d,e,g,f,c,a)}}}],rb="ng-valid",qb="ng-invalid",La="ng-pristine",tb="ng-dirty",Re=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate",function(a,c,d,e,g,f){function h(a,c){c=c?"-"+fb(c,"-"):"";f.removeClass(e,(a?qb:rb)+c);
f.addClass(e,(a?rb:qb)+c)}this.$modelValue=this.$viewValue=Number.NaN;this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=[];this.$pristine=!0;this.$dirty=!1;this.$valid=!0;this.$invalid=!1;this.$name=d.name;var l=g(d.ngModel),k=l.assign;if(!k)throw t("ngModel")("nonassign",d.ngModel,ha(e));this.$render=C;this.$isEmpty=function(a){return E(a)||""===a||null===a||a!==a};var m=e.inheritedData("$formController")||sb,n=0,p=this.$error={};e.addClass(La);h(!0);this.$setValidity=function(a,c){p[a]!==
!c&&(c?(p[a]&&n--,n||(h(!0),this.$valid=!0,this.$invalid=!1)):(h(!1),this.$invalid=!0,this.$valid=!1,n++),p[a]=!c,h(c,a),m.$setValidity(a,c,this))};this.$setPristine=function(){this.$dirty=!1;this.$pristine=!0;f.removeClass(e,tb);f.addClass(e,La)};this.$setViewValue=function(d){this.$viewValue=d;this.$pristine&&(this.$dirty=!0,this.$pristine=!1,f.removeClass(e,La),f.addClass(e,tb),m.$setDirty());q(this.$parsers,function(a){d=a(d)});this.$modelValue!==d&&(this.$modelValue=d,k(a,d),q(this.$viewChangeListeners,
function(a){try{a()}catch(d){c(d)}}))};var r=this;a.$watch(function(){var c=l(a);if(r.$modelValue!==c){var d=r.$formatters,e=d.length;for(r.$modelValue=c;e--;)c=d[e](c);r.$viewValue!==c&&(r.$viewValue=c,r.$render())}return c})}],Fd=function(){return{require:["ngModel","^?form"],controller:Re,link:function(a,c,d,e){var g=e[0],f=e[1]||sb;f.$addControl(g);a.$on("$destroy",function(){f.$removeControl(g)})}}},Hd=aa({require:"ngModel",link:function(a,c,d,e){e.$viewChangeListeners.push(function(){a.$eval(d.ngChange)})}}),
ec=function(){return{require:"?ngModel",link:function(a,c,d,e){if(e){d.required=!0;var g=function(a){if(d.required&&e.$isEmpty(a))e.$setValidity("required",!1);else return e.$setValidity("required",!0),a};e.$formatters.push(g);e.$parsers.unshift(g);d.$observe("required",function(){g(e.$viewValue)})}}}},Gd=function(){return{require:"ngModel",link:function(a,c,d,e){var g=(a=/\/(.*)\//.exec(d.ngList))&&RegExp(a[1])||d.ngList||",";e.$parsers.push(function(a){if(!E(a)){var c=[];a&&q(a.split(g),function(a){a&&
c.push(ca(a))});return c}});e.$formatters.push(function(a){return M(a)?a.join(", "):s});e.$isEmpty=function(a){return!a||!a.length}}}},Se=/^(true|false|\d+)$/,Id=function(){return{priority:100,compile:function(a,c){return Se.test(c.ngValue)?function(a,c,g){g.$set("value",a.$eval(g.ngValue))}:function(a,c,g){a.$watch(g.ngValue,function(a){g.$set("value",a)})}}}},id=va(function(a,c,d){c.addClass("ng-binding").data("$binding",d.ngBind);a.$watch(d.ngBind,function(a){c.text(a==s?"":a)})}),kd=["$interpolate",
function(a){return function(c,d,e){c=a(d.attr(e.$attr.ngBindTemplate));d.addClass("ng-binding").data("$binding",c);e.$observe("ngBindTemplate",function(a){d.text(a)})}}],jd=["$sce","$parse",function(a,c){return function(d,e,g){e.addClass("ng-binding").data("$binding",g.ngBindHtml);var f=c(g.ngBindHtml);d.$watch(function(){return(f(d)||"").toString()},function(c){e.html(a.getTrustedHtml(f(d))||"")})}}],ld=Pb("",!0),nd=Pb("Odd",0),md=Pb("Even",1),od=va({compile:function(a,c){c.$set("ngCloak",s);a.removeClass("ng-cloak")}}),
pd=[function(){return{scope:!0,controller:"@",priority:500}}],fc={};q("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(a){var c=na("ng-"+a);fc[c]=["$parse",function(d){return{compile:function(e,g){var f=d(g[c]);return function(c,d,e){d.on(K(a),function(a){c.$apply(function(){f(c,{$event:a})})})}}}}]});var sd=["$animate",function(a){return{transclude:"element",priority:600,terminal:!0,restrict:"A",
$$tlb:!0,link:function(c,d,e,g,f){var h,l,k;c.$watch(e.ngIf,function(g){Qa(g)?l||(l=c.$new(),f(l,function(c){c[c.length++]=U.createComment(" end ngIf: "+e.ngIf+" ");h={clone:c};a.enter(c,d.parent(),d)})):(k&&(k.remove(),k=null),l&&(l.$destroy(),l=null),h&&(k=yb(h.clone),a.leave(k,function(){k=null}),h=null))})}}}],td=["$http","$templateCache","$anchorScroll","$animate","$sce",function(a,c,d,e,g){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:Ea.noop,compile:function(f,
h){var l=h.ngInclude||h.src,k=h.onload||"",m=h.autoscroll;return function(f,h,q,s,u){var F=0,v,y,A,x=function(){y&&(y.remove(),y=null);v&&(v.$destroy(),v=null);A&&(e.leave(A,function(){y=null}),y=A,A=null)};f.$watch(g.parseAsResourceUrl(l),function(g){var l=function(){!B(m)||m&&!f.$eval(m)||d()},q=++F;g?(a.get(g,{cache:c}).success(function(a){if(q===F){var c=f.$new();s.template=a;a=u(c,function(a){x();e.enter(a,null,h,l)});v=c;A=a;v.$emit("$includeContentLoaded");f.$eval(k)}}).error(function(){q===
F&&x()}),f.$emit("$includeContentRequested")):(x(),s.template=null)})}}}}],Jd=["$compile",function(a){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(c,d,e,g){d.html(g.template);a(d.contents())(c)}}}],ud=va({priority:450,compile:function(){return{pre:function(a,c,d){a.$eval(d.ngInit)}}}}),vd=va({terminal:!0,priority:1E3}),wd=["$locale","$interpolate",function(a,c){var d=/{}/g;return{restrict:"EA",link:function(e,g,f){var h=f.count,l=f.$attr.when&&g.attr(f.$attr.when),k=f.offset||
0,m=e.$eval(l)||{},n={},p=c.startSymbol(),r=c.endSymbol(),s=/^when(Minus)?(.+)$/;q(f,function(a,c){s.test(c)&&(m[K(c.replace("when","").replace("Minus","-"))]=g.attr(f.$attr[c]))});q(m,function(a,e){n[e]=c(a.replace(d,p+h+"-"+k+r))});e.$watch(function(){var c=parseFloat(e.$eval(h));if(isNaN(c))return"";c in m||(c=a.pluralCat(c-k));return n[c](e,g,!0)},function(a){g.text(a)})}}}],xd=["$parse","$animate",function(a,c){var d=t("ngRepeat");return{transclude:"element",priority:1E3,terminal:!0,$$tlb:!0,
link:function(e,g,f,h,l){var k=f.ngRepeat,m=k.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/),n,p,r,s,u,F,v={$id:Ia};if(!m)throw d("iexp",k);f=m[1];h=m[2];(m=m[3])?(n=a(m),p=function(a,c,d){F&&(v[F]=a);v[u]=c;v.$index=d;return n(e,v)}):(r=function(a,c){return Ia(c)},s=function(a){return a});m=f.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);if(!m)throw d("iidexp",f);u=m[3]||m[1];F=m[2];var B={};e.$watchCollection(h,function(a){var f,h,m=g[0],n,v={},H,R,w,C,T,t,
E=[];if(ab(a))T=a,n=p||r;else{n=p||s;T=[];for(w in a)a.hasOwnProperty(w)&&"$"!=w.charAt(0)&&T.push(w);T.sort()}H=T.length;h=E.length=T.length;for(f=0;f<h;f++)if(w=a===T?f:T[f],C=a[w],C=n(w,C,f),Aa(C,"`track by` id"),B.hasOwnProperty(C))t=B[C],delete B[C],v[C]=t,E[f]=t;else{if(v.hasOwnProperty(C))throw q(E,function(a){a&&a.scope&&(B[a.id]=a)}),d("dupes",k,C);E[f]={id:C};v[C]=!1}for(w in B)B.hasOwnProperty(w)&&(t=B[w],f=yb(t.clone),c.leave(f),q(f,function(a){a.$$NG_REMOVED=!0}),t.scope.$destroy());
f=0;for(h=T.length;f<h;f++){w=a===T?f:T[f];C=a[w];t=E[f];E[f-1]&&(m=E[f-1].clone[E[f-1].clone.length-1]);if(t.scope){R=t.scope;n=m;do n=n.nextSibling;while(n&&n.$$NG_REMOVED);t.clone[0]!=n&&c.move(yb(t.clone),null,y(m));m=t.clone[t.clone.length-1]}else R=e.$new();R[u]=C;F&&(R[F]=w);R.$index=f;R.$first=0===f;R.$last=f===H-1;R.$middle=!(R.$first||R.$last);R.$odd=!(R.$even=0===(f&1));t.scope||l(R,function(a){a[a.length++]=U.createComment(" end ngRepeat: "+k+" ");c.enter(a,null,y(m));m=a;t.scope=R;t.clone=
a;v[t.id]=t})}B=v})}}}],yd=["$animate",function(a){return function(c,d,e){c.$watch(e.ngShow,function(c){a[Qa(c)?"removeClass":"addClass"](d,"ng-hide")})}}],rd=["$animate",function(a){return function(c,d,e){c.$watch(e.ngHide,function(c){a[Qa(c)?"addClass":"removeClass"](d,"ng-hide")})}}],zd=va(function(a,c,d){a.$watch(d.ngStyle,function(a,d){d&&a!==d&&q(d,function(a,d){c.css(d,"")});a&&c.css(a)},!0)}),Ad=["$animate",function(a){return{restrict:"EA",require:"ngSwitch",controller:["$scope",function(){this.cases=
{}}],link:function(c,d,e,g){var f,h,l,k=[];c.$watch(e.ngSwitch||e.on,function(d){var n,p=k.length;if(0<p){if(l){for(n=0;n<p;n++)l[n].remove();l=null}l=[];for(n=0;n<p;n++){var r=h[n];k[n].$destroy();l[n]=r;a.leave(r,function(){l.splice(n,1);0===l.length&&(l=null)})}}h=[];k=[];if(f=g.cases["!"+d]||g.cases["?"])c.$eval(e.change),q(f,function(d){var e=c.$new();k.push(e);d.transclude(e,function(c){var e=d.element;h.push(c);a.enter(c,e.parent(),e)})})})}}}],Bd=va({transclude:"element",priority:800,require:"^ngSwitch",
link:function(a,c,d,e,g){e.cases["!"+d.ngSwitchWhen]=e.cases["!"+d.ngSwitchWhen]||[];e.cases["!"+d.ngSwitchWhen].push({transclude:g,element:c})}}),Cd=va({transclude:"element",priority:800,require:"^ngSwitch",link:function(a,c,d,e,g){e.cases["?"]=e.cases["?"]||[];e.cases["?"].push({transclude:g,element:c})}}),Ed=va({link:function(a,c,d,e,g){if(!g)throw t("ngTransclude")("orphan",ha(c));g(function(a){c.empty();c.append(a)})}}),ed=["$templateCache",function(a){return{restrict:"E",terminal:!0,compile:function(c,
d){"text/ng-template"==d.type&&a.put(d.id,c[0].text)}}}],Te=t("ngOptions"),Dd=aa({terminal:!0}),fd=["$compile","$parse",function(a,c){var d=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,e={$setViewValue:C};return{restrict:"E",require:["select","?ngModel"],controller:["$element","$scope","$attrs",function(a,c,d){var l=this,k={},m=e,n;l.databound=
d.ngModel;l.init=function(a,c,d){m=a;n=d};l.addOption=function(c){Aa(c,'"option value"');k[c]=!0;m.$viewValue==c&&(a.val(c),n.parent()&&n.remove())};l.removeOption=function(a){this.hasOption(a)&&(delete k[a],m.$viewValue==a&&this.renderUnknownOption(a))};l.renderUnknownOption=function(c){c="? "+Ia(c)+" ?";n.val(c);a.prepend(n);a.val(c);n.prop("selected",!0)};l.hasOption=function(a){return k.hasOwnProperty(a)};c.$on("$destroy",function(){l.renderUnknownOption=C})}],link:function(e,f,h,l){function k(a,
c,d,e){d.$render=function(){var a=d.$viewValue;e.hasOption(a)?(A.parent()&&A.remove(),c.val(a),""===a&&w.prop("selected",!0)):E(a)&&w?c.val(""):e.renderUnknownOption(a)};c.on("change",function(){a.$apply(function(){A.parent()&&A.remove();d.$setViewValue(c.val())})})}function m(a,c,d){var e;d.$render=function(){var a=new Va(d.$viewValue);q(c.find("option"),function(c){c.selected=B(a.get(c.value))})};a.$watch(function(){xa(e,d.$viewValue)||(e=ba(d.$viewValue),d.$render())});c.on("change",function(){a.$apply(function(){var a=
[];q(c.find("option"),function(c){c.selected&&a.push(c.value)});d.$setViewValue(a)})})}function n(e,f,g){function h(){var a={"":[]},c=[""],d,k,s,t,z;t=g.$modelValue;z=y(e)||[];var E=n?Qb(z):z,F,I,A;I={};s=!1;var D,H;if(r)if(w&&M(t))for(s=new Va([]),A=0;A<t.length;A++)I[m]=t[A],s.put(w(e,I),t[A]);else s=new Va(t);for(A=0;F=E.length,A<F;A++){k=A;if(n){k=E[A];if("$"===k.charAt(0))continue;I[n]=k}I[m]=z[k];d=p(e,I)||"";(k=a[d])||(k=a[d]=[],c.push(d));r?d=B(s.remove(w?w(e,I):q(e,I))):(w?(d={},d[m]=t,d=
w(e,d)===w(e,I)):d=t===q(e,I),s=s||d);D=l(e,I);D=B(D)?D:"";k.push({id:w?w(e,I):n?E[A]:A,label:D,selected:d})}r||(u||null===t?a[""].unshift({id:"",label:"",selected:!s}):s||a[""].unshift({id:"?",label:"",selected:!0}));I=0;for(E=c.length;I<E;I++){d=c[I];k=a[d];x.length<=I?(t={element:C.clone().attr("label",d),label:k.label},z=[t],x.push(z),f.append(t.element)):(z=x[I],t=z[0],t.label!=d&&t.element.attr("label",t.label=d));D=null;A=0;for(F=k.length;A<F;A++)s=k[A],(d=z[A+1])?(D=d.element,d.label!==s.label&&
D.text(d.label=s.label),d.id!==s.id&&D.val(d.id=s.id),d.selected!==s.selected&&D.prop("selected",d.selected=s.selected)):(""===s.id&&u?H=u:(H=v.clone()).val(s.id).attr("selected",s.selected).text(s.label),z.push({element:H,label:s.label,id:s.id,selected:s.selected}),D?D.after(H):t.element.append(H),D=H);for(A++;z.length>A;)z.pop().element.remove()}for(;x.length>I;)x.pop()[0].element.remove()}var k;if(!(k=t.match(d)))throw Te("iexp",t,ha(f));var l=c(k[2]||k[1]),m=k[4]||k[6],n=k[5],p=c(k[3]||""),q=
c(k[2]?k[1]:m),y=c(k[7]),w=k[8]?c(k[8]):null,x=[[{element:f,label:""}]];u&&(a(u)(e),u.removeClass("ng-scope"),u.remove());f.empty();f.on("change",function(){e.$apply(function(){var a,c=y(e)||[],d={},h,k,l,p,t,v,u;if(r)for(k=[],p=0,v=x.length;p<v;p++)for(a=x[p],l=1,t=a.length;l<t;l++){if((h=a[l].element)[0].selected){h=h.val();n&&(d[n]=h);if(w)for(u=0;u<c.length&&(d[m]=c[u],w(e,d)!=h);u++);else d[m]=c[h];k.push(q(e,d))}}else{h=f.val();if("?"==h)k=s;else if(""===h)k=null;else if(w)for(u=0;u<c.length;u++){if(d[m]=
c[u],w(e,d)==h){k=q(e,d);break}}else d[m]=c[h],n&&(d[n]=h),k=q(e,d);1<x[0].length&&x[0][1].id!==h&&(x[0][1].selected=!1)}g.$setViewValue(k)})});g.$render=h;e.$watch(h)}if(l[1]){var p=l[0];l=l[1];var r=h.multiple,t=h.ngOptions,u=!1,w,v=y(U.createElement("option")),C=y(U.createElement("optgroup")),A=v.clone();h=0;for(var x=f.children(),D=x.length;h<D;h++)if(""===x[h].value){w=u=x.eq(h);break}p.init(l,u,A);r&&(l.$isEmpty=function(a){return!a||0===a.length});t?n(e,f,l):r?m(e,f,l):k(e,f,l,p)}}}}],hd=["$interpolate",
function(a){var c={addOption:C,removeOption:C};return{restrict:"E",priority:100,compile:function(d,e){if(E(e.value)){var g=a(d.text(),!0);g||e.$set("value",d.text())}return function(a,d,e){var k=d.parent(),m=k.data("$selectController")||k.parent().data("$selectController");m&&m.databound?d.prop("selected",!1):m=c;g?a.$watch(g,function(a,c){e.$set("value",a);a!==c&&m.removeOption(c);m.addOption(a)}):m.addOption(e.value);d.on("$destroy",function(){m.removeOption(e.value)})}}}}],gd=aa({restrict:"E",
terminal:!0});O.angular.bootstrap?console.log("WARNING: Tried to load angular more than once."):((Ga=O.jQuery)?(y=Ga,D(Ga.fn,{scope:Ja.scope,isolateScope:Ja.isolateScope,controller:Ja.controller,injector:Ja.injector,inheritedData:Ja.inheritedData}),Ab("remove",!0,!0,!1),Ab("empty",!1,!1,!1),Ab("html",!1,!1,!0)):y=N,Ea.element=y,Zc(Ea),y(U).ready(function(){Wc(U,$b)}))})(window,document);!angular.$$csp()&&angular.element(document).find("head").prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}</style>');


},{}],4:[function(require,module,exports){
require("./angular/angular.min.js");
require("angular-animate");
require("./libs/ui-bootstrap-tpls-0.11.2.min.js");
require("./libs/angular-translate.js");
require("./libs/angular-translate-loader-static-files.js");
require("./libs/promise-tracker.js");
require("./libs/promise-tracker-http-interceptor.js");
require("./multiselect/multiselect.js");
require("./navigation-blocker/navigation-blocker.js");
require("./language-changer/language-changer.js");
require("./tabs/form-tabs.js");
require("./utils/utils.js");
require("./error-mapper/error-mapper.js");
require("./angular-elastic/elastic.js");
require("./order-object-by/ng-order-object-by.js");
require("./notification/notification.js");
require("./libs/ui-handsontable.js");
require("./libs/numeral.de-de.js");
require("./angular-app.js");
},{"./angular-app.js":1,"./angular-elastic/elastic.js":2,"./angular/angular.min.js":3,"./error-mapper/error-mapper.js":5,"./language-changer/language-changer.js":6,"./libs/angular-translate-loader-static-files.js":7,"./libs/angular-translate.js":8,"./libs/numeral.de-de.js":9,"./libs/promise-tracker-http-interceptor.js":10,"./libs/promise-tracker.js":11,"./libs/ui-bootstrap-tpls-0.11.2.min.js":12,"./libs/ui-handsontable.js":13,"./multiselect/multiselect.js":14,"./navigation-blocker/navigation-blocker.js":15,"./notification/notification.js":16,"./order-object-by/ng-order-object-by.js":17,"./tabs/form-tabs.js":18,"./utils/utils.js":19,"angular-animate":20}],5:[function(require,module,exports){
/**
 * Created by argoaava on 13.05.14.
 */

angular.module('ui.errorMapper', [])
    .service('errorMapperService', function() {
        this.errorMappings = {
            "required" : "This is a required field",
            "pattern_decimal" : "Please provide a number greater than 0",
            "pattern_integer" : "Please provide a whole number greater than 0",
            "pattern_telephone" : "Please enter a valid telephone number (at least 7 digits)",
            "pattern_email" : "Please enter a valid email address",
            "pattern_url" : "Please enter a valid URL",
            "pattern_longitude" : "Please enter number between -180 and 180 ",
            "pattern_latitude" : "Please enter number between -90 and 90"};

        this.getErrorMappings = function() {
            return this.errorMappings;
        }

        this.addErrorMapping = function(key, message) {
            this.errorMappings[key] = message;
        }

        this.setErrorMappings = function(errorMappings) {
            this.errorMappings = errorMappings;
        }
    })
    .controller("ErrorController", function ($scope, errorMapperService) {

        $scope.errorMappings = errorMapperService.getErrorMappings();
        $scope.showCurrentError = false;

        $scope.getErrorMessage = function(errorCode) {
            return $scope.errorMappings[errorCode];
        };

        $scope.getController = function(attributes) {
            if (!attributes.watchView) {
                return null;
            }
            var tokens = attributes.watchView.split(".");
            var result = $scope;
            while(tokens.length) {
                result = result[tokens.shift()];
                if (!result) {
                    return null;
                }
            }
            return result;
        };

        $scope.parseErrors = function(ctrl, attributes) {
            var fieldNameIdentifier = !attributes.watchView? attributes.errorMapper : attributes.watchView;
            var nameTokens = fieldNameIdentifier.split('.');
            var name = nameTokens[1];

            var fieldController = !ctrl[name]? $scope.getController(attributes) : ctrl[name];
            if (!fieldController) {
                if (!attributes.radioButtonValues) {
                    throw Error("input field controller not found for " + attributes.errorMapper);
                } else {
                    var radioButtonValues = JSON.parse(attributes.radioButtonValues);
                    $scope.showCurrentError = !radioButtonValues.value && $scope.submitted && radioButtonValues.required;
                    $scope.currentErrorCode = 'required';
                    return;
                }
            }

            var controllerErrors = fieldController.$error;
            if ( !attributes.errorsToShow) return;
            var errorsToShowAsArray = JSON.parse(attributes.errorsToShow);

            for (var i = 0; i < errorsToShowAsArray.length; i++) {
                var splitErrorString = errorsToShowAsArray[i].split('_');
                var strippedErrorString = splitErrorString[0];
                if (controllerErrors[strippedErrorString]) {
                    $scope.showCurrentError = $scope.showError(fieldController, strippedErrorString);
                    $scope.currentErrorCode = errorsToShowAsArray[i];
                    break;
                } else {
                    $scope.showCurrentError = false;
                }
            }
        }

        $scope.showError = function(modelController, errorCode) {
            return ($scope.submitted || modelController.$dirty) && modelController.$error[errorCode] && modelController.$invalid;
        };
    })

    // Error mapper directive to simplify showing errors for input fields and get rid of some
    // boilerplate code.
    //
    // Usage:
    //
    // <input name="Money" ng-model="instance.MMRArticle17Questionnaire.Table1.Money" type="text"
    //      ng-pattern="decimalNumberPattern" required/>
    // <div class="invalid-msg" td-error-mapper watch-elements='["Table1.OtherDescription"]'
    //      watch-view="Form.InputName" errors-to-show='["required", "pattern_decimal"]'></div>
    // ...
    // Where <div> with 'td-error-mapper' attribute is used as error div and all functionality is applied.
    //
    // Configuration parameters:
    // td-error-mapper - identifier for error mapper and scope parameter watcher e.g td-error-mapper="userName". Whenever
    //                   $scope.userName changes it is picked up by mapper and correct error is shown when identified.
    // watch-view      - Used to watch view value of the field. Useful for watching number fields etc. when actual scope
    //                   value does not change on invalid field value.
    //                   Should be used as {FormName}.{InputName} so InputName can be extracted to get correct controller.
    // watch-elements  - Array of string that is parsed and registered for watching. Whenever 'Table1.OtherDescription'
    //                   changes then parse function is called and correct errors show for current input.
    // errors-to-show  - Errors to be shown as array. This string is parsed and errors are shown in the same order
    //                   as array. Names can be used for different kind of messages as follows e.g "pattern_decimal"
    //                   means error type is pattern and message type decimal. First part is extracted used together with
    //                   angular ng-pattern directive to get correct result.
    .directive('errorMapper',function () {
        return {
            restrict: 'A',
            require: '?^form',
            scope: true,
            controller: 'ErrorController',
            template: '<span ng-show=\"showCurrentError\">{{getErrorMessage(currentErrorCode)}}</span>',
            link: function(scope, element, attrs, ctrl) {
                if (!attrs.watchView) {
                    scope.$watch(attrs.errorMapper, function() {
                        scope.parseErrors(ctrl, attrs);
                    });
                } else {
                    scope.$watch(attrs.watchView + ".$viewValue", function() {
                        scope.parseErrors(ctrl, attrs);
                    });
                }

                scope.$watch('submitted', function() {
                    scope.parseErrors(ctrl, attrs);
                });

                //For watching other values that this error depends on
                if (attrs.watchElements) {
                    var watchArray = JSON.parse(attrs.watchElements);
                    for (var i = 0; i < watchArray.length; i++) {
                        scope.$watch(watchArray[i] + ".$viewValue", function() {
                            scope.parseErrors(ctrl, attrs);
                        });
                    }
                }

            }
        }
    })
},{}],6:[function(require,module,exports){
/**
 * Created by argoaava on 22.04.14.
 */

// Module that provides language changing functionality to webform.
//
// Module needs configuration and <div td-language-changer></div> or <td-language-changer/> tags.
// td-language-changer component is replaced with language select input that is configured to use
// pre-configured values.
//
// Example configuration of languageChanger
//
// app.config(["languageChangerProvider", function(languageChangerProvider) {
//    languageChangerProvider.setDefaultLanguage('en');
//    languageChangerProvider.setLanguageFilePrefix('en-labels-');
//    languageChangerProvider.setAvailableLanguages({"item" :[{
//        "code": "bg",
//        "label": "Български (bg)"}, {
//        "code": "cs",
//        "label": "čeština (cs)"}, {
//        "code": "hr",
//        "label": "Hrvatski (hr)"}, {
//        "code": "da",
//        "label": "Dansk (da)"}, {
//        "code": "nl",
//        "label": "Nederlands (nl)"}, {
//        "code": "el",
//        "label": "ελληνικά (el)"}, {
//        "code": "en",
//        "label": "English (en)"}, {
//        "code": "et",
//        "label": "Eesti (et)"}, {
//        "code": "fi",
//        "label": "Suomi (fi)"}, {
//        "code": "fr",
//        "label": "Français (fr)"}, {
//        "code": "de",
//        "label": "Deutsch (de)"}, {
//        "code": "hu",
//        "label": "Magyar (hu)"}, {
//        "code": "is",
//        "label": "Íslenska (is)"}, {
//        "code": "it",
//        "label": "Italiano (it)"}, {
//        "code": "lv",
//        "label": "Latviešu (lv)"}, {
//        "code": "lt",
//        "label": "Lietuvių (lt)"}, {
//        "code": "mt",
//        "label": "Malti (mt)"}, {
//        "code": "no",
//        "label": "Norsk (no)"}, {
//        "code": "pl",
//        "label": "Polski (pl)"}, {
//        "code": "pt",
//        "label": "Português (pt)"}, {
//        "code": "ro",
//        "label": "Română (ro)"}, {
//        "code": "sk",
//        "label": "Slovenčina (sk)"}, {
//        "code": "sl",
//        "label": "Slovenščina (sl)"}, {
//        "code": "es",
//        "label": "Español (es)"}, {
//        "code": "sv",
//        "label": "Svenska (sv)"}, {
//        "code": "tr",
//        "label": "Türkçe (tr)"}]})
//}]);


angular.module('translate.languageChanger', ['pascalprecht.translate'])
    .factory('customLoader', function ($rootScope, $http, $q, languageChanger) {
        return function (options) {
            var deferred = $q.defer();

            if (!languageChanger.getLanguageFilePrefix()) {
                throw new Error("Language file prefix must be defined when using languageChanger component.");
            }

            var languageUrl = languageChanger.getLanguageFilePrefix() + options.key + '.xml?format=json';

            $http({
                method:'GET',
                url: languageUrl
            }, {tracker : $rootScope.loadingTracker})
                .success(function (data) {
                    deferred.resolve(data.labels);
                    //alert('label-' + options.key + '.json' +' success');
                }).error(function () {
                    deferred.reject(options.key);
                    //alert('label-' + options.key + '.json' +' error');

                });
            //alert(options.key);
            return deferred.promise;
        }
    })

    .provider('languageChanger', function languageChangerProvider() {

        this.currentLanguage = 'en';
        this.availableLanguages = [];
        this.languageFilePrefix = '';

        this.setDefaultLanguage = function(defaultLanguage) {
            this.currentLanguage = defaultLanguage;
        };

        this.setLanguageFilePrefix = function(prefix) {
            this.languageFilePrefix = prefix;
        };

        this.setAvailableLanguages = function(availableLanguages) {
            this.availableLanguages = availableLanguages;
        };

        this.$get = function() {
            var availableLanguages = this.availableLanguages;
            var currentLanguage = this.currentLanguage;
            var prefix = this.languageFilePrefix;
            return {
                getLanguage : function() {return currentLanguage;},
                setLanguage : function(newLanguage) {currentLanguage = newLanguage;},
                getAvailableLanguages : function() {return availableLanguages;},
                getLanguageFilePrefix : function() {return prefix;}
            }
        };
    })

    .config( function ($translateProvider) {
        $translateProvider.useLoader('customLoader', {});
        // load 'en' table on startup
        $translateProvider.preferredLanguage('en');
    })

    .controller('LanguageCtrl', ['$scope', '$rootScope', '$translate', 'languageChanger', 'dataRepository', function ($scope, $rootScope, $translate, languageChanger, dataRepository) {

        $scope.currentLanguage = languageChanger.getLanguage();
        $scope.availableLanguages = languageChanger.getAvailableLanguages();

        $scope.changeLang = function () {
            languageChanger.setLanguage($scope.currentLanguage)
            $translate.use(languageChanger.getLanguage());
            dataRepository.loadCodeList(languageChanger.getLanguage());
            if (languageChanger.getLanguage() != $rootScope.currentLanguage) {
                $rootScope.currentLanguage = languageChanger.getLanguage()
            }
        };
        $rootScope.$watch('currentLanguage', function(newValue, oldValue) {
            if (!newValue) {
                return;
            } else {
                if (!oldValue || (languageChanger.getLanguage() != $rootScope.currentLanguage)) {
                    $scope.currentLanguage = $rootScope.currentLanguage;
                    $scope.changeLang();
                }
            }
        })
    }])

    .directive("languageChanger", function () {
        return {
            restrict: 'A',
            controller: 'LanguageCtrl',
            template: "<div ng-show=\"availableLanguages.item.length > 0\" class=\"span2\" ng-controller=\"LanguageCtrl\" style=\"float: right;\"><select name=\"FormLanguage\" class=\"input-medium\" ng-model=\"currentLanguage\" ng-options=\"language.code as language.label for language in availableLanguages.item\" ng-change=\"changeLang()\"></select></div>"
        }
    })

},{}],7:[function(require,module,exports){
angular.module('pascalprecht.translate').factory('$translateStaticFilesLoader', [
  '$q',
  '$http',
  function ($q, $http) {
    return function (options) {
      if (!options || (!angular.isString(options.prefix) || !angular.isString(options.suffix))) {
        throw new Error('Couldn\'t load static files, no prefix or suffix specified!');
      }
      var deferred = $q.defer();
      $http({
        url: [
          options.prefix,
          options.key,
          options.suffix
        ].join(''),
        method: 'GET',
        params: ''
      }).success(function (data) {
        deferred.resolve(data);
      }).error(function (data) {
        deferred.reject(options.key);
      });
      return deferred.promise;
    };
  }
]);
},{}],8:[function(require,module,exports){
angular.module('pascalprecht.translate', ['ng']).run([
  '$translate',
  function ($translate) {
    var key = $translate.storageKey(), storage = $translate.storage();
    if (storage) {
      if (!storage.get(key)) {
        if (angular.isString($translate.preferredLanguage())) {
          $translate.use($translate.preferredLanguage());
        } else {
          storage.set(key, $translate.use());
        }
      } else {
        $translate.use(storage.get(key));
      }
    } else if (angular.isString($translate.preferredLanguage())) {
      $translate.use($translate.preferredLanguage());
    }
  }
]);
angular.module('pascalprecht.translate').provider('$translate', [
  '$STORAGE_KEY',
  function ($STORAGE_KEY) {
    var $translationTable = {}, $preferredLanguage, $availableLanguageKeys = [], $languageKeyAliases, $fallbackLanguage, $fallbackWasString, $uses, $nextLang, $storageFactory, $storageKey = $STORAGE_KEY, $storagePrefix, $missingTranslationHandlerFactory, $interpolationFactory, $interpolatorFactories = [], $interpolationSanitizationStrategy = false, $loaderFactory, $cloakClassName = 'translate-cloak', $loaderOptions, $notFoundIndicatorLeft, $notFoundIndicatorRight, $postCompilingEnabled = false, NESTED_OBJECT_DELIMITER = '.';
    var getLocale = function () {
      var nav = window.navigator;
      return (nav.language || nav.browserLanguage || nav.systemLanguage || nav.userLanguage || '').split('-').join('_');
    };
    var negotiateLocale = function (preferred) {
      var avail = [], locale = angular.lowercase(preferred), i = 0, n = $availableLanguageKeys.length;
      for (; i < n; i++) {
        avail.push(angular.lowercase($availableLanguageKeys[i]));
      }
      if (avail.indexOf(locale) > -1) {
        return locale;
      }
      if ($languageKeyAliases) {
        if ($languageKeyAliases[preferred]) {
          var alias = $languageKeyAliases[preferred];
          if (avail.indexOf(angular.lowercase(alias)) > -1) {
            return alias;
          }
        }
      }
      var parts = preferred.split('_');
      if (parts.length > 1 && avail.indexOf(angular.lowercase(parts[0])) > 1) {
        return parts[0];
      }
    };
    var translations = function (langKey, translationTable) {
      if (!langKey && !translationTable) {
        return $translationTable;
      }
      if (langKey && !translationTable) {
        if (angular.isString(langKey)) {
          return $translationTable[langKey];
        }
      } else {
        if (!angular.isObject($translationTable[langKey])) {
          $translationTable[langKey] = {};
        }
        angular.extend($translationTable[langKey], flatObject(translationTable));
      }
      return this;
    };
    this.translations = translations;
    this.cloakClassName = function (name) {
      if (!name) {
        return $cloakClassName;
      }
      $cloakClassName = name;
      return this;
    };
    var flatObject = function (data, path, result, prevKey) {
      var key, keyWithPath, keyWithShortPath, val;
      if (!path) {
        path = [];
      }
      if (!result) {
        result = {};
      }
      for (key in data) {
        if (!data.hasOwnProperty(key)) {
          continue;
        }
        val = data[key];
        if (angular.isObject(val)) {
          flatObject(val, path.concat(key), result, key);
        } else {
          keyWithPath = path.length ? '' + path.join(NESTED_OBJECT_DELIMITER) + NESTED_OBJECT_DELIMITER + key : key;
          if (path.length && key === prevKey) {
            keyWithShortPath = '' + path.join(NESTED_OBJECT_DELIMITER);
            result[keyWithShortPath] = '@:' + keyWithPath;
          }
          result[keyWithPath] = val;
        }
      }
      return result;
    };
    this.addInterpolation = function (factory) {
      $interpolatorFactories.push(factory);
      return this;
    };
    this.useMessageFormatInterpolation = function () {
      return this.useInterpolation('$translateMessageFormatInterpolation');
    };
    this.useInterpolation = function (factory) {
      $interpolationFactory = factory;
      return this;
    };
    this.useSanitizeValueStrategy = function (value) {
      $interpolationSanitizationStrategy = value;
      return this;
    };
    this.preferredLanguage = function (langKey) {
      if (langKey) {
        $preferredLanguage = langKey;
        return this;
      }
      return $preferredLanguage;
    };
    this.translationNotFoundIndicator = function (indicator) {
      this.translationNotFoundIndicatorLeft(indicator);
      this.translationNotFoundIndicatorRight(indicator);
      return this;
    };
    this.translationNotFoundIndicatorLeft = function (indicator) {
      if (!indicator) {
        return $notFoundIndicatorLeft;
      }
      $notFoundIndicatorLeft = indicator;
      return this;
    };
    this.translationNotFoundIndicatorRight = function (indicator) {
      if (!indicator) {
        return $notFoundIndicatorRight;
      }
      $notFoundIndicatorRight = indicator;
      return this;
    };
    this.fallbackLanguage = function (langKey) {
      fallbackStack(langKey);
      return this;
    };
    var fallbackStack = function (langKey) {
      if (langKey) {
        if (angular.isString(langKey)) {
          $fallbackWasString = true;
          $fallbackLanguage = [langKey];
        } else if (angular.isArray(langKey)) {
          $fallbackWasString = false;
          $fallbackLanguage = langKey;
        }
        if (angular.isString($preferredLanguage)) {
          $fallbackLanguage.push($preferredLanguage);
        }
        return this;
      } else {
        if ($fallbackWasString) {
          return $fallbackLanguage[0];
        } else {
          return $fallbackLanguage;
        }
      }
    };
    this.use = function (langKey) {
      if (langKey) {
        if (!$translationTable[langKey] && !$loaderFactory) {
          throw new Error('$translateProvider couldn\'t find translationTable for langKey: \'' + langKey + '\'');
        }
        $uses = langKey;
        return this;
      }
      return $uses;
    };
    var storageKey = function (key) {
      if (!key) {
        if ($storagePrefix) {
          return $storagePrefix + $storageKey;
        }
        return $storageKey;
      }
      $storageKey = key;
    };
    this.storageKey = storageKey;
    this.useUrlLoader = function (url) {
      return this.useLoader('$translateUrlLoader', { url: url });
    };
    this.useStaticFilesLoader = function (options) {
      return this.useLoader('$translateStaticFilesLoader', options);
    };
    this.useLoader = function (loaderFactory, options) {
      $loaderFactory = loaderFactory;
      $loaderOptions = options || {};
      return this;
    };
    this.useLocalStorage = function () {
      return this.useStorage('$translateLocalStorage');
    };
    this.useCookieStorage = function () {
      return this.useStorage('$translateCookieStorage');
    };
    this.useStorage = function (storageFactory) {
      $storageFactory = storageFactory;
      return this;
    };
    this.storagePrefix = function (prefix) {
      if (!prefix) {
        return prefix;
      }
      $storagePrefix = prefix;
      return this;
    };
    this.useMissingTranslationHandlerLog = function () {
      return this.useMissingTranslationHandler('$translateMissingTranslationHandlerLog');
    };
    this.useMissingTranslationHandler = function (factory) {
      $missingTranslationHandlerFactory = factory;
      return this;
    };
    this.usePostCompiling = function (value) {
      $postCompilingEnabled = !!value;
      return this;
    };
    this.determinePreferredLanguage = function (fn) {
      var locale = fn && angular.isFunction(fn) ? fn() : getLocale();
      if (!$availableLanguageKeys.length) {
        $preferredLanguage = locale;
        return this;
      } else {
        $preferredLanguage = negotiateLocale(locale);
      }
    };
    this.registerAvailableLanguageKeys = function (languageKeys, aliases) {
      if (languageKeys) {
        $availableLanguageKeys = languageKeys;
        if (aliases) {
          $languageKeyAliases = aliases;
        }
        return this;
      }
      return $availableLanguageKeys;
    };
    this.$get = [
      '$log',
      '$injector',
      '$rootScope',
      '$q',
      function ($log, $injector, $rootScope, $q) {
        var Storage, defaultInterpolator = $injector.get($interpolationFactory || '$translateDefaultInterpolation'), pendingLoader = false, interpolatorHashMap = {}, langPromises = {}, fallbackIndex, startFallbackIteration;
        var $translate = function (translationId, interpolateParams, interpolationId) {
          var deferred = $q.defer();
          translationId = translationId.trim();
          var promiseToWaitFor = function () {
              var promise = $preferredLanguage ? langPromises[$preferredLanguage] : langPromises[$uses];
              fallbackIndex = 0;
              if ($storageFactory && !promise) {
                var langKey = Storage.get($storageKey);
                promise = langPromises[langKey];
                if ($fallbackLanguage && $fallbackLanguage.length) {
                  var index = indexOf($fallbackLanguage, langKey);
                  fallbackIndex = index > -1 ? index += 1 : 0;
                  $fallbackLanguage.push($preferredLanguage);
                }
              }
              return promise;
            }();
          if (!promiseToWaitFor) {
            determineTranslation(translationId, interpolateParams, interpolationId).then(deferred.resolve, deferred.reject);
          } else {
            promiseToWaitFor.then(function () {
              determineTranslation(translationId, interpolateParams, interpolationId).then(deferred.resolve, deferred.reject);
            }, deferred.reject);
          }
          return deferred.promise;
        };
        var indexOf = function (array, searchElement) {
          for (var i = 0, len = array.length; i < len; i++) {
            if (array[i] === searchElement) {
              return i;
            }
          }
          return -1;
        };
        var applyNotFoundIndicators = function (translationId) {
          if ($notFoundIndicatorLeft) {
            translationId = [
              $notFoundIndicatorLeft,
              translationId
            ].join(' ');
          }
          if ($notFoundIndicatorRight) {
            translationId = [
              translationId,
              $notFoundIndicatorRight
            ].join(' ');
          }
          return translationId;
        };
        var useLanguage = function (key) {
          $uses = key;
          $rootScope.$emit('$translateChangeSuccess');
          if ($storageFactory) {
            Storage.set($translate.storageKey(), $uses);
          }
          defaultInterpolator.setLocale($uses);
          angular.forEach(interpolatorHashMap, function (interpolator, id) {
            interpolatorHashMap[id].setLocale($uses);
          });
          $rootScope.$emit('$translateChangeEnd');
        };
        var loadAsync = function (key) {
          if (!key) {
            throw 'No language key specified for loading.';
          }
          var deferred = $q.defer();
          $rootScope.$emit('$translateLoadingStart');
          pendingLoader = true;
          $injector.get($loaderFactory)(angular.extend($loaderOptions, { key: key })).then(function (data) {
            var translationTable = {};
            $rootScope.$emit('$translateLoadingSuccess');
            if (angular.isArray(data)) {
              angular.forEach(data, function (table) {
                angular.extend(translationTable, flatObject(table));
              });
            } else {
              angular.extend(translationTable, flatObject(data));
            }
            pendingLoader = false;
            deferred.resolve({
              key: key,
              table: translationTable
            });
            $rootScope.$emit('$translateLoadingEnd');
          }, function (key) {
            $rootScope.$emit('$translateLoadingError');
            deferred.reject(key);
            $rootScope.$emit('$translateLoadingEnd');
          });
          return deferred.promise;
        };
        if ($storageFactory) {
          Storage = $injector.get($storageFactory);
          if (!Storage.get || !Storage.set) {
            throw new Error('Couldn\'t use storage \'' + $storageFactory + '\', missing get() or set() method!');
          }
        }
        if (angular.isFunction(defaultInterpolator.useSanitizeValueStrategy)) {
          defaultInterpolator.useSanitizeValueStrategy($interpolationSanitizationStrategy);
        }
        if ($interpolatorFactories.length) {
          angular.forEach($interpolatorFactories, function (interpolatorFactory) {
            var interpolator = $injector.get(interpolatorFactory);
            interpolator.setLocale($preferredLanguage || $uses);
            if (angular.isFunction(interpolator.useSanitizeValueStrategy)) {
              interpolator.useSanitizeValueStrategy($interpolationSanitizationStrategy);
            }
            interpolatorHashMap[interpolator.getInterpolationIdentifier()] = interpolator;
          });
        }
        var getTranslationTable = function (langKey) {
          var deferred = $q.defer();
          if ($translationTable.hasOwnProperty(langKey)) {
            deferred.resolve($translationTable[langKey]);
            return deferred.promise;
          } else {
            langPromises[langKey].then(function (data) {
              translations(data.key, data.table);
              deferred.resolve(data.table);
            }, deferred.reject);
          }
          return deferred.promise;
        };
        var getFallbackTranslation = function (langKey, translationId, interpolateParams, Interpolator) {
          var deferred = $q.defer();
          getTranslationTable(langKey).then(function (translationTable) {
            if (translationTable.hasOwnProperty(translationId)) {
              Interpolator.setLocale(langKey);
              deferred.resolve(Interpolator.interpolate(translationTable[translationId], interpolateParams));
              Interpolator.setLocale($uses);
            } else {
              deferred.reject();
            }
          }, deferred.reject);
          return deferred.promise;
        };
        var getFallbackTranslationInstant = function (langKey, translationId, interpolateParams, Interpolator) {
          var result, translationTable = $translationTable[langKey];
          if (translationTable.hasOwnProperty(translationId)) {
            Interpolator.setLocale(langKey);
            result = Interpolator.interpolate(translationTable[translationId], interpolateParams);
            Interpolator.setLocale($uses);
          }
          return result;
        };
        var resolveForFallbackLanguage = function (fallbackLanguageIndex, translationId, interpolateParams, Interpolator) {
          var deferred = $q.defer();
          if (fallbackLanguageIndex < $fallbackLanguage.length) {
            var langKey = $fallbackLanguage[fallbackLanguageIndex];
            getFallbackTranslation(langKey, translationId, interpolateParams, Interpolator).then(function (translation) {
              deferred.resolve(translation);
            }, function () {
              var nextFallbackLanguagePromise = resolveForFallbackLanguage(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator);
              deferred.resolve(nextFallbackLanguagePromise);
            });
          } else {
            deferred.resolve(translationId);
          }
          return deferred.promise;
        };
        var resolveForFallbackLanguageInstant = function (fallbackLanguageIndex, translationId, interpolateParams, Interpolator) {
          var result;
          if (fallbackLanguageIndex < $fallbackLanguage.length) {
            var langKey = $fallbackLanguage[fallbackLanguageIndex];
            result = getFallbackTranslationInstant(langKey, translationId, interpolateParams, Interpolator);
            if (!result) {
              result = resolveForFallbackLanguageInstant(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator);
            }
          }
          return result;
        };
        var fallbackTranslation = function (translationId, interpolateParams, Interpolator) {
          return resolveForFallbackLanguage(startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex, translationId, interpolateParams, Interpolator);
        };
        var fallbackTranslationInstant = function (translationId, interpolateParams, Interpolator) {
          return resolveForFallbackLanguageInstant(startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex, translationId, interpolateParams, Interpolator);
        };
        var determineTranslation = function (translationId, interpolateParams, interpolationId) {
          var deferred = $q.defer();
          var table = $uses ? $translationTable[$uses] : $translationTable, Interpolator = interpolationId ? interpolatorHashMap[interpolationId] : defaultInterpolator;
          if (table && table.hasOwnProperty(translationId)) {
            var translation = table[translationId];
            if (translation.substr(0, 2) === '@:') {
              $translate(translation.substr(2), interpolateParams, interpolationId).then(deferred.resolve, deferred.reject);
            } else {
              deferred.resolve(Interpolator.interpolate(translation, interpolateParams));
            }
          } else {
            if ($missingTranslationHandlerFactory && !pendingLoader) {
              $injector.get($missingTranslationHandlerFactory)(translationId, $uses);
            }
            if ($uses && $fallbackLanguage && $fallbackLanguage.length) {
              fallbackTranslation(translationId, interpolateParams, Interpolator).then(function (translation) {
                deferred.resolve(translation);
              }, function (_translationId) {
                deferred.reject(applyNotFoundIndicators(_translationId));
              });
            } else {
              deferred.reject(applyNotFoundIndicators(translationId));
            }
          }
          return deferred.promise;
        };
        var determineTranslationInstant = function (translationId, interpolateParams, interpolationId) {
          var result, table = $uses ? $translationTable[$uses] : $translationTable, Interpolator = interpolationId ? interpolatorHashMap[interpolationId] : defaultInterpolator;
          if (table && table.hasOwnProperty(translationId)) {
            var translation = table[translationId];
            if (translation.substr(0, 2) === '@:') {
              result = determineTranslationInstant(translation.substr(2), interpolateParams, interpolationId);
            } else {
              result = Interpolator.interpolate(translation, interpolateParams);
            }
          } else {
            if ($missingTranslationHandlerFactory && !pendingLoader) {
              $injector.get($missingTranslationHandlerFactory)(translationId, $uses);
            }
            if ($uses && $fallbackLanguage && $fallbackLanguage.length) {
              fallbackIndex = 0;
              result = fallbackTranslationInstant(translationId, interpolateParams, Interpolator);
            } else {
              result = applyNotFoundIndicators(translationId);
            }
          }
          return result;
        };
        $translate.preferredLanguage = function () {
          return $preferredLanguage;
        };
        $translate.cloakClassName = function () {
          return $cloakClassName;
        };
        $translate.fallbackLanguage = function (langKey) {
          if (langKey !== undefined && langKey !== null) {
            fallbackStack(langKey);
            if ($loaderFactory) {
              if ($fallbackLanguage && $fallbackLanguage.length) {
                for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
                  if (!langPromises[$fallbackLanguage[i]]) {
                    langPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]);
                  }
                }
              }
            }
            $translate.use($translate.use());
          }
          if ($fallbackWasString) {
            return $fallbackLanguage[0];
          } else {
            return $fallbackLanguage;
          }
        };
        $translate.useFallbackLanguage = function (langKey) {
          if (langKey !== undefined && langKey !== null) {
            if (!langKey) {
              startFallbackIteration = 0;
            } else {
              var langKeyPosition = indexOf($fallbackLanguage, langKey);
              if (langKeyPosition > -1) {
                startFallbackIteration = langKeyPosition;
              }
            }
          }
        };
        $translate.proposedLanguage = function () {
          return $nextLang;
        };
        $translate.storage = function () {
          return Storage;
        };
        $translate.use = function (key) {
          if (!key) {
            return $uses;
          }
          var deferred = $q.defer();
          $rootScope.$emit('$translateChangeStart');
          if (!$translationTable[key] && $loaderFactory) {
            $nextLang = key;
            langPromises[key] = loadAsync(key).then(function (translation) {
              translations(translation.key, translation.table);
              deferred.resolve(translation.key);
              if ($nextLang === key) {
                useLanguage(translation.key);
                $nextLang = undefined;
              }
            }, function (key) {
              $nextLang = undefined;
              $rootScope.$emit('$translateChangeError');
              deferred.reject(key);
              $rootScope.$emit('$translateChangeEnd');
            });
          } else {
            deferred.resolve(key);
            useLanguage(key);
          }
          return deferred.promise;
        };
        $translate.storageKey = function () {
          return storageKey();
        };
        $translate.isPostCompilingEnabled = function () {
          return $postCompilingEnabled;
        };
        $translate.refresh = function (langKey) {
          if (!$loaderFactory) {
            throw new Error('Couldn\'t refresh translation table, no loader registered!');
          }
          var deferred = $q.defer();
          function resolve() {
            deferred.resolve();
            $rootScope.$emit('$translateRefreshEnd');
          }
          function reject() {
            deferred.reject();
            $rootScope.$emit('$translateRefreshEnd');
          }
          $rootScope.$emit('$translateRefreshStart');
          if (!langKey) {
            var tables = [];
            if ($fallbackLanguage && $fallbackLanguage.length) {
              for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
                tables.push(loadAsync($fallbackLanguage[i]));
              }
            }
            if ($uses) {
              tables.push(loadAsync($uses));
            }
            $q.all(tables).then(function (tableData) {
              angular.forEach(tableData, function (data) {
                if ($translationTable[data.key]) {
                  delete $translationTable[data.key];
                }
                translations(data.key, data.table);
              });
              if ($uses) {
                useLanguage($uses);
              }
              resolve();
            });
          } else if ($translationTable[langKey]) {
            loadAsync(langKey).then(function (data) {
              translations(data.key, data.table);
              if (langKey === $uses) {
                useLanguage($uses);
              }
              resolve();
            }, reject);
          } else {
            reject();
          }
          return deferred.promise;
        };
        $translate.instant = function (translationId, interpolateParams, interpolationId) {
          if (typeof translationId === 'undefined' || translationId === '') {
            return translationId;
          }
          translationId = translationId.trim();
          var result, possibleLangKeys = [];
          if ($preferredLanguage) {
            possibleLangKeys.push($preferredLanguage);
          }
          if ($uses) {
            possibleLangKeys.push($uses);
          }
          if ($fallbackLanguage && $fallbackLanguage.length) {
            possibleLangKeys = possibleLangKeys.concat($fallbackLanguage);
          }
          for (var i = 0, c = possibleLangKeys.length; i < c; i++) {
            var possibleLangKey = possibleLangKeys[i];
            if ($translationTable[possibleLangKey]) {
              if ($translationTable[possibleLangKey][translationId]) {
                result = determineTranslationInstant(translationId, interpolateParams, interpolationId);
              }
            }
            if (typeof result !== 'undefined') {
              break;
            }
          }
          if (!result) {
            result = translationId;
            if ($missingTranslationHandlerFactory && !pendingLoader) {
              $injector.get($missingTranslationHandlerFactory)(translationId, $uses);
            }
          }
          return result;
        };
        if ($loaderFactory) {
          if (angular.equals($translationTable, {})) {
            $translate.use($translate.use());
          }
          if ($fallbackLanguage && $fallbackLanguage.length) {
            for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
              langPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]);
            }
          }
        }
        return $translate;
      }
    ];
  }
]);
angular.module('pascalprecht.translate').factory('$translateDefaultInterpolation', [
  '$interpolate',
  function ($interpolate) {
    var $translateInterpolator = {}, $locale, $identifier = 'default', $sanitizeValueStrategy = null, sanitizeValueStrategies = {
        escaped: function (params) {
          var result = {};
          for (var key in params) {
            if (params.hasOwnProperty(key)) {
              result[key] = angular.element('<div></div>').text(params[key]).html();
            }
          }
          return result;
        }
      };
    var sanitizeParams = function (params) {
      var result;
      if (angular.isFunction(sanitizeValueStrategies[$sanitizeValueStrategy])) {
        result = sanitizeValueStrategies[$sanitizeValueStrategy](params);
      } else {
        result = params;
      }
      return result;
    };
    $translateInterpolator.setLocale = function (locale) {
      $locale = locale;
    };
    $translateInterpolator.getInterpolationIdentifier = function () {
      return $identifier;
    };
    $translateInterpolator.useSanitizeValueStrategy = function (value) {
      $sanitizeValueStrategy = value;
      return this;
    };
    $translateInterpolator.interpolate = function (string, interpolateParams) {
      if ($sanitizeValueStrategy) {
        interpolateParams = sanitizeParams(interpolateParams);
      }
      return $interpolate(string)(interpolateParams);
    };
    return $translateInterpolator;
  }
]);
angular.module('pascalprecht.translate').constant('$STORAGE_KEY', 'NG_TRANSLATE_LANG_KEY');
angular.module('pascalprecht.translate').directive('translate', [
  '$translate',
  '$q',
  '$interpolate',
  '$compile',
  '$parse',
  '$rootScope',
  function ($translate, $q, $interpolate, $compile, $parse, $rootScope) {
    return {
      restrict: 'AE',
      scope: true,
      compile: function (tElement, tAttr) {
        var translateValuesExist = tAttr.translateValues ? tAttr.translateValues : undefined;
        var translateInterpolation = tAttr.translateInterpolation ? tAttr.translateInterpolation : undefined;
        var translateValueExist = tElement[0].outerHTML.match(/translate-value-+/i);
        return function linkFn(scope, iElement, iAttr) {
          scope.interpolateParams = {};
          iAttr.$observe('translate', function (translationId) {
            if (angular.equals(translationId, '') || !angular.isDefined(translationId)) {
              scope.translationId = $interpolate(iElement.text().replace(/^\s+|\s+$/g, ''))(scope.$parent);
            } else {
              scope.translationId = translationId;
            }
          });
          if (translateValuesExist) {
            iAttr.$observe('translateValues', function (interpolateParams) {
              if (interpolateParams) {
                scope.$parent.$watch(function () {
                  angular.extend(scope.interpolateParams, $parse(interpolateParams)(scope.$parent));
                });
              }
            });
          }
          if (translateValueExist) {
            var fn = function (attrName) {
              iAttr.$observe(attrName, function (value) {
                scope.interpolateParams[angular.lowercase(attrName.substr(14))] = value;
              });
            };
            for (var attr in iAttr) {
              if (iAttr.hasOwnProperty(attr) && attr.substr(0, 14) === 'translateValue' && attr !== 'translateValues') {
                fn(attr);
              }
            }
          }
          var applyElementContent = function (value, scope) {
            iElement.html(value);
            var globallyEnabled = $translate.isPostCompilingEnabled();
            var locallyDefined = typeof tAttr.translateCompile !== 'undefined';
            var locallyEnabled = locallyDefined && tAttr.translateCompile !== 'false';
            if (globallyEnabled && !locallyDefined || locallyEnabled) {
              $compile(iElement.contents())(scope);
            }
          };
          var updateTranslationFn = function () {
              if (!translateValuesExist && !translateValueExist) {
                return function () {
                  var unwatch = scope.$watch('translationId', function (value) {
                      if (scope.translationId && value) {
                        $translate(value, {}, translateInterpolation).then(function (translation) {
                          applyElementContent(translation, scope);
                          unwatch();
                        }, function (translationId) {
                          applyElementContent(translationId, scope);
                          unwatch();
                        });
                      }
                    }, true);
                };
              } else {
                return function () {
                  scope.$watch('interpolateParams', function (value) {
                    if (scope.translationId && value) {
                      $translate(scope.translationId, value, translateInterpolation).then(function (translation) {
                        applyElementContent(translation, scope);
                      }, function (translationId) {
                        applyElementContent(translationId, scope);
                      });
                    }
                  }, true);
                };
              }
            }();
          var unbind = $rootScope.$on('$translateChangeSuccess', updateTranslationFn);
          updateTranslationFn();
          scope.$on('$destroy', unbind);
        };
      }
    };
  }
]);
angular.module('pascalprecht.translate').directive('translateCloak', [
  '$rootScope',
  '$translate',
  function ($rootScope, $translate) {
    return {
      compile: function (tElement) {
        $rootScope.$on('$translateLoadingSuccess', function () {
          tElement.removeClass($translate.cloakClassName());
        });
        tElement.addClass($translate.cloakClassName());
      }
    };
  }
]);
angular.module('pascalprecht.translate').filter('translate', [
  '$parse',
  '$translate',
  function ($parse, $translate) {
    return function (translationId, interpolateParams, interpolation) {
      if (!angular.isObject(interpolateParams)) {
        interpolateParams = $parse(interpolateParams)();
      }
      return $translate.instant(translationId, interpolateParams, interpolation);
    };
  }
]);
},{}],9:[function(require,module,exports){
/*! 
 * numeral.js language configuration
 * language : German (de) – generally useful in Germany, Austria, Luxembourg, Belgium
 * author : Marco Krage : https://github.com/sinky
 */
(function () {
    var language = {
        delimiters: {
            thousands: ' ',
            decimal: ','
        },
        abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
        },
        ordinal: function (number) {
            return '.';
        },
        currency: {
            symbol: '€'
        }
    };

    // Node
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
    }
    // Browser
    if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('de', language);
        this.numeral.language('de-de', language);
    }
}());
},{}],10:[function(require,module,exports){
/*
 * promise-tracker - v2.0.1 - 2014-04-11
 * http://github.com/ajoslin/angular-promise-tracker
 * Created by Andy Joslin; Licensed under Public Domain
 */

(function() {

angular.module('ajoslin.promise-tracker')
.config(['$httpProvider', function($httpProvider) {
  $httpProvider.interceptors.push(['$q', 'promiseTracker', function($q, promiseTracker) {
    return {
      request: function(config) {
        if (config.tracker) {
          if (!angular.isArray(config.tracker)) {
            config.tracker = [config.tracker];
          }
          config.$promiseTrackerDeferred = config.$promiseTrackerDeferred || [];

          angular.forEach(config.tracker, function(tracker) {
            var deferred = tracker.createPromise();
            config.$promiseTrackerDeferred.push(deferred);
          });
        }
        return $q.when(config);
      },
      response: function(response) {
        if (response.config && response.config.$promiseTrackerDeferred) {
          angular.forEach(response.config.$promiseTrackerDeferred, function(deferred) {
            deferred.resolve(response);
          });
        }
        return $q.when(response);
      },
      responseError: function(response) {
        if (response.config && response.config.$promiseTrackerDeferred) {
          angular.forEach(response.config.$promiseTrackerDeferred, function(deferred) {
            deferred.reject(response);
          });
        }
        return $q.reject(response);
      }
    };
  }]);
}]);

}());
},{}],11:[function(require,module,exports){
/*
 * promise-tracker - v2.0.1 - 2014-04-11
 * http://github.com/ajoslin/angular-promise-tracker
 * Created by Andy Joslin; Licensed under Public Domain
 */

(function() {

angular.module('ajoslin.promise-tracker', [])

.provider('promiseTracker', function() {
  var trackers = {};

  this.$get = ['$q', '$timeout', function($q, $timeout) {
    function cancelTimeout(promise) {
      if (promise) {
        $timeout.cancel(promise);
      }
    }

    return function PromiseTracker(options) {
      //do new if user doesn't
      if (!(this instanceof PromiseTracker)) {
        return new PromiseTracker(options);
      }

      options = options || {};

      //Array of promises being tracked
      var tracked = [];
      var self = this;

      //Allow an optional "minimum duration" that the tracker has to stay active for.
      var minDuration = options.minDuration;
      //Allow a delay that will stop the tracker from activating until that time is reached
      var activationDelay = options.activationDelay;

      var minDurationPromise;
      var activationDelayPromise;

      self.active = function() {
        //Even if we have a promise in our tracker, we aren't active until delay is elapsed
        if (activationDelayPromise) {
          return false;
        }
        return tracked.length > 0;
      };

      self.tracking = function() {
        //Even if we aren't active, we could still have a promise in our tracker
        return tracked.length > 0;
      };

      self.destroy = self.cancel = function() {
        minDurationPromise = cancelTimeout(minDurationPromise);
        activationDelayPromise = cancelTimeout(activationDelayPromise);
        for (var i=tracked.length-1; i>=0; i--) {
          tracked[i].resolve();
        }
        tracked.length = 0;
      };

      //Create a promise that will make our tracker active until it is resolved.
      // @return deferred - our deferred object that is being tracked
      self.createPromise = function() {
        var deferred = $q.defer();
        tracked.push(deferred);

        //If the tracker was just inactive and this the first in the list of
        //promises, we reset our delay and minDuration
        //again.
        if (tracked.length === 1) {
          if (activationDelay) {
            activationDelayPromise = $timeout(function() {
              activationDelayPromise = cancelTimeout(activationDelayPromise);
              startMinDuration();
            }, activationDelay);
          } else {
            startMinDuration();
          }
        }

        deferred.promise.then(onDone(false), onDone(true));

        return deferred;

        function startMinDuration() {
          if (minDuration) {
            minDurationPromise = $timeout(angular.noop, minDuration);
          }
        }

        //Create a callback for when this promise is done. It will remove our
        //tracked promise from the array if once minDuration is complete
        function onDone(isError) {
          return function(value) {
            (minDurationPromise || $q.when()).then(function() {
              var index = tracked.indexOf(deferred);
              tracked.splice(index, 1);

              //If this is the last promise, cleanup the timeouts
              //for activationDelay
              if (tracked.length === 0) {
                activationDelayPromise = cancelTimeout(activationDelayPromise);
              }
            });
          };
        }
      };

      self.addPromise = function(promise) {
        var then = promise && (promise.then || promise.$then ||
                               (promise.$promise && promise.$promise.then));
        if (!then) {
          throw new Error("promiseTracker#addPromise expects a promise object!");
        }
        var deferred = self.createPromise();

        //When given promise is done, resolve our created promise
        //Allow $then for angular-resource objects
        then(function success(value) {
          deferred.resolve(value);
          return value;
        }, function error(value) {
          deferred.reject(value);
          return $q.reject(value);
        });

        return deferred;
      };
    };
  }];
});

}());

},{}],12:[function(require,module,exports){
/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 0.11.2 - 2014-09-26
 * License: MIT
 */
angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.transition","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.transition",[]).factory("$transition",["$q","$timeout","$rootScope",function(a,b,c){function d(a){for(var b in a)if(void 0!==f.style[b])return a[b]}var e=function(d,f,g){g=g||{};var h=a.defer(),i=e[g.animation?"animationEndEventName":"transitionEndEventName"],j=function(){c.$apply(function(){d.unbind(i,j),h.resolve(d)})};return i&&d.bind(i,j),b(function(){angular.isString(f)?d.addClass(f):angular.isFunction(f)?f(d):angular.isObject(f)&&d.css(f),i||h.resolve(d)}),h.promise.cancel=function(){i&&d.unbind(i,j),h.reject("Transition cancelled")},h.promise},f=document.createElement("trans"),g={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},h={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return e.transitionEndEventName=d(g),e.animationEndEventName=d(h),e}]),angular.module("ui.bootstrap.collapse",["ui.bootstrap.transition"]).directive("collapse",["$transition",function(a){return{link:function(b,c,d){function e(b){function d(){j===e&&(j=void 0)}var e=a(c,b);return j&&j.cancel(),j=e,e.then(d,d),e}function f(){k?(k=!1,g()):(c.removeClass("collapse").addClass("collapsing"),e({height:c[0].scrollHeight+"px"}).then(g))}function g(){c.removeClass("collapsing"),c.addClass("collapse in"),c.css({height:"auto"})}function h(){if(k)k=!1,i(),c.css({height:0});else{c.css({height:c[0].scrollHeight+"px"});{c[0].offsetWidth}c.removeClass("collapse in").addClass("collapsing"),e({height:0}).then(i)}}function i(){c.removeClass("collapsing"),c.addClass("collapse")}var j,k=!0;b.$watch(d.collapse,function(a){a?h():f()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(a,b,c){this.groups=[],this.closeOthers=function(d){var e=angular.isDefined(b.closeOthers)?a.$eval(b.closeOthers):c.closeOthers;e&&angular.forEach(this.groups,function(a){a!==d&&(a.isOpen=!1)})},this.addGroup=function(a){var b=this;this.groups.push(a),a.$on("$destroy",function(){b.removeGroup(a)})},this.removeGroup=function(a){var b=this.groups.indexOf(a);-1!==b&&this.groups.splice(b,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",transclude:!0,replace:!1,templateUrl:"template/accordion/accordion.html"}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/accordion/accordion-group.html",scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(a){this.heading=a}},link:function(a,b,c,d){d.addGroup(a),a.$watch("isOpen",function(b){b&&d.closeOthers(a)}),a.toggleOpen=function(){a.isDisabled||(a.isOpen=!a.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(a,b,c,d,e){d.setHeading(e(a,function(){}))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(a,b,c,d){a.$watch(function(){return d[c.accordionTransclude]},function(a){a&&(b.html(""),b.append(a))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(a,b){a.closeable="close"in b}]).directive("alert",function(){return{restrict:"EA",controller:"AlertController",templateUrl:"template/alert/alert.html",transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}),angular.module("ui.bootstrap.bindHtml",[]).directive("bindHtmlUnsafe",function(){return function(a,b,c){b.addClass("ng-binding").data("$binding",c.bindHtmlUnsafe),a.$watch(c.bindHtmlUnsafe,function(a){b.html(a||"")})}}),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(a){this.activeClass=a.activeClass||"active",this.toggleEvent=a.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",link:function(a,b,c,d){var e=d[0],f=d[1];f.$render=function(){b.toggleClass(e.activeClass,angular.equals(f.$modelValue,a.$eval(c.btnRadio)))},b.bind(e.toggleEvent,function(){var d=b.hasClass(e.activeClass);(!d||angular.isDefined(c.uncheckable))&&a.$apply(function(){f.$setViewValue(d?null:a.$eval(c.btnRadio)),f.$render()})})}}}).directive("btnCheckbox",function(){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",link:function(a,b,c,d){function e(){return g(c.btnCheckboxTrue,!0)}function f(){return g(c.btnCheckboxFalse,!1)}function g(b,c){var d=a.$eval(b);return angular.isDefined(d)?d:c}var h=d[0],i=d[1];i.$render=function(){b.toggleClass(h.activeClass,angular.equals(i.$modelValue,e()))},b.bind(h.toggleEvent,function(){a.$apply(function(){i.$setViewValue(b.hasClass(h.activeClass)?f():e()),i.$render()})})}}}),angular.module("ui.bootstrap.carousel",["ui.bootstrap.transition"]).controller("CarouselController",["$scope","$timeout","$transition",function(a,b,c){function d(){e();var c=+a.interval;!isNaN(c)&&c>=0&&(g=b(f,c))}function e(){g&&(b.cancel(g),g=null)}function f(){h?(a.next(),d()):a.pause()}var g,h,i=this,j=i.slides=a.slides=[],k=-1;i.currentSlide=null;var l=!1;i.select=a.select=function(e,f){function g(){if(!l){if(i.currentSlide&&angular.isString(f)&&!a.noTransition&&e.$element){e.$element.addClass(f);{e.$element[0].offsetWidth}angular.forEach(j,function(a){angular.extend(a,{direction:"",entering:!1,leaving:!1,active:!1})}),angular.extend(e,{direction:f,active:!0,entering:!0}),angular.extend(i.currentSlide||{},{direction:f,leaving:!0}),a.$currentTransition=c(e.$element,{}),function(b,c){a.$currentTransition.then(function(){h(b,c)},function(){h(b,c)})}(e,i.currentSlide)}else h(e,i.currentSlide);i.currentSlide=e,k=m,d()}}function h(b,c){angular.extend(b,{direction:"",active:!0,leaving:!1,entering:!1}),angular.extend(c||{},{direction:"",active:!1,leaving:!1,entering:!1}),a.$currentTransition=null}var m=j.indexOf(e);void 0===f&&(f=m>k?"next":"prev"),e&&e!==i.currentSlide&&(a.$currentTransition?(a.$currentTransition.cancel(),b(g)):g())},a.$on("$destroy",function(){l=!0}),i.indexOfSlide=function(a){return j.indexOf(a)},a.next=function(){var b=(k+1)%j.length;return a.$currentTransition?void 0:i.select(j[b],"next")},a.prev=function(){var b=0>k-1?j.length-1:k-1;return a.$currentTransition?void 0:i.select(j[b],"prev")},a.isActive=function(a){return i.currentSlide===a},a.$watch("interval",d),a.$on("$destroy",e),a.play=function(){h||(h=!0,d())},a.pause=function(){a.noPause||(h=!1,e())},i.addSlide=function(b,c){b.$element=c,j.push(b),1===j.length||b.active?(i.select(j[j.length-1]),1==j.length&&a.play()):b.active=!1},i.removeSlide=function(a){var b=j.indexOf(a);j.splice(b,1),j.length>0&&a.active?i.select(b>=j.length?j[b-1]:j[b]):k>b&&k--}}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",require:"carousel",templateUrl:"template/carousel/carousel.html",scope:{interval:"=",noTransition:"=",noPause:"="}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/carousel/slide.html",scope:{active:"=?"},link:function(a,b,c,d){d.addSlide(a,b),a.$on("$destroy",function(){d.removeSlide(a)}),a.$watch("active",function(b){b&&d.select(a)})}}}),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$locale","orderByFilter",function(a,b){function c(a){var c=[],d=a.split("");return angular.forEach(e,function(b,e){var f=a.indexOf(e);if(f>-1){a=a.split(""),d[f]="("+b.regex+")",a[f]="$";for(var g=f+1,h=f+e.length;h>g;g++)d[g]="",a[g]="$";a=a.join(""),c.push({index:f,apply:b.apply})}}),{regex:new RegExp("^"+d.join("")+"$"),map:b(c,"index")}}function d(a,b,c){return 1===b&&c>28?29===c&&(a%4===0&&a%100!==0||a%400===0):3===b||5===b||8===b||10===b?31>c:!0}this.parsers={};var e={yyyy:{regex:"\\d{4}",apply:function(a){this.year=+a}},yy:{regex:"\\d{2}",apply:function(a){this.year=+a+2e3}},y:{regex:"\\d{1,4}",apply:function(a){this.year=+a}},MMMM:{regex:a.DATETIME_FORMATS.MONTH.join("|"),apply:function(b){this.month=a.DATETIME_FORMATS.MONTH.indexOf(b)}},MMM:{regex:a.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(b){this.month=a.DATETIME_FORMATS.SHORTMONTH.indexOf(b)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(a){this.month=a-1}},M:{regex:"[1-9]|1[0-2]",apply:function(a){this.month=a-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(a){this.date=+a}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(a){this.date=+a}},EEEE:{regex:a.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:a.DATETIME_FORMATS.SHORTDAY.join("|")}};this.parse=function(b,e){if(!angular.isString(b)||!e)return b;e=a.DATETIME_FORMATS[e]||e,this.parsers[e]||(this.parsers[e]=c(e));var f=this.parsers[e],g=f.regex,h=f.map,i=b.match(g);if(i&&i.length){for(var j,k={year:1900,month:0,date:1,hours:0},l=1,m=i.length;m>l;l++){var n=h[l-1];n.apply&&n.apply.call(k,i[l])}return d(k.year,k.month,k.date)&&(j=new Date(k.year,k.month,k.date,k.hours)),j}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(a,b){function c(a,c){return a.currentStyle?a.currentStyle[c]:b.getComputedStyle?b.getComputedStyle(a)[c]:a.style[c]}function d(a){return"static"===(c(a,"position")||"static")}var e=function(b){for(var c=a[0],e=b.offsetParent||c;e&&e!==c&&d(e);)e=e.offsetParent;return e||c};return{position:function(b){var c=this.offset(b),d={top:0,left:0},f=e(b[0]);f!=a[0]&&(d=this.offset(angular.element(f)),d.top+=f.clientTop-f.scrollTop,d.left+=f.clientLeft-f.scrollLeft);var g=b[0].getBoundingClientRect();return{width:g.width||b.prop("offsetWidth"),height:g.height||b.prop("offsetHeight"),top:c.top-d.top,left:c.left-d.left}},offset:function(c){var d=c[0].getBoundingClientRect();return{width:d.width||c.prop("offsetWidth"),height:d.height||c.prop("offsetHeight"),top:d.top+(b.pageYOffset||a[0].documentElement.scrollTop),left:d.left+(b.pageXOffset||a[0].documentElement.scrollLeft)}},positionElements:function(a,b,c,d){var e,f,g,h,i=c.split("-"),j=i[0],k=i[1]||"center";e=d?this.offset(a):this.position(a),f=b.prop("offsetWidth"),g=b.prop("offsetHeight");var l={center:function(){return e.left+e.width/2-f/2},left:function(){return e.left},right:function(){return e.left+e.width}},m={center:function(){return e.top+e.height/2-g/2},top:function(){return e.top},bottom:function(){return e.top+e.height}};switch(j){case"right":h={top:m[k](),left:l[j]()};break;case"left":h={top:m[k](),left:e.left-f};break;case"bottom":h={top:m[j](),left:l[k]()};break;default:h={top:e.top-g,left:l[k]()}}return h}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$timeout","$log","dateFilter","datepickerConfig",function(a,b,c,d,e,f,g,h){var i=this,j={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","minMode","maxMode","showWeeks","startingDay","yearRange"],function(c,e){i[c]=angular.isDefined(b[c])?8>e?d(b[c])(a.$parent):a.$parent.$eval(b[c]):h[c]}),angular.forEach(["minDate","maxDate"],function(d){b[d]?a.$parent.$watch(c(b[d]),function(a){i[d]=a?new Date(a):null,i.refreshView()}):i[d]=h[d]?new Date(h[d]):null}),a.datepickerMode=a.datepickerMode||h.datepickerMode,a.uniqueId="datepicker-"+a.$id+"-"+Math.floor(1e4*Math.random()),this.activeDate=angular.isDefined(b.initDate)?a.$parent.$eval(b.initDate):new Date,a.isActive=function(b){return 0===i.compare(b.date,i.activeDate)?(a.activeDateId=b.uid,!0):!1},this.init=function(a){j=a,j.$render=function(){i.render()}},this.render=function(){if(j.$modelValue){var a=new Date(j.$modelValue),b=!isNaN(a);b?this.activeDate=a:f.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.'),j.$setValidity("date",b)}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var a=j.$modelValue?new Date(j.$modelValue):null;j.$setValidity("date-disabled",!a||this.element&&!this.isDisabled(a))}},this.createDateObject=function(a,b){var c=j.$modelValue?new Date(j.$modelValue):null;return{date:a,label:g(a,b),selected:c&&0===this.compare(a,c),disabled:this.isDisabled(a),current:0===this.compare(a,new Date)}},this.isDisabled=function(c){return this.minDate&&this.compare(c,this.minDate)<0||this.maxDate&&this.compare(c,this.maxDate)>0||b.dateDisabled&&a.dateDisabled({date:c,mode:a.datepickerMode})},this.split=function(a,b){for(var c=[];a.length>0;)c.push(a.splice(0,b));return c},a.select=function(b){if(a.datepickerMode===i.minMode){var c=j.$modelValue?new Date(j.$modelValue):new Date(0,0,0,0,0,0,0);c.setFullYear(b.getFullYear(),b.getMonth(),b.getDate()),j.$setViewValue(c),j.$render()}else i.activeDate=b,a.datepickerMode=i.modes[i.modes.indexOf(a.datepickerMode)-1]},a.move=function(a){var b=i.activeDate.getFullYear()+a*(i.step.years||0),c=i.activeDate.getMonth()+a*(i.step.months||0);i.activeDate.setFullYear(b,c,1),i.refreshView()},a.toggleMode=function(b){b=b||1,a.datepickerMode===i.maxMode&&1===b||a.datepickerMode===i.minMode&&-1===b||(a.datepickerMode=i.modes[i.modes.indexOf(a.datepickerMode)+b])},a.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var k=function(){e(function(){i.element[0].focus()},0,!1)};a.$on("datepicker.focus",k),a.keydown=function(b){var c=a.keys[b.which];if(c&&!b.shiftKey&&!b.altKey)if(b.preventDefault(),b.stopPropagation(),"enter"===c||"space"===c){if(i.isDisabled(i.activeDate))return;a.select(i.activeDate),k()}else!b.ctrlKey||"up"!==c&&"down"!==c?(i.handleKeyDown(c,b),i.refreshView()):(a.toggleMode("up"===c?1:-1),k())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/datepicker.html",scope:{datepickerMode:"=?",dateDisabled:"&"},require:["datepicker","?^ngModel"],controller:"DatepickerController",link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f)}}}).directive("daypicker",["dateFilter",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(b,c,d,e){function f(a,b){return 1!==b||a%4!==0||a%100===0&&a%400!==0?i[b]:29}function g(a,b){var c=new Array(b),d=new Date(a),e=0;for(d.setHours(12);b>e;)c[e++]=new Date(d),d.setDate(d.getDate()+1);return c}function h(a){var b=new Date(a);b.setDate(b.getDate()+4-(b.getDay()||7));var c=b.getTime();return b.setMonth(0),b.setDate(1),Math.floor(Math.round((c-b)/864e5)/7)+1}b.showWeeks=e.showWeeks,e.step={months:1},e.element=c;var i=[31,28,31,30,31,30,31,31,30,31,30,31];e._refreshView=function(){var c=e.activeDate.getFullYear(),d=e.activeDate.getMonth(),f=new Date(c,d,1),i=e.startingDay-f.getDay(),j=i>0?7-i:-i,k=new Date(f);j>0&&k.setDate(-j+1);for(var l=g(k,42),m=0;42>m;m++)l[m]=angular.extend(e.createDateObject(l[m],e.formatDay),{secondary:l[m].getMonth()!==d,uid:b.uniqueId+"-"+m});b.labels=new Array(7);for(var n=0;7>n;n++)b.labels[n]={abbr:a(l[n].date,e.formatDayHeader),full:a(l[n].date,"EEEE")};if(b.title=a(e.activeDate,e.formatDayTitle),b.rows=e.split(l,7),b.showWeeks){b.weekNumbers=[];for(var o=h(b.rows[0][0].date),p=b.rows.length;b.weekNumbers.push(o++)<p;);}},e.compare=function(a,b){return new Date(a.getFullYear(),a.getMonth(),a.getDate())-new Date(b.getFullYear(),b.getMonth(),b.getDate())},e.handleKeyDown=function(a){var b=e.activeDate.getDate();if("left"===a)b-=1;else if("up"===a)b-=7;else if("right"===a)b+=1;else if("down"===a)b+=7;else if("pageup"===a||"pagedown"===a){var c=e.activeDate.getMonth()+("pageup"===a?-1:1);e.activeDate.setMonth(c,1),b=Math.min(f(e.activeDate.getFullYear(),e.activeDate.getMonth()),b)}else"home"===a?b=1:"end"===a&&(b=f(e.activeDate.getFullYear(),e.activeDate.getMonth()));e.activeDate.setDate(b)},e.refreshView()}}}]).directive("monthpicker",["dateFilter",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(b,c,d,e){e.step={years:1},e.element=c,e._refreshView=function(){for(var c=new Array(12),d=e.activeDate.getFullYear(),f=0;12>f;f++)c[f]=angular.extend(e.createDateObject(new Date(d,f,1),e.formatMonth),{uid:b.uniqueId+"-"+f});b.title=a(e.activeDate,e.formatMonthTitle),b.rows=e.split(c,3)},e.compare=function(a,b){return new Date(a.getFullYear(),a.getMonth())-new Date(b.getFullYear(),b.getMonth())},e.handleKeyDown=function(a){var b=e.activeDate.getMonth();if("left"===a)b-=1;else if("up"===a)b-=3;else if("right"===a)b+=1;else if("down"===a)b+=3;else if("pageup"===a||"pagedown"===a){var c=e.activeDate.getFullYear()+("pageup"===a?-1:1);e.activeDate.setFullYear(c)}else"home"===a?b=0:"end"===a&&(b=11);e.activeDate.setMonth(b)},e.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(a,b,c,d){function e(a){return parseInt((a-1)/f,10)*f+1}var f=d.yearRange;d.step={years:f},d.element=b,d._refreshView=function(){for(var b=new Array(f),c=0,g=e(d.activeDate.getFullYear());f>c;c++)b[c]=angular.extend(d.createDateObject(new Date(g+c,0,1),d.formatYear),{uid:a.uniqueId+"-"+c});a.title=[b[0].label,b[f-1].label].join(" - "),a.rows=d.split(b,5)},d.compare=function(a,b){return a.getFullYear()-b.getFullYear()},d.handleKeyDown=function(a){var b=d.activeDate.getFullYear();"left"===a?b-=1:"up"===a?b-=5:"right"===a?b+=1:"down"===a?b+=5:"pageup"===a||"pagedown"===a?b+=("pageup"===a?-1:1)*d.step.years:"home"===a?b=e(d.activeDate.getFullYear()):"end"===a&&(b=e(d.activeDate.getFullYear())+f-1),d.activeDate.setFullYear(b)},d.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0}).directive("datepickerPopup",["$compile","$parse","$document","$position","dateFilter","dateParser","datepickerPopupConfig",function(a,b,c,d,e,f,g){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&"},link:function(h,i,j,k){function l(a){return a.replace(/([A-Z])/g,function(a){return"-"+a.toLowerCase()})}function m(a){if(a){if(angular.isDate(a)&&!isNaN(a))return k.$setValidity("date",!0),a;if(angular.isString(a)){var b=f.parse(a,n)||new Date(a);return isNaN(b)?void k.$setValidity("date",!1):(k.$setValidity("date",!0),b)}return void k.$setValidity("date",!1)}return k.$setValidity("date",!0),null}var n,o=angular.isDefined(j.closeOnDateSelection)?h.$parent.$eval(j.closeOnDateSelection):g.closeOnDateSelection,p=angular.isDefined(j.datepickerAppendToBody)?h.$parent.$eval(j.datepickerAppendToBody):g.appendToBody;h.showButtonBar=angular.isDefined(j.showButtonBar)?h.$parent.$eval(j.showButtonBar):g.showButtonBar,h.getText=function(a){return h[a+"Text"]||g[a+"Text"]},j.$observe("datepickerPopup",function(a){n=a||g.datepickerPopup,k.$render()});var q=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");q.attr({"ng-model":"date","ng-change":"dateSelection()"});var r=angular.element(q.children()[0]);j.datepickerOptions&&angular.forEach(h.$parent.$eval(j.datepickerOptions),function(a,b){r.attr(l(b),a)}),h.watchData={},angular.forEach(["minDate","maxDate","datepickerMode"],function(a){if(j[a]){var c=b(j[a]);if(h.$parent.$watch(c,function(b){h.watchData[a]=b}),r.attr(l(a),"watchData."+a),"datepickerMode"===a){var d=c.assign;h.$watch("watchData."+a,function(a,b){a!==b&&d(h.$parent,a)})}}}),j.dateDisabled&&r.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),k.$parsers.unshift(m),h.dateSelection=function(a){angular.isDefined(a)&&(h.date=a),k.$setViewValue(h.date),k.$render(),o&&(h.isOpen=!1,i[0].focus())},i.bind("input change keyup",function(){h.$apply(function(){h.date=k.$modelValue})}),k.$render=function(){var a=k.$viewValue?e(k.$viewValue,n):"";i.val(a),h.date=m(k.$modelValue)};var s=function(a){h.isOpen&&a.target!==i[0]&&h.$apply(function(){h.isOpen=!1})},t=function(a){h.keydown(a)};i.bind("keydown",t),h.keydown=function(a){27===a.which?(a.preventDefault(),a.stopPropagation(),h.close()):40!==a.which||h.isOpen||(h.isOpen=!0)},h.$watch("isOpen",function(a){a?(h.$broadcast("datepicker.focus"),h.position=p?d.offset(i):d.position(i),h.position.top=h.position.top+i.prop("offsetHeight"),c.bind("click",s)):c.unbind("click",s)}),h.select=function(a){if("today"===a){var b=new Date;angular.isDate(k.$modelValue)?(a=new Date(k.$modelValue),a.setFullYear(b.getFullYear(),b.getMonth(),b.getDate())):a=new Date(b.setHours(0,0,0,0))}h.dateSelection(a)},h.close=function(){h.isOpen=!1,i[0].focus()};var u=a(q)(h);q.remove(),p?c.find("body").append(u):i.after(u),h.$on("$destroy",function(){u.remove(),i.unbind("keydown",t),c.unbind("click",s)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:"template/datepicker/popup.html",link:function(a,b){b.bind("click",function(a){a.preventDefault(),a.stopPropagation()})}}}),angular.module("ui.bootstrap.dropdown",[]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document",function(a){var b=null;this.open=function(e){b||(a.bind("click",c),a.bind("keydown",d)),b&&b!==e&&(b.isOpen=!1),b=e},this.close=function(e){b===e&&(b=null,a.unbind("click",c),a.unbind("keydown",d))};var c=function(a){var c=b.getToggleElement();a&&c&&c[0].contains(a.target)||b.$apply(function(){b.isOpen=!1})},d=function(a){27===a.which&&(b.focusToggleElement(),c())}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate",function(a,b,c,d,e,f){var g,h=this,i=a.$new(),j=d.openClass,k=angular.noop,l=b.onToggle?c(b.onToggle):angular.noop;this.init=function(d){h.$element=d,b.isOpen&&(g=c(b.isOpen),k=g.assign,a.$watch(g,function(a){i.isOpen=!!a}))},this.toggle=function(a){return i.isOpen=arguments.length?!!a:!i.isOpen},this.isOpen=function(){return i.isOpen},i.getToggleElement=function(){return h.toggleElement},i.focusToggleElement=function(){h.toggleElement&&h.toggleElement[0].focus()},i.$watch("isOpen",function(b,c){f[b?"addClass":"removeClass"](h.$element,j),b?(i.focusToggleElement(),e.open(i)):e.close(i),k(a,b),angular.isDefined(b)&&b!==c&&l(a,{open:!!b})}),a.$on("$locationChangeSuccess",function(){i.isOpen=!1}),a.$on("$destroy",function(){i.$destroy()})}]).directive("dropdown",function(){return{restrict:"CA",controller:"DropdownController",link:function(a,b,c,d){d.init(b)}}}).directive("dropdownToggle",function(){return{restrict:"CA",require:"?^dropdown",link:function(a,b,c,d){if(d){d.toggleElement=b;var e=function(e){e.preventDefault(),b.hasClass("disabled")||c.disabled||a.$apply(function(){d.toggle()})};b.bind("click",e),b.attr({"aria-haspopup":!0,"aria-expanded":!1}),a.$watch(d.isOpen,function(a){b.attr("aria-expanded",!!a)}),a.$on("$destroy",function(){b.unbind("click",e)})}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.transition"]).factory("$$stackedMap",function(){return{createNew:function(){var a=[];return{add:function(b,c){a.push({key:b,value:c})},get:function(b){for(var c=0;c<a.length;c++)if(b==a[c].key)return a[c]},keys:function(){for(var b=[],c=0;c<a.length;c++)b.push(a[c].key);return b},top:function(){return a[a.length-1]},remove:function(b){for(var c=-1,d=0;d<a.length;d++)if(b==a[d].key){c=d;break}return a.splice(c,1)[0]},removeTop:function(){return a.splice(a.length-1,1)[0]},length:function(){return a.length}}}}}).directive("modalBackdrop",["$timeout",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",link:function(b,c,d){b.backdropClass=d.backdropClass||"",b.animate=!1,a(function(){b.animate=!0})}}}]).directive("modalWindow",["$modalStack","$timeout",function(a,b){return{restrict:"EA",scope:{index:"@",animate:"="},replace:!0,transclude:!0,templateUrl:function(a,b){return b.templateUrl||"template/modal/window.html"},link:function(c,d,e){d.addClass(e.windowClass||""),c.size=e.size,b(function(){c.animate=!0,d[0].querySelectorAll("[autofocus]").length||d[0].focus()}),c.close=function(b){var c=a.getTop();c&&c.value.backdrop&&"static"!=c.value.backdrop&&b.target===b.currentTarget&&(b.preventDefault(),b.stopPropagation(),a.dismiss(c.key,"backdrop click"))}}}}]).directive("modalTransclude",function(){return{link:function(a,b,c,d,e){e(a.$parent,function(a){b.empty(),b.append(a)})}}}).factory("$modalStack",["$transition","$timeout","$document","$compile","$rootScope","$$stackedMap",function(a,b,c,d,e,f){function g(){for(var a=-1,b=n.keys(),c=0;c<b.length;c++)n.get(b[c]).value.backdrop&&(a=c);return a}function h(a){var b=c.find("body").eq(0),d=n.get(a).value;n.remove(a),j(d.modalDomEl,d.modalScope,300,function(){d.modalScope.$destroy(),b.toggleClass(m,n.length()>0),i()})}function i(){if(k&&-1==g()){var a=l;j(k,l,150,function(){a.$destroy(),a=null}),k=void 0,l=void 0}}function j(c,d,e,f){function g(){g.done||(g.done=!0,c.remove(),f&&f())}d.animate=!1;var h=a.transitionEndEventName;if(h){var i=b(g,e);c.bind(h,function(){b.cancel(i),g(),d.$apply()})}else b(g)}var k,l,m="modal-open",n=f.createNew(),o={};return e.$watch(g,function(a){l&&(l.index=a)}),c.bind("keydown",function(a){var b;27===a.which&&(b=n.top(),b&&b.value.keyboard&&(a.preventDefault(),e.$apply(function(){o.dismiss(b.key,"escape key press")})))}),o.open=function(a,b){n.add(a,{deferred:b.deferred,modalScope:b.scope,backdrop:b.backdrop,keyboard:b.keyboard});var f=c.find("body").eq(0),h=g();if(h>=0&&!k){l=e.$new(!0),l.index=h;var i=angular.element("<div modal-backdrop></div>");i.attr("backdrop-class",b.backdropClass),k=d(i)(l),f.append(k)}var j=angular.element("<div modal-window></div>");j.attr({"template-url":b.windowTemplateUrl,"window-class":b.windowClass,size:b.size,index:n.length()-1,animate:"animate"}).html(b.content);var o=d(j)(b.scope);n.top().value.modalDomEl=o,f.append(o),f.addClass(m)},o.close=function(a,b){var c=n.get(a);c&&(c.value.deferred.resolve(b),h(a))},o.dismiss=function(a,b){var c=n.get(a);c&&(c.value.deferred.reject(b),h(a))},o.dismissAll=function(a){for(var b=this.getTop();b;)this.dismiss(b.key,a),b=this.getTop()},o.getTop=function(){return n.top()},o}]).provider("$modal",function(){var a={options:{backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$http","$templateCache","$controller","$modalStack",function(b,c,d,e,f,g,h){function i(a){return a.template?d.when(a.template):e.get(angular.isFunction(a.templateUrl)?a.templateUrl():a.templateUrl,{cache:f}).then(function(a){return a.data})}function j(a){var c=[];return angular.forEach(a,function(a){(angular.isFunction(a)||angular.isArray(a))&&c.push(d.when(b.invoke(a)))}),c}var k={};return k.open=function(b){var e=d.defer(),f=d.defer(),k={result:e.promise,opened:f.promise,close:function(a){h.close(k,a)},dismiss:function(a){h.dismiss(k,a)}};if(b=angular.extend({},a.options,b),b.resolve=b.resolve||{},!b.template&&!b.templateUrl)throw new Error("One of template or templateUrl options is required.");var l=d.all([i(b)].concat(j(b.resolve)));return l.then(function(a){var d=(b.scope||c).$new();d.$close=k.close,d.$dismiss=k.dismiss;var f,i={},j=1;b.controller&&(i.$scope=d,i.$modalInstance=k,angular.forEach(b.resolve,function(b,c){i[c]=a[j++]}),f=g(b.controller,i),b.controllerAs&&(d[b.controllerAs]=f)),h.open(k,{scope:d,deferred:e,content:a[0],backdrop:b.backdrop,keyboard:b.keyboard,backdropClass:b.backdropClass,windowClass:b.windowClass,windowTemplateUrl:b.windowTemplateUrl,size:b.size})},function(a){e.reject(a)}),l.then(function(){f.resolve(!0)},function(){f.reject(!1)}),k},k}]};return a}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(a,b,c){var d=this,e={$setViewValue:angular.noop},f=b.numPages?c(b.numPages).assign:angular.noop;this.init=function(f,g){e=f,this.config=g,e.$render=function(){d.render()},b.itemsPerPage?a.$parent.$watch(c(b.itemsPerPage),function(b){d.itemsPerPage=parseInt(b,10),a.totalPages=d.calculateTotalPages()}):this.itemsPerPage=g.itemsPerPage},this.calculateTotalPages=function(){var b=this.itemsPerPage<1?1:Math.ceil(a.totalItems/this.itemsPerPage);return Math.max(b||0,1)},this.render=function(){a.page=parseInt(e.$viewValue,10)||1},a.selectPage=function(b){a.page!==b&&b>0&&b<=a.totalPages&&(e.$setViewValue(b),e.$render())},a.getText=function(b){return a[b+"Text"]||d.config[b+"Text"]},a.noPrevious=function(){return 1===a.page},a.noNext=function(){return a.page===a.totalPages},a.$watch("totalItems",function(){a.totalPages=d.calculateTotalPages()}),a.$watch("totalPages",function(b){f(a.$parent,b),a.page>b?a.selectPage(b):e.$render()})}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(a,b){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@"},require:["pagination","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pagination.html",replace:!0,link:function(c,d,e,f){function g(a,b,c){return{number:a,text:b,active:c}}function h(a,b){var c=[],d=1,e=b,f=angular.isDefined(k)&&b>k;f&&(l?(d=Math.max(a-Math.floor(k/2),1),e=d+k-1,e>b&&(e=b,d=e-k+1)):(d=(Math.ceil(a/k)-1)*k+1,e=Math.min(d+k-1,b)));for(var h=d;e>=h;h++){var i=g(h,h,h===a);c.push(i)}if(f&&!l){if(d>1){var j=g(d-1,"...",!1);c.unshift(j)}if(b>e){var m=g(e+1,"...",!1);c.push(m)}}return c}var i=f[0],j=f[1];if(j){var k=angular.isDefined(e.maxSize)?c.$parent.$eval(e.maxSize):b.maxSize,l=angular.isDefined(e.rotate)?c.$parent.$eval(e.rotate):b.rotate;c.boundaryLinks=angular.isDefined(e.boundaryLinks)?c.$parent.$eval(e.boundaryLinks):b.boundaryLinks,c.directionLinks=angular.isDefined(e.directionLinks)?c.$parent.$eval(e.directionLinks):b.directionLinks,i.init(j,b),e.maxSize&&c.$parent.$watch(a(e.maxSize),function(a){k=parseInt(a,10),i.render()
});var m=i.render;i.render=function(){m(),c.page>0&&c.page<=c.totalPages&&(c.pages=h(c.page,c.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(a){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@"},require:["pager","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pager.html",replace:!0,link:function(b,c,d,e){var f=e[0],g=e[1];g&&(b.align=angular.isDefined(d.align)?b.$parent.$eval(d.align):a.align,f.init(g,a))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function a(a){var b=/[A-Z]/g,c="-";return a.replace(b,function(a,b){return(b?c:"")+a.toLowerCase()})}var b={placement:"top",animation:!0,popupDelay:0},c={mouseenter:"mouseleave",click:"click",focus:"blur"},d={};this.options=function(a){angular.extend(d,a)},this.setTriggers=function(a){angular.extend(c,a)},this.$get=["$window","$compile","$timeout","$parse","$document","$position","$interpolate",function(e,f,g,h,i,j,k){return function(e,l,m){function n(a){var b=a||o.trigger||m,d=c[b]||b;return{show:b,hide:d}}var o=angular.extend({},b,d),p=a(e),q=k.startSymbol(),r=k.endSymbol(),s="<div "+p+'-popup title="'+q+"tt_title"+r+'" content="'+q+"tt_content"+r+'" placement="'+q+"tt_placement"+r+'" animation="tt_animation" is-open="tt_isOpen"></div>';return{restrict:"EA",scope:!0,compile:function(){var a=f(s);return function(b,c,d){function f(){b.tt_isOpen?m():k()}function k(){(!y||b.$eval(d[l+"Enable"]))&&(b.tt_popupDelay?v||(v=g(p,b.tt_popupDelay,!1),v.then(function(a){a()})):p()())}function m(){b.$apply(function(){q()})}function p(){return v=null,u&&(g.cancel(u),u=null),b.tt_content?(r(),t.css({top:0,left:0,display:"block"}),w?i.find("body").append(t):c.after(t),z(),b.tt_isOpen=!0,b.$digest(),z):angular.noop}function q(){b.tt_isOpen=!1,g.cancel(v),v=null,b.tt_animation?u||(u=g(s,500)):s()}function r(){t&&s(),t=a(b,function(){}),b.$digest()}function s(){u=null,t&&(t.remove(),t=null)}var t,u,v,w=angular.isDefined(o.appendToBody)?o.appendToBody:!1,x=n(void 0),y=angular.isDefined(d[l+"Enable"]),z=function(){var a=j.positionElements(c,t,b.tt_placement,w);a.top+="px",a.left+="px",t.css(a)};b.tt_isOpen=!1,d.$observe(e,function(a){b.tt_content=a,!a&&b.tt_isOpen&&q()}),d.$observe(l+"Title",function(a){b.tt_title=a}),d.$observe(l+"Placement",function(a){b.tt_placement=angular.isDefined(a)?a:o.placement}),d.$observe(l+"PopupDelay",function(a){var c=parseInt(a,10);b.tt_popupDelay=isNaN(c)?o.popupDelay:c});var A=function(){c.unbind(x.show,k),c.unbind(x.hide,m)};d.$observe(l+"Trigger",function(a){A(),x=n(a),x.show===x.hide?c.bind(x.show,f):(c.bind(x.show,k),c.bind(x.hide,m))});var B=b.$eval(d[l+"Animation"]);b.tt_animation=angular.isDefined(B)?!!B:o.animation,d.$observe(l+"AppendToBody",function(a){w=angular.isDefined(a)?h(a)(b):w}),w&&b.$on("$locationChangeSuccess",function(){b.tt_isOpen&&q()}),b.$on("$destroy",function(){g.cancel(u),g.cancel(v),A(),s()})}}}}}]}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(a){return a("tooltip","tooltip","mouseenter")}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).directive("tooltipHtmlUnsafe",["$tooltip",function(a){return a("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(a){return a("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).controller("ProgressController",["$scope","$attrs","progressConfig",function(a,b,c){var d=this,e=angular.isDefined(b.animate)?a.$parent.$eval(b.animate):c.animate;this.bars=[],a.max=angular.isDefined(b.max)?a.$parent.$eval(b.max):c.max,this.addBar=function(b,c){e||c.css({transition:"none"}),this.bars.push(b),b.$watch("value",function(c){b.percent=+(100*c/a.max).toFixed(2)}),b.$on("$destroy",function(){c=null,d.removeBar(b)})},this.removeBar=function(a){this.bars.splice(this.bars.indexOf(a),1)}}]).directive("progress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{},templateUrl:"template/progressbar/progress.html"}}).directive("bar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(a,b,c,d){d.addBar(a,b)}}}).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(a,b,c,d){d.addBar(a,angular.element(b.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null}).controller("RatingController",["$scope","$attrs","ratingConfig",function(a,b,c){var d={$setViewValue:angular.noop};this.init=function(e){d=e,d.$render=this.render,this.stateOn=angular.isDefined(b.stateOn)?a.$parent.$eval(b.stateOn):c.stateOn,this.stateOff=angular.isDefined(b.stateOff)?a.$parent.$eval(b.stateOff):c.stateOff;var f=angular.isDefined(b.ratingStates)?a.$parent.$eval(b.ratingStates):new Array(angular.isDefined(b.max)?a.$parent.$eval(b.max):c.max);a.range=this.buildTemplateObjects(f)},this.buildTemplateObjects=function(a){for(var b=0,c=a.length;c>b;b++)a[b]=angular.extend({index:b},{stateOn:this.stateOn,stateOff:this.stateOff},a[b]);return a},a.rate=function(b){!a.readonly&&b>=0&&b<=a.range.length&&(d.$setViewValue(b),d.$render())},a.enter=function(b){a.readonly||(a.value=b),a.onHover({value:b})},a.reset=function(){a.value=d.$viewValue,a.onLeave()},a.onKeydown=function(b){/(37|38|39|40)/.test(b.which)&&(b.preventDefault(),b.stopPropagation(),a.rate(a.value+(38===b.which||39===b.which?1:-1)))},this.render=function(){a.value=d.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(a){var b=this,c=b.tabs=a.tabs=[];b.select=function(a){angular.forEach(c,function(b){b.active&&b!==a&&(b.active=!1,b.onDeselect())}),a.active=!0,a.onSelect()},b.addTab=function(a){c.push(a),1===c.length?a.active=!0:a.active&&b.select(a)},b.removeTab=function(a){var d=c.indexOf(a);if(a.active&&c.length>1){var e=d==c.length-1?d-1:d+1;b.select(c[e])}c.splice(d,1)}}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(a,b,c){a.vertical=angular.isDefined(c.vertical)?a.$parent.$eval(c.vertical):!1,a.justified=angular.isDefined(c.justified)?a.$parent.$eval(c.justified):!1}}}).directive("tab",["$parse",function(a){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},compile:function(b,c,d){return function(b,c,e,f){b.$watch("active",function(a){a&&f.select(b)}),b.disabled=!1,e.disabled&&b.$parent.$watch(a(e.disabled),function(a){b.disabled=!!a}),b.select=function(){b.disabled||(b.active=!0)},f.addTab(b),b.$on("$destroy",function(){f.removeTab(b)}),b.$transcludeFn=d}}}}]).directive("tabHeadingTransclude",[function(){return{restrict:"A",require:"^tab",link:function(a,b){a.$watch("headingElement",function(a){a&&(b.html(""),b.append(a))})}}}]).directive("tabContentTransclude",function(){function a(a){return a.tagName&&(a.hasAttribute("tab-heading")||a.hasAttribute("data-tab-heading")||"tab-heading"===a.tagName.toLowerCase()||"data-tab-heading"===a.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(b,c,d){var e=b.$eval(d.tabContentTransclude);e.$transcludeFn(e.$parent,function(b){angular.forEach(b,function(b){a(b)?e.headingElement=b:c.append(b)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(a,b,c,d,e,f){function g(){var b=parseInt(a.hours,10),c=a.showMeridian?b>0&&13>b:b>=0&&24>b;return c?(a.showMeridian&&(12===b&&(b=0),a.meridian===p[1]&&(b+=12)),b):void 0}function h(){var b=parseInt(a.minutes,10);return b>=0&&60>b?b:void 0}function i(a){return angular.isDefined(a)&&a.toString().length<2?"0"+a:a}function j(a){k(),o.$setViewValue(new Date(n)),l(a)}function k(){o.$setValidity("time",!0),a.invalidHours=!1,a.invalidMinutes=!1}function l(b){var c=n.getHours(),d=n.getMinutes();a.showMeridian&&(c=0===c||12===c?12:c%12),a.hours="h"===b?c:i(c),a.minutes="m"===b?d:i(d),a.meridian=n.getHours()<12?p[0]:p[1]}function m(a){var b=new Date(n.getTime()+6e4*a);n.setHours(b.getHours(),b.getMinutes()),j()}var n=new Date,o={$setViewValue:angular.noop},p=angular.isDefined(b.meridians)?a.$parent.$eval(b.meridians):f.meridians||e.DATETIME_FORMATS.AMPMS;this.init=function(c,d){o=c,o.$render=this.render;var e=d.eq(0),g=d.eq(1),h=angular.isDefined(b.mousewheel)?a.$parent.$eval(b.mousewheel):f.mousewheel;h&&this.setupMousewheelEvents(e,g),a.readonlyInput=angular.isDefined(b.readonlyInput)?a.$parent.$eval(b.readonlyInput):f.readonlyInput,this.setupInputEvents(e,g)};var q=f.hourStep;b.hourStep&&a.$parent.$watch(c(b.hourStep),function(a){q=parseInt(a,10)});var r=f.minuteStep;b.minuteStep&&a.$parent.$watch(c(b.minuteStep),function(a){r=parseInt(a,10)}),a.showMeridian=f.showMeridian,b.showMeridian&&a.$parent.$watch(c(b.showMeridian),function(b){if(a.showMeridian=!!b,o.$error.time){var c=g(),d=h();angular.isDefined(c)&&angular.isDefined(d)&&(n.setHours(c),j())}else l()}),this.setupMousewheelEvents=function(b,c){var d=function(a){a.originalEvent&&(a=a.originalEvent);var b=a.wheelDelta?a.wheelDelta:-a.deltaY;return a.detail||b>0};b.bind("mousewheel wheel",function(b){a.$apply(d(b)?a.incrementHours():a.decrementHours()),b.preventDefault()}),c.bind("mousewheel wheel",function(b){a.$apply(d(b)?a.incrementMinutes():a.decrementMinutes()),b.preventDefault()})},this.setupInputEvents=function(b,c){if(a.readonlyInput)return a.updateHours=angular.noop,void(a.updateMinutes=angular.noop);var d=function(b,c){o.$setViewValue(null),o.$setValidity("time",!1),angular.isDefined(b)&&(a.invalidHours=b),angular.isDefined(c)&&(a.invalidMinutes=c)};a.updateHours=function(){var a=g();angular.isDefined(a)?(n.setHours(a),j("h")):d(!0)},b.bind("blur",function(){!a.invalidHours&&a.hours<10&&a.$apply(function(){a.hours=i(a.hours)})}),a.updateMinutes=function(){var a=h();angular.isDefined(a)?(n.setMinutes(a),j("m")):d(void 0,!0)},c.bind("blur",function(){!a.invalidMinutes&&a.minutes<10&&a.$apply(function(){a.minutes=i(a.minutes)})})},this.render=function(){var a=o.$modelValue?new Date(o.$modelValue):null;isNaN(a)?(o.$setValidity("time",!1),d.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(a&&(n=a),k(),l())},a.incrementHours=function(){m(60*q)},a.decrementHours=function(){m(60*-q)},a.incrementMinutes=function(){m(r)},a.decrementMinutes=function(){m(-r)},a.toggleMeridian=function(){m(720*(n.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",replace:!0,scope:{},templateUrl:"template/timepicker/timepicker.html",link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f,b.find("input"))}}}),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).factory("typeaheadParser",["$parse",function(a){var b=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(c){var d=c.match(b);if(!d)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+c+'".');return{itemName:d[3],source:a(d[4]),viewMapper:a(d[2]||d[1]),modelMapper:a(d[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$position","typeaheadParser",function(a,b,c,d,e,f,g){var h=[9,13,27,38,40];return{require:"ngModel",link:function(i,j,k,l){var m,n=i.$eval(k.typeaheadMinLength)||1,o=i.$eval(k.typeaheadWaitMs)||0,p=i.$eval(k.typeaheadEditable)!==!1,q=b(k.typeaheadLoading).assign||angular.noop,r=b(k.typeaheadOnSelect),s=k.typeaheadInputFormatter?b(k.typeaheadInputFormatter):void 0,t=k.typeaheadAppendToBody?i.$eval(k.typeaheadAppendToBody):!1,u=b(k.ngModel).assign,v=g.parse(k.typeahead),w=i.$new();i.$on("$destroy",function(){w.$destroy()});var x="typeahead-"+w.$id+"-"+Math.floor(1e4*Math.random());j.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":x});var y=angular.element("<div typeahead-popup></div>");y.attr({id:x,matches:"matches",active:"activeIdx",select:"select(activeIdx)",query:"query",position:"position"}),angular.isDefined(k.typeaheadTemplateUrl)&&y.attr("template-url",k.typeaheadTemplateUrl);var z=function(){w.matches=[],w.activeIdx=-1,j.attr("aria-expanded",!1)},A=function(a){return x+"-option-"+a};w.$watch("activeIdx",function(a){0>a?j.removeAttr("aria-activedescendant"):j.attr("aria-activedescendant",A(a))});var B=function(a){var b={$viewValue:a};q(i,!0),c.when(v.source(i,b)).then(function(c){var d=a===l.$viewValue;if(d&&m)if(c.length>0){w.activeIdx=0,w.matches.length=0;for(var e=0;e<c.length;e++)b[v.itemName]=c[e],w.matches.push({id:A(e),label:v.viewMapper(w,b),model:c[e]});w.query=a,w.position=t?f.offset(j):f.position(j),w.position.top=w.position.top+j.prop("offsetHeight"),j.attr("aria-expanded",!0)}else z();d&&q(i,!1)},function(){z(),q(i,!1)})};z(),w.query=void 0;var C,D=function(a){C=d(function(){B(a)},o)},E=function(){C&&d.cancel(C)};l.$parsers.unshift(function(a){return m=!0,a&&a.length>=n?o>0?(E(),D(a)):B(a):(q(i,!1),E(),z()),p?a:a?void l.$setValidity("editable",!1):(l.$setValidity("editable",!0),a)}),l.$formatters.push(function(a){var b,c,d={};return s?(d.$model=a,s(i,d)):(d[v.itemName]=a,b=v.viewMapper(i,d),d[v.itemName]=void 0,c=v.viewMapper(i,d),b!==c?b:a)}),w.select=function(a){var b,c,e={};e[v.itemName]=c=w.matches[a].model,b=v.modelMapper(i,e),u(i,b),l.$setValidity("editable",!0),r(i,{$item:c,$model:b,$label:v.viewMapper(i,e)}),z(),d(function(){j[0].focus()},0,!1)},j.bind("keydown",function(a){0!==w.matches.length&&-1!==h.indexOf(a.which)&&(a.preventDefault(),40===a.which?(w.activeIdx=(w.activeIdx+1)%w.matches.length,w.$digest()):38===a.which?(w.activeIdx=(w.activeIdx?w.activeIdx:w.matches.length)-1,w.$digest()):13===a.which||9===a.which?w.$apply(function(){w.select(w.activeIdx)}):27===a.which&&(a.stopPropagation(),z(),w.$digest()))}),j.bind("blur",function(){m=!1});var F=function(a){j[0]!==a.target&&(z(),w.$digest())};e.bind("click",F),i.$on("$destroy",function(){e.unbind("click",F)});var G=a(y)(w);t?e.find("body").append(G):j.after(G)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"=",select:"&"},replace:!0,templateUrl:"template/typeahead/typeahead-popup.html",link:function(a,b,c){a.templateUrl=c.templateUrl,a.isOpen=function(){return a.matches.length>0},a.isActive=function(b){return a.active==b},a.selectActive=function(b){a.active=b},a.selectMatch=function(b){a.select({activeIdx:b})}}}}).directive("typeaheadMatch",["$http","$templateCache","$compile","$parse",function(a,b,c,d){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(e,f,g){var h=d(g.templateUrl)(e.$parent)||"template/typeahead/typeahead-match.html";a.get(h,{cache:b}).success(function(a){f.replaceWith(c(a.trim())(e))})}}}]).filter("typeaheadHighlight",function(){function a(a){return a.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}return function(b,c){return c?(""+b).replace(new RegExp(a(c),"gi"),"<strong>$&</strong>"):b}}),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(a){a.put("template/accordion/accordion-group.html",'<div class="panel panel-default">\n  <div class="panel-heading">\n    <h4 class="panel-title">\n      <a class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(a){a.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(a){a.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissable\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close()">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(a){a.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(a){a.put("template/carousel/slide.html","<div ng-class=\"{\n    'active': leaving || (active && !entering),\n    'prev': (next || active) && direction=='prev',\n    'next': (next || active) && direction=='next',\n    'right': direction=='prev',\n    'left': direction=='next'\n  }\" class=\"item text-center\" ng-transclude></div>\n")}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{5 + showWeeks}}"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-show="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in labels track by $index" class="text-center"><small aria-label="{{label.full}}">{{label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-show="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-style="{display: (isOpen && \'block\') || \'none\', top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(a){a.put("template/modal/backdrop.html",'<div class="modal-backdrop fade {{ backdropClass }}"\n     ng-class="{in: animate}"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(a){a.put("template/modal/window.html",'<div tabindex="-1" role="dialog" class="modal fade" ng-class="{in: animate}" ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="{\'modal-sm\': size == \'sm\', \'modal-lg\': size == \'lg\'}"><div class="modal-content" modal-transclude></div></div>\n</div>')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(a){a.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n</ul>')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(a){a.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="boundaryLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(1)">{{getText(\'first\')}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active}"><a href ng-click="selectPage(page.number)">{{page.text}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n  <li ng-if="boundaryLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(totalPages)">{{getText(\'last\')}}</a></li>\n</ul>')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(a){a.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(a){a.put("template/tooltip/tooltip-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(a){a.put("template/popover/popover.html",'<div class="popover {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-show="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\n</div>')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(a){a.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <i ng-repeat="r in range track by $index" ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')">\n        <span class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    </i>\n</span>')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(a){a.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(a){a.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(a){a.put("template/timepicker/timepicker.html",'<table>\n	<tbody>\n		<tr class="text-center">\n			<td><a ng-click="incrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="incrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n		<tr>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidHours}">\n				<input type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-mousewheel="incrementHours()" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td>:</td>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n				<input type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td ng-show="showMeridian"><button type="button" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n		</tr>\n		<tr class="text-center">\n			<td><a ng-click="decrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="decrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n	</tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(a){a.put("template/typeahead/typeahead-match.html",'<a tabindex="-1" bind-html-unsafe="match.label | typeaheadHighlight:query"></a>')
}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(a){a.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen()" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]);
},{}],13:[function(require,module,exports){
/**
 * Created by kasperen on 18.09.14.
 */
angular.module('ui.handsontable', [])
    .service('handsontableSrvc', function() {
    })
    .controller("HandsonController", function ($scope) {
		/*
		$scope.data = instance.LCPQuestionnaire.listOfPlants;
		$scope.data = [
			{
				"delete": false,
				"plantName": "1",
				"plantId": "",
				"eprtrNationalId": "",
				"address1": "",
				"address2": "",
				"city": "",
				"region": "",
				"postalCode": "",
				"longitude": "",
				"latitude": ""
			},
			{
				"delete": false,
				"plantName": "2",
				"plantId": null,
				"eprtrNationalId": null,
				"address1": null,
				"address2": null,
				"city": null,
				"region": null,
				"postalCode": null,
				"longitude": null,
				"latitude": null
			}
		];
		*/
	})
	.directive('uiHandsontable', function () {
		return {
			restrict: 'A',
			scope: {
				data: '='
			},
			replace: true,
			link: function (scope, elem, attrs) {
				elem.handsontable({
				data: scope.data,
                contextMenu: true,
				rowHeaders: true,
				minSpareRows: 1,
                colHeaders: ["Delete", "Plant Name", "Plant Id", "E-PRTR national ID", "Address 1", "Address 2", "City", "Region", "Postal code", "Longitude", "Latitude"],
                columns: [
                    {
                        data: "delete",
                        type: "checkbox"
                    },
                    {
                        data: "plantName"
                    },
                    {
                        data: "plantId",
                        type: 'numeric'
                    },
                    {
                        data: "eprtrNationalId",
                        type: 'numeric'
                    },
                    {
                        data: "address1"
                    },
                    {
                        data: "address2"
                    },
                    {
                        data: "city"
                    },
                    {
                        data: "region"
                    },
                    {
                        data: "postalCode",
                        type: 'numeric'
                    },
                    {
                        data: "longitude",
                        type: 'numeric',
                        format: '000.000'
                    },
                    {
                        data: "latitude",
                        type: 'numeric',
                        format: '000.000'
                    }
                ]
            })
        }
    }
	})
},{}],14:[function(require,module,exports){
// Module that provides multiselect box to webform from json-ld format.
//
// Usage Example:
// <div multiselect class="multiselect" name="TypeOfUse" multiple="true"
//      ng-model="row.TypeOfUse"
//      options="annex1Concept['@id'] as annex1Concept.prefLabel[0]['@value'] for annex1Concept in codeList.LCPCodelists.Annex1Activities.concepts"
//      change="selected()" required></div>
//
// Note! options instead of ng-options is used.
angular.module('ui.multiselect', [
        'multiselect.tpl.html'
    ])

    //from bootstrap-ui typeahead parser
    .factory('optionParser', ['$parse', function ($parse) {

        //                      00000111000000000000022200000000000000003333333333333330000000000044000
        var TYPEAHEAD_REGEXP = /^\s*(.*?)(?:\s+as\s+(.*?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+(.*)$/;

        return {
            parse: function (input) {

                var match = input.match(TYPEAHEAD_REGEXP), modelMapper, viewMapper, source;
                if (!match) {
                    throw new Error(
                        "Expected typeahead specification in form of '_modelValue_ (as _label_)? for _item_ in _collection_'" +
                            " but got '" + input + "'.");
                }

                return {
                    itemName: match[3],
                    source: $parse(match[4]),
                    viewMapper: $parse(match[2] || match[1]),
                    modelMapper: $parse(match[1])
                };
            }
        };
    }])

    .directive('multiselect', ['$parse', '$document', '$compile', '$interpolate', 'optionParser',

        function ($parse, $document, $compile, $interpolate, optionParser) {
            return {
                restrict: 'AE',
                require: 'ngModel',
                link: function (originalScope, element, attrs, modelCtrl) {

                    var exp = attrs.options,
                        parsedResult = optionParser.parse(exp),
                        isMultiple = (attrs.multiple === "true") ? true : false,
                        showCheckAll = (attrs.showcheckall === "true") ? true : false,
                        showFilter = (attrs.showfilter === "true") ? true : false,
                        required = false,
                        scope = originalScope.$new(),
                        changeHandler = attrs.change || angular.noop;

                    scope.groups = [];
                    scope.header = 'Select';
                    scope.multiple = isMultiple;
                    scope.disabled = false;
                    scope.showCheckAll = showCheckAll;
                    scope.showFilter = showFilter;

                    originalScope.$on('$destroy', function () {
                        scope.$destroy();
                    });

                    var popUpEl = angular.element('<multiselect-popup></multiselect-popup>');

                    //required validator
                    if (attrs.required || attrs.ngRequired) {
                        required = true;
                    }
                    attrs.$observe('required', function(newVal) {
                        required = newVal;
                    });

                    //watch disabled state
                    scope.$watch(function () {
                        return $parse(attrs.disabled)(originalScope);
                    }, function (newVal) {
                        scope.disabled = newVal;
                    });

                    //watch single/multiple state for dynamically change single to multiple
                    scope.$watch(function () {
                        return $parse(attrs.multiple)(originalScope);
                    }, function (newVal) {
                        isMultiple = newVal || false;
                    });

                    //watch option changes for options that are populated dynamically
                    scope.$watch(function () {
                        return parsedResult.source(originalScope);
                    }, function (newVal) {
                        if (angular.isDefined(newVal))
                            parseModel();
                    }, true);

                    //watch model change
                    scope.$watch(function () {
                        return modelCtrl.$modelValue;
                    }, function (newVal, oldVal) {
                        //when directive initialize, newVal usually undefined. Also, if model value already set in the controller
                        //for preselected list then we need to mark checked in our scope item. But we don't want to do this every time
                        //model changes. We need to do this only if it is done outside directive scope, from controller, for example.
                        if (angular.isDefined(newVal)) {
                            markChecked(newVal);
                         //   scope.$eval(changeHandler);
                        }
                        getHeaderText();
                        modelCtrl.$setValidity('required', scope.valid());
                    }, true);

                    function parseModel() {
                        scope.groups.length = 0;
                        var model = parsedResult.source(originalScope);
                        var groupIndex = 0;
                        var groupIdIndexMap = {};
                        var defaultGroup = [];
                        defaultGroup.items = [];
                        if(!angular.isDefined(model)) return;

                        for (var i = 0; i < model.length; i++) {
                            if (angular.isDefined(model[i].narrower) && model[i].narrower.length > 0){
                                //now we have groups
                                scope.groups[groupIndex] = { "name" : model[i].prefLabel[0]['@value'], "items" : []};
                                groupIdIndexMap[model[i]['@id']] = groupIndex;
                                groupIndex++;
                                continue;
                            }

                            var group = defaultGroup; //if there is no group or group cannot be found, then add it to default group
                            if (angular.isDefined(model[i].broader) && model[i].broader.length == 1 && angular.isDefined(groupIdIndexMap[model[i].broader[0]['@id']])) {
                                //now we have a sub element
                                group = scope.groups[groupIdIndexMap[model[i].broader[0]['@id']]];
                            }

                            var local = {};
                            local[parsedResult.itemName] = model[i];
                            var checked = false;
                            if (modelCtrl.$modelValue) {
                                //TODO what is this modelCtrl and modelValue
                                if(!(modelCtrl.$modelValue instanceof Array) && model[i]['@id'] === modelCtrl.$modelValue) {
                                    checked = true;
                                } else if((modelCtrl.$modelValue instanceof Array) && contains(modelCtrl.$modelValue, model[i]['@id'])) {
                                    checked = true;
                                }
                            }

                            group.items.push({
                                label: parsedResult.viewMapper(local),
                                model: model[i]['@id'],
                                checked: checked
                            });
                        }

                        // now add default group
                        scope.groups[groupIndex] = defaultGroup;
                    } //end of function parseModel

                    function contains(array, needle) {
                        for (var i = 0; i < array.length; i++){
                            if (array[i] == needle) {
                                return true;
                            }
                        }
                        return false;
                    }

                    parseModel();

                    element.append($compile(popUpEl)(scope));

                    function getHeaderText() {
                        var defaultHeader = 'Select';

                        if (!modelCtrl.$modelValue) return scope.header = attrs.msHeader || defaultHeader;

                        if (modelCtrl.$modelValue && modelCtrl.$modelValue instanceof Array) {
                            if (attrs.msSelected) {
                                scope.header = $interpolate(attrs.msSelected)(scope);
                            } else {
                                scope.header = modelCtrl.$modelValue[0] != ''? modelCtrl.$modelValue.length + ' ' + 'selected' : defaultHeader;
                            }

                        } else if(modelCtrl.$modelValue && typeof 0){
                            scope.header = '1 selected';
                        } else {
                            var local = {};
                            local[parsedResult.itemName] = modelCtrl.$modelValue;
                            scope.header = parsedResult.viewMapper(local);
                        }
                    }

                    function is_empty(obj) {
                        if (!obj) return true;
                        if (obj.length && obj.length > 0) return false;
                        for (var prop in obj) if (obj[prop]) return false;
                        return true;
                    };

                    scope.valid = function validModel() {
                        if(!required) return true;
                        var value = modelCtrl.$modelValue;
                        return (angular.isArray(value) && value.length > 0) || (!angular.isArray(value) && value != null);
                    };

                    function selectSingle(item) {
                        if (item.checked) {
                            scope.uncheckAll();
                        } else {
                            scope.uncheckAll();
                            item.checked = !item.checked;
                        }
                        setModelValue(false);
                    }

                    function selectMultiple(item) {
                        item.checked = !item.checked;
                        setModelValue(true);
                    }

                    function setModelValue(isMultiple) {
                        var value;

                        if (isMultiple) {
                            value = [];
                            angular.forEach(scope.groups, function (group) {
                                angular.forEach(group.items, function (item) {
                                    if (item.checked){
                                        value.push(item.model);
                                    }
                                })
                            })
                        } else {
                            angular.forEach(scope.groups, function (group) {
                                angular.forEach(group.items, function (item) {
                                    if (item.checked) {
                                        value = item.model;
                                        return false;
                                    }
                                })
                            })
                        }
                        modelCtrl.$setViewValue(value);
                    }

                    function markChecked(newVal) {
                        if (!angular.isArray(newVal)) {
                            if (!!newVal && typeof newVal !== "string") {
                                newVal = newVal.toString();
                            }
                            angular.forEach(scope.groups, function (group) {
                                angular.forEach(group.items, function (item) {
                                    if (angular.equals(item.model, newVal)) {
                                        item.checked = true;
                                        return false;
                                    }
                                })
                            });
                        } else {
                            angular.forEach(scope.groups, function (group) {
                                angular.forEach(group.items, function (item) {
                                    item.checked = false;
                                    angular.forEach(newVal, function (i) {
                                        if (!!i && typeof i !== "string") {
                                            i = i.toString();
                                        }
                                        if (angular.equals(item.model, i)) {
                                            item.checked = true;
                                        }
                                    });
                                })
                            });
                        }
                    }

                    scope.checkAll = function () {
                        if (!isMultiple) return;
                        angular.forEach(scope.groups, function (group) {
                            angular.forEach(group.items, function (item) {
                                item.checked = true;
                            })
                        });
                        setModelValue(true);
                    };

                    scope.uncheckAll = function () {
                        angular.forEach(scope.groups, function (group) {
                            angular.forEach(group.items, function (item) {
                                item.checked = false;
                            })
                        });
                        setModelValue(true);
                    };

                    scope.select = function (item) {
                        if (isMultiple === false) {
                            selectSingle(item);
                            scope.toggleSelect();
                        } else {
                            selectMultiple(item);
                        }
                    }
                }
            };
        }])

    .directive('multiselectPopup', ['$document', function ($document) {
        return {
            restrict: 'AE',
            scope: false,
            replace: true,
            templateUrl: 'multiselect.tpl.html',
            link: function (scope, element, attrs) {

                scope.isVisible = false;

                scope.toggleSelect = function () {
                    if (element.hasClass('open')) {
                        element.removeClass('open');
                        $document.unbind('click', clickHandler);
                    } else {
                        element.addClass('open');
                        $document.bind('click', clickHandler);
                        //scope.focus();
                    }
                };

                function clickHandler(event) {
                    if (elementMatchesAnyInArray(event.target, element.find(event.target.tagName)))
                        return;
                    element.removeClass('open');
                    $document.unbind('click', clickHandler);
                    scope.$apply();
                }

//                scope.focus = function focus(){
//                    var searchBox = element.find('input')[0];
//                    searchBox.focus();
//                }

                var elementMatchesAnyInArray = function (element, elementArray) {
                    for (var i = 0; i < elementArray.length; i++)
                        if (element == elementArray[i])
                            return true;
                    return false;
                }
            }
        }
    }]);

angular.module('multiselect.tpl.html', [])

    .run(['$templateCache', function($templateCache) {
        $templateCache.put('multiselect.tpl.html',

            "<div class=\"dropdown\">\n" +
                "  <button type=\"button\" class=\"btn btn-default\" ng-click=\"toggleSelect()\" ng-disabled=\"disabled\" ng-class=\"{'error': !valid()}\">\n" +
                "    {{header}} <span class=\"caret\"></span>\n" +
                "  </button>\n" +
                "  <ul class=\"dropdown-menu\">\n" +
                "    <li ng-show=\"showFilter\">\n" +
                "      <input class=\"form-control input-sm\" type=\"text\" ng-model=\"searchText.label\" autofocus=\"autofocus\" placeholder=\"Filter\" />\n" +
                "    </li>\n" +
                "    <li ng-show=\"multiple && showCheckAll\" role=\"presentation\" class=\"\">\n" +
                "      <button class=\"btn btn-link btn-xs\" ng-click=\"checkAll()\" type=\"button\"><i class=\"icon-ok\"></i> Check all</button>\n" +
                "      <button class=\"btn btn-link btn-xs\" ng-click=\"uncheckAll()\" type=\"button\"><i class=\"icon-remove\"></i> Uncheck all</button>\n" +
                "    </li>\n" +
                "    <div ng-repeat=\"i in groups\">\n" +
                "       <div>\n" +
                "           <h5>{{i.name}}</h5>"+
                "       </div>\n" +
                "       <div class=\"dropdown-container\" ng-repeat=\"j in i.items | filter:searchText\">\n" +
                "           <a ng-click=\"select(j); focus()\">\n" +
                "               <i ng-class=\"{'icon-ok': j.checked, 'icon-empty': !j.checked}\"></i> {{j.label}}</a>\n" +
                "       </div>\n" +
                "    </div>\n" +
                "  </ul>\n" +
                "</div>");
    }]);

},{}],15:[function(require,module,exports){
/**
 * Created by argoaava on 22.04.14.
 */

// Module that provides functionality to ask confirmation from user when
// form has changed and user tries to leave page without saving.
//
// Usage example:
//
// <div ng-form="appForm" novalidate class="css-form" ng-class="{ 'submitted' : submitted }" td-navigation-blocker-form>
//
// 'td-navigation-blocker-form' must be specified as attribute for the form that confirmation functionality
// must apply to.

//FIXME should be able to make it so that rootScope is not used.
angular.module('navigation.navigationBlocker', [])
    .run(['$rootScope', '$location', function ($rootScope, $location) {
        var _preventNavigation = false;
        var _preventNavigationUrl = null;

        $rootScope.allowNavigation = function() {
            _preventNavigation = false;
        };

        $rootScope.preventNavigation = function() {
            _preventNavigation = true;
            _preventNavigationUrl = $location.absUrl();
        }

        $rootScope.$on('$locationChangeStart', function (event, newUrl, oldUrl) {
            // Allow navigation if our old url wasn't where we prevented navigation from
            if (_preventNavigationUrl != oldUrl || _preventNavigationUrl == null) {
                $rootScope.allowNavigation();
                return;
            }

            if (_preventNavigation && !confirm("You have unsaved changes, do you want to continue?")) {
                event.preventDefault();
            }
            else {
                $rootScope.allowNavigation();
            }
        });

        // Take care of preventing navigation out of our angular app
        window.onbeforeunload = function() {
            // Use the same data that we've set in our angular app
            if (_preventNavigation && $location.absUrl() == _preventNavigationUrl) {
                return "You have unsaved changes, do you want to continue?";
            }
        }
    }])

    .directive("blockFormNavigation", function () {
        return {
            restrict: 'A',
            require: ['^form'],
            link: function (scope, element, attrs, formController) {
                scope.$watch(attrs.ngForm + '.$dirty', function (dirty) {
                    if (dirty) {
                        scope.$root.preventNavigation();
                    } else {
                        scope.$root.allowNavigation();
                    }
                });
            }
        }
    })



},{}],16:[function(require,module,exports){
'use strict';
//  Service for creating notifications.
//  Origin: https://github.com/DerekRies/Angular-Notifications
//
//  Dependencies:
//      It use Bootstrab component:  http://getbootstrap.com/components/

//  Installation:
//      1. Add script file:
//          <script src="notification.js"></script>
//
//      2. Add css to your webform:
//          <link rel="stylesheet" href="notification.css"/>
//
//      3. Add notifications module as a dependency of your app module:
//          e.g angular.module('ngcomponentsApp', ['notifications'])
//
//      4. Add a div to your body tag somewhere and give it a
//          notifications directive specifying its position like so:
//              <div notifications="bottom right"></div>
//
// Usage Example:
//      You can use these methods with the following
//      line of code (userData parameter is optional, currently title is not used):
//
//    $notification.info(title, content, userData);
//    $notification.warning(title, content, userData);
//    $notification.error("Save", "Data is not saved !");
//    $notification.success("Save", "Data is saved successfully.");
//
angular.module('notifications', []).
    factory('$notification', ['$timeout',function($timeout){

        //console.log('notification service online');
        var notifications = JSON.parse(localStorage.getItem('$notifications')) || [],
            queue = [];

        var settings = {
            info: { duration: 5000, enabled: true },
            warning: { duration: 5000, enabled: true },
            error: { duration: 5000, enabled: true },
            success: { duration: 5000, enabled: true },
            progress: { duration: 0, enabled: true },
            custom: { duration: 35000, enabled: true },
            details: true,
            localStorage: false,
            html5Mode: false,
            html5DefaultIcon: 'icon.png'
        };

        function html5Notify(icon, title, content, ondisplay, onclose){
            if(window.webkitNotifications.checkPermission() === 0){
                if(!icon){
                    icon = 'favicon.ico';
                }
                var noti = window.webkitNotifications.createNotification(icon, title, content);
                if(typeof ondisplay === 'function'){
                    noti.ondisplay = ondisplay;
                }
                if(typeof onclose === 'function'){
                    noti.onclose = onclose;
                }
                noti.show();
            }
            else {
                settings.html5Mode = false;
            }
        }


        return {

            /* ========== SETTINGS RELATED METHODS =============*/

            disableHtml5Mode: function(){
                settings.html5Mode = false;
            },

            disableType: function(notificationType){
                settings[notificationType].enabled = false;
            },

            enableHtml5Mode: function(){
                // settings.html5Mode = true;
                settings.html5Mode = this.requestHtml5ModePermissions();
            },

            enableType: function(notificationType){
                settings[notificationType].enabled = true;
            },

            getSettings: function(){
                return settings;
            },

            toggleType: function(notificationType){
                settings[notificationType].enabled = !settings[notificationType].enabled;
            },

            toggleHtml5Mode: function(){
                settings.html5Mode = !settings.html5Mode;
            },

            requestHtml5ModePermissions: function(){
                if (window.webkitNotifications){
                    //console.log('notifications are available');
                    if (window.webkitNotifications.checkPermission() === 0) {
                        return true;
                    }
                    else{
                        window.webkitNotifications.requestPermission(function(){
                            if(window.webkitNotifications.checkPermission() === 0){
                                settings.html5Mode = true;
                            }
                            else{
                                settings.html5Mode = false;
                            }
                        });
                        return false;
                    }
                }
                else{
                    //console.log('notifications are not supported');
                    return false;
                }
            },


            /* ============ QUERYING RELATED METHODS ============*/

            getAll: function(){
                // Returns all notifications that are currently stored
                return notifications;
            },

            getQueue: function(){
                return queue;
            },

            /* ============== NOTIFICATION METHODS ==============*/

            info: function(title, content, userData){
                //console.log(title, content);
                return this.awesomeNotify('info','info-sign', title, content, userData);
            },

            error: function(title, content, userData){
                return this.awesomeNotify('error', 'remove-sign', title, content, userData);
            },

            success: function(title, content, userData){
                return this.awesomeNotify('success', 'ok-sign', title, content, userData);
            },

            warning: function(title, content, userData){
                return this.awesomeNotify('warning', 'exclamation-sign', title, content, userData);
            },

            awesomeNotify: function(type, icon, title, content, userData){
                /**
                 * Supposed to wrap the makeNotification method for drawing icons using font-awesome
                 * rather than an image.
                 *
                 * Need to find out how I'm going to make the API take either an image
                 * resource, or a font-awesome icon and then display either of them.
                 * Also should probably provide some bits of color, could do the coloring
                 * through classes.
                 */
                // image = '<i class="icon-' + image + '"></i>';
                return this.makeNotification(type, false, icon, title, content, userData);
            },

            notify: function(image, title, content, userData){
                // Wraps the makeNotification method for displaying notifications with images
                // rather than icons
                return this.makeNotification('custom', image, true, title, content, userData);
            },

            makeNotification: function(type, image, icon, title, content, userData){
                var notification = {
                    'type': type,
                    'image': image,
                    'icon': icon,
                    'title': title,
                    'content': content,
                    'timestamp': +new Date(),
                    'userData': userData
                };
                notifications.push(notification);

                if(settings.html5Mode){
                    html5Notify(image, title, content, function(){
                        //console.log("inner on display function");
                    }, function(){
                        //console.log("inner on close function");
                    });
                }
                else{
                    queue.push(notification);
                    $timeout(function removeFromQueueTimeout(){
                        queue.splice(queue.indexOf(notification), 1);
                    }, settings[type].duration);

                }

                this.save();
                return notification;
            },


            /* ============ PERSISTENCE METHODS ============ */

            save: function(){
                // Save all the notifications into localStorage
                // console.log(JSON);
                if(settings.localStorage){
                    localStorage.setItem('$notifications', JSON.stringify(notifications));
                }
                // console.log(localStorage.getItem('$notifications'));
            },

            restore: function(){
                // Load all notifications from localStorage
            },

            clear: function(){
                notifications = [];
                this.save();
            }

        };
    }]).
    directive('notifications', ['$notification', '$compile', function($notification, $compile){
        /**
         *
         * It should also parse the arguments passed to it that specify
         * its position on the screen like "bottom right" and apply those
         * positions as a class to the container element
         *
         * Finally, the directive should have its own controller for
         * handling all of the notifications from the notification service
         */
        //console.log('this is a new directive');
        var html =
            '<div class="dr-notification-wrapper" ng-repeat="noti in queue">' +
                '<div class="dr-notification-close-btn" ng-click="removeNotification(noti)">' +
                    '<i class="glyphicon glyphicon-remove"></i>' +
                '</div>' +
                '<div class="dr-notification noti-back-ground-{{noti.type}}">' +
                    '<div class="dr-notification-image dr-notification-type-{{noti.type}}" ng-switch on="noti.image">' +
                        '<i class="glyphicon glyphicon-{{noti.icon}}" ng-switch-when="false"></i>' +
                        '<img ng-src="{{noti.image}}" ng-switch-default />' +
                    '</div>' +
                    '<div class="dr-notification-content">' +
                        /*'<h3 class="dr-notification-title">{{noti.title}}</h3>' + */
                        '<p class="dr-notification-text">{{noti.content}}</p>' +
                    '</div>' +
                '</div>' +
            '</div>';


        function link(scope, element, attrs){
            var position = attrs.notifications;
            position = position.split(' ');
            element.addClass('dr-notification-container');
            for(var i = 0; i < position.length ; i++){
                element.addClass(position[i]);
            }
        }


        return {
            restrict: 'A',
            scope: {},
            template: html,
            link: link,
            controller: ['$scope', function NotificationsCtrl( $scope ){
                $scope.queue = $notification.getQueue();

                $scope.removeNotification = function(noti){
                    $scope.queue.splice($scope.queue.indexOf(noti), 1);
                };
            }
            ]

        };
    }]);
},{}],17:[function(require,module,exports){
'use strict';

(
    function(angular) {
        return angular
            .module('ngOrderObjectBy', [])
            .filter('orderObjectBy', function() {
                return function (items, field, reverse) {
                    var filtered = [];
                    angular.forEach(items, function(item) {
                        filtered.push(item);
                    });
                    function index(obj, i) {
                        return obj[i];
                    }
                    filtered.sort(function (a, b) {
                        var comparator;
                        var reducedA = field.split('.').reduce(index, a);
                        var reducedB = field.split('.').reduce(index, b);
                        if (reducedA === reducedB) {
                            comparator = 0;
                        } else {
                            comparator = (reducedA > reducedB ? 1 : -1);
                        }
                        return comparator;
                    });
                    if (reverse) {
                        filtered.reverse();
                    }
                    return filtered;
                };
            });
    }
    )(angular);
},{}],18:[function(require,module,exports){
/**
 * Created by argoaava on 13.05.14.
 */


// Module that contains functionality for tab navigation. User must fill 'tabService' with
// available tabs as follows:
//
// app.run(function($rootScope, promiseTracker, $location, tabService) {
//      tabService.setTabs([
//          {"id":"Table1","active" : true},
//          {"id":"Table2","active" : false},
//          {"id":"Table3","active" : false},
//          {"id":"Table4","active" : false},
//          {"id":"Table5","active" : false}]);
// });
//
// then 'TabController' must be set to elements that want to interact with
// tabService.
//
// <ul tabset ng-cloak ng-controller="TabController">
//      <div ng-class="{'invalidTab' : isInvalidTab('Table1')}">
//          <li tab heading="Table 1" active="tabs[getTabIndex('Table1')].active">
//          </li>
//      </div>
// </ul>
//
// or
//
// <div class="animate-show" ng-show="showMenu" style="float:right" ng-controller="TabController">
//      <input type="button" ng-click="previousTab()" value="Prev" class="btn btn-default btn-primary" ng-disabled="getActiveTabIndex() == 0">
//      <input type="button" ng-click="nextTab()" value="Next" class="btn btn-default btn-primary" ng-disabled="getActiveTabIndex() == (tabs.length - 1)"/>
// </div>
//
angular.module('tabs.formTabs', [])
    .service('tabService', function() {
        this.tabs = [];

        this.getTabs = function() {
            return this.tabs;
        }

        this.setTabs = function(tabs) {
            this.tabs = tabs;
        }
    })
    .controller("TabController", function ($scope, $rootScope, $location, $timeout, $anchorScroll, tabService) {
        

        if (tabService.getTabs().length == 0) {
            throw Error("You must configure tabService");
        }

        $scope.tabs = tabService.tabs;

        $scope.goto = function (tab, id){
            for (var i = 0; i < $scope.tabs.length; i++) {
                if ($scope.tabs[i].id == tab) {
                    $scope.tabs[i].active = true;
                } else {
                    $scope.tabs[i].active = false;
                }
            }

            var old = $location.hash();
            $timeout(function() {
                $location.hash(id);
                $anchorScroll();
                $location.hash(old);
            }, 200);
        };

        $scope.getActiveTabIndex = function() {
            for (var i = 0; i < $scope.tabs.length; i++) {
                if ($scope.tabs[i].active == true) {
                    return i;
                }
            }
            return 0;
        };

        $scope.getTabIndex = function(tabId) {
            for (var i = 0; i < $scope.tabs.length; i++) {
                if ($scope.tabs[i].id == tabId) {
                    return i;
                }
            }
            return -1;
        };

        $scope.nextTab = function(){
            var activeTabIndex = $scope.getActiveTabIndex();
            var nextTab = (activeTabIndex + 1 <= $scope.tabs.length)? activeTabIndex+1 : activeTabIndex;
            $scope.goto($scope.tabs[nextTab].id, 'beginning');
        };

        $scope.previousTab = function(){
            var activeTabIndex = $scope.getActiveTabIndex();
            var previousTab = (activeTabIndex - 1 >= 0)? activeTabIndex - 1 : activeTabIndex;
            $scope.goto($scope.tabs[previousTab].id, 'beginning');
        };

        $scope.isInvalidTab = function(tabId) {
            return $scope.submitted && $scope.appForm[tabId].$invalid;
        };
    })
},{}],19:[function(require,module,exports){
/**
 * Created by argoaava on 13.05.14.
 */

//Checks if array is empty.
window.isEmptyArray = function(array) {
    if (!(array instanceof Array)) {
        throw Error("Element not array");
    }

    for (var i = 0; i < array.length; i++) {
        if (!array[i]) {
            continue;
        } else {
            return false;
        }
    }
    return true;
}

// Counts all properties of an object or array.
// Reduces the count by one when object is considered fixed question
// in this case first element of object is prefilled and must not be counted.
window.countNonEmptyProperties = function(objectOrArray, isFixedQuestion) {
    var count = 0;

    if (!(objectOrArray instanceof Array)) {
        count = countObjectProperties(objectOrArray);
    } else {
        for (var i = 0; i < objectOrArray.length; i++) {
            var objectCount = countObjectProperties(objectOrArray[i]);

            if (isFixedQuestion) {
                objectCount -= 1;
            }

            count += objectCount;
        }
    }
    return count;
};

// Counts only
window.countObjectProperties = function(object) {
    var count = 0;

    //For primitives
    if (!(typeof object === 'object') &&
        !(typeof object === 'array')) {
            return 1;
    }

    for (var i in object) {
        if (object.hasOwnProperty(i)
            && !!object[i]
            && (i != '$$hashKey')) {

            if (typeof object[i] === 'object') {
                var objectElementCount = countNonEmptyProperties(object[i]);
                count += objectElementCount;
            } else {
                count++;
            }
        }
    }
    return count;
};

// Clears object or array data. When object is array all other elements except
// first are deleted.
window.clearObject = function(object, keepFirst) {
    if (!(object instanceof Array)) {

        var indexCounter = 0;
        for (var i in object) {
            if (object.hasOwnProperty(i)) {
                if (indexCounter == 0 && keepFirst) {
                } else {
                    object[i] = null;
                }
            }
            indexCounter++;
        }
    } else {
        clearArray(object, keepFirst);
    }

}

// Deletes all other array elements expect first one and
// clears all data from first element.
window.clearArray =function(array, keepRow) {
    for (var i = array.length; i > 0; i--) {
        if (keepRow) {
            clearObject(array[i], keepRow);
        } else {
            array.splice(i, 1);
        }
    }
    clearObject(array[0], keepRow);

    // For arrays that contain primitives. Last element must be
    // left but has to be empty so element is still present after
    // conversion to xml.
    if (!(array[0] instanceof Object)) {
        array[0] = "";
        return;
    }
}

//Clone object.
window.clone = function(obj) {
    // Handle the 3 simple types, and null or undefined
    if (null == obj || "object" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        var copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        var copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        var copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
}

// Function is used before saving JSON object back to XML file. When deleting field on the form
// angular sets it to undefined which breaks the order of elements if converted to XML.
window.fixUndefined = function(obj) {
    var isArray = obj instanceof Array;
    for (var j in obj) {
        if (obj.hasOwnProperty(j)) {
            if (typeof(obj[j]) == "object") {
                fixUndefined(obj[j]);
            } else if(!isArray && j != '$$hashkey') {
                if (typeof obj[j] == 'undefined') {
                    obj[j] = null;
                }
            }
        }
    }
}

// helper function for getting query string parameter values. AngularJS solution $location.search() doesn't work in IE8.
window.getParameterByName = function(name) {
    // FIXME - WebQ instance param is not escaped
    var searchArr = window.location.search.split('?');
    var search = '?' + searchArr[searchArr.length - 1];
    var match = new RegExp('[?&]' + name + '=([^&]*)').exec(search);
    return match && decodeURIComponent(match[1].replace(/\+/g, ' '));
};
},{}],20:[function(require,module,exports){
/**
 * @license AngularJS v1.2.16
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/* jshint maxlen: false */

/**
 * @ngdoc module
 * @name ngAnimate
 * @description
 *
 * # ngAnimate
 *
 * The `ngAnimate` module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.
 *
 *
 * <div doc-module-components="ngAnimate"></div>
 *
 * # Usage
 *
 * To see animations in action, all that is required is to define the appropriate CSS classes
 * or to register a JavaScript animation via the myModule.animation() function. The directives that support animation automatically are:
 * `ngRepeat`, `ngInclude`, `ngIf`, `ngSwitch`, `ngShow`, `ngHide`, `ngView` and `ngClass`. Custom directives can take advantage of animation
 * by using the `$animate` service.
 *
 * Below is a more detailed breakdown of the supported animation events provided by pre-existing ng directives:
 *
 * | Directive                                                 | Supported Animations                               |
 * |---------------------------------------------------------- |----------------------------------------------------|
 * | {@link ng.directive:ngRepeat#usage_animations ngRepeat}         | enter, leave and move                              |
 * | {@link ngRoute.directive:ngView#usage_animations ngView}        | enter and leave                                    |
 * | {@link ng.directive:ngInclude#usage_animations ngInclude}       | enter and leave                                    |
 * | {@link ng.directive:ngSwitch#usage_animations ngSwitch}         | enter and leave                                    |
 * | {@link ng.directive:ngIf#usage_animations ngIf}                 | enter and leave                                    |
 * | {@link ng.directive:ngClass#usage_animations ngClass}           | add and remove                                     |
 * | {@link ng.directive:ngShow#usage_animations ngShow & ngHide}    | add and remove (the ng-hide class value)           |
 * | {@link ng.directive:form#usage_animations form}                 | add and remove (dirty, pristine, valid, invalid & all other validations)                |
 * | {@link ng.directive:ngModel#usage_animations ngModel}           | add and remove (dirty, pristine, valid, invalid & all other validations)                |
 *
 * You can find out more information about animations upon visiting each directive page.
 *
 * Below is an example of how to apply animations to a directive that supports animation hooks:
 *
 * ```html
 * <style type="text/css">
 * .slide.ng-enter, .slide.ng-leave {
 *   -webkit-transition:0.5s linear all;
 *   transition:0.5s linear all;
 * }
 *
 * .slide.ng-enter { }        /&#42; starting animations for enter &#42;/
 * .slide.ng-enter-active { } /&#42; terminal animations for enter &#42;/
 * .slide.ng-leave { }        /&#42; starting animations for leave &#42;/
 * .slide.ng-leave-active { } /&#42; terminal animations for leave &#42;/
 * </style>
 *
 * <!--
 * the animate service will automatically add .ng-enter and .ng-leave to the element
 * to trigger the CSS transition/animations
 * -->
 * <ANY class="slide" ng-include="..."></ANY>
 * ```
 *
 * Keep in mind that if an animation is running, any child elements cannot be animated until the parent element's
 * animation has completed.
 *
 * <h2>CSS-defined Animations</h2>
 * The animate service will automatically apply two CSS classes to the animated element and these two CSS classes
 * are designed to contain the start and end CSS styling. Both CSS transitions and keyframe animations are supported
 * and can be used to play along with this naming structure.
 *
 * The following code below demonstrates how to perform animations using **CSS transitions** with Angular:
 *
 * ```html
 * <style type="text/css">
 * /&#42;
 *  The animate class is apart of the element and the ng-enter class
 *  is attached to the element once the enter animation event is triggered
 * &#42;/
 * .reveal-animation.ng-enter {
 *  -webkit-transition: 1s linear all; /&#42; Safari/Chrome &#42;/
 *  transition: 1s linear all; /&#42; All other modern browsers and IE10+ &#42;/
 *
 *  /&#42; The animation preparation code &#42;/
 *  opacity: 0;
 * }
 *
 * /&#42;
 *  Keep in mind that you want to combine both CSS
 *  classes together to avoid any CSS-specificity
 *  conflicts
 * &#42;/
 * .reveal-animation.ng-enter.ng-enter-active {
 *  /&#42; The animation code itself &#42;/
 *  opacity: 1;
 * }
 * </style>
 *
 * <div class="view-container">
 *   <div ng-view class="reveal-animation"></div>
 * </div>
 * ```
 *
 * The following code below demonstrates how to perform animations using **CSS animations** with Angular:
 *
 * ```html
 * <style type="text/css">
 * .reveal-animation.ng-enter {
 *   -webkit-animation: enter_sequence 1s linear; /&#42; Safari/Chrome &#42;/
 *   animation: enter_sequence 1s linear; /&#42; IE10+ and Future Browsers &#42;/
 * }
 * @-webkit-keyframes enter_sequence {
 *   from { opacity:0; }
 *   to { opacity:1; }
 * }
 * @keyframes enter_sequence {
 *   from { opacity:0; }
 *   to { opacity:1; }
 * }
 * </style>
 *
 * <div class="view-container">
 *   <div ng-view class="reveal-animation"></div>
 * </div>
 * ```
 *
 * Both CSS3 animations and transitions can be used together and the animate service will figure out the correct duration and delay timing.
 *
 * Upon DOM mutation, the event class is added first (something like `ng-enter`), then the browser prepares itself to add
 * the active class (in this case `ng-enter-active`) which then triggers the animation. The animation module will automatically
 * detect the CSS code to determine when the animation ends. Once the animation is over then both CSS classes will be
 * removed from the DOM. If a browser does not support CSS transitions or CSS animations then the animation will start and end
 * immediately resulting in a DOM element that is at its final state. This final state is when the DOM element
 * has no CSS transition/animation classes applied to it.
 *
 * <h3>CSS Staggering Animations</h3>
 * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
 * curtain-like effect. The ngAnimate module, as of 1.2.0, supports staggering animations and the stagger effect can be
 * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
 * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
 * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
 *
 * ```css
 * .my-animation.ng-enter {
 *   /&#42; standard transition code &#42;/
 *   -webkit-transition: 1s linear all;
 *   transition: 1s linear all;
 *   opacity:0;
 * }
 * .my-animation.ng-enter-stagger {
 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
 *   -webkit-transition-delay: 0.1s;
 *   transition-delay: 0.1s;
 *
 *   /&#42; in case the stagger doesn't work then these two values
 *    must be set to 0 to avoid an accidental CSS inheritance &#42;/
 *   -webkit-transition-duration: 0s;
 *   transition-duration: 0s;
 * }
 * .my-animation.ng-enter.ng-enter-active {
 *   /&#42; standard transition styles &#42;/
 *   opacity:1;
 * }
 * ```
 *
 * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
 * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
 * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
 * will also be reset if more than 10ms has passed after the last animation has been fired.
 *
 * The following code will issue the **ng-leave-stagger** event on the element provided:
 *
 * ```js
 * var kids = parent.children();
 *
 * $animate.leave(kids[0]); //stagger index=0
 * $animate.leave(kids[1]); //stagger index=1
 * $animate.leave(kids[2]); //stagger index=2
 * $animate.leave(kids[3]); //stagger index=3
 * $animate.leave(kids[4]); //stagger index=4
 *
 * $timeout(function() {
 *   //stagger has reset itself
 *   $animate.leave(kids[5]); //stagger index=0
 *   $animate.leave(kids[6]); //stagger index=1
 * }, 100, false);
 * ```
 *
 * Stagger animations are currently only supported within CSS-defined animations.
 *
 * <h2>JavaScript-defined Animations</h2>
 * In the event that you do not want to use CSS3 transitions or CSS3 animations or if you wish to offer animations on browsers that do not
 * yet support CSS transitions/animations, then you can make use of JavaScript animations defined inside of your AngularJS module.
 *
 * ```js
 * //!annotate="YourApp" Your AngularJS Module|Replace this or ngModule with the module that you used to define your application.
 * var ngModule = angular.module('YourApp', ['ngAnimate']);
 * ngModule.animation('.my-crazy-animation', function() {
 *   return {
 *     enter: function(element, done) {
 *       //run the animation here and call done when the animation is complete
 *       return function(cancelled) {
 *         //this (optional) function will be called when the animation
 *         //completes or when the animation is cancelled (the cancelled
 *         //flag will be set to true if cancelled).
 *       };
 *     },
 *     leave: function(element, done) { },
 *     move: function(element, done) { },
 *
 *     //animation that can be triggered before the class is added
 *     beforeAddClass: function(element, className, done) { },
 *
 *     //animation that can be triggered after the class is added
 *     addClass: function(element, className, done) { },
 *
 *     //animation that can be triggered before the class is removed
 *     beforeRemoveClass: function(element, className, done) { },
 *
 *     //animation that can be triggered after the class is removed
 *     removeClass: function(element, className, done) { }
 *   };
 * });
 * ```
 *
 * JavaScript-defined animations are created with a CSS-like class selector and a collection of events which are set to run
 * a javascript callback function. When an animation is triggered, $animate will look for a matching animation which fits
 * the element's CSS class attribute value and then run the matching animation event function (if found).
 * In other words, if the CSS classes present on the animated element match any of the JavaScript animations then the callback function will
 * be executed. It should be also noted that only simple, single class selectors are allowed (compound class selectors are not supported).
 *
 * Within a JavaScript animation, an object containing various event callback animation functions is expected to be returned.
 * As explained above, these callbacks are triggered based on the animation event. Therefore if an enter animation is run,
 * and the JavaScript animation is found, then the enter callback will handle that animation (in addition to the CSS keyframe animation
 * or transition code that is defined via a stylesheet).
 *
 */

angular.module('ngAnimate', ['ng'])

  /**
   * @ngdoc provider
   * @name $animateProvider
   * @description
   *
   * The `$animateProvider` allows developers to register JavaScript animation event handlers directly inside of a module.
   * When an animation is triggered, the $animate service will query the $animate service to find any animations that match
   * the provided name value.
   *
   * Requires the {@link ngAnimate `ngAnimate`} module to be installed.
   *
   * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.
   *
   */

  //this private service is only used within CSS-enabled animations
  //IE8 + IE9 do not support rAF natively, but that is fine since they
  //also don't support transitions and keyframes which means that the code
  //below will never be used by the two browsers.
  .factory('$$animateReflow', ['$$rAF', '$document', function($$rAF, $document) {
    var bod = $document[0].body;
    return function(fn) {
      //the returned function acts as the cancellation function
      return $$rAF(function() {
        //the line below will force the browser to perform a repaint
        //so that all the animated elements within the animation frame
        //will be properly updated and drawn on screen. This is
        //required to perform multi-class CSS based animations with
        //Firefox. DO NOT REMOVE THIS LINE.
        var a = bod.offsetWidth + 1;
        fn();
      });
    };
  }])

  .config(['$provide', '$animateProvider', function($provide, $animateProvider) {
    var noop = angular.noop;
    var forEach = angular.forEach;
    var selectors = $animateProvider.$$selectors;

    var ELEMENT_NODE = 1;
    var NG_ANIMATE_STATE = '$$ngAnimateState';
    var NG_ANIMATE_CLASS_NAME = 'ng-animate';
    var rootAnimateState = {running: true};

    function extractElementNode(element) {
      for(var i = 0; i < element.length; i++) {
        var elm = element[i];
        if(elm.nodeType == ELEMENT_NODE) {
          return elm;
        }
      }
    }

    function stripCommentsFromElement(element) {
      return angular.element(extractElementNode(element));
    }

    function isMatchingElement(elm1, elm2) {
      return extractElementNode(elm1) == extractElementNode(elm2);
    }

    $provide.decorator('$animate', ['$delegate', '$injector', '$sniffer', '$rootElement', '$$asyncCallback', '$rootScope', '$document',
                            function($delegate,   $injector,   $sniffer,   $rootElement,   $$asyncCallback,    $rootScope,   $document) {

      var globalAnimationCounter = 0;
      $rootElement.data(NG_ANIMATE_STATE, rootAnimateState);

      // disable animations during bootstrap, but once we bootstrapped, wait again
      // for another digest until enabling animations. The reason why we digest twice
      // is because all structural animations (enter, leave and move) all perform a
      // post digest operation before animating. If we only wait for a single digest
      // to pass then the structural animation would render its animation on page load.
      // (which is what we're trying to avoid when the application first boots up.)
      $rootScope.$$postDigest(function() {
        $rootScope.$$postDigest(function() {
          rootAnimateState.running = false;
        });
      });

      var classNameFilter = $animateProvider.classNameFilter();
      var isAnimatableClassName = !classNameFilter
              ? function() { return true; }
              : function(className) {
                return classNameFilter.test(className);
              };

      function lookup(name) {
        if (name) {
          var matches = [],
              flagMap = {},
              classes = name.substr(1).split('.');

          //the empty string value is the default animation
          //operation which performs CSS transition and keyframe
          //animations sniffing. This is always included for each
          //element animation procedure if the browser supports
          //transitions and/or keyframe animations. The default
          //animation is added to the top of the list to prevent
          //any previous animations from affecting the element styling
          //prior to the element being animated.
          if ($sniffer.transitions || $sniffer.animations) {
            matches.push($injector.get(selectors['']));
          }

          for(var i=0; i < classes.length; i++) {
            var klass = classes[i],
                selectorFactoryName = selectors[klass];
            if(selectorFactoryName && !flagMap[klass]) {
              matches.push($injector.get(selectorFactoryName));
              flagMap[klass] = true;
            }
          }
          return matches;
        }
      }

      function animationRunner(element, animationEvent, className) {
        //transcluded directives may sometimes fire an animation using only comment nodes
        //best to catch this early on to prevent any animation operations from occurring
        var node = element[0];
        if(!node) {
          return;
        }

        var isSetClassOperation = animationEvent == 'setClass';
        var isClassBased = isSetClassOperation ||
                           animationEvent == 'addClass' ||
                           animationEvent == 'removeClass';

        var classNameAdd, classNameRemove;
        if(angular.isArray(className)) {
          classNameAdd = className[0];
          classNameRemove = className[1];
          className = classNameAdd + ' ' + classNameRemove;
        }

        var currentClassName = element.attr('class');
        var classes = currentClassName + ' ' + className;
        if(!isAnimatableClassName(classes)) {
          return;
        }

        var beforeComplete = noop,
            beforeCancel = [],
            before = [],
            afterComplete = noop,
            afterCancel = [],
            after = [];

        var animationLookup = (' ' + classes).replace(/\s+/g,'.');
        forEach(lookup(animationLookup), function(animationFactory) {
          var created = registerAnimation(animationFactory, animationEvent);
          if(!created && isSetClassOperation) {
            registerAnimation(animationFactory, 'addClass');
            registerAnimation(animationFactory, 'removeClass');
          }
        });

        function registerAnimation(animationFactory, event) {
          var afterFn = animationFactory[event];
          var beforeFn = animationFactory['before' + event.charAt(0).toUpperCase() + event.substr(1)];
          if(afterFn || beforeFn) {
            if(event == 'leave') {
              beforeFn = afterFn;
              //when set as null then animation knows to skip this phase
              afterFn = null;
            }
            after.push({
              event : event, fn : afterFn
            });
            before.push({
              event : event, fn : beforeFn
            });
            return true;
          }
        }

        function run(fns, cancellations, allCompleteFn) {
          var animations = [];
          forEach(fns, function(animation) {
            animation.fn && animations.push(animation);
          });

          var count = 0;
          function afterAnimationComplete(index) {
            if(cancellations) {
              (cancellations[index] || noop)();
              if(++count < animations.length) return;
              cancellations = null;
            }
            allCompleteFn();
          }

          //The code below adds directly to the array in order to work with
          //both sync and async animations. Sync animations are when the done()
          //operation is called right away. DO NOT REFACTOR!
          forEach(animations, function(animation, index) {
            var progress = function() {
              afterAnimationComplete(index);
            };
            switch(animation.event) {
              case 'setClass':
                cancellations.push(animation.fn(element, classNameAdd, classNameRemove, progress));
                break;
              case 'addClass':
                cancellations.push(animation.fn(element, classNameAdd || className,     progress));
                break;
              case 'removeClass':
                cancellations.push(animation.fn(element, classNameRemove || className,  progress));
                break;
              default:
                cancellations.push(animation.fn(element, progress));
                break;
            }
          });

          if(cancellations && cancellations.length === 0) {
            allCompleteFn();
          }
        }

        return {
          node : node,
          event : animationEvent,
          className : className,
          isClassBased : isClassBased,
          isSetClassOperation : isSetClassOperation,
          before : function(allCompleteFn) {
            beforeComplete = allCompleteFn;
            run(before, beforeCancel, function() {
              beforeComplete = noop;
              allCompleteFn();
            });
          },
          after : function(allCompleteFn) {
            afterComplete = allCompleteFn;
            run(after, afterCancel, function() {
              afterComplete = noop;
              allCompleteFn();
            });
          },
          cancel : function() {
            if(beforeCancel) {
              forEach(beforeCancel, function(cancelFn) {
                (cancelFn || noop)(true);
              });
              beforeComplete(true);
            }
            if(afterCancel) {
              forEach(afterCancel, function(cancelFn) {
                (cancelFn || noop)(true);
              });
              afterComplete(true);
            }
          }
        };
      }

      /**
       * @ngdoc service
       * @name $animate
       * @function
       *
       * @description
       * The `$animate` service provides animation detection support while performing DOM operations (enter, leave and move) as well as during addClass and removeClass operations.
       * When any of these operations are run, the $animate service
       * will examine any JavaScript-defined animations (which are defined by using the $animateProvider provider object)
       * as well as any CSS-defined animations against the CSS classes present on the element once the DOM operation is run.
       *
       * The `$animate` service is used behind the scenes with pre-existing directives and animation with these directives
       * will work out of the box without any extra configuration.
       *
       * Requires the {@link ngAnimate `ngAnimate`} module to be installed.
       *
       * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.
       *
       */
      return {
        /**
         * @ngdoc method
         * @name $animate#enter
         * @function
         *
         * @description
         * Appends the element to the parentElement element that resides in the document and then runs the enter animation. Once
         * the animation is started, the following CSS classes will be present on the element for the duration of the animation:
         *
         * Below is a breakdown of each step that occurs during enter animation:
         *
         * | Animation Step                                                                               | What the element class attribute looks like |
         * |----------------------------------------------------------------------------------------------|---------------------------------------------|
         * | 1. $animate.enter(...) is called                                                             | class="my-animation"                        |
         * | 2. element is inserted into the parentElement element or beside the afterElement element     | class="my-animation"                        |
         * | 3. $animate runs any JavaScript-defined animations on the element                            | class="my-animation ng-animate"             |
         * | 4. the .ng-enter class is added to the element                                               | class="my-animation ng-animate ng-enter"    |
         * | 5. $animate scans the element styles to get the CSS transition/animation duration and delay  | class="my-animation ng-animate ng-enter"    |
         * | 6. $animate waits for 10ms (this performs a reflow)                                          | class="my-animation ng-animate ng-enter"    |
         * | 7. the .ng-enter-active and .ng-animate-active classes are added (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active ng-enter ng-enter-active" |
         * | 8. $animate waits for X milliseconds for the animation to complete                           | class="my-animation ng-animate ng-animate-active ng-enter ng-enter-active" |
         * | 9. The animation ends and all generated CSS classes are removed from the element             | class="my-animation"                        |
         * | 10. The doneCallback() callback is fired (if provided)                                       | class="my-animation"                        |
         *
         * @param {DOMElement} element the element that will be the focus of the enter animation
         * @param {DOMElement} parentElement the parent element of the element that will be the focus of the enter animation
         * @param {DOMElement} afterElement the sibling element (which is the previous element) of the element that will be the focus of the enter animation
         * @param {function()=} doneCallback the callback function that will be called once the animation is complete
        */
        enter : function(element, parentElement, afterElement, doneCallback) {
          this.enabled(false, element);
          $delegate.enter(element, parentElement, afterElement);
          $rootScope.$$postDigest(function() {
            element = stripCommentsFromElement(element);
            performAnimation('enter', 'ng-enter', element, parentElement, afterElement, noop, doneCallback);
          });
        },

        /**
         * @ngdoc method
         * @name $animate#leave
         * @function
         *
         * @description
         * Runs the leave animation operation and, upon completion, removes the element from the DOM. Once
         * the animation is started, the following CSS classes will be added for the duration of the animation:
         *
         * Below is a breakdown of each step that occurs during leave animation:
         *
         * | Animation Step                                                                               | What the element class attribute looks like |
         * |----------------------------------------------------------------------------------------------|---------------------------------------------|
         * | 1. $animate.leave(...) is called                                                             | class="my-animation"                        |
         * | 2. $animate runs any JavaScript-defined animations on the element                            | class="my-animation ng-animate"             |
         * | 3. the .ng-leave class is added to the element                                               | class="my-animation ng-animate ng-leave"    |
         * | 4. $animate scans the element styles to get the CSS transition/animation duration and delay  | class="my-animation ng-animate ng-leave"    |
         * | 5. $animate waits for 10ms (this performs a reflow)                                          | class="my-animation ng-animate ng-leave"    |
         * | 6. the .ng-leave-active and .ng-animate-active classes is added (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active ng-leave ng-leave-active" |
         * | 7. $animate waits for X milliseconds for the animation to complete                           | class="my-animation ng-animate ng-animate-active ng-leave ng-leave-active" |
         * | 8. The animation ends and all generated CSS classes are removed from the element             | class="my-animation"                        |
         * | 9. The element is removed from the DOM                                                       | ...                                         |
         * | 10. The doneCallback() callback is fired (if provided)                                       | ...                                         |
         *
         * @param {DOMElement} element the element that will be the focus of the leave animation
         * @param {function()=} doneCallback the callback function that will be called once the animation is complete
        */
        leave : function(element, doneCallback) {
          cancelChildAnimations(element);
          this.enabled(false, element);
          $rootScope.$$postDigest(function() {
            performAnimation('leave', 'ng-leave', stripCommentsFromElement(element), null, null, function() {
              $delegate.leave(element);
            }, doneCallback);
          });
        },

        /**
         * @ngdoc method
         * @name $animate#move
         * @function
         *
         * @description
         * Fires the move DOM operation. Just before the animation starts, the animate service will either append it into the parentElement container or
         * add the element directly after the afterElement element if present. Then the move animation will be run. Once
         * the animation is started, the following CSS classes will be added for the duration of the animation:
         *
         * Below is a breakdown of each step that occurs during move animation:
         *
         * | Animation Step                                                                               | What the element class attribute looks like |
         * |----------------------------------------------------------------------------------------------|---------------------------------------------|
         * | 1. $animate.move(...) is called                                                              | class="my-animation"                        |
         * | 2. element is moved into the parentElement element or beside the afterElement element        | class="my-animation"                        |
         * | 3. $animate runs any JavaScript-defined animations on the element                            | class="my-animation ng-animate"             |
         * | 4. the .ng-move class is added to the element                                                | class="my-animation ng-animate ng-move"     |
         * | 5. $animate scans the element styles to get the CSS transition/animation duration and delay  | class="my-animation ng-animate ng-move"     |
         * | 6. $animate waits for 10ms (this performs a reflow)                                          | class="my-animation ng-animate ng-move"     |
         * | 7. the .ng-move-active and .ng-animate-active classes is added (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active ng-move ng-move-active" |
         * | 8. $animate waits for X milliseconds for the animation to complete                           | class="my-animation ng-animate ng-animate-active ng-move ng-move-active" |
         * | 9. The animation ends and all generated CSS classes are removed from the element             | class="my-animation"                        |
         * | 10. The doneCallback() callback is fired (if provided)                                       | class="my-animation"                        |
         *
         * @param {DOMElement} element the element that will be the focus of the move animation
         * @param {DOMElement} parentElement the parentElement element of the element that will be the focus of the move animation
         * @param {DOMElement} afterElement the sibling element (which is the previous element) of the element that will be the focus of the move animation
         * @param {function()=} doneCallback the callback function that will be called once the animation is complete
        */
        move : function(element, parentElement, afterElement, doneCallback) {
          cancelChildAnimations(element);
          this.enabled(false, element);
          $delegate.move(element, parentElement, afterElement);
          $rootScope.$$postDigest(function() {
            element = stripCommentsFromElement(element);
            performAnimation('move', 'ng-move', element, parentElement, afterElement, noop, doneCallback);
          });
        },

        /**
         * @ngdoc method
         * @name $animate#addClass
         *
         * @description
         * Triggers a custom animation event based off the className variable and then attaches the className value to the element as a CSS class.
         * Unlike the other animation methods, the animate service will suffix the className value with {@type -add} in order to provide
         * the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if no CSS transitions
         * or keyframes are defined on the -add or base CSS class).
         *
         * Below is a breakdown of each step that occurs during addClass animation:
         *
         * | Animation Step                                                                                 | What the element class attribute looks like |
         * |------------------------------------------------------------------------------------------------|---------------------------------------------|
         * | 1. $animate.addClass(element, 'super') is called                                               | class="my-animation"                        |
         * | 2. $animate runs any JavaScript-defined animations on the element                              | class="my-animation ng-animate"             |
         * | 3. the .super-add class are added to the element                                               | class="my-animation ng-animate super-add"   |
         * | 4. $animate scans the element styles to get the CSS transition/animation duration and delay    | class="my-animation ng-animate super-add"   |
         * | 5. $animate waits for 10ms (this performs a reflow)                                            | class="my-animation ng-animate super-add"   |
         * | 6. the .super, .super-add-active and .ng-animate-active classes are added (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active super super-add super-add-active"          |
         * | 7. $animate waits for X milliseconds for the animation to complete                             | class="my-animation super super-add super-add-active"  |
         * | 8. The animation ends and all generated CSS classes are removed from the element               | class="my-animation super"                  |
         * | 9. The super class is kept on the element                                                      | class="my-animation super"                  |
         * | 10. The doneCallback() callback is fired (if provided)                                         | class="my-animation super"                  |
         *
         * @param {DOMElement} element the element that will be animated
         * @param {string} className the CSS class that will be added to the element and then animated
         * @param {function()=} doneCallback the callback function that will be called once the animation is complete
        */
        addClass : function(element, className, doneCallback) {
          element = stripCommentsFromElement(element);
          performAnimation('addClass', className, element, null, null, function() {
            $delegate.addClass(element, className);
          }, doneCallback);
        },

        /**
         * @ngdoc method
         * @name $animate#removeClass
         *
         * @description
         * Triggers a custom animation event based off the className variable and then removes the CSS class provided by the className value
         * from the element. Unlike the other animation methods, the animate service will suffix the className value with {@type -remove} in
         * order to provide the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if
         * no CSS transitions or keyframes are defined on the -remove or base CSS classes).
         *
         * Below is a breakdown of each step that occurs during removeClass animation:
         *
         * | Animation Step                                                                                | What the element class attribute looks like     |
         * |-----------------------------------------------------------------------------------------------|---------------------------------------------|
         * | 1. $animate.removeClass(element, 'super') is called                                           | class="my-animation super"                  |
         * | 2. $animate runs any JavaScript-defined animations on the element                             | class="my-animation super ng-animate"       |
         * | 3. the .super-remove class are added to the element                                           | class="my-animation super ng-animate super-remove"|
         * | 4. $animate scans the element styles to get the CSS transition/animation duration and delay   | class="my-animation super ng-animate super-remove"   |
         * | 5. $animate waits for 10ms (this performs a reflow)                                           | class="my-animation super ng-animate super-remove"   |
         * | 6. the .super-remove-active and .ng-animate-active classes are added and .super is removed (this triggers the CSS transition/animation) | class="my-animation ng-animate ng-animate-active super-remove super-remove-active"          |
         * | 7. $animate waits for X milliseconds for the animation to complete                            | class="my-animation ng-animate ng-animate-active super-remove super-remove-active"   |
         * | 8. The animation ends and all generated CSS classes are removed from the element              | class="my-animation"                        |
         * | 9. The doneCallback() callback is fired (if provided)                                         | class="my-animation"                        |
         *
         *
         * @param {DOMElement} element the element that will be animated
         * @param {string} className the CSS class that will be animated and then removed from the element
         * @param {function()=} doneCallback the callback function that will be called once the animation is complete
        */
        removeClass : function(element, className, doneCallback) {
          element = stripCommentsFromElement(element);
          performAnimation('removeClass', className, element, null, null, function() {
            $delegate.removeClass(element, className);
          }, doneCallback);
        },

          /**
           *
           * @ngdoc function
           * @name $animate#setClass
           * @function
           * @description Adds and/or removes the given CSS classes to and from the element.
           * Once complete, the done() callback will be fired (if provided).
           * @param {DOMElement} element the element which will it's CSS classes changed
           *   removed from it
           * @param {string} add the CSS classes which will be added to the element
           * @param {string} remove the CSS class which will be removed from the element
           * @param {Function=} done the callback function (if provided) that will be fired after the
           *   CSS classes have been set on the element
           */
        setClass : function(element, add, remove, doneCallback) {
          element = stripCommentsFromElement(element);
          performAnimation('setClass', [add, remove], element, null, null, function() {
            $delegate.setClass(element, add, remove);
          }, doneCallback);
        },

        /**
         * @ngdoc method
         * @name $animate#enabled
         * @function
         *
         * @param {boolean=} value If provided then set the animation on or off.
         * @param {DOMElement=} element If provided then the element will be used to represent the enable/disable operation
         * @return {boolean} Current animation state.
         *
         * @description
         * Globally enables/disables animations.
         *
        */
        enabled : function(value, element) {
          switch(arguments.length) {
            case 2:
              if(value) {
                cleanup(element);
              } else {
                var data = element.data(NG_ANIMATE_STATE) || {};
                data.disabled = true;
                element.data(NG_ANIMATE_STATE, data);
              }
            break;

            case 1:
              rootAnimateState.disabled = !value;
            break;

            default:
              value = !rootAnimateState.disabled;
            break;
          }
          return !!value;
         }
      };

      /*
        all animations call this shared animation triggering function internally.
        The animationEvent variable refers to the JavaScript animation event that will be triggered
        and the className value is the name of the animation that will be applied within the
        CSS code. Element, parentElement and afterElement are provided DOM elements for the animation
        and the onComplete callback will be fired once the animation is fully complete.
      */
      function performAnimation(animationEvent, className, element, parentElement, afterElement, domOperation, doneCallback) {

        var runner = animationRunner(element, animationEvent, className);
        if(!runner) {
          fireDOMOperation();
          fireBeforeCallbackAsync();
          fireAfterCallbackAsync();
          closeAnimation();
          return;
        }

        className = runner.className;
        var elementEvents = angular.element._data(runner.node);
        elementEvents = elementEvents && elementEvents.events;

        if (!parentElement) {
          parentElement = afterElement ? afterElement.parent() : element.parent();
        }

        var ngAnimateState  = element.data(NG_ANIMATE_STATE) || {};
        var runningAnimations     = ngAnimateState.active || {};
        var totalActiveAnimations = ngAnimateState.totalActive || 0;
        var lastAnimation         = ngAnimateState.last;

        //only allow animations if the currently running animation is not structural
        //or if there is no animation running at all
        var skipAnimations = runner.isClassBased ?
          ngAnimateState.disabled || (lastAnimation && !lastAnimation.isClassBased) :
          false;

        //skip the animation if animations are disabled, a parent is already being animated,
        //the element is not currently attached to the document body or then completely close
        //the animation if any matching animations are not found at all.
        //NOTE: IE8 + IE9 should close properly (run closeAnimation()) in case an animation was found.
        if (skipAnimations || animationsDisabled(element, parentElement)) {
          fireDOMOperation();
          fireBeforeCallbackAsync();
          fireAfterCallbackAsync();
          closeAnimation();
          return;
        }

        var skipAnimation = false;
        if(totalActiveAnimations > 0) {
          var animationsToCancel = [];
          if(!runner.isClassBased) {
            if(animationEvent == 'leave' && runningAnimations['ng-leave']) {
              skipAnimation = true;
            } else {
              //cancel all animations when a structural animation takes place
              for(var klass in runningAnimations) {
                animationsToCancel.push(runningAnimations[klass]);
                cleanup(element, klass);
              }
              runningAnimations = {};
              totalActiveAnimations = 0;
            }
          } else if(lastAnimation.event == 'setClass') {
            animationsToCancel.push(lastAnimation);
            cleanup(element, className);
          }
          else if(runningAnimations[className]) {
            var current = runningAnimations[className];
            if(current.event == animationEvent) {
              skipAnimation = true;
            } else {
              animationsToCancel.push(current);
              cleanup(element, className);
            }
          }

          if(animationsToCancel.length > 0) {
            forEach(animationsToCancel, function(operation) {
              operation.cancel();
            });
          }
        }

        if(runner.isClassBased && !runner.isSetClassOperation && !skipAnimation) {
          skipAnimation = (animationEvent == 'addClass') == element.hasClass(className); //opposite of XOR
        }

        if(skipAnimation) {
          fireBeforeCallbackAsync();
          fireAfterCallbackAsync();
          fireDoneCallbackAsync();
          return;
        }

        if(animationEvent == 'leave') {
          //there's no need to ever remove the listener since the element
          //will be removed (destroyed) after the leave animation ends or
          //is cancelled midway
          element.one('$destroy', function(e) {
            var element = angular.element(this);
            var state = element.data(NG_ANIMATE_STATE);
            if(state) {
              var activeLeaveAnimation = state.active['ng-leave'];
              if(activeLeaveAnimation) {
                activeLeaveAnimation.cancel();
                cleanup(element, 'ng-leave');
              }
            }
          });
        }

        //the ng-animate class does nothing, but it's here to allow for
        //parent animations to find and cancel child animations when needed
        element.addClass(NG_ANIMATE_CLASS_NAME);

        var localAnimationCount = globalAnimationCounter++;
        totalActiveAnimations++;
        runningAnimations[className] = runner;

        element.data(NG_ANIMATE_STATE, {
          last : runner,
          active : runningAnimations,
          index : localAnimationCount,
          totalActive : totalActiveAnimations
        });

        //first we run the before animations and when all of those are complete
        //then we perform the DOM operation and run the next set of animations
        fireBeforeCallbackAsync();
        runner.before(function(cancelled) {
          var data = element.data(NG_ANIMATE_STATE);
          cancelled = cancelled ||
                        !data || !data.active[className] ||
                        (runner.isClassBased && data.active[className].event != animationEvent);

          fireDOMOperation();
          if(cancelled === true) {
            closeAnimation();
          } else {
            fireAfterCallbackAsync();
            runner.after(closeAnimation);
          }
        });

        function fireDOMCallback(animationPhase) {
          var eventName = '$animate:' + animationPhase;
          if(elementEvents && elementEvents[eventName] && elementEvents[eventName].length > 0) {
            $$asyncCallback(function() {
              element.triggerHandler(eventName, {
                event : animationEvent,
                className : className
              });
            });
          }
        }

        function fireBeforeCallbackAsync() {
          fireDOMCallback('before');
        }

        function fireAfterCallbackAsync() {
          fireDOMCallback('after');
        }

        function fireDoneCallbackAsync() {
          fireDOMCallback('close');
          if(doneCallback) {
            $$asyncCallback(function() {
              doneCallback();
            });
          }
        }

        //it is less complicated to use a flag than managing and canceling
        //timeouts containing multiple callbacks.
        function fireDOMOperation() {
          if(!fireDOMOperation.hasBeenRun) {
            fireDOMOperation.hasBeenRun = true;
            domOperation();
          }
        }

        function closeAnimation() {
          if(!closeAnimation.hasBeenRun) {
            closeAnimation.hasBeenRun = true;
            var data = element.data(NG_ANIMATE_STATE);
            if(data) {
              /* only structural animations wait for reflow before removing an
                 animation, but class-based animations don't. An example of this
                 failing would be when a parent HTML tag has a ng-class attribute
                 causing ALL directives below to skip animations during the digest */
              if(runner && runner.isClassBased) {
                cleanup(element, className);
              } else {
                $$asyncCallback(function() {
                  var data = element.data(NG_ANIMATE_STATE) || {};
                  if(localAnimationCount == data.index) {
                    cleanup(element, className, animationEvent);
                  }
                });
                element.data(NG_ANIMATE_STATE, data);
              }
            }
            fireDoneCallbackAsync();
          }
        }
      }

      function cancelChildAnimations(element) {
        var node = extractElementNode(element);
        if (node) {
          var nodes = angular.isFunction(node.getElementsByClassName) ?
            node.getElementsByClassName(NG_ANIMATE_CLASS_NAME) :
            node.querySelectorAll('.' + NG_ANIMATE_CLASS_NAME);
          forEach(nodes, function(element) {
            element = angular.element(element);
            var data = element.data(NG_ANIMATE_STATE);
            if(data && data.active) {
              forEach(data.active, function(runner) {
                runner.cancel();
              });
            }
          });
        }
      }

      function cleanup(element, className) {
        if(isMatchingElement(element, $rootElement)) {
          if(!rootAnimateState.disabled) {
            rootAnimateState.running = false;
            rootAnimateState.structural = false;
          }
        } else if(className) {
          var data = element.data(NG_ANIMATE_STATE) || {};

          var removeAnimations = className === true;
          if(!removeAnimations && data.active && data.active[className]) {
            data.totalActive--;
            delete data.active[className];
          }

          if(removeAnimations || !data.totalActive) {
            element.removeClass(NG_ANIMATE_CLASS_NAME);
            element.removeData(NG_ANIMATE_STATE);
          }
        }
      }

      function animationsDisabled(element, parentElement) {
        if (rootAnimateState.disabled) return true;

        if(isMatchingElement(element, $rootElement)) {
          return rootAnimateState.disabled || rootAnimateState.running;
        }

        do {
          //the element did not reach the root element which means that it
          //is not apart of the DOM. Therefore there is no reason to do
          //any animations on it
          if(parentElement.length === 0) break;

          var isRoot = isMatchingElement(parentElement, $rootElement);
          var state = isRoot ? rootAnimateState : parentElement.data(NG_ANIMATE_STATE);
          var result = state && (!!state.disabled || state.running || state.totalActive > 0);
          if(isRoot || result) {
            return result;
          }

          if(isRoot) return true;
        }
        while(parentElement = parentElement.parent());

        return true;
      }
    }]);

    $animateProvider.register('', ['$window', '$sniffer', '$timeout', '$$animateReflow',
                           function($window,   $sniffer,   $timeout,   $$animateReflow) {
      // Detect proper transitionend/animationend event names.
      var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;

      // If unprefixed events are not supported but webkit-prefixed are, use the latter.
      // Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
      // Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
      // but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
      // Register both events in case `window.onanimationend` is not supported because of that,
      // do the same for `transitionend` as Safari is likely to exhibit similar behavior.
      // Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
      // therefore there is no reason to test anymore for other vendor prefixes: http://caniuse.com/#search=transition
      if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
        CSS_PREFIX = '-webkit-';
        TRANSITION_PROP = 'WebkitTransition';
        TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
      } else {
        TRANSITION_PROP = 'transition';
        TRANSITIONEND_EVENT = 'transitionend';
      }

      if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
        CSS_PREFIX = '-webkit-';
        ANIMATION_PROP = 'WebkitAnimation';
        ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
      } else {
        ANIMATION_PROP = 'animation';
        ANIMATIONEND_EVENT = 'animationend';
      }

      var DURATION_KEY = 'Duration';
      var PROPERTY_KEY = 'Property';
      var DELAY_KEY = 'Delay';
      var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
      var NG_ANIMATE_PARENT_KEY = '$$ngAnimateKey';
      var NG_ANIMATE_CSS_DATA_KEY = '$$ngAnimateCSS3Data';
      var NG_ANIMATE_BLOCK_CLASS_NAME = 'ng-animate-block-transitions';
      var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
      var CLOSING_TIME_BUFFER = 1.5;
      var ONE_SECOND = 1000;

      var lookupCache = {};
      var parentCounter = 0;
      var animationReflowQueue = [];
      var cancelAnimationReflow;
      function afterReflow(element, callback) {
        if(cancelAnimationReflow) {
          cancelAnimationReflow();
        }
        animationReflowQueue.push(callback);
        cancelAnimationReflow = $$animateReflow(function() {
          forEach(animationReflowQueue, function(fn) {
            fn();
          });

          animationReflowQueue = [];
          cancelAnimationReflow = null;
          lookupCache = {};
        });
      }

      var closingTimer = null;
      var closingTimestamp = 0;
      var animationElementQueue = [];
      function animationCloseHandler(element, totalTime) {
        var node = extractElementNode(element);
        element = angular.element(node);

        //this item will be garbage collected by the closing
        //animation timeout
        animationElementQueue.push(element);

        //but it may not need to cancel out the existing timeout
        //if the timestamp is less than the previous one
        var futureTimestamp = Date.now() + totalTime;
        if(futureTimestamp <= closingTimestamp) {
          return;
        }

        $timeout.cancel(closingTimer);

        closingTimestamp = futureTimestamp;
        closingTimer = $timeout(function() {
          closeAllAnimations(animationElementQueue);
          animationElementQueue = [];
        }, totalTime, false);
      }

      function closeAllAnimations(elements) {
        forEach(elements, function(element) {
          var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
          if(elementData) {
            (elementData.closeAnimationFn || noop)();
          }
        });
      }

      function getElementAnimationDetails(element, cacheKey) {
        var data = cacheKey ? lookupCache[cacheKey] : null;
        if(!data) {
          var transitionDuration = 0;
          var transitionDelay = 0;
          var animationDuration = 0;
          var animationDelay = 0;
          var transitionDelayStyle;
          var animationDelayStyle;
          var transitionDurationStyle;
          var transitionPropertyStyle;

          //we want all the styles defined before and after
          forEach(element, function(element) {
            if (element.nodeType == ELEMENT_NODE) {
              var elementStyles = $window.getComputedStyle(element) || {};

              transitionDurationStyle = elementStyles[TRANSITION_PROP + DURATION_KEY];

              transitionDuration = Math.max(parseMaxTime(transitionDurationStyle), transitionDuration);

              transitionPropertyStyle = elementStyles[TRANSITION_PROP + PROPERTY_KEY];

              transitionDelayStyle = elementStyles[TRANSITION_PROP + DELAY_KEY];

              transitionDelay  = Math.max(parseMaxTime(transitionDelayStyle), transitionDelay);

              animationDelayStyle = elementStyles[ANIMATION_PROP + DELAY_KEY];

              animationDelay   = Math.max(parseMaxTime(animationDelayStyle), animationDelay);

              var aDuration  = parseMaxTime(elementStyles[ANIMATION_PROP + DURATION_KEY]);

              if(aDuration > 0) {
                aDuration *= parseInt(elementStyles[ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY], 10) || 1;
              }

              animationDuration = Math.max(aDuration, animationDuration);
            }
          });
          data = {
            total : 0,
            transitionPropertyStyle: transitionPropertyStyle,
            transitionDurationStyle: transitionDurationStyle,
            transitionDelayStyle: transitionDelayStyle,
            transitionDelay: transitionDelay,
            transitionDuration: transitionDuration,
            animationDelayStyle: animationDelayStyle,
            animationDelay: animationDelay,
            animationDuration: animationDuration
          };
          if(cacheKey) {
            lookupCache[cacheKey] = data;
          }
        }
        return data;
      }

      function parseMaxTime(str) {
        var maxValue = 0;
        var values = angular.isString(str) ?
          str.split(/\s*,\s*/) :
          [];
        forEach(values, function(value) {
          maxValue = Math.max(parseFloat(value) || 0, maxValue);
        });
        return maxValue;
      }

      function getCacheKey(element) {
        var parentElement = element.parent();
        var parentID = parentElement.data(NG_ANIMATE_PARENT_KEY);
        if(!parentID) {
          parentElement.data(NG_ANIMATE_PARENT_KEY, ++parentCounter);
          parentID = parentCounter;
        }
        return parentID + '-' + extractElementNode(element).getAttribute('class');
      }

      function animateSetup(animationEvent, element, className, calculationDecorator) {
        var cacheKey = getCacheKey(element);
        var eventCacheKey = cacheKey + ' ' + className;
        var itemIndex = lookupCache[eventCacheKey] ? ++lookupCache[eventCacheKey].total : 0;

        var stagger = {};
        if(itemIndex > 0) {
          var staggerClassName = className + '-stagger';
          var staggerCacheKey = cacheKey + ' ' + staggerClassName;
          var applyClasses = !lookupCache[staggerCacheKey];

          applyClasses && element.addClass(staggerClassName);

          stagger = getElementAnimationDetails(element, staggerCacheKey);

          applyClasses && element.removeClass(staggerClassName);
        }

        /* the animation itself may need to add/remove special CSS classes
         * before calculating the anmation styles */
        calculationDecorator = calculationDecorator ||
                               function(fn) { return fn(); };

        element.addClass(className);

        var formerData = element.data(NG_ANIMATE_CSS_DATA_KEY) || {};

        var timings = calculationDecorator(function() {
          return getElementAnimationDetails(element, eventCacheKey);
        });

        var transitionDuration = timings.transitionDuration;
        var animationDuration = timings.animationDuration;
        if(transitionDuration === 0 && animationDuration === 0) {
          element.removeClass(className);
          return false;
        }

        element.data(NG_ANIMATE_CSS_DATA_KEY, {
          running : formerData.running || 0,
          itemIndex : itemIndex,
          stagger : stagger,
          timings : timings,
          closeAnimationFn : noop
        });

        //temporarily disable the transition so that the enter styles
        //don't animate twice (this is here to avoid a bug in Chrome/FF).
        var isCurrentlyAnimating = formerData.running > 0 || animationEvent == 'setClass';
        if(transitionDuration > 0) {
          blockTransitions(element, className, isCurrentlyAnimating);
        }

        //staggering keyframe animations work by adjusting the `animation-delay` CSS property
        //on the given element, however, the delay value can only calculated after the reflow
        //since by that time $animate knows how many elements are being animated. Therefore,
        //until the reflow occurs the element needs to be blocked (where the keyframe animation
        //is set to `none 0s`). This blocking mechanism should only be set for when a stagger
        //animation is detected and when the element item index is greater than 0.
        if(animationDuration > 0 && stagger.animationDelay > 0 && stagger.animationDuration === 0) {
          blockKeyframeAnimations(element);
        }

        return true;
      }

      function isStructuralAnimation(className) {
        return className == 'ng-enter' || className == 'ng-move' || className == 'ng-leave';
      }

      function blockTransitions(element, className, isAnimating) {
        if(isStructuralAnimation(className) || !isAnimating) {
          extractElementNode(element).style[TRANSITION_PROP + PROPERTY_KEY] = 'none';
        } else {
          element.addClass(NG_ANIMATE_BLOCK_CLASS_NAME);
        }
      }

      function blockKeyframeAnimations(element) {
        extractElementNode(element).style[ANIMATION_PROP] = 'none 0s';
      }

      function unblockTransitions(element, className) {
        var prop = TRANSITION_PROP + PROPERTY_KEY;
        var node = extractElementNode(element);
        if(node.style[prop] && node.style[prop].length > 0) {
          node.style[prop] = '';
        }
        element.removeClass(NG_ANIMATE_BLOCK_CLASS_NAME);
      }

      function unblockKeyframeAnimations(element) {
        var prop = ANIMATION_PROP;
        var node = extractElementNode(element);
        if(node.style[prop] && node.style[prop].length > 0) {
          node.style[prop] = '';
        }
      }

      function animateRun(animationEvent, element, className, activeAnimationComplete) {
        var node = extractElementNode(element);
        var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
        if(node.getAttribute('class').indexOf(className) == -1 || !elementData) {
          activeAnimationComplete();
          return;
        }

        var activeClassName = '';
        forEach(className.split(' '), function(klass, i) {
          activeClassName += (i > 0 ? ' ' : '') + klass + '-active';
        });

        var stagger = elementData.stagger;
        var timings = elementData.timings;
        var itemIndex = elementData.itemIndex;
        var maxDuration = Math.max(timings.transitionDuration, timings.animationDuration);
        var maxDelay = Math.max(timings.transitionDelay, timings.animationDelay);
        var maxDelayTime = maxDelay * ONE_SECOND;

        var startTime = Date.now();
        var css3AnimationEvents = ANIMATIONEND_EVENT + ' ' + TRANSITIONEND_EVENT;

        var style = '', appliedStyles = [];
        if(timings.transitionDuration > 0) {
          var propertyStyle = timings.transitionPropertyStyle;
          if(propertyStyle.indexOf('all') == -1) {
            style += CSS_PREFIX + 'transition-property: ' + propertyStyle + ';';
            style += CSS_PREFIX + 'transition-duration: ' + timings.transitionDurationStyle + ';';
            appliedStyles.push(CSS_PREFIX + 'transition-property');
            appliedStyles.push(CSS_PREFIX + 'transition-duration');
          }
        }

        if(itemIndex > 0) {
          if(stagger.transitionDelay > 0 && stagger.transitionDuration === 0) {
            var delayStyle = timings.transitionDelayStyle;
            style += CSS_PREFIX + 'transition-delay: ' +
                     prepareStaggerDelay(delayStyle, stagger.transitionDelay, itemIndex) + '; ';
            appliedStyles.push(CSS_PREFIX + 'transition-delay');
          }

          if(stagger.animationDelay > 0 && stagger.animationDuration === 0) {
            style += CSS_PREFIX + 'animation-delay: ' +
                     prepareStaggerDelay(timings.animationDelayStyle, stagger.animationDelay, itemIndex) + '; ';
            appliedStyles.push(CSS_PREFIX + 'animation-delay');
          }
        }

        if(appliedStyles.length > 0) {
          //the element being animated may sometimes contain comment nodes in
          //the jqLite object, so we're safe to use a single variable to house
          //the styles since there is always only one element being animated
          var oldStyle = node.getAttribute('style') || '';
          node.setAttribute('style', oldStyle + ' ' + style);
        }

        element.on(css3AnimationEvents, onAnimationProgress);
        element.addClass(activeClassName);
        elementData.closeAnimationFn = function() {
          onEnd();
          activeAnimationComplete();
        };

        var staggerTime       = itemIndex * (Math.max(stagger.animationDelay, stagger.transitionDelay) || 0);
        var animationTime     = (maxDelay + maxDuration) * CLOSING_TIME_BUFFER;
        var totalTime         = (staggerTime + animationTime) * ONE_SECOND;

        elementData.running++;
        animationCloseHandler(element, totalTime);
        return onEnd;

        // This will automatically be called by $animate so
        // there is no need to attach this internally to the
        // timeout done method.
        function onEnd(cancelled) {
          element.off(css3AnimationEvents, onAnimationProgress);
          element.removeClass(activeClassName);
          animateClose(element, className);
          var node = extractElementNode(element);
          for (var i in appliedStyles) {
            node.style.removeProperty(appliedStyles[i]);
          }
        }

        function onAnimationProgress(event) {
          event.stopPropagation();
          var ev = event.originalEvent || event;
          var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();

          /* Firefox (or possibly just Gecko) likes to not round values up
           * when a ms measurement is used for the animation */
          var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

          /* $manualTimeStamp is a mocked timeStamp value which is set
           * within browserTrigger(). This is only here so that tests can
           * mock animations properly. Real events fallback to event.timeStamp,
           * or, if they don't, then a timeStamp is automatically created for them.
           * We're checking to see if the timeStamp surpasses the expected delay,
           * but we're using elapsedTime instead of the timeStamp on the 2nd
           * pre-condition since animations sometimes close off early */
          if(Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
            activeAnimationComplete();
          }
        }
      }

      function prepareStaggerDelay(delayStyle, staggerDelay, index) {
        var style = '';
        forEach(delayStyle.split(','), function(val, i) {
          style += (i > 0 ? ',' : '') +
                   (index * staggerDelay + parseInt(val, 10)) + 's';
        });
        return style;
      }

      function animateBefore(animationEvent, element, className, calculationDecorator) {
        if(animateSetup(animationEvent, element, className, calculationDecorator)) {
          return function(cancelled) {
            cancelled && animateClose(element, className);
          };
        }
      }

      function animateAfter(animationEvent, element, className, afterAnimationComplete) {
        if(element.data(NG_ANIMATE_CSS_DATA_KEY)) {
          return animateRun(animationEvent, element, className, afterAnimationComplete);
        } else {
          animateClose(element, className);
          afterAnimationComplete();
        }
      }

      function animate(animationEvent, element, className, animationComplete) {
        //If the animateSetup function doesn't bother returning a
        //cancellation function then it means that there is no animation
        //to perform at all
        var preReflowCancellation = animateBefore(animationEvent, element, className);
        if(!preReflowCancellation) {
          animationComplete();
          return;
        }

        //There are two cancellation functions: one is before the first
        //reflow animation and the second is during the active state
        //animation. The first function will take care of removing the
        //data from the element which will not make the 2nd animation
        //happen in the first place
        var cancel = preReflowCancellation;
        afterReflow(element, function() {
          unblockTransitions(element, className);
          unblockKeyframeAnimations(element);
          //once the reflow is complete then we point cancel to
          //the new cancellation function which will remove all of the
          //animation properties from the active animation
          cancel = animateAfter(animationEvent, element, className, animationComplete);
        });

        return function(cancelled) {
          (cancel || noop)(cancelled);
        };
      }

      function animateClose(element, className) {
        element.removeClass(className);
        var data = element.data(NG_ANIMATE_CSS_DATA_KEY);
        if(data) {
          if(data.running) {
            data.running--;
          }
          if(!data.running || data.running === 0) {
            element.removeData(NG_ANIMATE_CSS_DATA_KEY);
          }
        }
      }

      return {
        enter : function(element, animationCompleted) {
          return animate('enter', element, 'ng-enter', animationCompleted);
        },

        leave : function(element, animationCompleted) {
          return animate('leave', element, 'ng-leave', animationCompleted);
        },

        move : function(element, animationCompleted) {
          return animate('move', element, 'ng-move', animationCompleted);
        },

        beforeSetClass : function(element, add, remove, animationCompleted) {
          var className = suffixClasses(remove, '-remove') + ' ' +
                          suffixClasses(add, '-add');
          var cancellationMethod = animateBefore('setClass', element, className, function(fn) {
            /* when classes are removed from an element then the transition style
             * that is applied is the transition defined on the element without the
             * CSS class being there. This is how CSS3 functions outside of ngAnimate.
             * http://plnkr.co/edit/j8OzgTNxHTb4n3zLyjGW?p=preview */
            var klass = element.attr('class');
            element.removeClass(remove);
            element.addClass(add);
            var timings = fn();
            element.attr('class', klass);
            return timings;
          });

          if(cancellationMethod) {
            afterReflow(element, function() {
              unblockTransitions(element, className);
              unblockKeyframeAnimations(element);
              animationCompleted();
            });
            return cancellationMethod;
          }
          animationCompleted();
        },

        beforeAddClass : function(element, className, animationCompleted) {
          var cancellationMethod = animateBefore('addClass', element, suffixClasses(className, '-add'), function(fn) {

            /* when a CSS class is added to an element then the transition style that
             * is applied is the transition defined on the element when the CSS class
             * is added at the time of the animation. This is how CSS3 functions
             * outside of ngAnimate. */
            element.addClass(className);
            var timings = fn();
            element.removeClass(className);
            return timings;
          });

          if(cancellationMethod) {
            afterReflow(element, function() {
              unblockTransitions(element, className);
              unblockKeyframeAnimations(element);
              animationCompleted();
            });
            return cancellationMethod;
          }
          animationCompleted();
        },

        setClass : function(element, add, remove, animationCompleted) {
          remove = suffixClasses(remove, '-remove');
          add = suffixClasses(add, '-add');
          var className = remove + ' ' + add;
          return animateAfter('setClass', element, className, animationCompleted);
        },

        addClass : function(element, className, animationCompleted) {
          return animateAfter('addClass', element, suffixClasses(className, '-add'), animationCompleted);
        },

        beforeRemoveClass : function(element, className, animationCompleted) {
          var cancellationMethod = animateBefore('removeClass', element, suffixClasses(className, '-remove'), function(fn) {
            /* when classes are removed from an element then the transition style
             * that is applied is the transition defined on the element without the
             * CSS class being there. This is how CSS3 functions outside of ngAnimate.
             * http://plnkr.co/edit/j8OzgTNxHTb4n3zLyjGW?p=preview */
            var klass = element.attr('class');
            element.removeClass(className);
            var timings = fn();
            element.attr('class', klass);
            return timings;
          });

          if(cancellationMethod) {
            afterReflow(element, function() {
              unblockTransitions(element, className);
              unblockKeyframeAnimations(element);
              animationCompleted();
            });
            return cancellationMethod;
          }
          animationCompleted();
        },

        removeClass : function(element, className, animationCompleted) {
          return animateAfter('removeClass', element, suffixClasses(className, '-remove'), animationCompleted);
        }
      };

      function suffixClasses(classes, suffix) {
        var className = '';
        classes = angular.isArray(classes) ? classes : classes.split(/\s+/);
        forEach(classes, function(klass, i) {
          if(klass && klass.length > 0) {
            className += (i > 0 ? ' ' : '') + klass + suffix;
          }
        });
        return className;
      }
    }]);
  }]);


})(window, window.angular);

},{}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJqcy9hbmd1bGFyLWFwcC5qcyIsImpzL2FuZ3VsYXItZWxhc3RpYy9lbGFzdGljLmpzIiwianMvYW5ndWxhci9hbmd1bGFyLm1pbi5qcyIsImpzL2Jyb3dzZXJpZnktYXBwLmpzIiwianMvZXJyb3ItbWFwcGVyL2Vycm9yLW1hcHBlci5qcyIsImpzL2xhbmd1YWdlLWNoYW5nZXIvbGFuZ3VhZ2UtY2hhbmdlci5qcyIsImpzL2xpYnMvYW5ndWxhci10cmFuc2xhdGUtbG9hZGVyLXN0YXRpYy1maWxlcy5qcyIsImpzL2xpYnMvYW5ndWxhci10cmFuc2xhdGUuanMiLCJqcy9saWJzL251bWVyYWwuZGUtZGUuanMiLCJqcy9saWJzL3Byb21pc2UtdHJhY2tlci1odHRwLWludGVyY2VwdG9yLmpzIiwianMvbGlicy9wcm9taXNlLXRyYWNrZXIuanMiLCJqcy9saWJzL3VpLWJvb3RzdHJhcC10cGxzLTAuMTEuMi5taW4uanMiLCJqcy9saWJzL3VpLWhhbmRzb250YWJsZS5qcyIsImpzL211bHRpc2VsZWN0L211bHRpc2VsZWN0LmpzIiwianMvbmF2aWdhdGlvbi1ibG9ja2VyL25hdmlnYXRpb24tYmxvY2tlci5qcyIsImpzL25vdGlmaWNhdGlvbi9ub3RpZmljYXRpb24uanMiLCJqcy9vcmRlci1vYmplY3QtYnkvbmctb3JkZXItb2JqZWN0LWJ5LmpzIiwianMvdGFicy9mb3JtLXRhYnMuanMiLCJqcy91dGlscy91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyLWFuaW1hdGUvYW5ndWxhci1hbmltYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3MkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3h5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25HQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2S0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIiQubm9Db25mbGljdCgpO1xuXG5cblx0dmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdMQ1AnLCBbXG4gICAgICAgICd1aS5ib290c3RyYXAnLFxuICAgICAgICAnbmdBbmltYXRlJyxcbiAgICAgICAgJ2Fqb3NsaW4ucHJvbWlzZS10cmFja2VyJyxcbiAgICAgICAgJ25hdmlnYXRpb24ubmF2aWdhdGlvbkJsb2NrZXInLFxuICAgICAgICAndHJhbnNsYXRlLmxhbmd1YWdlQ2hhbmdlcicsXG4gICAgICAgICd1aS5tdWx0aXNlbGVjdCcsXG4gICAgICAgICd0YWJzLmZvcm1UYWJzJyxcbiAgICAgICAgJ3VpLmVycm9yTWFwcGVyJyxcbiAgICAgICAgJ21vbm9zcGFjZWQuZWxhc3RpYycsXG4gICAgICAgICduZ09yZGVyT2JqZWN0QnknLFxuICAgICAgICAnbm90aWZpY2F0aW9ucyddKTtcblxuICAgIGFwcC5ydW4oZnVuY3Rpb24oJHJvb3RTY29wZSwgcHJvbWlzZVRyYWNrZXIsICRsb2NhdGlvbiwgdGFiU2VydmljZSkge1xuICAgICAgICAkcm9vdFNjb3BlLmxvYWRpbmdUcmFja2VyID0gcHJvbWlzZVRyYWNrZXIoe30pO1xuICAgICAgICB0YWJTZXJ2aWNlLnNldFRhYnMoW1xuICAgICAgICAgICAge1wiaWRcIjpcIkJhc2ljRGF0YVwiLCAgICAgICAgICAgIFwiYWN0aXZlXCIgOiB0cnVlfSxcbiAgICAgICAgICAgIHtcImlkXCI6XCJMaXN0T2ZQbGFudHNcIiwgICAgICAgICBcImFjdGl2ZVwiIDogZmFsc2V9LFxuICAgICAgICAgICAge1wiaWRcIjpcIlBsYW50RGV0YWlsc1wiLCAgICAgICAgIFwiYWN0aXZlXCIgOiBmYWxzZX0sXG4gICAgICAgICAgICB7XCJpZFwiOlwiRW5lcmd5SW5wdXRcIiwgICAgICAgICAgXCJhY3RpdmVcIiA6IGZhbHNlfSxcbiAgICAgICAgICAgIHtcImlkXCI6XCJUb3RhbEVtaXNzaW9uc1RvQWlyXCIsICBcImFjdGl2ZVwiIDogZmFsc2V9LFxuICAgICAgICAgICAge1wiaWRcIjpcIkRlc3VscGh1cmlzYXRpb25cIiwgICAgIFwiYWN0aXZlXCIgOiBmYWxzZX0sXG4gICAgICAgICAgICB7XCJpZFwiOlwiVXNlZnVsSGVhdFwiLCAgICAgICAgICAgICBcImFjdGl2ZVwiIDogZmFsc2V9LFxuICAgICAgICAgICAge1wiaWRcIjpcIk5vdGVzXCIsICAgICAgICAgICAgICAgIFwiYWN0aXZlXCIgOiBmYWxzZX1dKTtcbiAgICB9KTtcblxuICAgIGFwcC5jb25maWcoZnVuY3Rpb24gKGxhbmd1YWdlQ2hhbmdlclByb3ZpZGVyKSB7XG4gICAgICAgIGxhbmd1YWdlQ2hhbmdlclByb3ZpZGVyLnNldERlZmF1bHRMYW5ndWFnZSgnZW4nKTtcbiAgICAgICAgbGFuZ3VhZ2VDaGFuZ2VyUHJvdmlkZXIuc2V0TGFuZ3VhZ2VGaWxlUHJlZml4KCdsY3AtbGFiZWxzLScpO1xuICAgICAgICBsYW5ndWFnZUNoYW5nZXJQcm92aWRlci5zZXRBdmFpbGFibGVMYW5ndWFnZXMoeyBcIml0ZW1cIiA6W3tcbiAgICAgICAgICAgIFwiY29kZVwiOiBcImJnXCIsXG4gICAgICAgICAgICBcImxhYmVsXCI6IFwi0JHRitC70LPQsNGA0YHQutC4IChiZylcIn0sIHtcbiAgICAgICAgICAgIFwiY29kZVwiOiBcImVzXCIsXG4gICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkVzcGHDsW9sIChlcylcIn0sIHtcbiAgICAgICAgICAgIFwiY29kZVwiOiBcImNzXCIsXG4gICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIsSMZcWhdGluYSAoY3MpXCJ9LCB7XG4gICAgICAgICAgICBcImNvZGVcIjogXCJkYVwiLFxuICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJEYW5zayAoZGEpXCJ9LCB7XG4gICAgICAgICAgICBcImNvZGVcIjogXCJkZVwiLFxuICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJEZXV0c2NoIChkZSlcIn0sIHtcbiAgICAgICAgICAgIFwiY29kZVwiOiBcImV0XCIsXG4gICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkVlc3RpIChldClcIn0sIHtcbiAgICAgICAgICAgIFwiY29kZVwiOiBcImVsXCIsXG4gICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIs61zrvOu863zr3Ouc66zqwgKGVsKVwifSwge1xuICAgICAgICAgICAgXCJjb2RlXCI6IFwiZW5cIixcbiAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiRW5nbGlzaCAoZW4pXCJ9LCB7XG4gICAgICAgICAgICBcImNvZGVcIjogXCJmclwiLFxuICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJGcmFuw6dhaXMgKGZyKVwifSwge1xuICAgICAgICAgICAgXCJjb2RlXCI6IFwiaHJcIixcbiAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiSHJ2YXRza2kgKGhyKVwifSwge1xuICAgICAgICAgICAgXCJjb2RlXCI6IFwiaXRcIixcbiAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiSXRhbGlhbm8gKGl0KVwifSwge1xuICAgICAgICAgICAgXCJjb2RlXCI6IFwibHZcIixcbiAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTGF0dmllxaF1IHZhbG9kYSAobHYpXCJ9LCB7XG4gICAgICAgICAgICBcImNvZGVcIjogXCJsdFwiLFxuICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJMaWV0dXZpxbMga2FsYmEgKGx0KVwifSwge1xuICAgICAgICAgICAgXCJjb2RlXCI6IFwiaHVcIixcbiAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTWFneWFyIChodSlcIn0sIHtcbiAgICAgICAgICAgIFwiY29kZVwiOiBcImhyXCIsXG4gICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkhydmF0c2tpIChocilcIn0sIHtcbiAgICAgICAgICAgIFwiY29kZVwiOiBcIm10XCIsXG4gICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk1hbHRpIChtdClcIn0sIHtcbiAgICAgICAgICAgIFwiY29kZVwiOiBcIm5sXCIsXG4gICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk5lZGVybGFuZHMgKG5sKVwifSwge1xuICAgICAgICAgICAgXCJjb2RlXCI6IFwicGxcIixcbiAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiUG9sc2tpIChwbClcIn0sIHtcbiAgICAgICAgICAgIFwiY29kZVwiOiBcInB0XCIsXG4gICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlBvcnR1Z3XDqnMgKHB0KVwifSwge1xuICAgICAgICAgICAgXCJjb2RlXCI6IFwicm9cIixcbiAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiUm9tw6JuxIMgKHJvKVwifSwge1xuICAgICAgICAgICAgXCJjb2RlXCI6IFwic2tcIixcbiAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiU2xvdmVuxI1pbmEgKHNrKVwifSwge1xuICAgICAgICAgICAgXCJjb2RlXCI6IFwic2xcIixcbiAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiU2xvdmVuxaHEjWluYSAoc2wpXCJ9LCB7XG4gICAgICAgICAgICBcImNvZGVcIjogXCJmaVwiLFxuICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJTdW9taSAoZmkpXCJ9LCB7XG4gICAgICAgICAgICBcImNvZGVcIjogXCJzdlwiLFxuICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJTdmVuc2thIChzdilcIn1dIH0pXG4gICAgfSk7XG5cbiAgICAvLyByZXF1ZXN0IHBhcmFtZXRlcnNcbiAgICB2YXIgYmFzZVVyaSA9IGdldFBhcmFtZXRlckJ5TmFtZSgnYmFzZV91cmknKTtcbiAgICB2YXIgZmlsZUlkID0gZ2V0UGFyYW1ldGVyQnlOYW1lKCdmaWxlSWQnKTtcbiAgICB2YXIgZW52ZWxvcGUgPSBnZXRQYXJhbWV0ZXJCeU5hbWUoJ2VudmVsb3BlJyk7XG4gICAgdmFyIHNlc3Npb25JZCA9IGdldFBhcmFtZXRlckJ5TmFtZSgnc2Vzc2lvbmlkJyk7XG4gICAgdmFyIGNvdW50cnlDb2RlID0gZ2V0UGFyYW1ldGVyQnlOYW1lKCdjb3VudHJ5Y29kZScpO1xuICAgIGNvdW50cnlDb2RlID0gY291bnRyeUNvZGUgPT09IFwiR0JcIiA/IFwiVUtcIiA6IGNvdW50cnlDb2RlO1xuICAgIHZhciBERF9WT0NBQlVMQVJZX0JBU0VfVVJJID0gXCJodHRwczovL2RkLmVpb25ldC5ldXJvcGEuZXUvdm9jYWJ1bGFyeS9cIjtcblxuICAgIGFwcC5jb250cm9sbGVyKFwicXVlc3Rpb25uYWlyZVwiLCBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCBkYXRhUmVwb3NpdG9yeSwgbGFuZ3VhZ2VDaGFuZ2VyLCAkc2NlLCAkbG9jYXRpb24sICR0aW1lb3V0LCAkYW5jaG9yU2Nyb2xsLCAkbm90aWZpY2F0aW9uLCAkaHR0cCwgJGZpbHRlciAsJHEpIHtcblxuICAgICBcbiAgICAgICAgJHNjb3BlLmNvZGVMaXN0ID0ge307XG4gICAgICAgICRzY29wZS5yZWdpb25zQ29kZWxpc3QgPSB7fTtcblxuXHRcdCRzY29wZS5iYXNlID0gJGxvY2F0aW9uLmhvc3QoKSsgJGxvY2F0aW9uLnBvcnQoKSArIGdldFBhcmFtZXRlckJ5TmFtZSgnYmFzZV91cmknKTtcbiAgICAgICAgLy8kc2NvcGUuYXZhaWxhYmxlTGFuZ3VhZ2VzID0gbGFuZ3VhZ2VDaGFuZ2VyLmdldEF2YWlsYWJsZUxhbmd1YWdlcygpO1xuXG4gICAgICAgIGRhdGFSZXBvc2l0b3J5LmdldEVtcHR5SW5zdGFuY2UoKS5lcnJvcihmdW5jdGlvbigpe2FsZXJ0KFwiRmFpbGVkIHRvIHJlYWQgZW1wdHkgaW5zdGFuY2UgWE1MIGZpbGUuXCIpO30pLnN1Y2Nlc3MoZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICRzY29wZS5lbXB0eUluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRhdGFSZXBvc2l0b3J5LmdldEluc3RhbmNlKCkuZXJyb3IoZnVuY3Rpb24oKXthbGVydChcIkZhaWxlZCB0byByZWFkIGluc3RhbmNlIFhNTCBmaWxlLlwiKTt9KS5zdWNjZXNzKGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKGluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUpKXtcbiAgICAgICAgICAgICAgICAvLyBhZGQgbGFiZWxMYW5ndWFnZSBhdHRyaWJ1dGUgdG8gY29ycmVjdCBsb2NhdGlvblxuICAgICAgICAgICAgICAgICRzY29wZS5pbnN0YW5jZSA9IHt9O1xuICAgICAgICAgICAgICAgICRzY29wZS5pbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlID0ge307XG4gICAgICAgICAgICAgICAgJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmVbJ0B4bWxuczp4c2knXSA9IGluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmVbJ0B4bWxuczp4c2knXTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZVsnQHhzaTpub05hbWVzcGFjZVNjaGVtYUxvY2F0aW9uJ10gPSBpbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlWydAeHNpOm5vTmFtZXNwYWNlU2NoZW1hTG9jYXRpb24nXTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZVsnQHhtbDpsYW5nJ10gPSBpbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlWydAeG1sOmxhbmcnXTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5CYXNpY0RhdGEgPSBpbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkJhc2ljRGF0YTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5MaXN0T2ZQbGFudHMgPSBpbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkxpc3RPZlBsYW50cztcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5MaXN0T2ZQbGFudHMgJiYgJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuTGlzdE9mUGxhbnRzLlBsYW50KSB7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGVyz4PPhc+DZSBpcyBvbmx5IDEgcGxhbnQsIHRoZW4gY29udmVydCBpdCB0byBhcnJheVxuICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0FycmF5KCRzY29wZS5pbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkxpc3RPZlBsYW50cy5QbGFudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuTGlzdE9mUGxhbnRzLlBsYW50ID0gWyRzY29wZS5pbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkxpc3RPZlBsYW50cy5QbGFudF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgZmlyc3QgZW1wdHkgcm93LCBpZiBleGlzdHNcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuTGlzdE9mUGxhbnRzLlBsYW50Lmxlbmd0aCA9PSAxICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoISRzY29wZS5pbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkxpc3RPZlBsYW50cy5QbGFudFswXSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoISRzY29wZS5pbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkxpc3RPZlBsYW50cy5QbGFudFswXVsnUGxhbnROYW1lJ10gJiYgISRzY29wZS5pbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkxpc3RPZlBsYW50cy5QbGFudFswXVsnUGxhbnRJZCddKSkpe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5MaXN0T2ZQbGFudHMuUGxhbnQgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBMb2FkIHByZWRlZmluZWQgY291bnRyeSBzcGVjaWZpYyBwbGFudHNcbiAgICAgICAgICAgICAgICAgICAgaWYoIGNvdW50cnlDb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcHJ0ckNvdW50cnlDb2RlID0gY291bnRyeUNvZGUgPT09IFwiR0JcIiA/IFwiVUtcIiA6IGNvdW50cnlDb2RlID09PSBcIkdSXCIgPyBcIkVMXCIgOiBjb3VudHJ5Q29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZhciB1cmwgPSBcImxjcF9wbGFudHMtXCIgKyBjb3VudHJ5Q29kZSArIFwiLmpzb25cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBcImh0dHA6Ly9zZW1hbnRpYy5lZWEuZXVyb3BhLmV1L3NwYXJxbD9mb3JtYXQ9YXBwbGljYXRpb24vanNvbiZxdWVyeT1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGFycWwgPSBcIiBQUkVGSVggcmRmczogPGh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDEvcmRmLXNjaGVtYSM+XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgUFJFRklYIGNyOiA8aHR0cDovL2NyLmVpb25ldC5ldXJvcGEuZXUvb250b2xvZ2llcy9jb250cmVnLnJkZiM+IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIFBSRUZJWCBwcnRyOiA8aHR0cDovL3BydHIuZWMuZXVyb3BhLmV1L3JkZi9zY2hlbWEucmRmIz4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgUFJFRklYIGdlbzogPGh0dHA6Ly93d3cudzMub3JnLzIwMDMvMDEvZ2VvL3dnczg0X3BvcyM+XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgUFJFRklYIGxjcFR5cGU6IDxodHRwOi8vc2VtYW50aWMuZWVhLmV1cm9wYS5ldS9wcm9qZWN0L2xjcF9kYXRhL2xjcF9wbGFudHMuY3N2Lz4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgUFJFRklYIGxjcDogPGh0dHA6Ly9zZW1hbnRpYy5lZWEuZXVyb3BhLmV1L3Byb2plY3QvbGNwX2RhdGEvbGNwX3BsYW50cy5jc3YjPiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBTRUxFQ1QgKlwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIFdIRVJFIHtcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiB7XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIFtdIGEgbGNwVHlwZTpsY3BQbGFudCA7XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIGxjcDpQbGFudE5hbWUgP1BsYW50TmFtZTtcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgbGNwOk1lbWJlclN0YXRlID9NZW1iZXJTdGF0ZTtcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgbGNwOkVQUlRSTmF0aW9uYWxJZCA/RVBSVFJOYXRpb25hbElkO1wiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBsY3A6VW5pcXVlX1BsYW50X0lEID9QbGFudElkLlwiICtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiID9mYWNpbGl0eSBhIHBydHI6RmFjaWxpdHkgO1wiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBwcnRyOmZhY2lsaXR5TmFtZSA/ZmFjaWxpdHlOYW1lO1wiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBwcnRyOnN0cmVldE5hbWUgP3N0cmVldE5hbWU7XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIHBydHI6cG9zdGFsQ29kZSAgP3Bvc3RhbENvZGU7XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIGdlbzpsYXQgP2xhdDtcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgZ2VvOmxvbmcgP2xvbmc7XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIHBydHI6aW5Db3VudHJ5ID9pbkNvdW50cnkgO1wiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBwcnRyOmxhdGVzdFJlcG9ydCA/bGF0ZXN0UmVwb3J0LlwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiA/aW5Db3VudHJ5IHBydHI6Y29kZSA/RVBSVFJDb3VudHJ5Q29kZS5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgP2xhdGVzdFJlcG9ydCBwcnRyOm5hdGlvbmFsSUQgP0VQUlRSTmF0aW9uYWxJZDtcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgcHJ0cjpmb3JOVVRTID9mb3JOVVRTO1wiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBwcnRyOnJlcG9ydGluZ1llYXIgP3JlcG9ydGluZ1llYXIuXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiID9mb3JOVVRTIHBydHI6Y29kZSA/cmVnaW9uQ29kZS5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgT1BUSU9OQUwgeyA/ZmFjaWxpdHkgcHJ0cjpidWlsZGluZ051bWJlciA/YnVpbGRpbmdOdW1iZXIuIH1cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgT1BUSU9OQUwgeyA/ZmFjaWxpdHkgcHJ0cjpjaXR5ID9jaXR5LiB9XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIEZJTFRFUiggP0VQUlRSQ291bnRyeUNvZGU9ICdcIiArIGVwcnRyQ291bnRyeUNvZGUgKyBcIicgYW5kID9NZW1iZXJTdGF0ZSA9ICdcIiArIGNvdW50cnlDb2RlICsgXCInIGFuZCA/TWVtYmVyU3RhdGUgIT0gJ1NLJyApXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgfSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBVTklPTlwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIHtcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgP3BsYW50IGEgbGNwVHlwZTpsY3BQbGFudCA7XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIGxjcDpQbGFudE5hbWUgP1BsYW50TmFtZTtcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgbGNwOk1lbWJlclN0YXRlID9NZW1iZXJTdGF0ZTtcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgbGNwOkVQUlRSTmF0aW9uYWxJZCA/RVBSVFJOYXRpb25hbElkO1wiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBsY3A6VW5pcXVlX1BsYW50X0lEID9QbGFudElkLlwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBPUFRJT05BTCB7ICA/cGxhbnQgbGNwOkZhY2lsaXR5TmFtZSA/ZmFjaWxpdHlOYW1lLiB9XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIE9QVElPTkFMIHsgID9wbGFudCBsY3A6TG9uZ2l0dWRlID9sb25nLiB9XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIE9QVElPTkFMIHsgID9wbGFudCBsY3A6TGF0aXR1ZGUgP2xhdC4gfVwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBPUFRJT05BTCB7ICA/cGxhbnQgbGNwOkFkZHJlc3MxID9zdHJlZXROYW1lLiB9XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIE9QVElPTkFMIHsgID9wbGFudCBsY3A6Q2l0eSA/Y2l0eS4gfVwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBPUFRJT05BTCB7ICA/cGxhbnQgbGNwOlBvc3RhbENvZGUgP3Bvc3RhbENvZGUufVwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBPUFRJT05BTCB7ICA/cGxhbnQgbGNwOlJlZ2lvbiA/cmVnaW9uQ29kZS4gfVwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBPUFRJT05BTCB7XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiA/ZmFjaWxpdHkgYSBwcnRyOkZhY2lsaXR5IDtcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIHBydHI6aW5Db3VudHJ5ID9pbkNvdW50cnkgO1wiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgcHJ0cjpsYXRlc3RSZXBvcnQgP2xhdGVzdFJlcG9ydC5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiID9sYXRlc3RSZXBvcnQgcHJ0cjpuYXRpb25hbElEID9FUFJUUk5hdGlvbmFsSWQuXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiA/aW5Db3VudHJ5IHBydHI6Y29kZSA/RVBSVFJDb3VudHJ5Q29kZS5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIEZJTFRFUiggP0VQUlRSQ291bnRyeUNvZGU9ICdcIisgZXBydHJDb3VudHJ5Q29kZSArIFwiJyAgKVwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiB9XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIEZJTFRFUiggP01lbWJlclN0YXRlID0gJ1wiICsgY291bnRyeUNvZGUgK1wiJyBhbmQgKCFib3VuZCg/ZmFjaWxpdHkpIG9yICA/TWVtYmVyU3RhdGUgPSAnU0snICkgKSBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiB9XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgfSBPUkRFUiBCWSA/UGxhbnRJZCBcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gYmFzZVVyaSArICcvcmVzdFByb3h5P3VyaT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHVybCArIGVuY29kZVVSSUNvbXBvbmVudChzcGFycWwpKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3BsYW50cyB1cmwgaXM6Jyt1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCwge3RyYWNrZXIgOiAkcm9vdFNjb3BlLmxvYWRpbmdUcmFja2VyfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKCl7YWxlcnQoXCJGYWlsZWQgdG8gcHJlLWxvYWQgcGxhbnRzIGRhdGEgZnJvbSBFLVBSVFIgZGF0YWJhc2UuXCIpO30pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGVwcnRyRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVwcnRyRGF0YS5yZXN1bHRzLmJpbmRpbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGxhbnRzRGljdCA9IHt9IDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpPSAwOyBpIDwgZXBydHJEYXRhLnJlc3VsdHMuYmluZGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlUGxhbnQgPSBlcHJ0ckRhdGEucmVzdWx0cy5iaW5kaW5nc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBsYW50ID0gbnVsbCA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggICBwbGFudHNEaWN0WyByZXNwb25zZVBsYW50LlBsYW50SWQudmFsdWVdICYmIHBsYW50c0RpY3QgWyByZXNwb25zZVBsYW50LlBsYW50SWQudmFsdWVdID4gcmVzcG9uc2VQbGFudC5yZXBvcnRpbmdZZWFyLnZhbHVlICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvbWUgcGxhbnRzIGhhdmUgcmVwb3J0cyB1bmRlciBkaWZmZXJlbnQgZmFjaWxpdGllcy4gd2Uga2VlcCB0aGUgZm9yIG1vc3QgbmV3IHJlcG9ydGluZ1llYXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICggISBwbGFudHNEaWN0WyByZXNwb25zZVBsYW50LlBsYW50SWQudmFsdWVdICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSXRlbSgnTENQUXVlc3Rpb25uYWlyZS5MaXN0T2ZQbGFudHMuUGxhbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYW50ID0gJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuTGlzdE9mUGxhbnRzLlBsYW50WyAkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5MaXN0T2ZQbGFudHMuUGxhbnQubGVuZ3RoIC0gMSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBsYW50LlBsYW50TG9jYXRpb24pIHBsYW50LlBsYW50TG9jYXRpb24gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwbGFudC5HZW9ncmFwaGljYWxDb29yZGluYXRlKSBwbGFudC5HZW9ncmFwaGljYWxDb29yZGluYXRlID0ge307XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhbnQuUGxhbnRJZCA9IHJlc3BvbnNlUGxhbnQuUGxhbnRJZC52YWx1ZSA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYW50LlBsYW50TmFtZSA9IHJlc3BvbnNlUGxhbnQuUGxhbnROYW1lLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFudC5FUFJUUk5hdGlvbmFsSWQgPSByZXNwb25zZVBsYW50LkVQUlRSTmF0aW9uYWxJZC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhbnQuUGxhbnRMb2NhdGlvbi5TdHJlZXROYW1lID0gcmVzcG9uc2VQbGFudC5zdHJlZXROYW1lLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRW1wdHkocmVzcG9uc2VQbGFudC5idWlsZGluZ051bWJlci52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYW50LlBsYW50TG9jYXRpb24uQnVpbGRpbmdOdW1iZXIgKz0gXCIgXCIgKyByZXNwb25zZVBsYW50LmJ1aWxkaW5nTnVtYmVyLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYW50LlBsYW50TG9jYXRpb24uQ2l0eSA9IHJlc3BvbnNlUGxhbnQuY2l0eS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhbnQuUGxhbnRMb2NhdGlvbi5SZWdpb24gPSByZXNwb25zZVBsYW50LnJlZ2lvbkNvZGUudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYW50LlBsYW50TG9jYXRpb24uUG9zdGFsQ29kZSA9IHJlc3BvbnNlUGxhbnQucG9zdGFsQ29kZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhbnQuR2VvZ3JhcGhpY2FsQ29vcmRpbmF0ZS5Mb25naXR1ZGUgPSByZXNwb25zZVBsYW50LmxvbmcudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYW50Lkdlb2dyYXBoaWNhbENvb3JkaW5hdGUuTGF0aXR1ZGUgPSByZXNwb25zZVBsYW50LmxhdC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhbnQuRmFjaWxpdHlOYW1lID0gcmVzcG9uc2VQbGFudC5mYWNpbGl0eU5hbWUudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhbnRzRGljdCBbcGxhbnQuUGxhbnRJZCBdID0gcmVzcG9uc2VQbGFudC5yZXBvcnRpbmdZZWFyLnZhbHVlIHx8IDIwMTM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgndXBkYXRlRmlsdGVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG5vdGlmaWNhdGlvbi5pbmZvKFwiSW5mb1wiLCBcIlByZXZpb3VzIEVQUlRSIHBsYW50cyBoYXZlIGJlZW4gcHJlLWxvYWRlZC5cIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiVGhlIHN5c3RlbSBjb3VsZCBub3QgZmluZCBhbnkgcGxhbnQgZm9yIGNvdW50cnkgXCIgKyBjb3VudHJ5Q29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuTGlzdE9mUGxhbnRzID0ge1wiUGxhbnRcIiA6IFtdfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCBjb3VudHJ5Q29kZSAhPSBudWxsKXtcblxuICAgICAgICAgICAgICAgICRzY29wZS5jb3VudHJ5Q29kZUJvb2xlYW4gPXRydWU7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuQmFzaWNEYXRhLk1lbWJlclN0YXRlID0gY291bnRyeUNvZGUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWVtYmVyU3RhdGVWYWx1ZSA9IGNvdW50cnlDb2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiggJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuQmFzaWNEYXRhLk1lbWJlclN0YXRlICE9IG51bGwgKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY291bnRyeUNvZGVCb29sZWFuID10cnVlO1xuICAgICAgICAgICAgICAgICRzY29wZS5tZW1iZXJTdGF0ZVZhbHVlID0gJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuQmFzaWNEYXRhLk1lbWJlclN0YXRlO1xuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZVZhbHVlID0gJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuQmFzaWNEYXRhLk1lbWJlclN0YXRlO1xuICAgICAgICAgICAgICAgICRzY29wZS5pbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkJhc2ljRGF0YS5TdGF0ZSA9ICRzY29wZS5zdGF0ZVZhbHVlO1xuICAgICAgICAgICAgICAgICRzY29wZS5yZWdpb25zQ29kZWxpc3QgPSBkYXRhUmVwb3NpdG9yeS5sb2FkUmVnaW9uc0NvZGVsaXN0KCRzY29wZS5tZW1iZXJTdGF0ZVZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ2luc3RhbmNlUmVhZHknKTtcbiAgICAgICAgfSk7XG5cbiAgIFxuICAgICAgICBcbiAgICAgICAgJHNjb3BlLnJlcG9ydGluZ1llYXJzID0gW107XG4gICAgICAgICRzY29wZS5yZXBvcnRpbmdZZWFycy5wdXNoICgnMjAxNicpO1xuICAgICAgICAkc2NvcGUucGxhbnREZXRhaWxzT3RoZXJTZWN0b3JGaWVsZHNWaWV3ID0ge2lyb25fc3RlZWw6XCJJcm9uIGFuZCBTdGVlbFwiLGVzaTpcIkVsZWN0cmljaXR5IHByb2R1Y3Rpb25cIixkaXN0cmljdF9oZWF0aW5nOlwiRGlzdHJpY3QgaGVhdGluZ1wiLGNocDpcIkNvbWJpbmVkIGhlYXQgYW5kIHBvd2VyIGdlbmVyYXRpb25cIixvdGhlcjpcIk90aGVyXCJ9O1xuXG4gICAgICAgIC8vIG5ld1xuICAgICAgICAkc2NvcGUuY3VycmVudExpc3RPZlBsYW50c1RhYmxlID0gbnVsbDtcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkTGlzdE9mUGxhbnRzVGFibGUgPSBudWxsO1xuICAgICAgICAkc2NvcGUudHJhbnNsYXRpb25EYXRhID0ge307XG4gICAgICAgICRyb290U2NvcGUuYnVsa0VkaXRMaXN0T2ZQbGFudHM9ZmFsc2U7XG4gICAgICAgIC8vJHNjb3BlLnN0YXR1cyA9IHN1Ym1pc3Npb25TZXJ2aWNlLmdldFN0YXR1cygpO1xuICAgICAgICAkc2NvcGUucHJvZmlsZUZpbGxlZCA9IHRydWU7XG4gICAgICAgICRzY29wZS5lZGl0UmVmZXJlbmNlID0gZmFsc2U7XG4gICAgICAgICRzY29wZS5jaGFuZ2VkUmVmZXJlbmNlID0gXCJcIjtcbiAgICAgICAgJHNjb3BlLmVkaXRVc2VySWRlbnRpdHkgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLmNoYW5nZWRVc2VySWRlbnRpdHkgPSBcIlwiO1xuICAgICAgICAkc2NvcGUuZWRpdENvdW50cnkgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLmNoYW5nZWRDb3VudHJ5ID0gXCJcIjtcbiAgICAgICAgJHNjb3BlLnJlZ2lvbnNDb2RlbGlzdCA9IHt9O1xuICAgICAgICAkc2NvcGUucmVnaW9uc0NvdW50cnkgPSBudWxsO1xuICAgICAgICAkc2NvcGUuaXNJRTkgPSAkcm9vdFNjb3BlLmlzSUU5O1xuXG4gICAgICAgICRzY29wZS5jaGVja0JveERlbGV0ZUNvbW1pdCA9IGZhbHNlO1xuICAgICAgICAvLyBuZXcgZW5kXG4gICAgICAgIC8vZGV0ZXJtaW5lIGllIHZlcnNpb24sIGNvZGUgc25pcHBldCBpcyB0YWtlbiBmcm9tOiBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1Mzc1MDklMjh2PXZzLjg1JTI5LmFzcHhcbiAgICAgICAgdmFyIHJ2ID0gLTE7IC8vIFJldHVybiB2YWx1ZSBhc3N1bWVzIGZhaWx1cmUuXG4gICAgICAgIGlmIChuYXZpZ2F0b3IuYXBwTmFtZSA9PSAnTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyJylcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICAgICAgICAgIHZhciByZSAgPSBuZXcgUmVnRXhwKFwiTVNJRSAoWzAtOV17MSx9W1xcLjAtOV17MCx9KVwiKTtcbiAgICAgICAgICAgIGlmIChyZS5leGVjKHVhKSAhPSBudWxsKVxuICAgICAgICAgICAgICAgIHJ2ID0gcGFyc2VGbG9hdCggUmVnRXhwLiQxICk7XG4gICAgICAgIH1cbiAgICAgICAgLy9zZWU6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTc5MDc0NDUvaG93LXRvLWRldGVjdC1pZTExXG4gICAgICAgIGVsc2UgaWYgKG5hdmlnYXRvci5hcHBOYW1lID09ICdOZXRzY2FwZScpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgICAgICAgICB2YXIgcmUgID0gbmV3IFJlZ0V4cChcIlRyaWRlbnQvLipydjooWzAtOV17MSx9W1xcLjAtOV17MCx9KVwiKTtcbiAgICAgICAgICAgIGlmIChyZS5leGVjKHVhKSAhPSBudWxsKVxuICAgICAgICAgICAgICAgIHJ2ID0gcGFyc2VGbG9hdCggUmVnRXhwLiQxICk7XG4gICAgICAgIH1cblxuICAgICAgICAkcm9vdFNjb3BlLmllVmVyc2lvbk51bWJlck91dE9mQ3VyaW9zaXR5VmFyaWFibGUgPSBydjtcbiAgICAgICAgaWYgKHJ2ID4gMCAmJiBydiA8PSA5LjApe1xuICAgICAgICAgICAgJHJvb3RTY29wZS5pc0lFOSA9IHRydWU7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgJHJvb3RTY29wZS5pc0lFOSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgICRyb290U2NvcGUuJHdhdGNoKCdpc0lFOScsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzSUU5ID0gJHJvb3RTY29wZS5pc0lFOTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuXG4gICAgICAgIC8vJHNjb3BlLmNvdW50cnlDb2RlQm9vbGVhbiA9ICBjb3VudHJ5Q29kZSAhPSBudWxsICA7XG4gICAgICAgICRzY29wZS5jb3VudHJ5Q29kZVZhbCA9ICBjb3VudHJ5Q29kZTtcblxuXG4gICAgICAgIGRhdGFSZXBvc2l0b3J5LmxvYWRDb2RlTGlzdCgpO1xuICAgICAgICBkYXRhUmVwb3NpdG9yeS5sb2FkT2xkTENQQ29kZUxpc3QoKTtcbiAgICAgICAgZGF0YVJlcG9zaXRvcnkubG9hZENvbWJ1c3Rpb25QbGFudENvZGVMaXN0KCk7XG4gICAgICAgIGRhdGFSZXBvc2l0b3J5LmxvYWREZXJvZ2F0aW9uVmFsdWVDb2RlTGlzdCgpO1xuICAgICAgICBkYXRhUmVwb3NpdG9yeS5sb2FkT3RoZXJTb2xpZEZ1ZWxDb2RlTGlzdCgpO1xuICAgICAgICBkYXRhUmVwb3NpdG9yeS5sb2FkT3RoZXJHYXNlc291c0Z1ZWxDb2RlTGlzdCgpO1xuICAgICAgICBkYXRhUmVwb3NpdG9yeS5sb2FkTW9udGhWYWx1ZUNvZGVMaXN0KCk7XG4gICAgICAgICRzY29wZS5jb2RlTGlzdCA9IGRhdGFSZXBvc2l0b3J5LmdldENvZGVMaXN0KCk7XG5cbiAgICAgICBcbiAgICBcbiAgICAgICAgJHNjb3BlLmNvbnZlcnNpb25MaW5rID0gXCJcIjtcbiAgICAgICAgJHNjb3BlLmluc3RhbmNlSW5mbyA9IHt9O1xuICAgICAgICBkYXRhUmVwb3NpdG9yeS5sb2FkSW5zdGFuY2VJbmZvKCkuZXJyb3IoZnVuY3Rpb24oKXtjb25zb2xlLmxvZyhcIkZhaWxlZCB0byByZWFkZmlsZSBpbmZvIGZyb20gc2VydmVyLlwiKTt9KS5zdWNjZXNzKGZ1bmN0aW9uKGluZm8pIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuY29weShpbmZvLCAkc2NvcGUuaW5zdGFuY2VJbmZvKTtcbiAgICAgICAgICAgIGlmICgkc2NvcGUuaW5zdGFuY2VJbmZvLmNvbnZlcnNpb25zKSB7XG4gICAgICAgICAgICAgICAgdmFyIGh0bWxDb252ZXJzaW9uSWQgPSAkZmlsdGVyKCdmaWx0ZXInKSgkc2NvcGUuaW5zdGFuY2VJbmZvLmNvbnZlcnNpb25zLCB7cmVzdWx0VHlwZTogJ0hUTUwnfSlbMF0uaWQ7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbnZlcnNpb25MaW5rID0gJHNjb3BlLmluc3RhbmNlSW5mby5jb252ZXJzaW9uTGluayArIGh0bWxDb252ZXJzaW9uSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cblxuICAgICAgICAvLyBSZW1vdmUgcm93IGZyb20gbmctcmVwZWF0LlxuICAgICAgICAkc2NvcGUucmVtb3ZlID0gZnVuY3Rpb24oYXJyYXksICByb3dFbGVtZW50LCBzaG93TXNnKXtcblxuICAgICAgICAgICAgLy8vL2NvbnNvbGUubG9nKHJvd0VsZW1lbnQpO1xuICAgICAgICAgICAgLy8vL2NvbnNvbGUubG9nKGNvdW50Tm9uRW1wdHlQcm9wZXJ0aWVzKHJvd0VsZW1lbnQpKTtcbiAgICAgICAgICAgIGlmKHNob3dNc2cgPT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgaWYgKGNvdW50Tm9uRW1wdHlQcm9wZXJ0aWVzKHJvd0VsZW1lbnQpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbmZpcm0oJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhlIGRhdGEgaW4gdGhpcyByb3c/Jykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZihyb3dFbGVtZW50KTtcbiAgICAgICAgICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3VwZGF0ZUZpbHRlcicpO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgLy8gZ2V0IGNvZGUgbGlzdCBsYWJlbCBieSBjb2RlXG4gICAgICAgICRzY29wZS5nZXRDb2RlTGlzdExhYmVsID0gZnVuY3Rpb24oY29kZWxpc3QsIGNvZGUpIHtcbiAgICAgICAgICAgIC8vRG8gbm90IHRyeSB0byBnZXQgY29kZUxpc3QgYmVmb3JlIGl0IGFjdHVhbGx5IGV4aXN0cy5cbiAgICAgICAgICAgIGlmICghJHNjb3BlLmNvZGVMaXN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL0VzY2FwZSBjb2RlbGlzdHMgdGhhdCBhcmUgbm90IGFycmF5cyBieSBkZWZhdWx0IChoYXMgb25seSBvbmUgZWxlbWVudClcbiAgICAgICAgICAgIC8vIFRoaXMgY29kZSBjYW4gYmUgcmVtb3ZlZCB3aGVuIGNoYW5nZXMgYXJlIG1hZGUgdG8gY29kZUxpc3QgZmlsZS5cbiAgICAgICAgICAgIGlmICghKCRzY29wZS5jb2RlTGlzdC5MQ1BDb2RlbGlzdHNbY29kZWxpc3RdLml0ZW0ubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICAgICAgJiYgJHNjb3BlLmNvZGVMaXN0LkxDUENvZGVsaXN0c1tjb2RlbGlzdF0uaXRlbS5jb2RlID09IGNvZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmNvZGVMaXN0LkxDUENvZGVsaXN0c1tjb2RlbGlzdF0uaXRlbS5sYWJlbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJldFZhbHVlO1xuICAgICAgICAgICAgZm9yICh2YXIgaT0wIDsgaTw9JHNjb3BlLmNvZGVMaXN0LkxDUENvZGVsaXN0c1tjb2RlbGlzdF0uaXRlbS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmNvZGVMaXN0LkxDUENvZGVsaXN0c1tjb2RlbGlzdF0uaXRlbVtpXS5jb2RlID09IGNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0VmFsdWUgPSAkc2NvcGUuY29kZUxpc3QuTENQQ29kZWxpc3RzW2NvZGVsaXN0XS5pdGVtW2ldLmxhYmVsO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsdWU7XG4gICAgICAgIH07XG5cblxuICAgICAgICAkc2NvcGUuYWRkSXRlbSA9IGZ1bmN0aW9uKHBhdGgpIHtcblxuICAgICAgICAgICAgdmFyIHRva2VucyA9IHBhdGguc3BsaXQoXCIuXCIpO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9ICRzY29wZS5pbnN0YW5jZTtcbiAgICAgICAgICAgIHdoaWxlKHRva2Vucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHRbdG9rZW5zLnNoaWZ0KCldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEocmVzdWx0IGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBOZWVkIHRvIG1ha2UgY29weSBvZiBvYmplY3Qgb3RoZXJ3aXNlIGl0IGdldHMgc2FtZSAkJGhhc2hrZXkgYW5kIGl0IGNhbm5vdCBiZSB1c2VkIGluIG5nLXJlcGVhdC5cbiAgICAgICAgICAgIC8vIE90aGVyIHNvbHV0aW9uIHdvdWxkIGJlIHRvIGdldCBlbXB0eSBpbnN0YW5jZSBldmVyeSB0aW1lIHRoYXQgd291bGQgYmUgc2xvd2VyLlxuICAgICAgICAgICAgdmFyIGNvcHlPZkVtcHR5SW5zdGFuY2UgPSBjbG9uZSgkc2NvcGUuZ2V0SW5zdGFuY2VCeVBhdGgoJ2VtcHR5SW5zdGFuY2UnLCBwYXRoKSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaChjb3B5T2ZFbXB0eUluc3RhbmNlKTtcbiAgICAgICAgICAgIHJldHVybiBjb3B5T2ZFbXB0eUluc3RhbmNlO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5nZXROZXh0UGxhbnRJZCA9IGZ1bmN0aW9uICggcGxhbnRJZF9jYW5kaWRhdGUgKSB7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgdmFyIHEgPSAkcS5kZWZlciAoKTtcblxuICAgICAgICAgICAgdmFyIGZvcm1OZXh0UGxhbnRJZCA9IDE7XG4gICAgICAgICAgICB2YXIgbmV3UGxhbnRJZCA9IG51bGw7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhZChudW0sIHNpemUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IG51bStcIlwiO1xuICAgICAgICAgICAgICAgIHdoaWxlIChzLmxlbmd0aCA8IHNpemUpIHMgPSBcIjBcIiArIHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrU0RTICggbmV3UGxhbnRJZCApIHtcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gXCJodHRwOi8vc2VtYW50aWMuZWVhLmV1cm9wYS5ldS9zcGFycWw/Zm9ybWF0PWFwcGxpY2F0aW9uL2pzb24mcXVlcnk9XCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3BhcnFsID1cbiAgICAgICAgICAgICAgICAgICAgXCIgUFJFRklYIHJkZnM6IDxodHRwOi8vd3d3LnczLm9yZy8yMDAwLzAxL3JkZi1zY2hlbWEjPlwiICtcbiAgICAgICAgICAgICAgICAgICAgXCIgUFJFRklYIGxjcFR5cGU6IDxodHRwOi8vc2VtYW50aWMuZWVhLmV1cm9wYS5ldS9wcm9qZWN0L2xjcF9kYXRhL2xjcF9wbGFudHMuY3N2Lz5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiIFBSRUZJWCBsY3A6IDxodHRwOi8vc2VtYW50aWMuZWVhLmV1cm9wYS5ldS9wcm9qZWN0L2xjcF9kYXRhL2xjcF9wbGFudHMuY3N2Iz5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiIFNFTEVDVCAqXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIiBXSEVSRSB7XCIgK1xuICAgICAgICAgICAgICAgICAgICBcIiA/cGxhbnQgYSBsY3BUeXBlOmxjcFBsYW50IDtcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiIGxjcDpVbmlxdWVfUGxhbnRfSUQgP1BsYW50SWQuXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIiBGSUxURVIgKCA/UGxhbnRJZCA9ICdcIiArIG5ld1BsYW50SWQgK1wiJyApXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIiB9XCIgO1xuXG4gICAgICAgICAgICAgICAgdXJsID0gYmFzZVVyaSArICcvcmVzdFByb3h5P3VyaT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHVybCArIGVuY29kZVVSSUNvbXBvbmVudChzcGFycWwpKTtcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQodXJsLCB7dHJhY2tlciA6ICRyb290U2NvcGUubG9hZGluZ1RyYWNrZXJ9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbigpe2FsZXJ0KFwiRmFpbGVkIHRvIHJlYWQgZGF0YSBmcm9tIHJlbW90ZSBkYXRhYmFzZS4gUGxlYXNlIGNoZWNrIHlvdXIgY29ubmVjdGlvbi5cIik7IHEucmVqZWN0KCk7fSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihlcHJ0ckRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVwcnRyRGF0YS5yZXN1bHRzLmJpbmRpbmdzLmxlbmd0aCA+IDApIHsgLy8gcGxhbmRJZCBleGlzdHMgaW4gZGJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGFnYWluc3QgdGhlIG5leHQgaW5jcmVtZW50IG9mIHBsYW50aWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1BsYW50SWQgPSAgICgkc2NvcGUubWVtYmVyU3RhdGVWYWx1ZSB8fCAkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5CYXNpY0RhdGEuTWVtYmVyU3RhdGUpICsgcGFkKCBwYXJzZUludCggbmV3UGxhbnRJZC5zbGljZSgyKSApICsgMSAsIDQgKSA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0TmV4dFBsYW50SWQgKCBuZXdQbGFudElkICkgLiB0aGVuICggZnVuY3Rpb24gKCB2YWx1ZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxLnJlc29sdmUgKCB2YWx1ZSApIDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKSA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7IC8vIHBsYW50aWQgbm90IHJlc2VydmVkLiByZXNvbHZlIHRoZSBwcm9taXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxLnJlc29sdmUgKCBuZXdQbGFudElkICkgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggcGxhbnRJZF9jYW5kaWRhdGUgPT0gbnVsbCApXG4gICAgICAgICAgICB7IC8vIHBsYW50SWRfY2FuZGlkYXRlID09IG51bGwgb24gdGhlIGZpcnN0IGNhbGwgb2YgdGhlIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgLy8gd2UgZ2V0IHRoZSBtYXggcGxhbnQgaWQgb2YgdGhlIGN1cnJlbnQgcGxhbnRzIG9uIHRoIGZvcm1cbiAgICAgICAgICAgICAgICAvLyBhbmQgdGhlIG1heCBwbGFudCBpZCBmcm9tIHNkc1xuICAgICAgICAgICAgICAgIC8vIHRoZW4gd2Ugd2lsbCBjaGVjayBmb3IgaWQgY29sbGlzaW9ucyBhbmQgaW5jcmVtZW50IGJ5IG9uZSB0aGUgaWQgYW5kIHJlY2hlY2ssIHVudGlsIGEgJ2ZyZWUnIHBsYW50IGlkIGlzIGZvdW5kXG5cbiAgICAgICAgICAgICAgICB2YXIgb3JkZXJCeSA9ICRmaWx0ZXIoJ29yZGVyQnknKTtcbiAgICAgICAgICAgICAgICB2YXIgb3JkZXJlZEl0ZW1zID0gb3JkZXJCeSggJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuTGlzdE9mUGxhbnRzLlBsYW50LCBcIlBsYW50SWRcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTA7IGkgPCBvcmRlcmVkSXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRW1wdHkob3JkZXJlZEl0ZW1zW2ldLlBsYW50SWQgKSAmJiBvcmRlcmVkSXRlbXNbaV0uUGxhbnRJZCAhPT0gXCJcIiApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybU5leHRQbGFudElkID0gcGFyc2VJbnQob3JkZXJlZEl0ZW1zW2ldLlBsYW50SWQuc3Vic3RyaW5nKG9yZGVyZWRJdGVtc1tpXS5QbGFudElkLmxlbmd0aCAtIDQgKSkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAvLyAtLS0tIHF1ZXJ5IHRoZSBzZHMgZm9yIHRoZSBtYXggaWRcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gXCJodHRwOi8vc2VtYW50aWMuZWVhLmV1cm9wYS5ldS9zcGFycWw/Zm9ybWF0PWFwcGxpY2F0aW9uL2pzb24mcXVlcnk9XCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3BhcnFsID1cbiAgICAgICAgICAgICAgICAgICAgXCIgUFJFRklYIHJkZnM6IDxodHRwOi8vd3d3LnczLm9yZy8yMDAwLzAxL3JkZi1zY2hlbWEjPlwiICtcbiAgICAgICAgICAgICAgICAgICAgXCIgUFJFRklYIGxjcFR5cGU6IDxodHRwOi8vc2VtYW50aWMuZWVhLmV1cm9wYS5ldS9wcm9qZWN0L2xjcF9kYXRhL3BsYW50X0lEcy5jc3YvPlwiICtcbiAgICAgICAgICAgICAgICAgICAgXCIgUFJFRklYIGxjcDogPGh0dHA6Ly9zZW1hbnRpYy5lZWEuZXVyb3BhLmV1L3Byb2plY3QvbGNwX2RhdGEvcGxhbnRfSURzLmNzdiM+IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCIgU0VMRUNUICpcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiIFdIRVJFIHtcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiIFtdIGEgbGNwVHlwZTpsY3BQbGFudElkcyA7XCIgK1xuICAgICAgICAgICAgICAgICAgICBcIiBsY3A6VW5pcXVlX1BsYW50X0lEID9QbGFudElkLlwiICtcbiAgICAgICAgICAgICAgICAgICAgXCIgRklMVEVSICggcmVnZXgoP1BsYW50SWQsJ1wiICsgICgkc2NvcGUubWVtYmVyU3RhdGVWYWx1ZSB8fCAkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5CYXNpY0RhdGEuTWVtYmVyU3RhdGUpICtcIicpIClcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiIH0gIE9SREVSIEJZIERFU0MoP1BsYW50SWQpIExJTUlUIDEgXCIgO1xuXG4gICAgICAgICAgICAgICAgdXJsID0gYmFzZVVyaSArICcvcmVzdFByb3h5P3VyaT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHVybCArIGVuY29kZVVSSUNvbXBvbmVudChzcGFycWwpKTtcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQodXJsLCB7dHJhY2tlciA6ICRyb290U2NvcGUubG9hZGluZ1RyYWNrZXJ9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbigpe2FsZXJ0KFwiRmFpbGVkIHRvIHJlYWQgZGF0YSBmcm9tIHJlbW90ZSBkYXRhYnNlLiBQbGVhc2UgY2hlY2sgeW91ciBjb25uZWN0aW9uXCIpOyBxLnJlamVjdCgpO30pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZXBydHJEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXh0SWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZXBydHJEYXRhLnJlc3VsdHMuYmluZGluZ3MubGVuZ3RoID4gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dElkID0gcGFyc2VJbnQoIGVwcnRyRGF0YS5yZXN1bHRzLmJpbmRpbmdzWzBdLlBsYW50SWQudmFsdWUuc2xpY2UoMikgKSArIDEgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGZvcm1OZXh0UGxhbnRJZCA+IG5leHRJZCApIG5leHRJZCA9IGZvcm1OZXh0UGxhbnRJZCA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIG5leHRJZCA9IGZvcm1OZXh0UGxhbnRJZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGxhbnRJZCA9ICAgKCRzY29wZS5tZW1iZXJTdGF0ZVZhbHVlIHx8ICRzY29wZS5pbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkJhc2ljRGF0YS5NZW1iZXJTdGF0ZSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZCggIG5leHRJZCAsIDQgKSA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja1NEUyAoIG5ld1BsYW50SWQgKSA7XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hlY2tTRFMgKCBwbGFudElkX2NhbmRpZGF0ZSApIDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHEucHJvbWlzZSA7XG5cbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS5nZXRNYXhQbGFudElkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgb3JkZXJCeSA9ICRmaWx0ZXIoJ29yZGVyQnknKTtcbiAgICAgICAgICAgIHZhciBvcmRlcmVkSXRlbXMgPSBvcmRlckJ5KCAkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5MaXN0T2ZQbGFudHMuUGxhbnQsIFwiUGxhbnRJZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIHZhciBuZXh0UGxhbnRJZCA9IDE7XG4gICAgICAgICAgICB2YXIgbmV3UGxhbnRJZCA9IG51bGw7XG4gICAgICAgICAgICB2YXIgZXhpc3RzID0gbnVsbDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpIDwgb3JkZXJlZEl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0VtcHR5KG9yZGVyZWRJdGVtc1tpXS5QbGFudElkICkgJiYgb3JkZXJlZEl0ZW1zW2ldLlBsYW50SWQgIT09IFwiXCIgKSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRQbGFudElkID0gcGFyc2VJbnQob3JkZXJlZEl0ZW1zW2ldLlBsYW50SWQuc3Vic3RyaW5nKG9yZGVyZWRJdGVtc1tpXS5QbGFudElkLmxlbmd0aCAtIDQgKSkgKyAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmb3JtYXQgdGhlIGlkIDogWFhOTk5OLCB3aGVyZSBYWCBpcyB0aGUgbWVtYmVyc3RhdGUgY29kZSBhbmQgTk5OTiBpcyBhIHVuaXF1ZSBpbnRlZ2VyXG4gICAgICAgICAgICBmdW5jdGlvbiBwYWQobnVtLCBzaXplKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBudW0rXCJcIjtcbiAgICAgICAgICAgICAgICB3aGlsZSAocy5sZW5ndGggPCBzaXplKSBzID0gXCIwXCIgKyBzO1xuICAgICAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdQbGFudElkID0gICgkc2NvcGUubWVtYmVyU3RhdGVWYWx1ZSB8fCAkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5CYXNpY0RhdGEuTWVtYmVyU3RhdGUpICsgcGFkKCBuZXh0UGxhbnRJZCwgNCk7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXdQbGFudElkO1xuICAgICAgICB9XG5cbiAgICAgICAgJHJvb3RTY29wZS5nZXRJbnN0YW5jZUJ5UGF0aCA9IGZ1bmN0aW9uKHJvb3QsIGlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cocm9vdCk7XG4gICAgICAgICAgICBpZiAoISRzY29wZS5pbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdG9rZW5zID0gcm9vdC5zcGxpdChcIi5cIik7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHRva2Vucyk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gJHNjb3BlO1xuXG4gICAgICAgICAgICB3aGlsZSh0b2tlbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0W3Rva2Vucy5zaGlmdCgpXTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRva2VucyA9IGlkZW50aWZpZXIuc3BsaXQoXCIuXCIpO1xuXG4gICAgICAgICAgICB3aGlsZSh0b2tlbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0W3Rva2Vucy5zaGlmdCgpXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICAkcm9vdFNjb3BlLmdldFBsYW50QnlQYXRoID0gZnVuY3Rpb24ocGxhbnQsIGlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cocm9vdCk7XG4gICAgICAgICAgICBpZiAoISRzY29wZS5pbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0b2tlbnMpO1xuICAgICAgICAgICAgaWYocGxhbnQgIT0gbnVsbCl7XG4gICAgICAgICAgICAgcmVzdWx0ID0gcGxhbnQ7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgdmFyIHRva2VucyA9IGlkZW50aWZpZXIuc3BsaXQoXCIuXCIpO1xuXG4gICAgICAgICAgICB3aGlsZSh0b2tlbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0W3Rva2Vucy5zaGlmdCgpXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzYXZlIGluc3RhbmNlIGRhdGEuXG4gICAgICAgICRzY29wZS5zYXZlSW5zdGFuY2UgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAvLyRzY29wZS5zdWJtaXR0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIHBhc3NlZFRoZVFhcyA9ICRzY29wZS5ydW5RQXRlc3RzKCk7XG4gICAgICAgICAgICB2YXIgZm9ybUNvbXBsZXRlID0gJHNjb3BlLmlzRm9ybUNvbXBsZXRlKCk7XG5cblx0XHRcdGRhdGFSZXBvc2l0b3J5LnNhdmVJbnN0YW5jZSgkc2NvcGUuaW5zdGFuY2UpLmVycm9yKGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAkbm90aWZpY2F0aW9uLmVycm9yKFwiU2F2ZVwiLCBcIkRhdGEgd2FzIG5vdCBzYXZlZCAhXCIpO30pXG5cbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICBpZiAoIHJlc3BvbnNlLmNvZGUgPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgICBhbGVydChcIlRoZXJlIHdhcyBhbiBlcnJvciBkdXJpbmcgdGhlIHNhdmUgb3BlcmF0aW9uLiBEYXRhIGlzIG5vdCBzYXZlZC5cIilcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFwcEZvcm0uJGludmFsaWQgfHwgKCAhZm9ybUNvbXBsZXRlKSApIHtcbiAgICAgICAgICAgICAgICAgICAgJG5vdGlmaWNhdGlvbi5pbmZvKFwiU2F2ZVwiLCBcIkRhdGEgd2FzIHNhdmVkLCBidXQgdGhlIHF1ZXN0aW9ubmFpcmUgaXMgaW5jb21wbGV0ZS5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFwYXNzZWRUaGVRYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgJG5vdGlmaWNhdGlvbi5pbmZvKFwiU2F2ZVwiLCBcIkRhdGEgd2FzIHNhdmVkLCBidXQgdGhlIHF1ZXN0aW9ubmFpcmUgZGlkIG5vdCBwYXNzIHNvbWUgUUFzLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRub3RpZmljYXRpb24uc3VjY2VzcyhcIlNhdmVcIiwgXCJEYXRhIGlzIHNhdmVkIHN1Y2Nlc3NmdWxseS5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFwcEZvcm0uJHNldFByaXN0aW5lKHRydWUpO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9O1xuXG4gICAgICAgICAkc2NvcGUuaGFzQXJ0aWNsZTMxRGVyb2dhdGlvblZhbHVlID0gZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgICAgICAgLy8gY2hlY2sgYWdhaW5zdCB0aGlzIHZhbHVlOiBodHRwOi8vZGQuZWlvbmV0LmV1cm9wYS5ldS92b2NhYnVsYXJ5Y29uY2VwdC9ldXJlZ2lzdHJ5b25pbmR1c3RyaWFsc2l0ZXMvRGVyb2dhdGlvblZhbHVlL0FydGljbGUzMS9cbiAgICAgICAgICAgICBpZihpdGVtLlBsYW50RGV0YWlscyE9bnVsbCAmJiBpdGVtLlBsYW50RGV0YWlscy5EZXJvZ2F0aW9uIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgIGlmKGl0ZW0uUGxhbnREZXRhaWxzLkRlcm9nYXRpb24uaW5kZXhPZihcIkFydGljbGUzMVwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICB9XG5cbiAgICAgICAgICRzY29wZS5oYXNBcnRpY2xlMzVEZXJvZ2F0aW9uVmFsdWUgPSBmdW5jdGlvbihpdGVtKXtcbiAgICAgICAgICAgICAvLyBjaGVjayBhZ2FpbnN0IHRoaXMgdmFsdWU6IGh0dHA6Ly9kZC5laW9uZXQuZXVyb3BhLmV1L3ZvY2FidWxhcnljb25jZXB0L2V1cmVnaXN0cnlvbmluZHVzdHJpYWxzaXRlcy9EZXJvZ2F0aW9uVmFsdWUvQXJ0aWNsZTM1L1xuICAgICAgICAgICAgIGlmKGl0ZW0uUGxhbnREZXRhaWxzIT1udWxsICYmIGl0ZW0uUGxhbnREZXRhaWxzLkRlcm9nYXRpb24hPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgaWYoaXRlbS5QbGFudERldGFpbHMuRGVyb2dhdGlvbi5pbmRleE9mKFwiQXJ0aWNsZTM1XCIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgIH1cblxuXG4gICAgICAgICAkc2NvcGUuYWRkRGVzdWxwaHVyaXphdGlvblZhbHVlc0ZvckVhY2hNb250aD1mdW5jdGlvbihpLHBsYW50KXtcbiAgICAgICAgICAgICAgICAgcGxhbnQuRGVzdWxwaHVyaXNhdGlvbi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgXCJNb250aFZhbHVlXCI6JHNjb3BlLmNvZGVMaXN0Lk1vbnRobHlEZXN1bHBodXJpc2F0aW9uW2ldLk1vbnRoVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIFwiRGVzdWxwaHVyaXNhdGlvblJhdGVcIjogJHNjb3BlLmNvZGVMaXN0Lk1vbnRobHlEZXN1bHBodXJpc2F0aW9uW2ldLkRlc3VscGh1cmlzYXRpb25SYXRlLFxuICAgICAgICAgICAgICAgICAgICBcIlN1bHBodXJDb250ZW50XCI6ICRzY29wZS5jb2RlTGlzdC5Nb250aGx5RGVzdWxwaHVyaXNhdGlvbltpXS5TdWxwaHVyQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgXCJUZWNobmljYWxKdXN0aWZpY2F0aW9uXCI6ICRzY29wZS5jb2RlTGlzdC5Nb250aGx5RGVzdWxwaHVyaXNhdGlvbltpXS5UZWNobmljYWxKdXN0aWZpY2F0aW9uLFxuICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgfVxuICAgICAgICAkc2NvcGUuaXNGb3JtQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyByZXR1cm5zIHRydWUgaWYgdGhlIHJlcXVpcmVkIGZpZWxkcyBmb3IgYWxsIHBsYW50IGFyZSBmaWxsZWQ7IGZhbHNlIGlmIG5vdCB+XG5cbiAgICAgICAgICAgIHZhciByZXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIHBsYW50cyA9ICRzY29wZS5pbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkxpc3RPZlBsYW50cy5QbGFudDtcbiAgICAgICAgICAgIHZhciBwbGFudCA9IG51bGw7XG4gICAgICAgICAgICB2YXIgaiA9IG51bGw7XG5cbiAgICAgICAgICAgIGZvciAoIGk9MCA7IGkgPCBwbGFudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwbGFudCA9IHBsYW50c1tpXTtcbiAgICAgICAgICAgICAgICAvLyBsaXN0IG9mIHBsYW50c1xuICAgICAgICAgICAgICAgIGlmICggaXNFbXB0eSAocGxhbnQuUGxhbnRJZCkgfHwgaXNFbXB0eSggcGxhbnQuR2VvZ3JhcGhpY2FsQ29vcmRpbmF0ZS5MYXRpdHVkZSkgfHwgaXNFbXB0eSAoIHBsYW50Lkdlb2dyYXBoaWNhbENvb3JkaW5hdGUuTG9uZ2l0dWRlKSAgIClcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBwbGFudCBkZXRhaWxzXG4gICAgICAgICAgICAgICAgaWYgKCBpc0VtcHR5ICggcGxhbnQuUGxhbnREZXRhaWxzLk1XdGgpIClcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gZmFsc2U7XG5cbiAgICBcblxuICAgICAgICAgICAgICAgIGlmIChyZXMgPT09IGZhbHNlKSBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlcztcblxuXG4gICAgICAgIH1cblxuXG4gICAgICAgICRzY29wZS5ydW5RQXRlc3RzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAvLyBjb25mb3JtIHRoZSBpbnN0YW5jZSBpZiBuZWVkZWRcblxuICAgICAgICAgICAgdmFyIHJlcyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgcGxhbnRzID0gJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuTGlzdE9mUGxhbnRzLlBsYW50O1xuXG4gICAgICAgICAgICBpZiAocGxhbnRzLmxlbmd0aCAhPSAkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5CYXNpY0RhdGEuTnVtYmVyT2ZQbGFudHMpXG4gICAgICAgICAgICAgICAgcmVzID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHZhciBzZWN0b3JzID0ge307XG4gICAgICAgICAgICB2YXIgc3RhdHVzICA9IHt9O1xuXG4gICAvLyAgICAgICAgIGZvciAoaSBpbiAkc2NvcGUuY29kZUxpc3QuTENQQ29kZWxpc3RzLnNlY3RvcnMuY29uY2VwdHMpIHsgIHNlY3RvcnNbICRzY29wZS5jb2RlTGlzdC5MQ1BDb2RlbGlzdHMuc2VjdG9ycy5jb25jZXB0c1sgaSBdIFsnQGlkJ10gXSA9IDEgOyB9XG4gICAgICAgICAgICAvLyBzZWN0b3JzIGlzIGEgZGljdGlvbmFyeSBvZiB2YWxpZCBvdGhlciBzZWN0b3IgdmFsdWVzXG5cbiAgICAgICAgLy8gICAgZm9yIChpIGluICRzY29wZS5jb2RlTGlzdC5MQ1BDb2RlbGlzdHMuc3RhdHVzLmNvbmNlcHRzKSB7ICBzdGF0dXNbICRzY29wZS5jb2RlTGlzdC5MQ1BDb2RlbGlzdHMuc3RhdHVzLmNvbmNlcHRzWyBpIF0gWydAaWQnXSBdID0gMSA7IH1cblxuICAgICAgICAgICAgdmFyIG5hbWVzID0ge307XG4gICAgICAgICAgICB2YXIgZHVibGljYXRlcyA9IHt9O1xuICAgICAgICAgICAgdmFyIHJlZkRheSA9IG5ldyBEYXRlKFwiMjAwMy0xMS0yN1wiKTtcblxuICAgICAgICAgICAgZm9yICggaT0wIDsgaSA8IHBsYW50cy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgLy8gTENQIDEuMVxuICAgICAgICAgICAgICAgIC8vIG5vdCByZWZpbmVyeVxuXG4gICAgICAgICAgICAgICAgaWYgKCAhcGxhbnRzW2ldLlBsYW50RGV0YWlscykgY29udGludWU7IC8vIHNvbWUgdGltZXMgYSBudWxsIHBsYW50IHdhcyBwcmVzZW50IGF0IHRoZSBlbmQgb2YgdGhlIGFycmF5XG5cbiAgICAgICAgICAgICAgICAvLyBjb29yZGluYXRlc1xuICAgICAgICAgICAgICAgIGlmICggcGxhbnRzW2ldLkdlb2dyYXBoaWNhbENvb3JkaW5hdGUuTG9uZ2l0dWRlID4gMTgwIHx8IHBsYW50c1tpXS5HZW9ncmFwaGljYWxDb29yZGluYXRlLkxvbmdpdHVkZSA8IC0xODApXG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBwbGFudHNbaV0uR2VvZ3JhcGhpY2FsQ29vcmRpbmF0ZS5MYXRpdHVkZSA+IDkwIHx8IHBsYW50c1tpXS5HZW9ncmFwaGljYWxDb29yZGluYXRlLkxhdGl0dWRlIDwgLTkwKVxuICAgICAgICAgICAgICAgICAgICByZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAvLyAgICAgaWYgKCAhKCBwbGFudHNbaV0uUGxhbnREZXRhaWxzLlJlZmluZXJpZXMpICYmICggISggcGxhbnRzW2ldLlBsYW50RGV0YWlscy5PdGhlclNlY3RvciAgKSAgfHwgISAoc2VjdG9yc1twbGFudHNbaV0uUGxhbnREZXRhaWxzLk90aGVyU2VjdG9yIF0gKSkgKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gXl4gY2hlY2tzIHRoYXQgaWYgbm90IFJlZmluZXJpZXMsIHRoYXQgT3RoZXJTZWN0b3IgaXMgZmlsbGVkIHdpdGggb25lIG9mIHRoZSBwZXJtaXR0ZWQgdmFsdWVzKGZldGNoZWQgZnJvbSBERClcbiAgICAgICAgICAgIC8vICAgICAgICByZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAvLyAgIH1cblxuICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgLy8gTENQIDIuMSBVbmVxdWl2b2NhbCBuYW1pbmcgb2YgcGxhbnRzXG4gICAgICAgICAgICAgICAgaWYgKCBuYW1lc1sgcGxhbnRzW2ldLlBsYW50TmFtZSBdICE9IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZHVibGljYXRlIGZvdW5kXG4gICAgICAgICAgICAgICAgICAgIGR1YmxpY2F0ZXNbaV0gPSAxO1xuICAgICAgICAgICAgICAgICAgICBkdWJsaWNhdGVzWyBuYW1lc1sgcGxhbnRzIFtpXS5QbGFudE5hbWUgXSBdID0gMTtcbiAgICAgICAgICAgICAgICAgICAgLy9uYW1lc1skc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5MaXN0T2ZQbGFudHMuUGxhbnRbaV0uUGxhbnROYW1lIF0ucHVzaChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBuYW1lc1sgcGxhbnRzIFtpXS5QbGFudE5hbWVdID0gaTtcblxuICAgICAgICAgICAgICAgIC8vIExDUCAzLjJcblxuICAgICAgICAgICAgICAgIGlmICggcGxhbnRzW2ldLlBsYW50RGV0YWlscy5NV3RoIDwgNTAgKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCBwbGFudHNbaV0uUGxhbnREZXRhaWxzLk1XdGggPiAxMDAwMCl7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdhcm5pbmdcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coaSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTENQIDMuNFxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBMQ1AgMy41XG4gICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gTENQIDMuNlxuICAgICAgICAgICAgICAgIC8vIHZhbGlkIGRhdGVzKGlmIGRhdGUgc3VibWl0dGVkKVxuICAgICAgICAgICAgICAgIGlmICggISRzY29wZS52YWxpZERhdGVGb3JtYXQocGxhbnRzW2ldLlBsYW50RGV0YWlscy5EYXRlT2ZTdGFydE9mT3BlcmF0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICBcblxuICAgICAgICAgICAgfS8vIGVuZCBmb3JcbiAgICAgICAgICAgIGlmICggSlNPTi5zdHJpbmdpZnkoZHVibGljYXRlcykgIT09IFwie31cIikge1xuICAgICAgICAgICAgICAgIC8vIGR1cGxpY2F0ZXMgaG9sZHMgdGhlIHBsYW50cyB3aXRoIHNhbWUgbmFtZXNcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkdWJsaWNhdGVzKTtcbiAgICAgICAgICAgICAgICByZXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggcmVzID09PSB0cnVlICkgICRzY29wZS5jb25mb3JtVGhlSW5zdGFuY2UoKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuY29uZm9ybVRoZUluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICB2YXIgcGxhbnRzID0gJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuTGlzdE9mUGxhbnRzLlBsYW50O1xuICAgICAgICAgICAgZm9yIChqIGluIHBsYW50cyl7XG5cbiAgICAgICAgICAgICAgICBwbGFudCA9IHBsYW50c1tqXTtcblxuICAgICAgICAgICAgICAgIGRlbGV0ZSBwbGFudC5EZWxldGU7XG5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHBsYW50LnBsYW50RGV0YWlscyE9bnVsbCAmJiBwbGFudC5QbGFudERldGFpbHMuUmVmaW5lcmllcyAhPT0gdHJ1ZSApe1xuICAgICAgICAgICAgICAgICAgICBwbGFudC5QbGFudERldGFpbHMuUmVmaW5lcmllcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGxhbnQucGxhbnREZXRhaWxzIT1udWxsICYmIHBsYW50LlBsYW50RGV0YWlscy5SZWZpbmVyaWVzID09PSB0cnVlICl7XG4gICAgICAgICAgICAgICAgICAgIC8vcGxhbnQuUGxhbnREZXRhaWxzLk90aGVyU2VjdG9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuaWZGb3JtSXNWYWxpZFNhdmVJbnN0YW5jZSA9IGZ1bmN0aW9uKGZvcm0pe1xuICAgICAgICAgICAgaWYgKCFmb3JtLiRpbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVJbnN0YW5jZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUudmFsaWRhdGlvbk9uT2ZmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUuc3VibWl0dGVkID0gISRzY29wZS5zdWJtaXR0ZWQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc2F2ZSBpbnN0YW5jZSBkYXRhLlxuICAgICAgICAkc2NvcGUuY2xvc2UgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYgKGJhc2VVcmkgPT0gJycpe2Jhc2VVcmkgPSBcIi9cIn07XG4gICAgICAgICAgICB2YXIgd2luZG93TG9jYXRpb24gPSAoZW52ZWxvcGUgJiYgZW52ZWxvcGUubGVuZ3RoID4gMCkgPyBlbnZlbG9wZSA6IGJhc2VVcmk7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLmFwcEZvcm0uJGRpcnR5KXtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlybSgnWW91IGhhdmUgbWFkZSBjaGFuZ2VzIGluIHRoZSBxdWVzdGlvbm5haXJlISBcXG5cXG4gRG8geW91IHdhbnQgdG8gbGVhdmUgd2l0aG91dCBzYXZpbmcgdGhlIGRhdGE/Jykpe1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSB3aW5kb3dMb2NhdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLy8vY29uc29sZS5sb2coXCJGYWlsZWQgdG8gY29uZmlybVwiKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSB3aW5kb3dMb2NhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gY29udmVydCBYTUwgdG8gSFRNTCBpbiBuZXcgd2luZG93LlxuICAgICAgICAkc2NvcGUucHJpbnRQcmV2aWV3ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGRhdGFSZXBvc2l0b3J5LnNhdmVJbnN0YW5jZSgkc2NvcGUuaW5zdGFuY2UpLnN1Y2Nlc3MoZnVuY3Rpb24oKXtcblx0XHRcdFx0dmFyIHdpbiA9IHdpbmRvdy5vcGVuKCRzY29wZS5jb252ZXJzaW9uTGluaywgJ19ibGFuaycpO1xuXHRcdFx0XHR3aW4uZm9jdXM7XG5cdFx0XHR9KTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmNsb3NlQnVsa0VkaXRMaXN0T2ZQbGFudHMgPSBmdW5jdGlvbihmb3JtKXtcbiAgICAgICAgICAgIC8vaWYgKGZvcm0gJiYgZm9ybSA9PSAnTGlzdE9mUGxhbnRzJyl7XG4gICAgICAgICAgICAgICAgLy9yZW1vdmUgZW1wdHkgcm93c1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9ICRzY29wZS5pbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkxpc3RPZlBsYW50cy5QbGFudC5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHBsYW50ID0gJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuTGlzdE9mUGxhbnRzLlBsYW50W2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggcGxhbnQuUGxhbnRMb2NhdGlvbiE9bnVsbCAmJiBpc0VtcHR5KHBsYW50LlBsYW50TmFtZSkgICYmIGlzRW1wdHkocGxhbnQuRVBSVFJOYXRpb25hbElkKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNFbXB0eShwbGFudC5QbGFudExvY2F0aW9uLkFkZHJlc3MxKSAmJiBpc0VtcHR5KHBsYW50LlBsYW50TG9jYXRpb24uQWRkcmVzczIpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBpc0VtcHR5KHBsYW50LlBsYW50TG9jYXRpb24uQ2l0eSkgJiYgaXNFbXB0eShwbGFudC5QbGFudExvY2F0aW9uLlJlZ2lvbikgJiYgaXNFbXB0eShwbGFudC5QbGFudExvY2F0aW9uLlBvc3RhbENvZGUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBpc0VtcHR5KHBsYW50Lkdlb2dyYXBoaWNhbENvb3JkaW5hdGUuTG9uZ2l0dWRlKSAmJiBpc0VtcHR5KHBsYW50Lkdlb2dyYXBoaWNhbENvb3JkaW5hdGUuTGF0aXR1ZGUpICYmIGlzRW1wdHkocGxhbnQuRmFjaWxpdHlOYW1lKSlcblxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5MaXN0T2ZQbGFudHMuUGxhbnQuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gZmlsbCBpbiBwbGFudCBJRHNcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIGlzRW1wdHkocGxhbnQuUGxhbnRJZCkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9ICRzY29wZS5nZXROZXh0UGxhbnRJZCAoKSA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UGxhbnQgPSBwbGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzaW5nICRxIHByb21pc2UgQVBJLCB0byBhc2sgdGhlIHNlcnZlciBmaXJzdCBmb3IgaWQgY29sbGlzaW9ucy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2UudGhlbiAoIGZ1bmN0aW9uICggcGxhbnRpZCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdQbGFudC5QbGFudElkID0gcGxhbnRpZCA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAkc2NvcGUuY29uZm9ybVRoZUluc3RhbmNlKCk7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgJHJvb3RTY29wZS5idWxrRWRpdExpc3RPZlBsYW50cyA9IGZhbHNlO1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd1cGRhdGVGaWx0ZXInKTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLm9wZW5CdWxrRWRpdExpc3RPZlBsYW50cyA9IGZ1bmN0aW9uKGZvcm0pIHtcbiAgICAgICAgICAgIGlmIChmb3JtICYmIGZvcm0gPT09ICdMaXN0T2ZQbGFudHMnKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZEl0ZW0oJ0xDUFF1ZXN0aW9ubmFpcmUuTGlzdE9mUGxhbnRzLlBsYW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuTGlzdE9mUGxhbnRzLlBsYW50Lmxlbmd0aCA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgJG5vdGlmaWNhdGlvbi5pbmZvKFwiRWRpdFwiLCBcIkFkZCBzb21lIHBsYW50cyBmcm9tIExpc3Qgb2YgUGxhbnRzIGZpcnN0LlwiKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgJHJvb3RTY29wZS5idWxrRWRpdExpc3RPZlBsYW50cyA9IHRydWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLndpbmRvd1NlYXJjaCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG5cbiAgICAgICAgJHNjb3BlLmdldEhlbHBJbmZvID0gZnVuY3Rpb24oZGl2SWQpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coZGl2SWQpO1xuICAgICAgICAgICAgdmFyIGluZm9EaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkaXZJZCk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGluZm9EaXYpO1xuICAgICAgICAgICAgcmV0dXJuICRzY2UudHJ1c3RBc0h0bWwoaW5mb0Rpdi5pbm5lckhUTUwpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5jaGFuZ2VJbmZvVG9nZ2xlID0gZnVuY3Rpb24ob3ZlckluZm9Ub2dnbGUpIHtcbiAgICAgICAgICAgICRzY29wZS5zaG93SW5mbyA9IG92ZXJJbmZvVG9nZ2xlO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5waG9uZU51bWJlclBhdHRlcm4gPSAvXlsgMC05XFwoXFwpXFwrXFwtXXs3LDI1fSQvO1xuICAgICAgICAkc2NvcGUucG9zaXRpdmVJbnRlZ2VyUGF0dGVybiA9IC9eXFxkKyQvO1xuICAgICAgICAkc2NvcGUucG9zaXRpdmVEZWNpbWFsTnVtYmVyUGF0dGVybiA9IC9eXFxkKlxcLj9cXGQqJC87XG4gICAgICAgICRzY29wZS5iaW5hcnlOdW1iZXJQYXR0ZXJuPSAvXigwKFxcLlxcZCspP3wxKFxcLjArKT8pJC87XG4gICAgICAgICRzY29wZS5kZWNpbWFsTnVtYmVyUGF0dGVybiA9L15bKy1dPyhcXGQqXFwuP1xcZCopJC87XG4gICAgICAgICRzY29wZS5kYXRlRm9ybWF0ID0gL14oMTl8MjApXFxkXFxkKFstXSkoMFsxLTldfDFbMDEyXSlcXDIoMFsxLTldfFsxMl1bMC05XXwzWzAxXSkkLztcblxuICAgICAgICAkc2NvcGUud2Vic2l0ZUFkZHJlc3NQYXR0ZXJuID0gL14oaHR0cHM/OlxcL1xcLyk/KFtcXGRhLXpcXC4tXSspXFwuKFthLXpcXC5dezIsNn0pKFtcXC9cXHcgXFwuLV0qKSpcXC8/JC87XG4gICAgICAgICRzY29wZS5wZXJjZW50YWdlUGF0dGVybiA9IC9eMTAwJHxeWzAtOV17MSwyfSR8XlswLTldezEsMn1cXCxbMC05XXsxLDN9JC87XG4gICAgICAgICRzY29wZS5sb25naXR1ZGVOdW1iZXJQYXR0ZXJuID0gL15bLStdPygxODAoXFwuMCspP3woKDFbMC03XVxcZCl8KFsxLTldP1xcZCkpKFxcLlxcZCspPykkLztcblxuICAgICAgICAkc2NvcGUubGF0aXR1ZGVOdW1iZXJQYXR0ZXJuID0gL15bLStdPyhbMS04XT9cXGQoXFwuXFxkKyk/fDkwKFxcLjArKT8pJC87XG5cbiAgICAgICAgJHNjb3BlLmlzRml4ZWRRdWVzdGlvbiA9IGZ1bmN0aW9uKGRhdGFQYXRoKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW5zID0gZGF0YVBhdGguc3BsaXQoJy4nKTtcbiAgICAgICAgICAgIHZhciBsYXN0VG9rZW4gPSB0b2tlbnMucG9wKCk7XG4gICAgICAgICAgICAvLy8vY29uc29sZS5sb2cobGFzdFRva2VuKTtcbiAgICAgICAgICAgIC8vLy9jb25zb2xlLmxvZyhsYXN0VG9rZW4gPT0gJ0ZpeGVkUXVlc3Rpb24nKTtcbiAgICAgICAgICAgIHJldHVybiAobGFzdFRva2VuID09ICdGaXhlZFF1ZXN0aW9uJyk7XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuY2xlYXJTdWJGb3JtRGF0YSA9IGZ1bmN0aW9uKGRhdGFQYXRocywgaWRlbnRpZmllclBhdGgsIGNoYW5nZVZhbHVlVG8pIHtcblxuICAgICAgICAgICAgdmFyIGVsZW1lbnRDb3VudCA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFQYXRocy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBmb3JtRWxlbWVudEluc3RhbmNlID0gJHNjb3BlLmdldEluc3RhbmNlQnlQYXRoKCdpbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlJywgZGF0YVBhdGhzW2ldKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50Q291bnQgKz0gY291bnROb25FbXB0eVByb3BlcnRpZXMoZm9ybUVsZW1lbnRJbnN0YW5jZSwgJHNjb3BlLmlzRml4ZWRRdWVzdGlvbihkYXRhUGF0aHNbaV0pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTmVlZCB0byBnZXQgcGFyZW50IHBhdGggb2YgeWVzL25vIHF1ZXN0aW9uIG90aGVyd2lzZSBhc3NpZ25pbmcgbmV3IHZhbHVlXG4gICAgICAgICAgICAvLyB0byBwcm9wZXJ0eSBkb2VzIG5vdCB3b3JrLlxuICAgICAgICAgICAgdmFyIHRva2VucyA9IGlkZW50aWZpZXJQYXRoLnNwbGl0KCcuJyk7XG5cbiAgICAgICAgICAgIC8vIFBhcmVudCBwcm9wZXJ0eSBvZiBhY3R1YWwgeWVzL25vIHF1ZXN0aW9uXG4gICAgICAgICAgICB2YXIgc3ViRm9ybUluc3RhbmNlSWRlbnRpZmllciA9IHRva2Vucy5zaGlmdCgpO1xuXG4gICAgICAgICAgICAvLyBQYXJlbnQgaW5zdGFuY2Ugb2JqZWN0IHRoYXQgY29udGFpbnMgYWN0dWFsIHllcy9ubyBxdWVzdGlvbiBwcm9wZXJ0eVxuICAgICAgICAgICAgdmFyIHBhcmVudEluc3RhbmNlID0gJHNjb3BlLmdldEluc3RhbmNlQnlQYXRoKCdpbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlJywgc3ViRm9ybUluc3RhbmNlSWRlbnRpZmllcik7XG4gICAgICAgICAgICB2YXIgb2JqZWN0TmFtZSA9IHRva2Vucy5zaGlmdCgpO1xuXG4gICAgICAgICAgICB2YXIgbmVlZHNUb0NsZWFyRGF0YSA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChuZWVkc1RvQ2xlYXJEYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiBlbGVtZW50IGNvdW50IGlzIG1vcmUgdGhhbiAwIHRoZW4gd2UgaGF2ZSB0byBhc2sgY29uZmlybWF0aW9uIGZyb20gdXNlciB3aGV0aGVyIHRvIGRlbGV0ZSB0aGUgZGF0YS5cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvdW50ID4gMCAmJiAhY29uZmlybSgnV2hlbiBjaGFuZ2luZyBhbnN3ZXIgYWxsIGRhdGEgdW5kZXIgdGhpcyBzdWItZm9ybSB3aWxsIGJlIGxvc3Q/Jykpe1xuICAgICAgICAgICAgICAgICAgICAvLyB0b2tlLnNoaWZ0KCkgZXh0cmFjdHMgeWVzL25vIHF1ZXN0aW9uIG5hbWUuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFzc2luZyB5ZXMgdmFsdWUgdG8gcXVlc3Rpb25cbiAgICAgICAgICAgICAgICAgICAgcGFyZW50SW5zdGFuY2Vbb2JqZWN0TmFtZV0gPSAgY2hhbmdlVmFsdWVUbztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YVBhdGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybUVsZW1lbnRJbnN0YW5jZSA9ICRzY29wZS5nZXRJbnN0YW5jZUJ5UGF0aCgnaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZScsIGRhdGFQYXRoc1tpXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBmaWVsZHMgd2hlcmUgdGhlcmUgaXMgb25seSBvbmUgZmllbGQgYW5kIGl0IGNhbiBiZSBudWxsLiBKdXN0IGlnbm9yZSBpdC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZm9ybUVsZW1lbnRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlmLWVsc2UgaXMgdG8gZGlmZmVyZW50aWF0ZSBqdXN0IGEgc3RyaW5nIGZpZWxkIGZyb20gYXJyYXkgb3Igb2JqZWN0LlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1FbGVtZW50SW5zdGFuY2UgaW5zdGFuY2VvZiBBcnJheSB8fCAhZm9ybUVsZW1lbnRJbnN0YW5jZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhck9iamVjdChmb3JtRWxlbWVudEluc3RhbmNlLCAkc2NvcGUuaXNGaXhlZFF1ZXN0aW9uKGRhdGFQYXRoc1tpXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5zID0gZGF0YVBhdGhzW2ldLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iamVjdElkZW50aWZpZXIgPSB0b2tlbnMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50T2JqZWN0ID0gJHNjb3BlLmdldEluc3RhbmNlQnlQYXRoKCdpbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlJywgb2JqZWN0SWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50T2JqZWN0W3Rva2Vucy5zaGlmdCgpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIERvIG5vdGhpbmcuXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHJvb3RTY29wZS5UeXBlT2ZDb21idXN0aW9uUGxhbnRGdXJ0aGVyRGV0YWlscyA9IGZhbHNlO1xuXG4gICAgICAgICRzY29wZS5pc1R5cGVPZkNvbWJ1c3Rpb25QbGFudE90aGVyID0gZnVuY3Rpb24gKHBsYW50KSB7XG4gICAgICAgICAgICBpZiAocGxhbnQuUGxhbnREZXRhaWxzLlR5cGVPZkNvbWJ1c3Rpb25QbGFudCA9PT0gJ090aGVycycpIHtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLlR5cGVPZkNvbWJ1c3Rpb25QbGFudEZ1cnRoZXJEZXRhaWxzID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5UeXBlT2ZDb21idXN0aW9uUGxhbnRGdXJ0aGVyRGV0YWlscyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vVE9ETyBmb3JtYXQgZXJyb3IgbWVzc2FnZSB0byBoYW5kbGUgZGlmZmVyZW50IGxpbWl0cyBiZXR0ZXJcbiAgICAgICAgJHNjb3BlLmVycm9yTWVzc2FnZXMgPSB7XG4gICAgICAgICAgICBcInJlcXVpcmVkX2ZpZWxkXCIgOiBcIlRoaXMgaXMgYSByZXF1aXJlZCBmaWVsZFwiLFxuICAgICAgICAgICAgXCJ1bmlxdWVfYWJicmV2aWF0aW9uXCIgOiBcIlBsZWFzZSBwcm92aWRlIGEgdW5pcXVlIGFiYnJldmlhdGlvbiBcIixcbiAgICAgICAgICAgIFwidmFsaWRfdGVsZXBob25lXCIgOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIHRlbGVwaG9uZSBudW1iZXIgKGF0IGxlYXN0IDcgZGlnaXRzKSBcIixcbiAgICAgICAgICAgIFwidmFsaWRfZW1haWxcIiA6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgZW1haWwgYWRkcmVzcyBcIixcbiAgICAgICAgICAgIFwidmFsaWRfdXJsXCIgOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIFVSTCBcIixcbiAgICAgICAgICAgIFwieWVzX29yX25vXCIgOiBcIlBsZWFzZSBjaG9vc2UgeWVzIG9yIG5vIFwiLFxuICAgICAgICAgICAgXCJudW1iZXJfZ3JlYXRlcl90aGFuX3plcm9cIiA6IFwiUGxlYXNlIHByb3ZpZGUgYSBudW1iZXIgZ3JlYXRlciB0aGFuIDAgXCIsXG4gICAgICAgICAgICBcImRhdGFfZW50cnlfbXVzdF9iZV91bmlxdWVcIiA6IFwiRGF0YSBlbnRyeSBtdXN0IGJlIHVuaXF1ZSBJRCBjb2RlIFwiLFxuICAgICAgICAgICAgXCJtdXN0X2JlX2xlc3NfdGhhblwiIDogXCJQbGVhc2UgcHJvdmlkZSBhIG51bWJlciBsZXNzIHRoYW4gXCIsXG4gICAgICAgICAgICBcIm11c3RfYmVfZ3JlYXRlcl90aGFuXCIgOiBcIlBsZWFzZSBwcm92aWRlIGEgbnVtYmVyIGdyZWF0ZXIgb3IgZXF1YWwgdG8gXCIsXG4gICAgICAgICAgICBcIm11c3RfYmVfcGVyY2VudGFnZVwiIDogXCJQbGVhc2UgcHJvdmlkZSBhIHBlcmNlbnRhZ2UgYmV0d2VlbiAwIGFuZCAxMDAgXCIsXG4gICAgICAgICAgICBcIndob2xlX251bWJlcl9ncmVhdGVyX3RoYW5femVyb1wiIDogXCJQbGVhc2UgcHJvdmlkZSBhIHdob2xlIG51bWJlciBncmVhdGVyIHRoYW4gMCBcIixcbiAgICAgICAgICAgIFwidW5pcXVlX2lkZW50aWZpY2F0aW9uX2NvZGVcIiA6IFwiUGxlYXNlIGVudGVyIGEgdW5pcXVlIGlkZW50aWZpY2F0aW9uIGNvZGUgXCIsXG4gICAgICAgICAgICBcInZhbGlkX2xvbmdpdHVkZVwiIDogXCJQbGVhc2UgcHJvdmlkZSBhIG51bWJlciBiZXR3ZWVuIC0xODAgYW5kIDE4MFwiLFxuICAgICAgICAgICAgXCJ2YWxpZF9sYXRpdHVkZVwiIDogXCJQbGVhc2UgcHJvdmlkZSBhIG51bWJlciBiZXR3ZWVuIC05MCBhbmQgOTBcIixcbiAgICAgICAgICAgIFwicG9zaXRpdmVfZGVjaW1hbFwiIDogXCJQbGVhc2UgcHJvdmlkZSBhIHBvc2l0aXZlIGRlY2ltYWwgbnVtYmVyICBcIixcbiAgICAgICAgICAgIFwicG9zaXRpdmVfZGVjaW1hbDAxXCIgOiBcIlBsZWFzZSBwcm92aWRlIGEgcG9zaXRpdmUgZGVjaW1hbCBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXCIsXG4gICAgICAgICAgICBcInBvc2l0aXZlX2ludGVnZXJcIiA6IFwiUGxlYXNlIHByb3ZpZGUgYSBwb3NpdGl2ZSBpbnRlZ2VyIFwiLFxuICAgICAgICAgICAgXCJhcnRpY2xlX2Zvcm1hdFwiIDogXCJQbGVhc2UgdXNlIHRoZSBlZGl0IG1lbnUgdG8gY29ycmVjdCB0aGUgYXJ0aWNsZSBmb3JtYXRcIlxuXG4gICAgICAgIH07XG5cblxuICAgICAgICAkc2NvcGUuZ2V0RXJyb3JNZXNzYWdlID0gZnVuY3Rpb24oZXJyb3JDb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLmVycm9yTWVzc2FnZXNbZXJyb3JDb2RlXTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuc2hvd0Vycm9yID0gZnVuY3Rpb24obW9kZWxDb250cm9sbGVyLCBlcnJvckNvZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBtb2RlbENvbnRyb2xsZXIuJGVycm9yW2Vycm9yQ29kZV0gJiYgbW9kZWxDb250cm9sbGVyLiRpbnZhbGlkXG4gICAgICAgICAgICAgICAgICAgICYmICEoZXJyb3JDb2RlID09PSAncmVxdWlyZWQnICYmIG1vZGVsQ29udHJvbGxlci4kZXJyb3JbJ3BhdHRlcm4nXSAmJiBtb2RlbENvbnRyb2xsZXIuJGVycm9yWydwYXR0ZXJuJ10gPT10cnVlKTsvLyAmJiBtb2RlbENvbnRyb2xsZXIuJGRpcnR5O1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuc2hvd0Vycm9ySWZTdWJtaXR0ZWQgPSBmdW5jdGlvbihtb2RlbENvbnRyb2xsZXIsIGVycm9yQ29kZSwgc3VibWl0dGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VibWl0dGVkICYmICRzY29wZS5zaG93RXJyb3IobW9kZWxDb250cm9sbGVyLCBlcnJvckNvZGUpO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgJHNjb3BlLmlzR3JlYXRlclRoYW5aZXJvID0gZnVuY3Rpb24oaW5wdXRWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuICRzY29wZS5zdWJtaXR0ZWQgPT0gZmFsc2UgJiYgKCBOdW1iZXIoaW5wdXRWYWx1ZSkgPiAwKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuaXNQb3NpdGl2ZU51bWJlciA9IGZ1bmN0aW9uKGlucHV0VmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBib29sZWFuID0gdHJ1ZSA7XG5cbiAgICAgICAgICAgIGlmICggaXNFbXB0eSAoaW5wdXRWYWx1ZSkgKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmKCFpc0VtcHR5KGlucHV0VmFsdWUpICApe1xuICAgICAgICAgICAgICAgIGJvb2xlYW4gPSAkc2NvcGUucG9zaXRpdmVJbnRlZ2VyUGF0dGVybi50ZXN0KGlucHV0VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJvb2xlYW47XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmlzUG9zaXRpdmVEZWNpbWFsID0gZnVuY3Rpb24oaW5wdXRWYWx1ZSkge1xuXG4gICAgICAgICAgICAvLyByZXR1cm5zIGZhbHNlIGlmIGVtcHR5LCBvciBpZiBub3QgZGVjaW1hbChieSByZWdleCBjb21wYXJpc29uKVxuICAgICAgICAgICAgaWYgKCBpc0VtcHR5IChpbnB1dFZhbHVlKSApIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgcmV0dXJuICRzY29wZS5wb3NpdGl2ZURlY2ltYWxOdW1iZXJQYXR0ZXJuLnRlc3QoaW5wdXRWYWx1ZSk7XG5cbiAgICAgICAgfTtcbiAgICAgICAgXG5cbiAgICAgICAgJHNjb3BlLnZhbGlkRGF0ZUZvcm1hdCA9IGZ1bmN0aW9uKCBpbnB1dERhdGUpe1xuICAgICAgICAgICAgLy8gYWxsb3dzIGVtcHR5IHZhbHVlcyBmb3Igc2ltcGxpY2l0eSBzYWtlXG4gICAgICAgICAgICBpZiAoIGlzRW1wdHkoaW5wdXREYXRlKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLmRhdGVGb3JtYXQudGVzdCggaW5wdXREYXRlICk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS5pc0RlZ3JlZSA9IGZ1bmN0aW9uKGlucHV0VmFsdWUsIGRlZ3JlZXMsIHN1Ym1pdHRlZCkge1xuXG4gICAgICAgICAgICByZXR1cm4gKCRzY29wZS5zdWJtaXR0ZWQgPT0gdHJ1ZSAmJiAhaXNFbXB0eShpbnB1dFZhbHVlKSAmJiAhKE51bWJlcihkZWdyZWVzKSA+PSBOdW1iZXIoaW5wdXRWYWx1ZSkgJiYgTnVtYmVyKGlucHV0VmFsdWUpID49IC1OdW1iZXIoZGVncmVlcykpKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuaXNSZXF1aXJlZCA9IGZ1bmN0aW9uKGlucHV0VmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiAgJHNjb3BlLnN1Ym1pdHRlZCA9PSB0cnVlICYmIGlzRW1wdHkoaW5wdXRWYWx1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmlzTW9kYWxSZXF1aXJlZCA9IGZ1bmN0aW9uKGlucHV0VmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBib29sZWFuID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmKGlzRW1wdHkoaW5wdXRWYWx1ZSkpe1xuICAgICAgICAgICAgICAgIGJvb2xlYW49ICB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoaW5wdXRWYWx1ZSA9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgIGJvb2xlYW49ICB0cnVlO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGlmKGlucHV0VmFsdWUubGVuZ3RoID09IDApe1xuICAgICAgICAgICAgICAgICAgICBib29sZWFuPSAgdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgLyogaWYoaW5wdXRWYWx1ZSA9PSBudWxsKXtcbiAgICAgICAgICAgICAgICBib29sZWFuPSAgdHJ1ZTtcbiAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgcmV0dXJuICAgYm9vbGVhbjtcblxuXG4gICAgICAgIH07XG5cblxuICAgICAgICAkc2NvcGUuY2hlY2tib3hDbGVhcklucHV0cyA9IGZ1bmN0aW9uKHBsYW50LCBjaGVja2JveFBhdGgsIGRlcGVuZGluZ0lucHV0cykge1xuICAgICAgICAgICAgdmFyIHRva2VuczEgPSBjaGVja2JveFBhdGguc3BsaXQoJy4nKTtcbiAgICAgICAgICAgIHZhciBvYmplY3RJZGVudGlmaWVyMSA9IHRva2VuczEuc2hpZnQoKTtcbiAgICAgICAgICAgIHZhciBjaGVja2JveE9iamVjdCA9ICRzY29wZS5nZXRQbGFudEJ5UGF0aChwbGFudCwgb2JqZWN0SWRlbnRpZmllcjEpO1xuICAgICAgICAgICAgdmFyIHByb3BlcnR5MSA9IHRva2VuczFbdG9rZW5zMS5sZW5ndGgtMV07XG4gICAgICAgICAgICB2YXIgY2hlY2tib3hWYWx1ZSA9IGNoZWNrYm94T2JqZWN0W3Byb3BlcnR5MV07XG5cbiAgICAgICAgICAgIGlmKGNoZWNrYm94VmFsdWUgPT0gZmFsc2Upe1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dFBhdGhBcnJheSA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBpc05vdEVtcHR5PSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgcGF0aHMgPSBkZXBlbmRpbmdJbnB1dHMuc3BsaXQoJzonKTtcblxuICAgICAgICAgICAgICAgIC8vQWRkaW5nIGNoZWNrYm94IGRlcGVuZGluZyBpbnB1dHMgdG8gYXJyYXlcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbnMyID0gcGF0aHNbaV0uc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9iamVjdElkZW50aWZpZXIyID0gdG9rZW5zMi5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50T2JqZWN0ID0gJHNjb3BlLmdldFBsYW50QnlQYXRoKHBsYW50LCBvYmplY3RJZGVudGlmaWVyMik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IHRva2VuczJbdG9rZW5zMi5sZW5ndGgtMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmplY3QgPSBwYXJlbnRPYmplY3RbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUucG9zaXRpdmVEZWNpbWFsTnVtYmVyUGF0dGVybi50ZXN0KG9iamVjdCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy9FcnJvciBoYW5kbGluZzogIFN0cmluZyBpbiBudW1lcmljIGZpZWxkXG4gICAgICAgICAgICAgICAgICAgIGlmKG9iamVjdCA9PSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc05vdEVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYob2JqZWN0ID09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNOb3RFbXB0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW5wdXRQYXRoQXJyYXkucHVzaChvYmplY3QpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9JcyBpbnB1dHMgZW1wdHlcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGlucHV0UGF0aEFycmF5Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGlucHV0UGF0aEFycmF5W2pdLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNOb3RFbXB0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIGlmKGNoZWNrYm94VmFsdWUgPT0gZmFsc2UgJiYgaXNOb3RFbXB0eSl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNvbmZpcm0oXCJEbyB5b3Ugd2lzaCB0byBjbGVhciBkYXRhIGZyb20gZGVwZW5kaW5nIGlucHV0KHMpP1wiKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHBhdGhzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VuczMgPSBwYXRoc1trXS5zcGxpdCgnLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmplY3RJZGVudGlmaWVyMyA9IHRva2VuczMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50T2JqZWN0MiA9ICRzY29wZS5nZXRQbGFudEJ5UGF0aChwbGFudCwgb2JqZWN0SWRlbnRpZmllcjMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eTIgPSB0b2tlbnMzW3Rva2VuczMubGVuZ3RoLTFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE9iamVjdDJbcHJvcGVydHkyXSA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2tib3ggcm9sbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94T2JqZWN0W3Byb3BlcnR5MV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dFBhdGhBcnJheSA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBpc05vdEVtcHR5PSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgcGF0aHMgPSBkZXBlbmRpbmdJbnB1dHMuc3BsaXQoJzonKTtcblxuICAgICAgICAgICAgICAgIC8vQWRkaW5nIGNoZWNrYm94IGRlcGVuZGluZyBpbnB1dHMgdG8gYXJyYXlcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbnMyID0gcGF0aHNbaV0uc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9iamVjdElkZW50aWZpZXIyID0gdG9rZW5zMi5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50T2JqZWN0ID0gJHNjb3BlLmdldFBsYW50QnlQYXRoKHBsYW50LCBvYmplY3RJZGVudGlmaWVyMik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IHRva2VuczJbdG9rZW5zMi5sZW5ndGgtMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmplY3QgPSBwYXJlbnRPYmplY3RbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUucG9zaXRpdmVEZWNpbWFsTnVtYmVyUGF0dGVybi50ZXN0KG9iamVjdCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy9FcnJvciBoYW5kbGluZzogIFN0cmluZyBpbiBudW1lcmljIGZpZWxkXG4gICAgICAgICAgICAgICAgICAgIGlmKG9iamVjdCA9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTm90RW1wdHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlucHV0UGF0aEFycmF5LnB1c2gob2JqZWN0KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vSXMgaW5wdXRzIGVtcHR5XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpbnB1dFBhdGhBcnJheS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpZihpbnB1dFBhdGhBcnJheVtqXS5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTm90RW1wdHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuczEgPT0gJ1JlZmluZXJpZXMnICYmIGNoZWNrYm94VmFsdWUgPT0gdHJ1ZSAmJiBpc05vdEVtcHR5KXtcblxuICAgICAgICAgICAgICAgICAgICBpZihjb25maXJtKFwiRG8geW91IHdpc2ggdG8gY2xlYXIgZGF0YSBmcm9tIGRlcGVuZGluZyBpbnB1dChzKT9cIikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBwYXRocy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbnMzID0gcGF0aHNba10uc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0SWRlbnRpZmllcjMgPSB0b2tlbnMzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudE9iamVjdDIgPSAkc2NvcGUuZ2V0UGxhbnRCeVBhdGgocGxhbnQsIG9iamVjdElkZW50aWZpZXIzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHkyID0gdG9rZW5zM1t0b2tlbnMzLmxlbmd0aC0xXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRPYmplY3QyW3Byb3BlcnR5Ml0gPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVja2JveCByb2xsYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hPYmplY3RbcHJvcGVydHkxXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAgICA7XG5cbiAgICAgICAgJHNjb3BlLmlzRGVzdWxwaHVyaXphdGlvblJhdGVFbXB0eSA9IGZ1bmN0aW9uIChkZXN1bHBodXJpc2F0aW9uKSB7XG4gICAgICAgICAgICBpZiAoZGVzdWxwaHVyaXNhdGlvbiA9PSBudWxsIHx8IGRlc3VscGh1cmlzYXRpb24uTW9udGhzPT1udWxsIHx8IGRlc3VscGh1cmlzYXRpb24uTW9udGhzLk1vbnRoPT1udWxsICB8fCBkZXN1bHBodXJpc2F0aW9uLk1vbnRocy5Nb250aC5sZW5ndGg9PTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGRlc3VscGh1cmlzYXRpb24uTW9udGhzLk1vbnRoLmlzQXJyYXkpe1xuICAgICAgICAgICAgZGVzdWxwaHVyaXNhdGlvbi5Nb250aHMuTW9udGguZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LkRlc3VscGh1cmlzYXRpb25SYXRlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuaXNTdWxwaHVyQ29udGVudEVtcHR5ID0gZnVuY3Rpb24gKGRlc3VscGh1cmlzYXRpb24pIHtcbiAgICAgICAgICAgIGlmIChkZXN1bHBodXJpc2F0aW9uID09IG51bGwgfHwgZGVzdWxwaHVyaXNhdGlvbi5Nb250aHM9PW51bGwgfHwgZGVzdWxwaHVyaXNhdGlvbi5Nb250aHMuTW9udGg9PW51bGwgIHx8IGRlc3VscGh1cmlzYXRpb24uTW9udGhzLk1vbnRoLmxlbmd0aD09MSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihkZXN1bHBodXJpc2F0aW9uLk1vbnRocy5Nb250aC5pc0FycmF5KXsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBkZXN1bHBodXJpc2F0aW9uLk1vbnRocy5Nb250aC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuU3VscGh1ckNvbnRlbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5pc1RlY2huaWNhbEp1c3RpZmljYXRpb25FbXB0eSA9IGZ1bmN0aW9uIChkZXN1bHBodXJpc2F0aW9uKSB7XG4gICAgICAgICAgICBpZiAoZGVzdWxwaHVyaXNhdGlvbiA9PSBudWxsIHx8IGRlc3VscGh1cmlzYXRpb24uTW9udGhzPT1udWxsIHx8IGRlc3VscGh1cmlzYXRpb24uTW9udGhzLk1vbnRoPT1udWxsICB8fCBkZXN1bHBodXJpc2F0aW9uLk1vbnRocy5Nb250aC5sZW5ndGg9PTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGRlc3VscGh1cmlzYXRpb24uTW9udGhzLk1vbnRoLmlzQXJyYXkpe1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVzdWxwaHVyaXNhdGlvbi5Nb250aHMuTW9udGguZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuVGVjaG5pY2FsSnVzdGlmaWNhdGlvbiA9PSBudWxsIHx8IGVsZW1lbnQuVGVjaG5pY2FsSnVzdGlmaWNhdGlvbiA9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpe1xuICAgICAgICAvLyByZXR1cm5zIHRydWUgb24gdW5kZWZpbmVkLCBlbXB0eSBhcnJheSwgZW1wdHkgc3RyaW5nXG4gICAgICAgIGlmKHZhbHVlID09PSAwKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgcmV0dXJuICghdmFsdWUgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZS5sZW5ndGggPT09IDAgfHwgdmFsdWUgPT09IFwiXCIgKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbiAgICAvLyBnZXQgaW5zdGFuY2UgZGF0YSBhbmQgc2F2ZSBpbnN0YW5jZSBkYXRhXG4gICAgYXBwLmZhY3RvcnkoJ2RhdGFSZXBvc2l0b3J5JywgZnVuY3Rpb24oJHJvb3RTY29wZSwgJGh0dHApIHtcbiAgICAgICAgdmFyIGNvZGVMaXN0cyA9IHt9O1xuICAgICAgICAvL3ZhciBsY3BWb2NhYnVsYXJ5U2V0QmFzZVVyaSA9ICdodHRwOi8vdGVzdC50cmlwbGVkZXYuZWUvZGF0YWRpY3Qvdm9jYWJ1bGFyeS9sY3AvJztcbiAgICAgICAgLy92YXIgbGNwVm9jYWJ1bGFyeVNldEJhc2VVcmkgPSBERF9WT0NBQlVMQVJZX0JBU0VfVVJJICsgJ2hhYmlkZXMvJztcbiAgICAgXG4gICAgIFxuICAgICAgICB2YXIgRVBSVFJhbmRsTENQVm9jYWJ1bGFyeVNldEJhc2VVcmkgPSBERF9WT0NBQlVMQVJZX0JBU0VfVVJJICsgJ0VQUlRSYW5kTENQLyc7XG4gICAgICAgIHZhciBFUFJUUmFuZExDUHZvY2FidWxhcmllcyA9WydDb21idXN0aW9uUGxhbnRDYXRlZ29yeVZhbHVlJywgJ0NvdW50cnlDb2RlVmFsdWUnLCAnRVBSVFJQb2xsdXRhbnRDb2RlVmFsdWUnLCAnRnVlbElucHV0VmFsdWUnLFxuICAgICAgICAgJ0xDUFBvbGx1dGFudENvZGVWYWx1ZScsICdNZWRpdW1Db2RlVmFsdWUnLCAnTWV0aG9kQ2xhc3NpZmljYXRpb25WYWx1ZScsICdNZXRob2RDb2RlVmFsdWUnLCAnTW9udGhWYWx1ZScsIFxuICAgICAgICAgJ090aGVyR2FzZW91c0Z1ZWxWYWx1ZScsICdPdGhlclNvbGlkRnVlbFZhbHVlJywgJ1JlYXNvblZhbHVlJywgJ1VuaXRDb2RlVmFsdWUnLCAnV2FzdGVDbGFzc2lmaWNhdGlvblZhbHVlJyxcbiAgICAgICAgICAnV2FzdGVUcmVhdG1lbnRWYWx1ZSddO1xuICAgICAgICB2YXIgRVBSVFJhbmRMQ1B2b2NhYnVsYXJ5SWRlbnRpZmllcnNJbkNvZGUgPSBbJ0NvbWJ1c3Rpb25QbGFudENhdGVnb3J5VmFsdWUnLCAnQ291bnRyeUNvZGVWYWx1ZScsICdFUFJUUlBvbGx1dGFudENvZGVWYWx1ZScsICdGdWVsSW5wdXRWYWx1ZScsXG4gICAgICAgICAnTENQUG9sbHV0YW50Q29kZVZhbHVlJywgJ01lZGl1bUNvZGVWYWx1ZScsICdNZXRob2RDbGFzc2lmaWNhdGlvblZhbHVlJywgJ01ldGhvZENvZGVWYWx1ZScsICdNb250aFZhbHVlJywgXG4gICAgICAgICAnT3RoZXJHYXNlb3VzRnVlbFZhbHVlJywgJ090aGVyU29saWRGdWVsVmFsdWUnLCAnUmVhc29uVmFsdWUnLCAnVW5pdENvZGVWYWx1ZScsICdXYXN0ZUNsYXNzaWZpY2F0aW9uVmFsdWUnLFxuICAgICAgICAgICdXYXN0ZVRyZWF0bWVudFZhbHVlJ107XG4gICAgICAgIFxuICAgICAgXG4gIHZhciBsY3BWb2NhYnVsYXJ5U2V0QmFzZVVyaSA9IEREX1ZPQ0FCVUxBUllfQkFTRV9VUkkgKyAnbGNwLyc7XG4gICAgICAgIHZhciBsY3BWb2NhYnVsYXJpZXMgPSBbJ2xjcGNvdW50cmllcycsJ3BsYW50c3RhdHVzJywnc2VjdG9ycyddO1xuICAgICAgICB2YXIgbGNwVm9jYWJ1bGFyeUlkZW50aWZpZXJzSW5Db2RlID0gWydjb3VudHJpZXMnLCAnc3RhdHVzJywgJ3NlY3RvcnMnXTtcblxuICAgICAgICB2YXIgY29tbW9uVm9jYWJ1bGFyeVNldEJhc2VVcmkgPSBERF9WT0NBQlVMQVJZX0JBU0VfVVJJICsgJ2NvbW1vbi8nO1xuXG4gICAgICAgIC8vZGVmaW5lIHVuZGVmaW5lZCBtZW1iZXJzLCBpIGRvbnQga25vdyBpZiB0aGlzIGlzIHJlYWxseSBuZWNlc3NhcnkhISFcbiAgICAgICAgY29kZUxpc3RzLkxDUENvZGVsaXN0cyA9IHt9O1xuICAgICAgICBjb2RlTGlzdHMuT2xkTENQQ29kZWxpc3RzPXt9O1xuICAgICAgICBjb2RlTGlzdHMuQ29tYnVzdGlvblBsYW50Q29kZUxpc3RzPXt9O1xuICAgICAgICBjb2RlTGlzdHMuRGVyb2dhdGlvblZhbHVlQ29kZUxpc3RzPXt9O1xuICAgICAgICBjb2RlTGlzdHMuT3RoZXJTb2xpZEZ1ZWxDb2RlTGlzdHM9e307XG4gICAgICAgIGNvZGVMaXN0cy5PdGhlckdhc2Vzb3VzRnVlbENvZGVMaXN0cz17fTtcbiAgICAgICAgY29kZUxpc3RzLk1vbnRoVmFsdWVDb2RlTGlzdHM9e307XG4gICAgICAgIGNvZGVMaXN0cy5Nb250aGx5RGVzdWxwaHVyaXNhdGlvbj17fTtcblxuICAgICAgICB2YXIgcmVnaW9uQ29kZUxpc3RzID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgRVBSVFJhbmRMQ1B2b2NhYnVsYXJpZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY29kZUxpc3RzLkxDUENvZGVsaXN0c1tFUFJUUmFuZExDUHZvY2FidWxhcnlJZGVudGlmaWVyc0luQ29kZVtpXV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxjcFZvY2FidWxhcmllcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBjb2RlTGlzdHMuT2xkTENQQ29kZWxpc3RzW2xjcFZvY2FidWxhcnlJZGVudGlmaWVyc0luQ29kZVtpXV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChmaWxlSWQpe1xuICAgICAgICAgICAgICAgICAgICB1cmwgPSBnZXRXZWJRVXJsKFwiL2Rvd25sb2FkL2NvbnZlcnRlZF91c2VyX2ZpbGVcIik7XG4gICAgICAgICAgICAgICAgfVxuXHRcdFx0XHRlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gXCJsY3AtaW5zdGFuY2UtdGVzdC5qc29uXCI7XG5cdFx0XHRcdH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCwge3RyYWNrZXIgOiAkcm9vdFNjb3BlLmxvYWRpbmdUcmFja2VyfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2F2ZUluc3RhbmNlOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBnZXRXZWJRVXJsKFwiL3NhdmVYbWxcIik7XG4gICAgICAgICAgICAgICAgZml4VW5kZWZpbmVkKGRhdGEpO1xuICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KHVybCwgZGF0YSwge3RyYWNrZXIgOiAkcm9vdFNjb3BlLmxvYWRpbmdUcmFja2VyfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q29kZUxpc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2RlTGlzdHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9hZENvZGVMaXN0OiBmdW5jdGlvbihsYW5ndWFnZSkge1xuICAgICAgICAgICAgICAgIC8vZmluZHMgZmlsZSBpbiBwcm9qZWN0IGZvbGRlclxuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0bGFuZ3VhZ2UgPSAnZW4nO1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50TGFuZ3VhZ2UgPSAhbGFuZ3VhZ2U/IGRlZmF1bHRsYW5ndWFnZSA6IGxhbmd1YWdlO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBFUFJUUmFuZExDUHZvY2FidWxhcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gRVBSVFJhbmRsTENQVm9jYWJ1bGFyeVNldEJhc2VVcmkgKyBFUFJUUmFuZExDUHZvY2FidWxhcmllc1tpXSArICcvanNvbj9sYW5nPScgKyBjdXJyZW50TGFuZ3VhZ2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCRyb290U2NvcGUuaXNJRTkgfHwgd2luZG93LmlzSUU5KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IGJhc2VVcmkgKyAnL3Jlc3RQcm94eT91cmk9JyArIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCwge3RyYWNrZXI6ICRyb290U2NvcGUubG9hZGluZ1RyYWNrZXJ9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRmFpbGVkIHRvIHJlYWQgY29kZSBsaXN0cy4gRGF0YSA9IFwiICsgIGRhdGEgKyBcIiwgc3RhdHVzID0gXCIgKyBzdGF0dXMpO30pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoKGZ1bmN0aW9uKGkpe3JldHVybiBmdW5jdGlvbiAobmV3Q29kZUxpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuY29weShuZXdDb2RlTGlzdCwgY29kZUxpc3RzLkxDUENvZGVsaXN0c1tFUFJUUmFuZExDUHZvY2FidWxhcnlJZGVudGlmaWVyc0luQ29kZVtpXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8vL2NvbnNvbGUubG9nKFwicmVjZWl2ZWQgXCIgKyB2b2NhYnVsYXJ5SWRlbnRpZmllcnNJbkNvZGVbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9fSkoaSkpO1xuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIGxvYWRPbGRMQ1BDb2RlTGlzdDogZnVuY3Rpb24obGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgICAgICAvL2ZpbmRzIGZpbGUgaW4gcHJvamVjdCBmb2xkZXJcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdGxhbmd1YWdlID0gJ2VuJztcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudExhbmd1YWdlID0gIWxhbmd1YWdlPyBkZWZhdWx0bGFuZ3VhZ2UgOiBsYW5ndWFnZTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGNwVm9jYWJ1bGFyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBsY3BWb2NhYnVsYXJ5U2V0QmFzZVVyaSArIGxjcFZvY2FidWxhcmllc1tpXSArICcvanNvbj9sYW5nPScgKyBjdXJyZW50TGFuZ3VhZ2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCRyb290U2NvcGUuaXNJRTkgfHwgd2luZG93LmlzSUU5KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IGJhc2VVcmkgKyAnL3Jlc3RQcm94eT91cmk9JyArIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCwge3RyYWNrZXI6ICRyb290U2NvcGUubG9hZGluZ1RyYWNrZXJ9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRmFpbGVkIHRvIHJlYWQgY29kZSBsaXN0cy4gRGF0YSA9IFwiICsgIGRhdGEgKyBcIiwgc3RhdHVzID0gXCIgKyBzdGF0dXMpO30pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoKGZ1bmN0aW9uKGkpe3JldHVybiBmdW5jdGlvbiAobmV3Q29kZUxpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJuZXdDb2RlTGlzdCBcIituZXdDb2RlTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmNvcHkobmV3Q29kZUxpc3QsIGNvZGVMaXN0cy5PbGRMQ1BDb2RlbGlzdHNbbGNwVm9jYWJ1bGFyeUlkZW50aWZpZXJzSW5Db2RlW2ldXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLy8vY29uc29sZS5sb2coXCJyZWNlaXZlZCBcIiArIHZvY2FidWxhcnlJZGVudGlmaWVyc0luQ29kZVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIH19KShpKSk7XG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgIGxvYWRDb21idXN0aW9uUGxhbnRDb2RlTGlzdDogZnVuY3Rpb24obGFuZ3VhZ2Upe1xuICAgICAgICAgICAgICAgIC8vIHdlIGRvIG5vdCBuZWVkIHRoZSBmb3IgZWFjaCBvZiB0aGUgYWJvdmUgbG9hZENvZGVMaXN0IG1ldGhvZCwgc2luY2UgaW4gdGhlIGFib3ZlICwgaXQgaGFzIHRvIG1ha2Ugc2VwZXJhdGUgY2FsbHNcbiAgICAgICAgICAgICAgICAvLyBmb3IgZWFjaCB2b2NhYnVsYXJ5LCB3aGVyZWFzIHdlIGRvIG5vdCBoYXZlIHRvLlxuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0bGFuZ3VhZ2UgPSAnZW4nO1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50TGFuZ3VhZ2UgPSAhbGFuZ3VhZ2U/IGRlZmF1bHRsYW5ndWFnZSA6IGxhbmd1YWdlO1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnaHR0cDovL2RkLmVpb25ldC5ldXJvcGEuZXUvdm9jYWJ1bGFyeS9FUFJUUmFuZExDUC9Db21idXN0aW9uUGxhbnRDYXRlZ29yeVZhbHVlL2pzb24nO1xuICAgICAgICAgICAgICAgICRodHRwLmdldCh1cmwsIHt0cmFja2VyOiAkcm9vdFNjb3BlLmxvYWRpbmdUcmFja2VyfSlcbiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpe1xuICAgICAgICAgICAgICAgICAgICBhbGVydChcIkZhaWxlZCB0byByZWFkIGNvZGUgbGlzdHMuIERhdGEgPSBcIiArICBkYXRhICsgXCIsIHN0YXR1cyA9IFwiICsgc3RhdHVzKTt9KVxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKCBmdW5jdGlvbiAobmV3Q29kZUxpc3QpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuY29weShuZXdDb2RlTGlzdCwgY29kZUxpc3RzLkNvbWJ1c3Rpb25QbGFudENvZGVMaXN0cyk7XG4gICAgICAgICAgICAvLy8vY29uc29sZS5sb2coXCJyZWNlaXZlZCBcIiArIHZvY2FidWxhcnlJZGVudGlmaWVyc0luQ29kZVtpXSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsb2FkRGVyb2dhdGlvblZhbHVlQ29kZUxpc3Q6IGZ1bmN0aW9uKGxhbmd1YWdlKXtcbiAgICAgICAgICAgICAgICAvLyB3ZSBkbyBub3QgbmVlZCB0aGUgZm9yIGVhY2ggb2YgdGhlIGFib3ZlIGxvYWRDb2RlTGlzdCBtZXRob2QsIHNpbmNlIGluIHRoZSBhYm92ZSAsIGl0IGhhcyB0byBtYWtlIHNlcGVyYXRlIGNhbGxzXG4gICAgICAgICAgICAgICAgLy8gZm9yIGVhY2ggdm9jYWJ1bGFyeSwgd2hlcmVhcyB3ZSBkbyBub3QgaGF2ZSB0by5cbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdGxhbmd1YWdlID0gJ2VuJztcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudExhbmd1YWdlID0gIWxhbmd1YWdlPyBkZWZhdWx0bGFuZ3VhZ2UgOiBsYW5ndWFnZTtcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gJ2h0dHA6Ly9kZC5laW9uZXQuZXVyb3BhLmV1L3ZvY2FidWxhcnkvZXVyZWdpc3RyeW9uaW5kdXN0cmlhbHNpdGVzL0Rlcm9nYXRpb25WYWx1ZS9qc29uJztcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQodXJsLCB7dHJhY2tlcjogJHJvb3RTY29wZS5sb2FkaW5nVHJhY2tlcn0pXG4gICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKXtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJGYWlsZWQgdG8gcmVhZCBjb2RlIGxpc3RzLiBEYXRhID0gXCIgKyAgZGF0YSArIFwiLCBzdGF0dXMgPSBcIiArIHN0YXR1cyk7fSlcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyggZnVuY3Rpb24gKG5ld0NvZGVMaXN0KSB7XG4gICAgICAgICAgICBhbmd1bGFyLmNvcHkobmV3Q29kZUxpc3QsIGNvZGVMaXN0cy5EZXJvZ2F0aW9uVmFsdWVDb2RlTGlzdHMpO1xuICAgICAgICAgICAgLy8vL2NvbnNvbGUubG9nKFwicmVjZWl2ZWQgXCIgKyB2b2NhYnVsYXJ5SWRlbnRpZmllcnNJbkNvZGVbaV0pO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9hZE90aGVyU29saWRGdWVsQ29kZUxpc3Q6IGZ1bmN0aW9uKGxhbmd1YWdlKXtcbiAgICAgICAgICAgICAgICAvLyB3ZSBkbyBub3QgbmVlZCB0aGUgZm9yIGVhY2ggb2YgdGhlIGFib3ZlIGxvYWRDb2RlTGlzdCBtZXRob2QsIHNpbmNlIGluIHRoZSBhYm92ZSAsIGl0IGhhcyB0byBtYWtlIHNlcGVyYXRlIGNhbGxzXG4gICAgICAgICAgICAgICAgLy8gZm9yIGVhY2ggdm9jYWJ1bGFyeSwgd2hlcmVhcyB3ZSBkbyBub3QgaGF2ZSB0by5cbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdGxhbmd1YWdlID0gJ2VuJztcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudExhbmd1YWdlID0gIWxhbmd1YWdlPyBkZWZhdWx0bGFuZ3VhZ2UgOiBsYW5ndWFnZTtcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gJ2h0dHA6Ly9kZC5laW9uZXQuZXVyb3BhLmV1L3ZvY2FidWxhcnkvRVBSVFJhbmRMQ1AvT3RoZXJTb2xpZEZ1ZWxWYWx1ZS9qc29uJztcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQodXJsLCB7dHJhY2tlcjogJHJvb3RTY29wZS5sb2FkaW5nVHJhY2tlcn0pXG4gICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKXtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJGYWlsZWQgdG8gcmVhZCBjb2RlIGxpc3RzLiBEYXRhID0gXCIgKyAgZGF0YSArIFwiLCBzdGF0dXMgPSBcIiArIHN0YXR1cyk7fSlcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyggZnVuY3Rpb24gKG5ld0NvZGVMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vUHVzaCBcIk90aGVyXCIgdmFsdWUgdG8gdGhlIGVuZCBvZiB0aGUgQXJyYXlcbiAgICAgICAgICAgICAgICAgICAgdmFyIG90aGVyRWxlbWVudCA9e307XG4gICAgICAgICAgICAgICAgICAgIG5ld0NvZGVMaXN0LmNvbmNlcHRzLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudFsnQGlkJ109PSdPdGhlcicpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBPdGhlckVsZW1lbnRJbmRleCA9IG5ld0NvZGVMaXN0LmNvbmNlcHRzLmluZGV4T2YoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q29kZUxpc3QuY29uY2VwdHMuc3BsaWNlKE90aGVyRWxlbWVudEluZGV4LDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKG90aGVyRWxlbWVudCxlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NvZGVMaXN0LmNvbmNlcHRzLnB1c2gob3RoZXJFbGVtZW50KTtcbiAgICAgICAgICAgIGFuZ3VsYXIuY29weShuZXdDb2RlTGlzdCwgY29kZUxpc3RzLk90aGVyU29saWRGdWVsQ29kZUxpc3RzKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxvYWRPdGhlckdhc2Vzb3VzRnVlbENvZGVMaXN0OiBmdW5jdGlvbihsYW5ndWFnZSl7XG4gICAgICAgICAgICAgICAgLy8gd2UgZG8gbm90IG5lZWQgdGhlIGZvciBlYWNoIG9mIHRoZSBhYm92ZSBsb2FkQ29kZUxpc3QgbWV0aG9kLCBzaW5jZSBpbiB0aGUgYWJvdmUgLCBpdCBoYXMgdG8gbWFrZSBzZXBlcmF0ZSBjYWxsc1xuICAgICAgICAgICAgICAgIC8vIGZvciBlYWNoIHZvY2FidWxhcnksIHdoZXJlYXMgd2UgZG8gbm90IGhhdmUgdG8uXG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRsYW5ndWFnZSA9ICdlbic7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRMYW5ndWFnZSA9ICFsYW5ndWFnZT8gZGVmYXVsdGxhbmd1YWdlIDogbGFuZ3VhZ2U7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9ICdodHRwOi8vZGQuZWlvbmV0LmV1cm9wYS5ldS92b2NhYnVsYXJ5L0VQUlRSYW5kTENQL090aGVyR2FzZW91c0Z1ZWxWYWx1ZS9qc29uJztcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQodXJsLCB7dHJhY2tlcjogJHJvb3RTY29wZS5sb2FkaW5nVHJhY2tlcn0pXG4gICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKXtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJGYWlsZWQgdG8gcmVhZCBjb2RlIGxpc3RzLiBEYXRhID0gXCIgKyAgZGF0YSArIFwiLCBzdGF0dXMgPSBcIiArIHN0YXR1cyk7fSlcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyggZnVuY3Rpb24gKG5ld0NvZGVMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1B1c2ggXCJPdGhlclwiIHZhbHVlIHRvIHRoZSBlbmQgb2YgdGhlIEFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3RoZXJFbGVtZW50ID17fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvZGVMaXN0LmNvbmNlcHRzLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnRbJ0BpZCddPT0nT3RoZXInKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIE90aGVyRWxlbWVudEluZGV4ID0gbmV3Q29kZUxpc3QuY29uY2VwdHMuaW5kZXhPZihlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q29kZUxpc3QuY29uY2VwdHMuc3BsaWNlKE90aGVyRWxlbWVudEluZGV4LDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvdGhlckVsZW1lbnQsZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdDb2RlTGlzdC5jb25jZXB0cy5wdXNoKG90aGVyRWxlbWVudCk7XG4gICAgICAgICAgICBhbmd1bGFyLmNvcHkobmV3Q29kZUxpc3QsIGNvZGVMaXN0cy5PdGhlckdhc2Vzb3VzRnVlbENvZGVMaXN0cyk7XG4gICAgICAgICAgICAvLy8vY29uc29sZS5sb2coXCJyZWNlaXZlZCBcIiArIHZvY2FidWxhcnlJZGVudGlmaWVyc0luQ29kZVtpXSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsb2FkTW9udGhWYWx1ZUNvZGVMaXN0OiBmdW5jdGlvbihsYW5ndWFnZSl7XG4gICAgICAgICAgICAgICAgLy8gd2UgZG8gbm90IG5lZWQgdGhlIGZvciBlYWNoIG9mIHRoZSBhYm92ZSBsb2FkQ29kZUxpc3QgbWV0aG9kLCBzaW5jZSBpbiB0aGUgYWJvdmUgLCBpdCBoYXMgdG8gbWFrZSBzZXBlcmF0ZSBjYWxsc1xuICAgICAgICAgICAgICAgIC8vIGZvciBlYWNoIHZvY2FidWxhcnksIHdoZXJlYXMgd2UgZG8gbm90IGhhdmUgdG8uXG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRsYW5ndWFnZSA9ICdlbic7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRMYW5ndWFnZSA9ICFsYW5ndWFnZT8gZGVmYXVsdGxhbmd1YWdlIDogbGFuZ3VhZ2U7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9ICdodHRwOi8vZGQuZWlvbmV0LmV1cm9wYS5ldS92b2NhYnVsYXJ5L0VQUlRSYW5kTENQL01vbnRoVmFsdWUvanNvbic7XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCwge3RyYWNrZXI6ICRyb290U2NvcGUubG9hZGluZ1RyYWNrZXJ9KVxuICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZyl7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRmFpbGVkIHRvIHJlYWQgY29kZSBsaXN0cy4gRGF0YSA9IFwiICsgIGRhdGEgKyBcIiwgc3RhdHVzID0gXCIgKyBzdGF0dXMpO30pXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoIGZ1bmN0aW9uIChuZXdDb2RlTGlzdCkge1xuICAgICAgICAgICAgYW5ndWxhci5jb3B5KG5ld0NvZGVMaXN0LCBjb2RlTGlzdHMuTW9udGhWYWx1ZUNvZGVMaXN0cyk7XG4gICAgICAgICAgICAvLy8vY29uc29sZS5sb2coXCJyZWNlaXZlZCBcIiArIHZvY2FidWxhcnlJZGVudGlmaWVyc0luQ29kZVtpXSk7XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goY29kZUxpc3RzLk1vbnRoVmFsdWVDb2RlTGlzdHMuY29uY2VwdHMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlTGlzdHMuTW9udGhseURlc3VscGh1cmlzYXRpb25ba2V5XT17XG4gICAgICAgICAgICAgICAgICAgIFwiRGVzdWxwaHVyaXNhdGlvblJhdGVcIjogJycsXG4gICAgICAgICAgICAgICAgICAgIFwiTW9udGhWYWx1ZVwiOnZhbHVlLnByZWZMYWJlbFswXVsnQHZhbHVlJ10sXG4gICAgICAgICAgICAgICAgICAgIFwiU3VscGh1ckNvbnRlbnRcIjogJycsXG4gICAgICAgICAgICAgICAgICAgIFwiVGVjaG5pY2FsSnVzdGlmaWNhdGlvblwiOiAnJ1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgICAgICBsb2FkUmVnaW9uc0NvZGVsaXN0OiBmdW5jdGlvbihjb3VudHJ5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IEREX1ZPQ0FCVUxBUllfQkFTRV9VUkkgKyBcImNvbW1vbi9udXRzL2pzb24/aWQ9XCIgKyBjb3VudHJ5O1xuICAgICAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLmlzSUU5IHx8IHdpbmRvdy5pc0lFOSl7XG4gICAgICAgICAgICAgICAgICAgIHVybCA9IGJhc2VVcmkgKyAnL3Jlc3RQcm94eT91cmk9JyArIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHVybCk7XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCwge3RyYWNrZXI6ICRyb290U2NvcGUubG9hZGluZ1RyYWNrZXJ9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKXthbGVydChcIkZhaWxlZCB0byByZWFkIHJlZ2lvbnMgY29kZSBsaXN0cy5cIik7fSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChuZXdDb2RlTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuY29weShuZXdDb2RlTGlzdCwgcmVnaW9uQ29kZUxpc3RzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihyZWdpb25Db2RlTGlzdHMuY29uY2VwdHMubGVuZ3RoID09IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gRERfVk9DQUJVTEFSWV9CQVNFX1VSSSArIFwibGNwL2xjcGNvdW50cmllcy9qc29uP2lkPVwiICsgY291bnRyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRyb290U2NvcGUuaXNJRTkgfHwgd2luZG93LmlzSUU5KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IGJhc2VVcmkgKyAnL3Jlc3RQcm94eT91cmk9JyArIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmdldCh1cmwsIHt0cmFja2VyOiAkcm9vdFNjb3BlLmxvYWRpbmdUcmFja2VyfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZyl7YWxlcnQoXCJGYWlsZWQgdG8gcmVhZCByZWdpb25zIGNvZGUgbGlzdHMuXCIpO30pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocGxhbnREZXRhaWxzT3RoZXJTZWN0b3JGaWVsZHNWaWV3bmV3Q29kZUxpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuY29weShuZXdDb2RlTGlzdCwgcmVnaW9uQ29kZUxpc3RzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2lvbkNvZGVMaXN0cztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRFbXB0eUluc3RhbmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gJ2xjcC1pbnN0YW5jZS1lbXB0eS54bWw/Zm9ybWF0PWpzb24nO1xuICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQodXJsLCB7dHJhY2tlciA6ICRyb290U2NvcGUubG9hZGluZ1RyYWNrZXJ9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsb2FkSW5zdGFuY2VJbmZvOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBnZXRXZWJRVXJsKFwiL2ZpbGUvaW5mb1wiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCwgZGF0YSwge3RyYWNrZXIgOiAkcm9vdFNjb3BlLmxvYWRpbmdUcmFja2VyfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIG5ld1xuICAgIGFwcC5maWx0ZXIoJ29mZnNldCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIHN0YXJ0KSB7XG4gICAgICAgICAgICBpZiAoIWlucHV0IHx8ICEoaW5wdXQgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFydCA9IHBhcnNlSW50KHN0YXJ0LCAxMCk7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuc2xpY2Uoc3RhcnQpO1xuICAgICAgICB9O1xuICAgIH0pO1xuXG4gIC8qKiAgYXBwLmZpbHRlcignZm9ybWF0RGVyb2dhdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgICAgIGlmICh4ICE9IG51bGwgJiZ4LmlzQXJyYXkpIHtcbiAgICAgICAgICAgICAgICB4LmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBlbnRyeTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICAgKiovXG4gICAgYXBwLmNvbnRyb2xsZXIoJ01vZGFsQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRtb2RhbCwgJGh0dHApIHtcbiAgICAgICAgLy9zYXZlcyBNYWluIGZvcm0gdmFsaWRhdGlvbiBzdGFnZVxuICAgICAgICAkc2NvcGUubWFpbkZvcm1TdWJtaXR0ZWQgPSAkc2NvcGUuc3VibWl0dGVkO1xuICAgICAgICAkc2NvcGUucGxhbnQ7XG4gICAgICAgICRzY29wZS5vcmlnaW5hbFBsYW50O1xuXG4gICAgICAgICRzY29wZS5zdWJtaXR0ZWQgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLmVkaXRCb29sZWFuID0gZmFsc2U7XG4gICAgICAgIC8qJHNjb3BlLmVkaXQgPSBmdW5jdGlvbiAocGxhbnQpe1xuICAgICAgICAgICAgJHNjb3BlLmVkaXRCb29sZWFuID0gdHJ1ZTtcbiAgICAgICAgICAgICRzY29wZS5wbGFudD0gcGxhbnQ7XG4gICAgICAgICAgICAkc2NvcGUub3BlbignbGcnKTtcbiAgICAgICAgfSovXG4gICAgICAgICRzY29wZS5hZGQgPSBmdW5jdGlvbiAoKXtcbiAgICAgICAgICAgICRzY29wZS5zdWJtaXR0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICRzY29wZS5lZGl0Qm9vbGVhbiA9IGZhbHNlO1xuICAgICAgICAgICAgJHNjb3BlLnBsYW50ID0gbnVsbDtcbiAgICAgICAgICAgICRzY29wZS5vcGVuKCdsZycpO1xuICAgICAgICB9XG4gICAgICAgICRyb290U2NvcGUuJHdhdGNoKCdzZWxlY3RlZFBsYW50JywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUgJiYgbmV3VmFsdWUgIT0gbnVsbCApe1xuICAgICAgICAgICAgICAgICRzY29wZS5zdWJtaXR0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICRzY29wZS5lZGl0Qm9vbGVhbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm9yaWdpbmFsUGxhbnQgPSAgbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBsYW50ID0gYW5ndWxhci5jb3B5KG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNlbGVjdGVkUGxhbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICRzY29wZS5vcGVuKCdsZycsICRyb290U2NvcGUubW9kYWxQYWdlQ2FzZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgICRzY29wZS5vcGVuQWRkID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgJHJvb3RTY29wZS5tb2RhbFBhZ2VDYXNlSWQgPSBcIkxpc3RPZlBsYW50c1wiO1xuICAgICAgICAgICAgJHJvb3RTY29wZS5zZWxlY3RlZFBsYW50ID0gbnVsbDtcbiAgICAgICAgICAgICRzY29wZS5vcGVuKCdsZycsJ0xpc3RPZlBsYW50cycpO1xuICAgICAgICB9XG4gICAgICAgICRzY29wZS5sb2FkRGF0YUZyb21FUFJUUiA9IGZ1bmN0aW9uKHBsYW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbG9hZERhdGFGcm9tRVBSVFIgZnVuY3Rpb24gaW52b2tlZCcpO1xuICAgICAgICAgICAgdmFyIGNvdW50cnlDb2RlID0gJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuQmFzaWNEYXRhLk1lbWJlclN0YXRlO1xuICAgICAgICAgICAgaWYgKGNvdW50cnlDb2RlICYmIGNvdW50cnlDb2RlLmxlbmd0aCA9PSAyICYmIHBsYW50ICkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGVwcnRyQ291bnRyeUNvZGUgPSBjb3VudHJ5Q29kZSA9PT0gXCJHQlwiID8gXCJVS1wiIDogY291bnRyeUNvZGUgPT09IFwiR1JcIiA/IFwiRUxcIiA6IGNvdW50cnlDb2RlO1xuXG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IFwiaHR0cDovL3NlbWFudGljLmVlYS5ldXJvcGEuZXUvc3BhcnFsP2Zvcm1hdD1hcHBsaWNhdGlvbi9qc29uJnF1ZXJ5PVwiO1xuICAgICAgICAgICAgICAgIHZhciBzcGFycWwgPSBcIlBSRUZJWCByZGZzOiA8aHR0cDovL3d3dy53My5vcmcvMjAwMC8wMS9yZGYtc2NoZW1hIz4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIgUFJFRklYIGNyOiA8aHR0cDovL2NyLmVpb25ldC5ldXJvcGEuZXUvb250b2xvZ2llcy9jb250cmVnLnJkZiM+IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiIFBSRUZJWCBwcnRyOiA8aHR0cDovL3BydHIuZWMuZXVyb3BhLmV1L3JkZi9zY2hlbWEucmRmIz4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIgUFJFRklYIGdlbzogPGh0dHA6Ly93d3cudzMub3JnLzIwMDMvMDEvZ2VvL3dnczg0X3BvcyM+IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiIFNFTEVDVCA/Y291bnRyeUNvZGUgP05hdGlvbmFsSUQgP2ZhY2lsaXR5SUQgP2ZhY2lsaXR5TmFtZSA/c3RyZWV0TmFtZSA/YnVpbGRpbmdOdW1iZXIgP3Bvc3RhbENvZGUgP2NpdHkgP2xhdCA/bG9uZyA/cmVwb3J0aW5nWWVhclwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiIFdIRVJFIHsgP2ZhY2lsaXR5IGEgcHJ0cjpGYWNpbGl0eSA7IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiIHBydHI6ZmFjaWxpdHlJRCA/ZmFjaWxpdHlJRCA7IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiIHBydHI6ZmFjaWxpdHlOYW1lID9mYWNpbGl0eU5hbWUgOyBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiBwcnRyOnN0cmVldE5hbWUgP3N0cmVldE5hbWU7IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicHJ0cjpidWlsZGluZ051bWJlciAgP2J1aWxkaW5nTnVtYmVyIDsgXCIrXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiBwcnRyOnBvc3RhbENvZGUgID9wb3N0YWxDb2RlIDsgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIgcHJ0cjpjaXR5ID9jaXR5IDsgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIgZ2VvOmxhdCA/bGF0IDsgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIgZ2VvOmxvbmcgP2xvbmcgOyBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiBwcnRyOmxhdGVzdFJlcG9ydCA/bGF0ZXN0cmVwb3J0IDtcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiBwcnRyOmluQ291bnRyeSA/aW5Db3VudHJ5IC4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIgP2luQ291bnRyeSBwcnRyOmNvZGUgP2NvdW50cnlDb2RlIC4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIgP2xhdGVzdHJlcG9ydCBwcnRyOm5hdGlvbmFsSUQgP05hdGlvbmFsSUQgO1wiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiIHBydHI6cmVwb3J0aW5nWWVhciA/cmVwb3J0aW5nWWVhci5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiBGSUxURVIgKD9jb3VudHJ5Q29kZSA9ICdcIiArIGVwcnRyQ291bnRyeUNvZGUgKyBcIicgYW5kIFVDQVNFKD9OYXRpb25hbElEKSA9IFVDQVNFKCdcIiArIHBsYW50LkVQUlRSTmF0aW9uYWxJZCArIFwiJyApICkgfSBPUkRFUiBCWSBERVNDKD9yZXBvcnRpbmdZZWFyKSBMSU1JVCAxXCI7XG4gICAgICAgICAgICAgICAgdXJsID0gYmFzZVVyaSArICcvcmVzdFByb3h5P3VyaT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHVybCArIGVuY29kZVVSSUNvbXBvbmVudChzcGFycWwpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndXJsIGZvciBzcGFycWwgZXBydHIgZGF0YSBpczonK3VybCk7XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCwge3RyYWNrZXIgOiAkcm9vdFNjb3BlLmxvYWRpbmdUcmFja2VyfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbigpe2FsZXJ0KFwiRmFpbGVkIHRvIHJlYWQgZGF0YSBmcm9tIEUtUFJUUi5cIik7fSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGVwcnRyRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcHJ0ckRhdGEucmVzdWx0cy5iaW5kaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZhY2lsaXR5ID0gZXBydHJEYXRhLnJlc3VsdHMuYmluZGluZ3NbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpcm0oXCJUaGUgc3lzdGVtIGZvdW5kIHRoZSBmb2xsb3dpbmcgZmFjaWxpdHk6IFwiICsgZmFjaWxpdHkuZmFjaWxpdHlOYW1lLnZhbHVlICsgXCIsIFwiICsgZmFjaWxpdHkuc3RyZWV0TmFtZS52YWx1ZSArIFwiLCBcIiArIGZhY2lsaXR5LnBvc3RhbENvZGUudmFsdWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIsIFwiICArIGZhY2lsaXR5LmNpdHkudmFsdWUgKyBcIi4gXFxuXFxuIERvIHlvdSB3YW50IHRvIHVzZSB0aGUgZGF0YSBvbiBwbGFudCBsZXZlbD9cIiApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBsYW50LlBsYW50TG9jYXRpb24pIHBsYW50LlBsYW50TG9jYXRpb24gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGxhbnQuR2VvZ3JhcGhpY2FsQ29vcmRpbmF0ZSkgcGxhbnQuR2VvZ3JhcGhpY2FsQ29vcmRpbmF0ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhbnQuUGxhbnRMb2NhdGlvbi5TdHJlZXROYW1lID0gZmFjaWxpdHkuc3RyZWV0TmFtZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNFbXB0eShmYWNpbGl0eS5idWlsZGluZ051bWJlci52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFudC5QbGFudExvY2F0aW9uLkJ1aWxkaW5nTnVtYmVyICs9IFwiIFwiICsgZmFjaWxpdHkuYnVpbGRpbmdOdW1iZXIudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFudC5QbGFudExvY2F0aW9uLkNpdHkgPWZhY2lsaXR5LmNpdHkudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFudC5QbGFudExvY2F0aW9uLlBvc3RhbENvZGUgPSBmYWNpbGl0eS5wb3N0YWxDb2RlLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhbnQuUGxhbnRMb2NhdGlvbi5CdWlsZGluZ051bWJlciA9IGZhY2lsaXR5LmJ1aWxkaW5nTnVtYmVyLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhbnQuR2VvZ3JhcGhpY2FsQ29vcmRpbmF0ZS5Mb25naXR1ZGUgPSBmYWNpbGl0eS5sb25nLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhbnQuR2VvZ3JhcGhpY2FsQ29vcmRpbmF0ZS5MYXRpdHVkZSA9IGZhY2lsaXR5LmxhdC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYW50LkZhY2lsaXR5TmFtZSA9IGZhY2lsaXR5LmZhY2lsaXR5TmFtZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIlRoZSBzeXN0ZW0gY291bGQgbm90IGZpbmQgYW55IGZhY2lsaXR5IHdpdGggTmF0aW9uYWxJRD1cIiArIHBsYW50LkVQUlRSTmF0aW9uYWxJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbGVydChcIk1lbWJlciBzdGF0ZSBpcyBub3Qgc2VsZWN0ZWQgb24gQmFzaWMgRGF0YSBmb3JtIVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy9lZGl0KFxuICAgICAgICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uIChzaXplLG1vZGFsUGFnZUlkKSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKG1vZGFsUGFnZUlkKTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJHJvb3RTY29wZS5tb2RhbFBhZ2VDYXNlSWQ9PSB1bmRlZmluZWQpO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygkcm9vdFNjb3BlLm1vZGFsUGFnZUNhc2VJZD09XCJMaXN0T2ZQbGFudHNcIik7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCRyb290U2NvcGUubW9kYWxQYWdlQ2FzZUlkPT1cIlBsYW50RGV0YWlsc1wiKTtcbiAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlO1xuICAgICAgICAgICAgLy9Gb3IgYWRkaW5nIG5ldyBwbGFudFxuICAgICAgICAgICAgaWYobW9kYWxQYWdlSWQgPT0gdW5kZWZpbmVkKXtcbiAvLyAgICAgICAgICAgICAgIGlmICggJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuQmFzaWNEYXRhLk1lbWJlclN0YXRlIT1udWxsIClcbi8veyAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7XG5cbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdMaXN0T2ZQbGFudE1vZGFsQ29udGVudC5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0xpc3RPZlBsYW50c01vZGFsSW5zdGFuY2VDdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdhcHAtbW9kYWwtd2luZG93JyxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxhbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gICRzY29wZS5wbGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyAgIH1lbHNle1xuICAgICAgICAgICAgIC8vICAgICAgYWxlcnQoXCJQbGVhc2UgZmlsbCBpbiB0aGUgTWVtYmVyIFN0YXRlIGZyb20gQmFzaWMgSW5mbyBmaXJzdC5cIik7XG4gICAgICAgICAgICAgLy8gICAgICByZXR1cm47XG4gICAgICAgICAgICAgLy8gIH1cbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9Gb3IgZWRpdGluZyBwbGFudFxuICAgICAgICAgICAgaWYobW9kYWxQYWdlSWQgPT0gXCJMaXN0T2ZQbGFudHNcIil7XG4gICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZSA9ICRtb2RhbC5vcGVuKHtcblxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ0xpc3RPZlBsYW50TW9kYWxDb250ZW50Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTGlzdE9mUGxhbnRzTW9kYWxJbnN0YW5jZUN0cmwnLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiBzaXplLFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ2FwcC1tb2RhbC13aW5kb3cnLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAgJHNjb3BlLnBsYW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG1vZGFsUGFnZUlkID09IFwiUGxhbnREZXRhaWxzXCIpe1xuICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnUGxhbnREZXRhaWxzTW9kYWxDb250ZW50Lmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnUGxhbnREZXRhaWxzTW9kYWxJbnN0YW5jZUN0cmwnLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiBzaXplLFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ2FwcC1tb2RhbC13aW5kb3cnLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAgJHNjb3BlLnBsYW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG1vZGFsUGFnZUlkPT1cIlRvdGFsRW1pc3Npb25zVG9BaXJcIil7XG4gICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZSA9ICRtb2RhbC5vcGVuKHtcblxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ1RvdGFsRW1pc3Npb25zVG9BaXJNb2RhbENvbnRlbnQuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdUb3RhbEVtaXNzaW9uc1RvQWlyTW9kYWxJbnN0YW5jZUN0cmwnLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiBzaXplLFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ2FwcC1tb2RhbC13aW5kb3cnLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAgJHNjb3BlLnBsYW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG1vZGFsUGFnZUlkPT1cIkVuZXJneUlucHV0XCIpe1xuICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7XG5cbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdFbmVyZ3lJbnB1dE1vZGFsQ29udGVudC5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0VuZXJneUlucHV0TW9kYWxJbnN0YW5jZUN0cmwnLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiBzaXplLFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ2FwcC1tb2RhbC13aW5kb3cnLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAgJHNjb3BlLnBsYW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG1vZGFsUGFnZUlkPT1cIkRlc3VscGh1cmlzYXRpb25cIil7XG4gICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZSA9ICRtb2RhbC5vcGVuKHtcblxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ0Rlc3VscGh1cmlzYXRpb25Nb2RhbENvbnRlbnQuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdEZXN1bHBodXJpc2F0aW9uTW9kYWxJbnN0YW5jZUN0cmwnLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiBzaXplLFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ2FwcC1tb2RhbC13aW5kb3cnLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAgJHNjb3BlLnBsYW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG1vZGFsUGFnZUlkPT1cIlVzZWZ1bEhlYXRcIil7XG4gICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZSA9ICRtb2RhbC5vcGVuKHtcblxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ1VzZWZ1bEhlYXRNb2RhbENvbnRlbnQuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdVc2VmdWxIZWF0TW9kYWxJbnN0YW5jZUN0cmwnLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiBzaXplLFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ2FwcC1tb2RhbC13aW5kb3cnLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAgJHNjb3BlLnBsYW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoc2VsZWN0ZWRJdGVtKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkID0gc2VsZWN0ZWRJdGVtO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vJGxvZy5pbmZvKCdNb2RhbCBkaXNtaXNzZWQgYXQ6ICcgKyBuZXcgRGF0ZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH0pO1xuXG4gICAgYXBwLmNvbnRyb2xsZXIoJ0xpc3RPZlBsYW50c01vZGFsSW5zdGFuY2VDdHJsJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICRzY29wZSwgJG1vZGFsSW5zdGFuY2UsIHBsYW50LGRhdGFSZXBvc2l0b3J5KSB7XG4gICAgICAgIHZhciBlZGl0ID0gZmFsc2U7XG5cbiAgICAgICAgaWYocGxhbnQgIT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIGVkaXQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KCAkc2NvcGUucmVnaW9uc0NvZGVsaXN0ICkgPT09IFwie31cIikgIHtcblxuICAgICAgICAgICAgaWYgKCAkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5CYXNpY0RhdGEuTWVtYmVyU3RhdGUgKVxuICAgICAgICAgICAgICAgICRzY29wZS5yZWdpb25zQ29kZWxpc3QgPSBkYXRhUmVwb3NpdG9yeS5sb2FkUmVnaW9uc0NvZGVsaXN0KCRzY29wZS5pbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkJhc2ljRGF0YS5NZW1iZXJTdGF0ZSk7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbGVydChcIlBsZWFzZSBmaWxsIGluIHRoZSBNZW1iZXIgU3RhdGUgZnJvbSBCYXNpYyBJbmZvIGZpcnN0LlwiKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0dGVkID0gJHNjb3BlLm1haW5Gb3JtU3VibWl0dGVkO1xuICAgICAgICAgICAgIC8vICAgJG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG4gICAgICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uIChwbGFudCkge1xuXG4gICAgICAgICAgICAkc2NvcGUuc3VibWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmKHBsYW50ICE9IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgaWYocGxhbnQuUGxhbnROYW1lICE9IG51bGwgJiYgcGxhbnQuR2VvZ3JhcGhpY2FsQ29vcmRpbmF0ZS5Mb25naXR1ZGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKDE4MCA+PSBwbGFudC5HZW9ncmFwaGljYWxDb29yZGluYXRlLkxvbmdpdHVkZSAmJiBwbGFudC5HZW9ncmFwaGljYWxDb29yZGluYXRlLkxvbmdpdHVkZSA+PSAtMTgwKSAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYW50Lkdlb2dyYXBoaWNhbENvb3JkaW5hdGUuTGF0aXR1ZGUgIT0gbnVsbCAmJiAoOTAgPj0gcGxhbnQuR2VvZ3JhcGhpY2FsQ29vcmRpbmF0ZS5MYXRpdHVkZSAmJiBwbGFudC5HZW9ncmFwaGljYWxDb29yZGluYXRlLkxhdGl0dWRlID49IC05MCkpe1xuICAgICAgICAgICAgICAgICAgICBpZighZWRpdCl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcGxhbnQuUGxhbnRMb2NhdGlvbiA9PSBudWxsICkgcGxhbnQuUGxhbnRMb2NhdGlvbiA9IHt9IDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RQbGFudCA9ICRzY29wZS5hZGRJdGVtKCdMQ1BRdWVzdGlvbm5haXJlLkxpc3RPZlBsYW50cy5QbGFudCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSAkc2NvcGUuZ2V0TmV4dFBsYW50SWQgKCkgO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNpbmcgJHEgcHJvbWlzZSBBUEksIHRvIGFzayB0aGUgc2VydmVyIGZpcnN0IGZvciBpZCBjb2xsaXNpb25zLlxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuICggZnVuY3Rpb24gKCBwbGFudGlkICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBsYW50LlBsYW50SWQgPSBwbGFudGlkIDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGxhbnQuUGxhbnROYW1lID0gIHBsYW50LlBsYW50TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGxhbnQuRVBSVFJOYXRpb25hbElkID0gIHBsYW50LkVQUlRSTmF0aW9uYWxJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGxhbnQuUGxhbnRMb2NhdGlvbi5TdHJlZXROYW1lID0gIHBsYW50LlBsYW50TG9jYXRpb24uU3RyZWV0TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGxhc3RQbGFudC5QbGFudExvY2F0aW9uLkFkZHJlc3MyID0gIHBsYW50LlBsYW50TG9jYXRpb24uQWRkcmVzczI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBsYW50LlBsYW50TG9jYXRpb24uQ2l0eSA9ICBwbGFudC5QbGFudExvY2F0aW9uLkNpdHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBsYW50LlBsYW50TG9jYXRpb24uUmVnaW9uID0gIHBsYW50LlBsYW50TG9jYXRpb24uUmVnaW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQbGFudC5QbGFudExvY2F0aW9uLlBvc3RhbENvZGUgPSAgcGxhbnQuUGxhbnRMb2NhdGlvbi5Qb3N0YWxDb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQbGFudC5QbGFudExvY2F0aW9uLkJ1aWxkaW5nTnVtYmVyID0gIHBsYW50LlBsYW50TG9jYXRpb24uQnVpbGRpbmdOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBsYW50LlBsYW50TG9jYXRpb24uQ291bnRyeUNvZGUgPSAgJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuQmFzaWNEYXRhLk1lbWJlclN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQbGFudC5HZW9ncmFwaGljYWxDb29yZGluYXRlLkxvbmdpdHVkZSA9ICBwbGFudC5HZW9ncmFwaGljYWxDb29yZGluYXRlLkxvbmdpdHVkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGxhbnQuR2VvZ3JhcGhpY2FsQ29vcmRpbmF0ZS5MYXRpdHVkZSA9ICBwbGFudC5HZW9ncmFwaGljYWxDb29yZGluYXRlLkxhdGl0dWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQbGFudC5GYWNpbGl0eU5hbWUgPSAgcGxhbnQuRmFjaWxpdHlOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQbGFudC5Db21tZW50cyA9ICBwbGFudC5Db21tZW50cztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgndXBkYXRlRmlsdGVyJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xvYWQgTWFpbiBmb3JtIHZhbGlkYXRpb24gc3RhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0dGVkID0gJHNjb3BlLm1haW5Gb3JtU3VibWl0dGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zYXZlSW5zdGFuY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuY2xvc2UocGxhbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXN0UGxhbnQgPSAkc2NvcGUub3JpZ2luYWxQbGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQbGFudC5QbGFudE5hbWUgPSAgcGxhbnQuUGxhbnROYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBsYW50LkVQUlRSTmF0aW9uYWxJZCA9ICBwbGFudC5FUFJUUk5hdGlvbmFsSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGxhbnQuUGxhbnRMb2NhdGlvbi5TdHJlZXROYW1lID0gIHBsYW50LlBsYW50TG9jYXRpb24uU3RyZWV0TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbGFzdFBsYW50LlBsYW50TG9jYXRpb24uQWRkcmVzczIgPSAgcGxhbnQuUGxhbnRMb2NhdGlvbi5BZGRyZXNzMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQbGFudC5QbGFudExvY2F0aW9uLkNpdHkgPSAgcGxhbnQuUGxhbnRMb2NhdGlvbi5DaXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBsYW50LlBsYW50TG9jYXRpb24uUmVnaW9uID0gIHBsYW50LlBsYW50TG9jYXRpb24uUmVnaW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBsYW50LlBsYW50TG9jYXRpb24uQnVpbGRpbmdOdW1iZXIgPSAgcGxhbnQuUGxhbnRMb2NhdGlvbi5CdWlsZGluZ051bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQbGFudC5QbGFudExvY2F0aW9uLlBvc3RhbENvZGUgPSAgcGxhbnQuUGxhbnRMb2NhdGlvbi5Qb3N0YWxDb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBsYW50LlBsYW50TG9jYXRpb24uQ291bnRyeUNvZGUgPSAkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5CYXNpY0RhdGEuTWVtYmVyU3RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGxhbnQuR2VvZ3JhcGhpY2FsQ29vcmRpbmF0ZS5Mb25naXR1ZGUgPSAgcGxhbnQuR2VvZ3JhcGhpY2FsQ29vcmRpbmF0ZS5Mb25naXR1ZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGxhbnQuR2VvZ3JhcGhpY2FsQ29vcmRpbmF0ZS5MYXRpdHVkZSA9ICBwbGFudC5HZW9ncmFwaGljYWxDb29yZGluYXRlLkxhdGl0dWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBsYW50LkZhY2lsaXR5TmFtZSA9ICBwbGFudC5GYWNpbGl0eU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGxhbnQuQ29tbWVudHMgPSAgcGxhbnQuQ29tbWVudHM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgndXBkYXRlRmlsdGVyJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9hZCBNYWluIGZvcm0gdmFsaWRhdGlvbiBzdGFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdHRlZCA9ICRzY29wZS5tYWluRm9ybVN1Ym1pdHRlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZUluc3RhbmNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZShwbGFudCk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdHRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICBhbGVydChcIlBsZWFzZSBmaWxsIGluIGFsbCBtYW5kYXRvcnkgZmllbGRzIVwiKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgYWxlcnQoXCJQbGVhc2UgZmlsbCBpbiBhbGwgbWFuZGF0b3J5IGZpZWxkcyFcIik7XG4gICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5zYXZlQW5kQWRkID0gIGZ1bmN0aW9uKHBsYW50KXtcbiAgICAgICAgICAgICRzY29wZS5vayhwbGFudCk7XG4gICAgICAgICAgICBzYXZlSW5zdGFuY2UoKTtcbiAgICAgICAgfVxuICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy9sb2FkIE1haW4gZm9ybSB2YWxpZGF0aW9uIHN0YWdlXG4gICAgICAgICAgICAkc2NvcGUuc3VibWl0dGVkID0gJHNjb3BlLm1haW5Gb3JtU3VibWl0dGVkO1xuICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgYXBwLmNvbnRyb2xsZXIoJ1BsYW50RGV0YWlsc01vZGFsSW5zdGFuY2VDdHJsJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICRmaWx0ZXIsICRzY29wZSwgJG1vZGFsSW5zdGFuY2UsIHBsYW50KSB7XG4gICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uIChwbGFudCkge1xuICAgICAgICAgICAgaWYgKCEkc2NvcGUubW9kYWxQbGFudERldGFpbHMuJGludmFsaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFBsYW50ID0gJHNjb3BlLm9yaWdpbmFsUGxhbnQ7XG4gICAgICAgICAgICAgICAgbGFzdFBsYW50LlBsYW50RGV0YWlscy5NV3RoID0gIHBsYW50LlBsYW50RGV0YWlscy5NV3RoO1xuICAgICAgICAgICAgICAgIGxhc3RQbGFudC5QbGFudERldGFpbHMuRGF0ZU9mU3RhcnRPZk9wZXJhdGlvbiA9ICBwbGFudC5QbGFudERldGFpbHMuRGF0ZU9mU3RhcnRPZk9wZXJhdGlvbjtcbiAgICAgICAgICAgICAgICBsYXN0UGxhbnQuUGxhbnREZXRhaWxzLlJlZmluZXJpZXMgPSAgJGZpbHRlcignbG93ZXJjYXNlJykocGxhbnQuUGxhbnREZXRhaWxzLlJlZmluZXJpZXMpO1xuICAgICAgICAgICAgICAgIGxhc3RQbGFudC5QbGFudERldGFpbHMuT3RoZXJTZWN0b3IgPSAgcGxhbnQuUGxhbnREZXRhaWxzLk90aGVyU2VjdG9yO1xuICAgICAgICAgICAgICAgIGxhc3RQbGFudC5QbGFudERldGFpbHMuT3BlcmF0aW5nSG91cnMgPSAgcGxhbnQuUGxhbnREZXRhaWxzLk9wZXJhdGluZ0hvdXJzOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsYXN0UGxhbnQuUGxhbnREZXRhaWxzLkNvbW1lbnRzID0gIHBsYW50LlBsYW50RGV0YWlscy5Db21tZW50cztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsYXN0UGxhbnQuUGxhbnREZXRhaWxzLlR5cGVPZkNvbWJ1c3Rpb25QbGFudCA9IHBsYW50LlBsYW50RGV0YWlscy5UeXBlT2ZDb21idXN0aW9uUGxhbnQ7XG4gICAgICAgICAgICAgICAgbGFzdFBsYW50LlBsYW50RGV0YWlscy5UeXBlT2ZDb21idXN0aW9uUGxhbnRGdXJ0aGVyRGV0YWlscyA9IHBsYW50LlBsYW50RGV0YWlscy5UeXBlT2ZDb21idXN0aW9uUGxhbnRGdXJ0aGVyRGV0YWlscztcbiAgICAgICAgICAgICAgICBsYXN0UGxhbnQuUGxhbnREZXRhaWxzLkRlcm9nYXRpb24gPSBwbGFudC5QbGFudERldGFpbHMuRGVyb2dhdGlvbjtcbiAgICBcblxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgndXBkYXRlRmlsdGVyJyk7XG5cbiAgICAgICAgICAgICAgICAvL2xvYWQgTWFpbiBmb3JtIHZhbGlkYXRpb24gc3RhZ2VcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0dGVkID0gJHNjb3BlLm1haW5Gb3JtU3VibWl0dGVkO1xuICAgICAgICAgICAgICAgICRzY29wZS5tb2RhbFBsYW50RGV0YWlscy4kc2V0UHJpc3RpbmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuY2xvc2UocGxhbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBhbGVydChcIlBsZWFzZSBmaWxsIGluIGFsbCBtYW5kYXRvcnkgZmllbGRzISBcIik7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vbG9hZCBNYWluIGZvcm0gdmFsaWRhdGlvbiBzdGFnZVxuICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdHRlZCA9ICRzY29wZS5tYWluRm9ybVN1Ym1pdHRlZDtcbiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuICAgICAgICB9O1xuICAgIH0pO1xuXG4gICAgYXBwLmNvbnRyb2xsZXIoJ1RvdGFsRW1pc3Npb25zVG9BaXJNb2RhbEluc3RhbmNlQ3RybCcsIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkc2NvcGUsICRtb2RhbEluc3RhbmNlLCBwbGFudCkge1xuXG4gICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uIChwbGFudCkge1xuICAgICAgICAgICAgaWYgKCEkc2NvcGUubW9kYWxUb3RhbEVtaXNzaW9uc1RvQWlyLiRpbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RQbGFudCA9ICRzY29wZS5vcmlnaW5hbFBsYW50O1xuXG4gICAgICAgICAgICAgICAgbGFzdFBsYW50LkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5Ub3RhbEVtaXNzaW9uc1RvQWlyLlNPMiA9ICBwbGFudC5FbmVyZ3lJbnB1dEFuZFRvdGFsRW1pc3Npb25zVG9BaXIuVG90YWxFbWlzc2lvbnNUb0Fpci5TTzI7XG4gICAgICAgICAgICAgICAgbGFzdFBsYW50LkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5Ub3RhbEVtaXNzaW9uc1RvQWlyLk5PeCA9ICBwbGFudC5FbmVyZ3lJbnB1dEFuZFRvdGFsRW1pc3Npb25zVG9BaXIuVG90YWxFbWlzc2lvbnNUb0Fpci5OT3g7XG4gICAgICAgICAgICAgICAgbGFzdFBsYW50LkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5Ub3RhbEVtaXNzaW9uc1RvQWlyLlRTUCA9ICBwbGFudC5FbmVyZ3lJbnB1dEFuZFRvdGFsRW1pc3Npb25zVG9BaXIuVG90YWxFbWlzc2lvbnNUb0Fpci5UU1A7XG5cbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3VwZGF0ZUZpbHRlcicpO1xuXG4gICAgICAgICAgICAgICAgLy9sb2FkIE1haW4gZm9ybSB2YWxpZGF0aW9uIHN0YWdlXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdHRlZCA9ICRzY29wZS5tYWluRm9ybVN1Ym1pdHRlZDtcbiAgICAgICAgICAgICAgICAkc2NvcGUubW9kYWxUb3RhbEVtaXNzaW9uc1RvQWlyLiRzZXRQcmlzdGluZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZShwbGFudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICRzY29wZS5zdWJtaXR0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiUGxlYXNlIGZpbGwgaW4gYWxsIG1hbmRhdG9yeSBmaWVsZHMhIFwiKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy9sb2FkIE1haW4gZm9ybSB2YWxpZGF0aW9uIHN0YWdlXG4gICAgICAgICAgICAkc2NvcGUuc3VibWl0dGVkID0gJHNjb3BlLm1haW5Gb3JtU3VibWl0dGVkO1xuICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG4gICAgICAgIH07XG4gICAgfSk7XG5hcHAuY29udHJvbGxlcignRW5lcmd5SW5wdXRNb2RhbEluc3RhbmNlQ3RybCcsIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkc2NvcGUsICRtb2RhbEluc3RhbmNlLCBwbGFudCkge1xuXG4gICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uIChwbGFudCkge1xuICAgICAgICAgICAgaWYgKCEkc2NvcGUubW9kYWxFbmVyZ3lJbnB1dC4kaW52YWxpZCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0UGxhbnQgPSAkc2NvcGUub3JpZ2luYWxQbGFudDtcblxuICAgICAgICAgICAgICAgIGxhc3RQbGFudC5FbmVyZ3lJbnB1dEFuZFRvdGFsRW1pc3Npb25zVG9BaXIuRW5lcmd5SW5wdXQuQmlvbWFzcyA9ICBwbGFudC5FbmVyZ3lJbnB1dEFuZFRvdGFsRW1pc3Npb25zVG9BaXIuRW5lcmd5SW5wdXQuQmlvbWFzcztcbiAgICAgICAgICAgICAgICBsYXN0UGxhbnQuRW5lcmd5SW5wdXRBbmRUb3RhbEVtaXNzaW9uc1RvQWlyLkVuZXJneUlucHV0LkJpb21hc3MgPSAgcGxhbnQuRW5lcmd5SW5wdXRBbmRUb3RhbEVtaXNzaW9uc1RvQWlyLkVuZXJneUlucHV0LkJpb21hc3M7ICBcbiAgICAgICAgICAgICAgICBsYXN0UGxhbnQuRW5lcmd5SW5wdXRBbmRUb3RhbEVtaXNzaW9uc1RvQWlyLkVuZXJneUlucHV0LkNvYWwgPSAgcGxhbnQuRW5lcmd5SW5wdXRBbmRUb3RhbEVtaXNzaW9uc1RvQWlyLkVuZXJneUlucHV0LkNvYWw7ICAgICAgXG4gICAgICAgICAgICAgICAgbGFzdFBsYW50LkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5FbmVyZ3lJbnB1dC5MaWduaXRlID0gIHBsYW50LkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5FbmVyZ3lJbnB1dC5MaWduaXRlOyAgICAgIFxuICAgICAgICAgICAgICAgIGxhc3RQbGFudC5FbmVyZ3lJbnB1dEFuZFRvdGFsRW1pc3Npb25zVG9BaXIuRW5lcmd5SW5wdXQuUGVhdCA9ICBwbGFudC5FbmVyZ3lJbnB1dEFuZFRvdGFsRW1pc3Npb25zVG9BaXIuRW5lcmd5SW5wdXQuUGVhdDsgICAgICBcbiAgICAgICAgICAgICAgICBsYXN0UGxhbnQuRW5lcmd5SW5wdXRBbmRUb3RhbEVtaXNzaW9uc1RvQWlyLkVuZXJneUlucHV0Lk90aGVyU29saWRGdWVscy5DYXRlZ29yeSA9ICBwbGFudC5FbmVyZ3lJbnB1dEFuZFRvdGFsRW1pc3Npb25zVG9BaXIuRW5lcmd5SW5wdXQuT3RoZXJTb2xpZEZ1ZWxzLkNhdGVnb3J5O1xuICAgICAgICAgICAgICAgIGxhc3RQbGFudC5FbmVyZ3lJbnB1dEFuZFRvdGFsRW1pc3Npb25zVG9BaXIuRW5lcmd5SW5wdXQuT3RoZXJTb2xpZEZ1ZWxzLlZhbHVlID0gIHBsYW50LkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5FbmVyZ3lJbnB1dC5PdGhlclNvbGlkRnVlbHMuVmFsdWU7XG4gICAgICAgICAgICAgICAgbGFzdFBsYW50LkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5FbmVyZ3lJbnB1dC5MaXF1aWRGdWVscyA9ICBwbGFudC5FbmVyZ3lJbnB1dEFuZFRvdGFsRW1pc3Npb25zVG9BaXIuRW5lcmd5SW5wdXQuTGlxdWlkRnVlbHM7XG4gICAgICAgICAgICAgICAgbGFzdFBsYW50LkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5FbmVyZ3lJbnB1dC5OYXR1cmFsR2FzID0gIHBsYW50LkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5FbmVyZ3lJbnB1dC5OYXR1cmFsR2FzO1xuICAgICAgICAgICAgICAgIGxhc3RQbGFudC5FbmVyZ3lJbnB1dEFuZFRvdGFsRW1pc3Npb25zVG9BaXIuRW5lcmd5SW5wdXQuT3RoZXJHYXNlcy5DYXRlZ29yeSA9ICBwbGFudC5FbmVyZ3lJbnB1dEFuZFRvdGFsRW1pc3Npb25zVG9BaXIuRW5lcmd5SW5wdXQuT3RoZXJHYXNlcy5DYXRlZ29yeTtcbiAgICAgICAgICAgICAgICBsYXN0UGxhbnQuRW5lcmd5SW5wdXRBbmRUb3RhbEVtaXNzaW9uc1RvQWlyLkVuZXJneUlucHV0Lk90aGVyR2FzZXMuVmFsdWUgPSAgcGxhbnQuRW5lcmd5SW5wdXRBbmRUb3RhbEVtaXNzaW9uc1RvQWlyLkVuZXJneUlucHV0Lk90aGVyR2FzZXMuVmFsdWU7XG5cbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3VwZGF0ZUZpbHRlcicpO1xuXG4gICAgICAgICAgICAgICAgLy9sb2FkIE1haW4gZm9ybSB2YWxpZGF0aW9uIHN0YWdlXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdHRlZCA9ICRzY29wZS5tYWluRm9ybVN1Ym1pdHRlZDtcbiAgICAgICAgICAgICAgICAkc2NvcGUubW9kYWxFbmVyZ3lJbnB1dC4kc2V0UHJpc3RpbmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuY2xvc2UocGxhbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBhbGVydChcIlBsZWFzZSBmaWxsIGluIGFsbCBtYW5kYXRvcnkgZmllbGRzISBcIik7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vbG9hZCBNYWluIGZvcm0gdmFsaWRhdGlvbiBzdGFnZVxuICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdHRlZCA9ICRzY29wZS5tYWluRm9ybVN1Ym1pdHRlZDtcbiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuICAgICAgICB9O1xuICAgIH0pO1xuXG4gICAgXG4gICAgICAgICAgICBhcHAuY29udHJvbGxlcignRGVzdWxwaHVyaXNhdGlvbk1vZGFsSW5zdGFuY2VDdHJsJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICRzY29wZSwgJG1vZGFsSW5zdGFuY2UsIHBsYW50KSB7XG5cbiAgICAgICAgICAgICAgICAvL1dlIGNoZWNrIGlmIE1vbnRoIGlzIGFuIGFycmF5IGFuZCBpZiBub3QgaW5pdGlhbGl6ZSBpdCBhcyBhbiBhcnJheSBpbiBvcmRlciB0byB0aGVuIGZpbGwgaXQgYmVsb3cuXG4gICAgICAgICAgICAgICAgaWYocGxhbnQuRGVzdWxwaHVyaXNhdGlvbi5Nb250aHM9PW51bGwgfHwgcGxhbnQuRGVzdWxwaHVyaXNhdGlvbi5Nb250aHMuTW9udGg9PW51bGwgIHx8IHBsYW50LkRlc3VscGh1cmlzYXRpb24uTW9udGhzLk1vbnRoLmNvbnN0cnVjdG9yID09PSBPYmplY3QgfHwgcGxhbnQuRGVzdWxwaHVyaXNhdGlvbi5Nb250aHMuTW9udGgubGVuZ3RoPT0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYW50LkRlc3VscGh1cmlzYXRpb24uTW9udGhzLk1vbnRoPVtdO1xuICAgICAgICAgICAgICAgIC8vSWYgTW9udGhzIEVtcHR5ICwgaW5pdGlhbGl6ZSB0aGVtIGJlZm9yZSB0aGUgbW9kYWxcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmNvZGVMaXN0Lk1vbnRobHlEZXN1bHBodXJpc2F0aW9uLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGxhbnQuRGVzdWxwaHVyaXNhdGlvbi5Nb250aHMuTW9udGhba2V5XT09bnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgcGxhbnQuRGVzdWxwaHVyaXNhdGlvbi5Nb250aHMuTW9udGgucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTW9udGhWYWx1ZVwiOiB2YWx1ZS5Nb250aFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkRlc3VscGh1cmlzYXRpb25SYXRlXCI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiU3VscGh1ckNvbnRlbnRcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUZWNobmljYWxKdXN0aWZpY2F0aW9uXCI6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uIChwbGFudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISRzY29wZS5tb2RhbERlc3VscGh1cmlzYXRpb24uJGludmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXN0UGxhbnQgPSAkc2NvcGUub3JpZ2luYWxQbGFudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuY29kZUxpc3QuTW9udGhseURlc3VscGh1cmlzYXRpb24sIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAvKiogICAgICAgcGxhbnQuRGVzdWxwaHVyaXNhdGlvbi5Nb250aHMuTW9udGgucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTW9udGhWYWx1ZVwiOiB2YWx1ZS5Nb250aFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkRlc3VscGh1cmlzYXRpb25SYXRlXCI6IHZhbHVlLkRlc3VscGh1cmlzYXRpb25SYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlN1bHBodXJDb250ZW50XCI6IHZhbHVlLlN1bHBodXJDb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRlY2huaWNhbEp1c3RpZmljYXRpb25cIjogdmFsdWUuVGVjaG5pY2FsSnVzdGlmaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgKiovXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0UGxhbnQuRGVzdWxwaHVyaXNhdGlvbiA9IHBsYW50LkRlc3VscGh1cmlzYXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3VwZGF0ZUZpbHRlcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2FkIE1haW4gZm9ybSB2YWxpZGF0aW9uIHN0YWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0dGVkID0gJHNjb3BlLm1haW5Gb3JtU3VibWl0dGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1vZGFsRGVzdWxwaHVyaXNhdGlvbi4kc2V0UHJpc3RpbmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZShwbGFudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdWJtaXR0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJQbGVhc2UgZmlsbCBpbiBhbGwgbWFuZGF0b3J5IGZpZWxkcyEgXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vbG9hZCBNYWluIGZvcm0gdmFsaWRhdGlvbiBzdGFnZVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0dGVkID0gJHNjb3BlLm1haW5Gb3JtU3VibWl0dGVkO1xuICAgICAgICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGFwcC5jb250cm9sbGVyKCdVc2VmdWxIZWF0TW9kYWxJbnN0YW5jZUN0cmwnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHNjb3BlLCAkbW9kYWxJbnN0YW5jZSwgcGxhbnQpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uIChwbGFudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLm1vZGFsVXNlZnVsSGVhdC4kaW52YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdFBsYW50ID0gJHNjb3BlLm9yaWdpbmFsUGxhbnQ7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQbGFudC5Vc2VmdWxIZWF0LlVzZWZ1bEhlYXRQcm9wb3J0aW9uID0gIHBsYW50LlVzZWZ1bEhlYXQuVXNlZnVsSGVhdFByb3BvcnRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd1cGRhdGVGaWx0ZXInKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2FkIE1haW4gZm9ybSB2YWxpZGF0aW9uIHN0YWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdWJtaXR0ZWQgPSAkc2NvcGUubWFpbkZvcm1TdWJtaXR0ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tb2RhbFVzZWZ1bEhlYXQuJHNldFByaXN0aW5lKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZShwbGFudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdWJtaXR0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIlBsZWFzZSBmaWxsIGluIGFsbCBtYW5kYXRvcnkgZmllbGRzISBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xvYWQgTWFpbiBmb3JtIHZhbGlkYXRpb24gc3RhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0dGVkID0gJHNjb3BlLm1haW5Gb3JtU3VibWl0dGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgXG4gICAgYXBwLmZpbHRlcigndHJ1ZV9mYWxzZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odGV4dCwgbGVuZ3RoLCBlbmQpIHtcbiAgICAgICAgICAgIGlmICh0ZXh0ICYmICh0ZXh0ID09PSB0cnVlIHx8IHRleHQgPT09ICdUUlVFJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1llcyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJ05vJztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgYXBwLmNvbnRyb2xsZXIoXCJQYWdpbmF0aW9uQ3RybFwiLCBmdW5jdGlvbigkc2NvcGUsICRmaWx0ZXIsICRyb290U2NvcGUsICRtb2RhbCkge1xuXG5cblxuICAgICAgICB2YXIgb3JkZXJCeSA9ICRmaWx0ZXIoJ29yZGVyQnknKTtcbiAgICAgICAgLypcbiAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0FycmF5KCRzY29wZS5pbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkxpc3RPZlBsYW50cykpe1xuICAgICAgICAgICAgICAgICRzY29wZS5pbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkxpc3RPZlBsYW50cyA9IFskc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5MaXN0T2ZQbGFudHNdO1xuICAgICAgICAgICAgfVxuICAgICAgICAqL1xuXG5cbiAgICAgICAgJHNjb3BlLml0ZW1zUGVyUGFnZSA9IDUwO1xuICAgICAgICAkc2NvcGUuY3VycmVudFBhZ2UgPSAwO1xuICAgICAgICAkc2NvcGUubWF4UGFnZXMgPSAxNTtcbiAgICAgICAgJHNjb3BlLnNlYXJjaFRleHQgPSBcIlwiO1xuICAgICAgICAkc2NvcGUuZmlsdGVyZWRJdGVtcyA9IFtdO1xuICAgICAgICAkc2NvcGUucHJlZGljYXRlQXR0cmlidXRlID0gJ1BsYW50SWQnO1xuICAgICAgICAkc2NvcGUuc2hvd01lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLnByZWRpY2F0ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtWyRzY29wZS5wcmVkaWNhdGVBdHRyaWJ1dGVdO1xuICAgICAgICB9XG4gICAgICAgICRzY29wZS5yZXZlcnNlID0gZmFsc2U7XG5cblxuXG4gICAgICAgICRzY29wZS5vcmRlciA9IGZ1bmN0aW9uKGF0dHJpYnV0ZSwgb3JkZXIpIHtcbiAgICAgICAgICAgICRzY29wZS5wcmVkaWNhdGVBdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7XG4gICAgICAgICAgICAkc2NvcGUucmV2ZXJzZSA9IG9yZGVyO1xuICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkSXRlbXMgPSBvcmRlckJ5KCRzY29wZS5maWx0ZXJlZEl0ZW1zLCAkc2NvcGUucHJlZGljYXRlLCAkc2NvcGUucmV2ZXJzZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiRvbignaW5zdGFuY2VSZWFkeScsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XG5cbiAgICAgICAgICAgICRzY29wZS5maWx0ZXJlZEl0ZW1zID0gJHNjb3BlLmdldEZpbHRlcmVkSXRlbXMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLiRvbigndXBkYXRlRmlsdGVyJywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcblxuICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkSXRlbXMgPSAkc2NvcGUuZ2V0RmlsdGVyZWRJdGVtcygpO1xuICAgICAgICAgICAgJHNjb3BlLm9yZGVyKCRzY29wZS5wcmVkaWNhdGVBdHRyaWJ1dGUsICRzY29wZS5yZXZlcnNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLnJhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoISRzY29wZS5pbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJhbmdlU2l6ZSA9ICgkc2NvcGUucGFnZUNvdW50KCkgPj0gJHNjb3BlLk1heFBhZ2VzKT8gJHNjb3BlLk1heFBhZ2VzIDogJHNjb3BlLnBhZ2VDb3VudCgpKzE7XG4gICAgICAgICAgICB2YXIgcmV0ID0gW107XG4gICAgICAgICAgICB2YXIgc3RhcnQ7XG5cbiAgICAgICAgICAgIHN0YXJ0ID0gJHNjb3BlLmN1cnJlbnRQYWdlO1xuICAgICAgICAgICAgaWYgKCBzdGFydCA+ICRzY29wZS5wYWdlQ291bnQoKS1yYW5nZVNpemUgKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSAkc2NvcGUucGFnZUNvdW50KCktcmFuZ2VTaXplKzE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGk9c3RhcnQ7IGk8c3RhcnQrcmFuZ2VTaXplOyBpKyspIHtcbiAgICAgICAgICAgICAgICByZXQucHVzaChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnByZXZQYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLmN1cnJlbnRQYWdlID4gMCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5jdXJyZW50UGFnZS0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5wcmV2UGFnZURpc2FibGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLmN1cnJlbnRQYWdlID09PSAwID8gXCJkaXNhYmxlZFwiIDogXCJcIjtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZ2V0RmlsdGVyZWRJdGVtcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCEkc2NvcGUuaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJGZpbHRlcignZmlsdGVyJykoJHNjb3BlLmluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUuTGlzdE9mUGxhbnRzLlBsYW50LCAkc2NvcGUuc2VhcmNoVGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUucmVmcmVzaEl0ZW1zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLy8vY29uc29sZS5sb2coXCJGaWx0ZXIgY2hhbmdlZC4gR2V0dGluZyBuZXcgaXRlbXMuLi5cIik7XG4gICAgICAgICAgICAkc2NvcGUuZmlsdGVyZWRJdGVtcyA9ICRzY29wZS5nZXRGaWx0ZXJlZEl0ZW1zKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnc2VhcmNoVGV4dCcsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgLy8vL2NvbnNvbGUubG9nKFwiRmlsdGVyIGNoYW5nZWQuIEdldHRpbmcgbmV3IGl0ZW1zLi4uXCIpO1xuICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkSXRlbXMgPSAkc2NvcGUuZ2V0RmlsdGVyZWRJdGVtcygpO1xuICAgICAgICAgICAgaWYobmV3VmFsdWUgIT0gb2xkVmFsdWUpe1xuICAgICAgICAgICAgICAgICRzY29wZS5zZXRQYWdlKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUucGFnZUNvdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoISRzY29wZS5pbnN0YW5jZSB8fCAhJHNjb3BlLmZpbHRlcmVkSXRlbXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpdGVtcyA9ICRzY29wZS5maWx0ZXJlZEl0ZW1zO1xuICAgICAgICAgICAgdmFyIGNvdW50ID0gTWF0aC5jZWlsKGl0ZW1zLmxlbmd0aC8kc2NvcGUuaXRlbXNQZXJQYWdlKS0xO1xuICAgICAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5uZXh0UGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCRzY29wZS5jdXJyZW50UGFnZSA8ICRzY29wZS5wYWdlQ291bnQoKSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5jdXJyZW50UGFnZSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5uZXh0UGFnZURpc2FibGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLmN1cnJlbnRQYWdlID09PSAkc2NvcGUucGFnZUNvdW50KCkgPyBcImRpc2FibGVkXCIgOiBcIlwiO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zZXRQYWdlID0gZnVuY3Rpb24obikge1xuICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRQYWdlID0gbjtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmRlbGV0ZVNlbGVjdGVkID0gZnVuY3Rpb24oc2VsZWN0ZWRJdGVtcyl7XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWxlY3RlZEl0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYoc2VsZWN0ZWRJdGVtc1tpXS5EZWxldGUgIT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoc2VsZWN0ZWRJdGVtc1tpXS5EZWxldGUgPT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGNvdW50Tm9uRW1wdHlQcm9wZXJ0aWVzKHNlbGVjdGVkSXRlbXNbaV0pID4gMCkgJiYgJHNjb3BlLnNob3dNZXNzYWdlID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoZSBzZWxlY3RlZCByb3dzPycpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dNZXNzYWdlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dNZXNzYWdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZSgkc2NvcGUuaW5zdGFuY2UuTENQUXVlc3Rpb25uYWlyZS5MaXN0T2ZQbGFudHMuUGxhbnQsIHNlbGVjdGVkSXRlbXNbaV0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkc2NvcGUuc2hvd01lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgndXBkYXRlRmlsdGVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgJHNjb3BlLmVkaXQgPSBmdW5jdGlvbiAocGxhbnQsIG1vZGFsUGFnZUlkKSB7XG4gICAgICAgICAgICAvLyRyb290U2NvcGUuJGJyb2FkY2FzdCgnZWRpdFBsYW50JywgcGxhbnQpO1xuICAgICAgICAgICAgJHJvb3RTY29wZS5zZWxlY3RlZFBsYW50ID0gcGxhbnQ7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLm1vZGFsUGFnZUNhc2VJZCA9IG1vZGFsUGFnZUlkO1xuLypcbiAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnTGlzdE9mUGxhbnRNb2RhbENvbnRlbnQuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0xpc3RPZlBsYW50c01vZGFsSW5zdGFuY2VDdHJsJyxcbiAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxuICAgICAgICAgICAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdhcHAtbW9kYWwtd2luZG93JyxcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgIHBsYW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIHBsYW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAqL1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vb3JkZXJPYmplY3RCeSBwYWdpbmF0aW9uXG4gICAgICAgIC8vJHNjb3BlLnBsYW50T2JqZWN0cyA9ICRzY29wZS5pbnN0YW5jZS5MQ1BRdWVzdGlvbm5haXJlLkxpc3RPZlBsYW50cy5QbGFudDtcbiAgICAgICAgJHNjb3BlLmNyaXRlcmlhID0gJ1BsYW50TmFtZSc7XG4gICAgICAgICRzY29wZS5kaXJlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLnNldENyaXRlcmlhID0gZnVuY3Rpb24oY3JpdGVyaWEpIHtcbiAgICAgICAgICAgIGlmICgkc2NvcGUuY3JpdGVyaWEgPT09IGNyaXRlcmlhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmRpcmVjdGlvbiA9ICEkc2NvcGUuZGlyZWN0aW9uO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3JpdGVyaWEgPSBjcml0ZXJpYTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGlyZWN0aW9uICA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cblxuICAgIC8vIG5ldyBlbmRcblxuICAgIGZ1bmN0aW9uIGdldFdlYlFVcmwocGF0aCl7XG4gICAgICAgIHZhciB1cmwgPSBiYXNlVXJpICsgcGF0aDtcbiAgICAgICAgdXJsICs9IFwiP2ZpbGVJZD1cIiArIGZpbGVJZDtcbiAgICAgICAgaWYgKHNlc3Npb25JZCAmJiBzZXNzaW9uSWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdXJsICs9IFwiJnNlc3Npb25pZD1cIiArIHNlc3Npb25JZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgICAvLyBoZWxwZXIgZnVuY3Rpb24gZm9yIGdldHRpbmcgcXVlcnkgc3RyaW5nIHBhcmFtZXRlciB2YWx1ZXMuIEFuZ3VsYXJKUyBzb2x1dGlvbiAkbG9jYXRpb24uc2VhcmNoKCkgZG9lc24ndCB3b3JrIGluIElFOC5cbiAgICBmdW5jdGlvbiBnZXRQYXJhbWV0ZXJCeU5hbWUobmFtZSkge1xuICAgICAgICB2YXIgc2VhcmNoQXJyID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zcGxpdCgnPycpO1xuICAgICAgICB2YXIgc2VhcmNoID0gJz8nICsgc2VhcmNoQXJyW3NlYXJjaEFyci5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIG1hdGNoID0gbmV3IFJlZ0V4cCgnWz8mXScgKyBuYW1lICsgJz0oW14mXSopJykuZXhlYyhzZWFyY2gpO1xuICAgICAgICByZXR1cm4gbWF0Y2ggJiYgZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzFdLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0SGFuZHNvbnRhYmxlQ29sSGVhZGVycyhmb3JtKSB7XG4gICAgICAgIGlmIChmb3JtID09ICdMaXN0T2ZQbGFudHMnKXtcbiAgICAgICAgICAgIHJldHVybiBbXCJQbGFudCBOYW1lXCIsIFwiUGxhbnQgSWRcIiwgXCJFLVBSVFIgbmF0aW9uYWwgSURcIiwgXCJTdHJlZXQgTmFtZSBcIiwgXCJDaXR5XCIsIFwiUmVnaW9uXCIsIFwiUG9zdGFsIGNvZGVcIixcIkNvdW50cnkgQ29kZVwiLFwiQnVpbGRpbmcgTnVtYmVyXCIsIFwiTG9uZ2l0dWRlXCIsIFwiTGF0aXR1ZGVcIiwgXCJGYWNpbGl0eSBuYW1lXCIsIFwiQ29tbWVudHNcIl1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmb3JtID09ICdQbGFudERldGFpbHMnKXtcbiAgICAgICAgICAgIHJldHVybiBbXCJQbGFudCBuYW1lXCIsIFwiUGxhbnQgSURcIiwgXCJNV3RoXCIsXCJUeXBlIG9mIENvbWJ1c3Rpb24gUGxhbnRcIiwgXCJEYXRlIG9mIHN0YXJ0IG9mIG9wZXJhdGlvblwiLCBcIlJlZmluZXJpZXNcIiwgIFwiT3RoZXIgU2VjdG9yXCIsIFwiT3BlcmF0aW5nIEhvdXJzXCIsIFwiRGVyb2dhdGlvblwiLCBcIkNvbW1lbnRzXCJdXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZm9ybSA9PSAnRW5lcmd5SW5wdXQnKXtcbiAgICAgICAgICAgIHJldHVybiBbXCJQbGFudCBuYW1lXCIsIFwiUGxhbnQgSURcIiwgXCJCaW9tYXNzIChUSilcIixcIkNvYWxcIixcIkxpZ25pdGVcIixcIlBlYXRcIiwgXCJPdGhlciBzb2xpZCBmdWVscyAoVEopIENhdGVnb3J5XCIsXCJPdGhlciBzb2xpZCBmdWVscyAoVEopIFZhbHVlXCIgLCBcIkxpcXVpZCBmdWVscyAoVEopXCIsIFwiTmF0dXJhbCBnYXMgKFRKKVwiLCBcIk90aGVyIGdhc2VzIChUSikgQ2F0ZWdvcnlcIixcIk90aGVyIGdhc2VzIChUSikgVmFsdWVcIiwgXCJTTzIgKHQpXCIsIFwiTk94ICh0KVwiLCBcIkR1c3QgKHQpXCJdXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZm9ybSA9PSAnVG90YWxFbWlzc2lvbnNUb0Fpcicpe1xuICAgICAgICAgICAgcmV0dXJuIFtcIlBsYW50IG5hbWVcIiwgXCJQbGFudCBJRFwiLCBcIlNPMiAodClcIiwgXCJOT3ggKHQpXCIsIFwiVFNQICh0KVwiXVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZvcm0gPT0gJ0Rlc3VscGh1cmlzYXRpb24nKXtcbiAgICAgICAgICAgIHJldHVybiBbXCJEZXN1bHBodXJpc2F0aW9uIFJhdGVcIiwgXCJTdWxwaHVyIENvbnRlbnRcIiwgXCJUZWNobmljYWwgSnVzdGlmaWNhdGlvblwiLCBcIk1vbnRoXCJdXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZm9ybSA9PSAnVXNlZnVsSGVhdCcpe1xuICAgICAgICAgICAgcmV0dXJuIFtcIlBsYW50IG5hbWVcIiwgXCJQbGFudCBJRFwiLFwiVXNlZnVsSGVhdCBQcm9wb3J0aW9uXCJdXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvL2RlZmF1bHQgaXMgdGhlIGZpcnN0IHRhYmxlXG4gICAgICAgICAgICByZXR1cm4gW1wiUGxhbnQgTmFtZVwiLCBcIlBsYW50IElkXCIsIFwiRS1QUlRSIG5hdGlvbmFsIElEXCIsIFwiQWRkcmVzcyAxXCIsIFwiQWRkcmVzcyAyXCIsIFwiQ2l0eVwiLCBcIlJlZ2lvblwiLCBcIlBvc3RhbCBjb2RlXCIsIFwiTG9uZ2l0dWRlXCIsIFwiTGF0aXR1ZGVcIiwgXCJGYWNpbGl0eSBuYW1lXCJdXG4gICAgICAgIH1cbiAgICB9XG5cdGFwcC5kaXJlY3RpdmUoJ3VpSGFuZHNvbnRhYmxlJywgZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4ge1xuXHRcdHJlc3RyaWN0OiAnQScsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGRhdGE6ICc9JyxcbiAgICAgICAgICAgIHN0YXR1czogJz0nLFxuICAgICAgICAgICAgZm9ybW5hbWU6ICc9J1xuXHRcdH0sXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW0sIGF0dHJzKSB7XG4gICAgICAgICAgICBzY29wZS4kd2F0Y2goJ3N0YXR1cycsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd3YXRjaDonICsgbmV3VmFsdWUgKyAnOyBmb3JtPScgKyBzY29wZS5mb3JtbmFtZSk7XG4gICAgICAgICAgICAgICAgaWYobmV3VmFsdWUgPT0gdHJ1ZSAmJiBhbmd1bGFyLmlzQXJyYXkoc2NvcGUuZGF0YSkpe1xuICAgICAgICAgICAgICAgICAgICBlbGVtLmhhbmRzb250YWJsZSgnbG9hZERhdGEnLCBzY29wZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coc2NvcGUuZm9ybW5hbWUpO1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBzY29wZS5kYXRhO1xuICAgICAgICAgICAgdmFyIGZvcm1uYW1lID0gc2NvcGUuZm9ybW5hbWU7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gZWxlbTtcblxuICAgICAgICAgICAgZWxlbS5oYW5kc29udGFibGUoe1xuXHRcdFx0ICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRNZW51OmZhbHNlLC8vIFsncm93X2Fib3ZlJywgJ3Jvd19iZWxvdycsICdyZW1vdmVfcm93J10sXG5cdFx0XHRcdHJvd0hlYWRlcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbHVtblNvcnRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHN0cmV0Y2hIOiAnYWxsJyxcbiAgICAgICAgICAgICAgICBmaXhlZENvbHVtbnNMZWZ0OiAyLFxuICAgICAgICAgICAgICAgIG1pblNwYXJlUm93czogMCwgLy8gZm9ybW5hbWUgPT09ICdMaXN0T2ZQbGFudHMnID8gMSA6IDAsXG4gICAgICAgICAgICAvLyAgICBtaW5Sb3dzOjAsXG4gICAgICAgICAgICAgICAgbWluU3BhcmVDb2xzOiAwLFxuICAgICAgICAgICAgICAgIC8vbWF4Um93czogZm9ybW5hbWUgPT09ICdMaXN0T2ZQbGFudHMnID8gMjAwIDogZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgLy9tYXhDb2xzOiBkYXRhLm51bWJlck9mQ29sdW1ucyxcbiAgICAgICAgICAgICAgICBjb2xIZWFkZXJzOiBnZXRIYW5kc29udGFibGVDb2xIZWFkZXJzKGZvcm1uYW1lKSxcbiAgICAgIC8qKiAgICAgICAgICBtb2RpZnlSb3c6IGZ1bmN0aW9uKHJvdyl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBodCA9IGNvbnRhaW5lci5oYW5kc29udGFibGUoJ2dldEluc3RhbmNlJyk7XG4gICAgICAgICAgICAgICAgIC8vICAgdmFyIHJvd3NOZWVkZWQgPSBkYXRhLmxlbmd0aCAtIGh0LmNvdW50RW1wdHlSb3dzKCk7XG4gICAgICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coJ3Jvd0luZGV4Oicrcm93KTtcbiAgICAgICAgICAgICAgIGlmKHJvdyE9MCl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5nZXREYXRhKHJvdyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicm93RGF0YVwiK2RhdGEpO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy8gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCByb3dzTmVlZGVkOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAvLyAgZWxlbS5oYW5kc29udGFibGUoJ2FsdGVyJywgJ2luc2VydF9yb3cnKTtcbiAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICoqL1xuICAgICAgICAgICAgICAgIGNvbHVtbnM6XG4gICAgICAgICAgICAgICAgICAgICAgICAoZm9ybW5hbWUgPT09ICdMaXN0T2ZQbGFudHMnID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIlBsYW50TmFtZVwifSwge2RhdGE6IFwiUGxhbnRJZFwifSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGE6IFwiRVBSVFJOYXRpb25hbElkXCJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YTogXCJQbGFudExvY2F0aW9uLlN0cmVldE5hbWVcIn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGE6IFwiUGxhbnRMb2NhdGlvbi5DaXR5XCJ9LCB7ZGF0YTogXCJQbGFudExvY2F0aW9uLlJlZ2lvblwifSwge2RhdGE6IFwiUGxhbnRMb2NhdGlvbi5Qb3N0YWxDb2RlXCJ9LHtkYXRhOiBcIlBsYW50TG9jYXRpb24uQ291bnRyeUNvZGVcIn0se2RhdGE6IFwiUGxhbnRMb2NhdGlvbi5CdWlsZGluZ051bWJlclwifSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGE6IFwiR2VvZ3JhcGhpY2FsQ29vcmRpbmF0ZS5Mb25naXR1ZGVcIiwgdHlwZTogJ251bWVyaWMnLCBmb3JtYXQ6ICcwLlswMDAwMF0nfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIkdlb2dyYXBoaWNhbENvb3JkaW5hdGUuTGF0aXR1ZGVcIiwgdHlwZTogJ251bWVyaWMnLCBmb3JtYXQ6ICcwLlswMDAwMF0nfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGE6IFwiRmFjaWxpdHlOYW1lXCJ9LHtkYXRhOiBcIkNvbW1lbnRzXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICA6IGZvcm1uYW1lID09ICdQbGFudERldGFpbHMnID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIlBsYW50TmFtZVwiLCByZWFkT25seTogdHJ1ZX0sIHtkYXRhOiBcIlBsYW50SWRcIiwgcmVhZE9ubHk6IHRydWV9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YTogXCJQbGFudERldGFpbHMuTVd0aFwifSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGE6IFwiUGxhbnREZXRhaWxzLlR5cGVPZkNvbWJ1c3Rpb25QbGFudFwifSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGE6IFwiUGxhbnREZXRhaWxzLkRhdGVPZlN0YXJ0T2ZPcGVyYXRpb25cIn0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGE6IFwiUGxhbnREZXRhaWxzLlJlZmluZXJpZXNcIiwgdHlwZTogJ2NoZWNrYm94J30sIHtkYXRhOiBcIlBsYW50RGV0YWlscy5PdGhlclNlY3RvclwiLCB0eXBlOiAnZHJvcGRvd24nLCBzb3VyY2U6IFt7aXJvbl9zdGVlbDpcImlyb25fc3RlZWxcIn0sIFwiZXNpXCIsIFwiZGlzdHJpY3RfaGVhdGluZ1wiLCBcImNocFwiLCBcIm90aGVyXCJdfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGE6IFwiUGxhbnREZXRhaWxzLk9wZXJhdGluZ0hvdXJzXCIsIHR5cGU6ICdudW1lcmljJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIlBsYW50RGV0YWlscy5EZXJvZ2F0aW9uXCJ9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIlBsYW50RGV0YWlscy5Db21tZW50c1wifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICA6IGZvcm1uYW1lID09ICdFbmVyZ3lJbnB1dCcgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGE6IFwiUGxhbnROYW1lXCIsIHJlYWRPbmx5OiB0cnVlfSwge2RhdGE6IFwiUGxhbnRJZFwiLCByZWFkT25seTogdHJ1ZX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5FbmVyZ3lJbnB1dC5CaW9tYXNzXCIsIHR5cGU6ICdudW1lcmljJywgZm9ybWF0OiAnMC5bMDAwMDBdJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5FbmVyZ3lJbnB1dC5Db2FsXCIsIHR5cGU6ICdudW1lcmljJywgZm9ybWF0OiAnMC5bMDAwMDBdJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5FbmVyZ3lJbnB1dC5MaWduaXRlXCIsIHR5cGU6ICdudW1lcmljJywgZm9ybWF0OiAnMC5bMDAwMDBdJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5FbmVyZ3lJbnB1dC5QZWF0XCIsIHR5cGU6ICdudW1lcmljJywgZm9ybWF0OiAnMC5bMDAwMDBdJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5FbmVyZ3lJbnB1dC5PdGhlclNvbGlkRnVlbHMuQ2F0ZWdvcnlcIn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5FbmVyZ3lJbnB1dC5PdGhlclNvbGlkRnVlbHMuVmFsdWVcIiwgdHlwZTogJ251bWVyaWMnLCBmb3JtYXQ6ICcwLlswMDAwMF0nfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGE6IFwiRW5lcmd5SW5wdXRBbmRUb3RhbEVtaXNzaW9uc1RvQWlyLkVuZXJneUlucHV0LkxpcXVpZEZ1ZWxzXCIsIHR5cGU6ICdudW1lcmljJywgZm9ybWF0OiAnMC5bMDAwMDBdJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5FbmVyZ3lJbnB1dC5OYXR1cmFsR2FzXCIsIHR5cGU6ICdudW1lcmljJywgZm9ybWF0OiAnMC5bMDAwMDBdJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5FbmVyZ3lJbnB1dC5PdGhlckdhc2VzLkNhdGVnb3J5XCJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YTogXCJFbmVyZ3lJbnB1dEFuZFRvdGFsRW1pc3Npb25zVG9BaXIuRW5lcmd5SW5wdXQuT3RoZXJHYXNlcy5WYWx1ZVwiLCB0eXBlOiAnbnVtZXJpYycsIGZvcm1hdDogJzAuWzAwMDAwXSd9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA6IGZvcm1uYW1lID09ICdUb3RhbEVtaXNzaW9uc1RvQWlyJyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YTogXCJQbGFudE5hbWVcIiwgcmVhZE9ubHk6IHRydWV9LCB7ZGF0YTogXCJQbGFudElkXCIsIHJlYWRPbmx5OiB0cnVlfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGE6IFwiRW5lcmd5SW5wdXRBbmRUb3RhbEVtaXNzaW9uc1RvQWlyLlRvdGFsRW1pc3Npb25zVG9BaXIuU08yXCIsIHR5cGU6ICdudW1lcmljJywgZm9ybWF0OiAnMC5bMDAwMDBdJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIkVuZXJneUlucHV0QW5kVG90YWxFbWlzc2lvbnNUb0Fpci5Ub3RhbEVtaXNzaW9uc1RvQWlyLk5PeFwiLCB0eXBlOiAnbnVtZXJpYycsIGZvcm1hdDogJzAuWzAwMDAwXSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YTogXCJFbmVyZ3lJbnB1dEFuZFRvdGFsRW1pc3Npb25zVG9BaXIuVG90YWxFbWlzc2lvbnNUb0Fpci5UU1BcIiwgdHlwZTogJ251bWVyaWMnLCBmb3JtYXQ6ICcwLlswMDAwMF0nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgOiBmb3JtbmFtZSA9PSAnRGVzdWxwaHVyaXNhdGlvbicgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YTogXCJQbGFudE5hbWVcIiwgcmVhZE9ubHk6IHRydWV9LCB7ZGF0YTogXCJQbGFudElkXCIsIHJlYWRPbmx5OiB0cnVlfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGE6IFwiRGVzdWxwaHVyaXNhdGlvbi5EZXN1bHBodXJpc2F0aW9uUmF0ZVwiLCB0eXBlOiAnbnVtZXJpYycsIGZvcm1hdDogJzAuWzAwMDAwXSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YTogXCJEZXN1bHBodXJpc2F0aW9uLlN1bHBodXJDb250ZW50XCIsIHR5cGU6ICdudW1lcmljJywgZm9ybWF0OiAnMC5bMDAwMDBdJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIkRlc3VscGh1cmlzYXRpb24uVGVjaG5pY2FsSnVzdGlmaWNhdGlvblwiIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIDogZm9ybW5hbWUgPT0gJ1VzZWZ1bEhlYXQnID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhOiBcIlBsYW50TmFtZVwiLCByZWFkT25seTogdHJ1ZX0sIHtkYXRhOiBcIlBsYW50SWRcIiwgcmVhZE9ubHk6IHRydWV9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YTogXCJVc2VmdWxIZWF0LlVzZWZ1bEhlYXRQcm9wb3J0aW9uXCIsIHR5cGU6ICdudW1lcmljJywgZm9ybWF0OiAnMC5bMDAwMDBdJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA6W10pLFxuICAgICAgICAgICAgICAgICAgICBvblNlbGVjdGlvbjogZnVuY3Rpb24gKHJvdywgY29sLCByb3cyLCBjb2wyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YSA9IGNvbnRhaW5lci5oYW5kc29udGFibGUoJ2dldENlbGxNZXRhJywgcm93MiwgY29sMik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWV0YS5yZWFkT25seSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5oYW5kc29udGFibGUoJ3VwZGF0ZVNldHRpbmdzJywge2ZpbGxIYW5kbGU6IGZhbHNlfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuaGFuZHNvbnRhYmxlKCd1cGRhdGVTZXR0aW5ncycsIHtmaWxsSGFuZGxlOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2VsbHM6IGZ1bmN0aW9uIChyb3csIGNvbCwgcHJvcCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2VsbFByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmRpdGlvbmFsUmVhZG9ubHlGaWVsZHMuaW5kZXhPZihwcm9wKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyID0gbnVtZXJpY0NvbmRpdGlvbmFscmVhZE9ubHlSZW5kZXJlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2VsbFByb3BlcnRpZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cdH1cbn0pO1xuICAgIHZhciBjb25kaXRpb25hbFJlYWRvbmx5RmllbGRzID0gW1wiUGxhbnREZXRhaWxzLkNhcGFjaXR5QWRkZWRNV1wiLCBcIlBsYW50RGV0YWlscy5DYXBhY2l0eUFmZmVjdGVkTVdcIiwgXCJQbGFudERldGFpbHMuT3RoZXJTZWN0b3JcIiwgXCJQbGFudERldGFpbHMuR2FzVHVyYmluZVRoZXJtYWxJbnB1dFwiLFxuICAgICAgICBcIlBsYW50RGV0YWlscy5Cb2lsZXJUaGVybWFsSW5wdXRcIiwgXCJQbGFudERldGFpbHMuR2FzRW5naW5lVGhlcm1hbElucHV0XCIsIFwiUGxhbnREZXRhaWxzLkRpZXNlbEVuZ2luZVR1cmJpbmVUaGVybWFsSW5wdXRcIiwgXCJQbGFudERldGFpbHMuRGllc2VsRW5naW5lVHVyYmluZVRoZXJtYWxJbnB1dFwiLFxuICAgICAgICBcIlBsYW50RGV0YWlscy5PdGhlclR5cGVPZkNvbWJ1c3Rpb25cIiwgXCJQbGFudERldGFpbHMuT3RoZXJUaGVybWFsSW5wdXRcIixcbiAgICAgICAgXCJPcHRPdXRzQW5kTkVSUC5DYXBhY2l0eU9wdGVkT3V0TVdcIiwgXCJPcHRPdXRzQW5kTkVSUC5Ib3Vyc09wZXJhdGVkXCIsXG4gICAgICAgIFwiTGNwQXJ0MTUuT3BlcmF0aW5nSG91cnNcIiwgXCJMY3BBcnQxNS5FbHZTTzJcIixcbiAgICAgICAgXCJMY3BBcnQxNS5Ob3RhQmVuZUVsdlNPMlwiLCBcIkxjcEFydDE1LkRlc3VscGh1cmlzYXRpb25SYXRlXCIsIFwiTGNwQXJ0MTUuU0lucHV0XCIsXG4gICAgICAgIFwiTGNwQXJ0MTUuQW5uZXhWSV9BX0Zvb3Rub3RlMl9PcGVyYXRpbmdIb3Vyc1wiLCBcIkxjcEFydDE1LkVsdk5PeFwiLFxuICAgICAgICBcIkxjcEFydDE1LlZvbGF0aWxlQ29udGVudHNcIiwgXCJMY3BBcnQxNS5Bbm5leFZJX0FfRm9vdG5vdGUzX0Vsdk5PeFwiXVxuICAgIGZ1bmN0aW9uIG51bWVyaWNDb25kaXRpb25hbHJlYWRPbmx5UmVuZGVyZXIoaW5zdGFuY2UsIHRkLCByb3csIGNvbCwgcHJvcCwgdmFsdWUsIGNlbGxQcm9wZXJ0aWVzKSB7XG5cbiAgICAgICAgaWYgKHByb3AgPT09IFwiUGxhbnREZXRhaWxzLk90aGVyVHlwZU9mQ29tYnVzdGlvblwiKSB7XG4gICAgICAgICAgICBIYW5kc29udGFibGUucmVuZGVyZXJzLlRleHRSZW5kZXJlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByb3AgPT09IFwiUGxhbnREZXRhaWxzLk90aGVyU2VjdG9yXCIpIHtcbiAgICAgICAgICAgIEhhbmRzb250YWJsZS5yZW5kZXJlcnMuQXV0b2NvbXBsZXRlUmVuZGVyZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIEhhbmRzb250YWJsZS5yZW5kZXJlcnMuTnVtZXJpY1JlbmRlcmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbEluZGV4ID0gKFxuICAgICAgICAgICAgICAgIChwcm9wID09PSBcIlBsYW50RGV0YWlscy5PdGhlclRoZXJtYWxJbnB1dFwiIHx8IHByb3AgPT09ICBcIk9wdE91dHNBbmRORVJQLkhvdXJzT3BlcmF0ZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBwcm9wID09PSBcIkxjcEFydDE1LkVsdlNPMlwiIHx8IHByb3AgPT09ICBcIkxjcEFydDE1LkRlc3VscGh1cmlzYXRpb25SYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgcHJvcCA9PT0gXCJMY3BBcnQxNS5FbHZOT3hcIiB8fCBwcm9wID09PSAgXCJMY3BBcnQxNS5Bbm5leFZJX0FfRm9vdG5vdGUzX0Vsdk5PeFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGNvbCAtIDIgOiAocHJvcCA9PT0gXCJMY3BBcnQxNS5TSW5wdXRcIikgPyBjb2wgLSAzIDogY29sIC0gMSk7XG4gICAgICAgIHZhciBib29sZWFuVmFsdWUgPSBwcm9wID09PSBcIlBsYW50RGV0YWlscy5PdGhlclNlY3RvclwiID8gZmFsc2UgOiB0cnVlO1xuICAgICAgICB2YXIgY2hlY2tib3hWYWx1ZSA9IGluc3RhbmNlLmdldERhdGFBdENlbGwocm93LCBjb2xJbmRleCkgPT09IG51bGwgfHwgaW5zdGFuY2UuZ2V0RGF0YUF0Q2VsbChyb3csIGNvbEluZGV4KSA9PT0gJycgPyBmYWxzZSA6IGluc3RhbmNlLmdldERhdGFBdENlbGwocm93LCBjb2xJbmRleCk7XG4gICAgICAgIGlmIChjaGVja2JveFZhbHVlICE9IGJvb2xlYW5WYWx1ZSApIHtcbiAgICAgICAgICAgIGNlbGxQcm9wZXJ0aWVzLnJlYWRPbmx5ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRkLnN0eWxlLmJhY2tncm91bmQgPSAnI0VFRSc7XG4gICAgICAgIH1cbiAgICB9XG4iLCIvKlxuICogYW5ndWxhci1lbGFzdGljIHYyLjMuM1xuICogKGMpIDIwMTQgTW9ub3NwYWNlZCBodHRwOi8vbW9ub3NwYWNlZC5jb21cbiAqIExpY2Vuc2U6IE1JVFxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdtb25vc3BhY2VkLmVsYXN0aWMnLCBbXSlcblxuICAuY29uc3RhbnQoJ21zZEVsYXN0aWNDb25maWcnLCB7XG4gICAgYXBwZW5kOiAnJ1xuICB9KVxuXG4gIC5kaXJlY3RpdmUoJ21zZEVsYXN0aWMnLCBbJyR0aW1lb3V0JywgJyR3aW5kb3cnLCAnbXNkRWxhc3RpY0NvbmZpZycsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkd2luZG93LCBjb25maWcpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICAgICAgcmVzdHJpY3Q6ICdBLCBDJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuXG4gICAgICAgIC8vIGNhY2hlIGEgcmVmZXJlbmNlIHRvIHRoZSBET00gZWxlbWVudFxuICAgICAgICB2YXIgdGEgPSBlbGVtZW50WzBdLFxuICAgICAgICAgICAgJHRhID0gZWxlbWVudDtcblxuICAgICAgICAvLyBlbnN1cmUgdGhlIGVsZW1lbnQgaXMgYSB0ZXh0YXJlYSwgYW5kIGJyb3dzZXIgaXMgY2FwYWJsZVxuICAgICAgICBpZiAodGEubm9kZU5hbWUgIT09ICdURVhUQVJFQScgfHwgISR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNldCB0aGVzZSBwcm9wZXJ0aWVzIGJlZm9yZSBtZWFzdXJpbmcgZGltZW5zaW9uc1xuICAgICAgICAkdGEuY3NzKHtcbiAgICAgICAgICAnb3ZlcmZsb3cnOiAnaGlkZGVuJyxcbiAgICAgICAgICAnb3ZlcmZsb3cteSc6ICdoaWRkZW4nLFxuICAgICAgICAgICd3b3JkLXdyYXAnOiAnYnJlYWstd29yZCdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZm9yY2UgdGV4dCByZWZsb3dcbiAgICAgICAgdmFyIHRleHQgPSB0YS52YWx1ZTtcbiAgICAgICAgdGEudmFsdWUgPSAnJztcbiAgICAgICAgdGEudmFsdWUgPSB0ZXh0O1xuXG4gICAgICAgIHZhciBhcHBlbmRUZXh0ID0gYXR0cnMubXNkRWxhc3RpYyB8fCBjb25maWcuYXBwZW5kLFxuICAgICAgICAgICAgYXBwZW5kID0gYXBwZW5kVGV4dCA9PT0gJ1xcXFxuJyA/ICdcXG4nIDogYXBwZW5kVGV4dCxcbiAgICAgICAgICAgICR3aW4gPSBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdyksXG4gICAgICAgICAgICBtaXJyb3JTdHlsZSA9ICdwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogLTk5OXB4OyByaWdodDogYXV0bzsgYm90dG9tOiBhdXRvOyBsZWZ0OiAwIDsnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93OiBoaWRkZW47IC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICctbW96LWJveC1zaXppbmc6IGNvbnRlbnQtYm94OyBib3gtc2l6aW5nOiBjb250ZW50LWJveDsnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ21pbi1oZWlnaHQ6IDAgIWltcG9ydGFudDsgaGVpZ2h0OiAwICFpbXBvcnRhbnQ7IHBhZGRpbmc6IDA7JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7IGJvcmRlcjogMDsnLFxuICAgICAgICAgICAgJG1pcnJvciA9IGFuZ3VsYXIuZWxlbWVudCgnPHRleHRhcmVhIHRhYmluZGV4PVwiLTFcIiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0eWxlPVwiJyArIG1pcnJvclN0eWxlICsgJ1wiLz4nKS5kYXRhKCdlbGFzdGljJywgdHJ1ZSksXG4gICAgICAgICAgICBtaXJyb3IgPSAkbWlycm9yWzBdLFxuICAgICAgICAgICAgdGFTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUodGEpLFxuICAgICAgICAgICAgcmVzaXplID0gdGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdyZXNpemUnKSxcbiAgICAgICAgICAgIGJvcmRlckJveCA9IHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnYm94LXNpemluZycpID09PSAnYm9yZGVyLWJveCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLW1vei1ib3gtc2l6aW5nJykgPT09ICdib3JkZXItYm94JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctd2Via2l0LWJveC1zaXppbmcnKSA9PT0gJ2JvcmRlci1ib3gnLFxuICAgICAgICAgICAgYm94T3V0ZXIgPSAhYm9yZGVyQm94ID8ge3dpZHRoOiAwLCBoZWlnaHQ6IDB9IDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIHBhcnNlSW50KHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLXJpZ2h0LXdpZHRoJyksIDEwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQodGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXJpZ2h0JyksIDEwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQodGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWxlZnQnKSwgMTApICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludCh0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2JvcmRlci1sZWZ0LXdpZHRoJyksIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBwYXJzZUludCh0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2JvcmRlci10b3Atd2lkdGgnKSwgMTApICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludCh0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctdG9wJyksIDEwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQodGFTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWJvdHRvbScpLCAxMCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLWJvdHRvbS13aWR0aCcpLCAxMClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtaW5IZWlnaHRWYWx1ZSA9IHBhcnNlSW50KHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnbWluLWhlaWdodCcpLCAxMCksXG4gICAgICAgICAgICBoZWlnaHRWYWx1ZSA9IHBhcnNlSW50KHRhU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnaGVpZ2h0JyksIDEwKSxcbiAgICAgICAgICAgIG1pbkhlaWdodCA9IE1hdGgubWF4KG1pbkhlaWdodFZhbHVlLCBoZWlnaHRWYWx1ZSkgLSBib3hPdXRlci5oZWlnaHQsXG4gICAgICAgICAgICBtYXhIZWlnaHQgPSBwYXJzZUludCh0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ21heC1oZWlnaHQnKSwgMTApLFxuICAgICAgICAgICAgbWlycm9yZWQsXG4gICAgICAgICAgICBhY3RpdmUsXG4gICAgICAgICAgICBjb3B5U3R5bGUgPSBbJ2ZvbnQtZmFtaWx5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAnZm9udC1zaXplJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAnZm9udC13ZWlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICdmb250LXN0eWxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAnbGV0dGVyLXNwYWNpbmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICdsaW5lLWhlaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQtdHJhbnNmb3JtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAnd29yZC1zcGFjaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAndGV4dC1pbmRlbnQnXTtcblxuICAgICAgICAvLyBleGl0IGlmIGVsYXN0aWMgYWxyZWFkeSBhcHBsaWVkIChvciBpcyB0aGUgbWlycm9yIGVsZW1lbnQpXG4gICAgICAgIGlmICgkdGEuZGF0YSgnZWxhc3RpYycpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3BlcmEgcmV0dXJucyBtYXgtaGVpZ2h0IG9mIC0xIGlmIG5vdCBzZXRcbiAgICAgICAgbWF4SGVpZ2h0ID0gbWF4SGVpZ2h0ICYmIG1heEhlaWdodCA+IDAgPyBtYXhIZWlnaHQgOiA5ZTQ7XG5cbiAgICAgICAgLy8gYXBwZW5kIG1pcnJvciB0byB0aGUgRE9NXG4gICAgICAgIGlmIChtaXJyb3IucGFyZW50Tm9kZSAhPT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KS5hcHBlbmQobWlycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNldCByZXNpemUgYW5kIGFwcGx5IGVsYXN0aWNcbiAgICAgICAgJHRhLmNzcyh7XG4gICAgICAgICAgJ3Jlc2l6ZSc6IChyZXNpemUgPT09ICdub25lJyB8fCByZXNpemUgPT09ICd2ZXJ0aWNhbCcpID8gJ25vbmUnIDogJ2hvcml6b250YWwnXG4gICAgICAgIH0pLmRhdGEoJ2VsYXN0aWMnLCB0cnVlKTtcblxuICAgICAgICAvKlxuICAgICAgICAgKiBtZXRob2RzXG4gICAgICAgICAqL1xuXG4gICAgICAgIGZ1bmN0aW9uIGluaXRNaXJyb3IoKSB7XG4gICAgICAgICAgbWlycm9yZWQgPSB0YTtcbiAgICAgICAgICAvLyBjb3B5IHRoZSBlc3NlbnRpYWwgc3R5bGVzIGZyb20gdGhlIHRleHRhcmVhIHRvIHRoZSBtaXJyb3JcbiAgICAgICAgICB0YVN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YSk7XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGNvcHlTdHlsZSwgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICBtaXJyb3JTdHlsZSArPSB2YWwgKyAnOicgKyB0YVN0eWxlLmdldFByb3BlcnR5VmFsdWUodmFsKSArICc7JztcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBtaXJyb3Iuc2V0QXR0cmlidXRlKCdzdHlsZScsIG1pcnJvclN0eWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkanVzdCgpIHtcbiAgICAgICAgICB2YXIgdGFIZWlnaHQsXG4gICAgICAgICAgICAgIG1pcnJvckhlaWdodCxcbiAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgIG92ZXJmbG93O1xuXG4gICAgICAgICAgaWYgKG1pcnJvcmVkICE9PSB0YSkge1xuICAgICAgICAgICAgaW5pdE1pcnJvcigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGFjdGl2ZSBmbGFnIHByZXZlbnRzIGFjdGlvbnMgaW4gZnVuY3Rpb24gZnJvbSBjYWxsaW5nIGFkanVzdCBhZ2FpblxuICAgICAgICAgIGlmICghYWN0aXZlKSB7XG4gICAgICAgICAgICBhY3RpdmUgPSB0cnVlO1xuXG4gICAgICAgICAgICBtaXJyb3IudmFsdWUgPSB0YS52YWx1ZSArIGFwcGVuZDsgLy8gb3B0aW9uYWwgd2hpdGVzcGFjZSB0byBpbXByb3ZlIGFuaW1hdGlvblxuICAgICAgICAgICAgbWlycm9yLnN0eWxlLm92ZXJmbG93WSA9IHRhLnN0eWxlLm92ZXJmbG93WTtcblxuICAgICAgICAgICAgdGFIZWlnaHQgPSB0YS5zdHlsZS5oZWlnaHQgPT09ICcnID8gJ2F1dG8nIDogcGFyc2VJbnQodGEuc3R5bGUuaGVpZ2h0LCAxMCk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBtaXJyb3Igd2lkdGggaW4gY2FzZSB0aGUgdGV4dGFyZWEgd2lkdGggaGFzIGNoYW5nZWRcbiAgICAgICAgICAgIHdpZHRoID0gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZSh0YSkuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKSwgMTApIC0gYm94T3V0ZXIud2lkdGg7XG4gICAgICAgICAgICBtaXJyb3Iuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XG5cbiAgICAgICAgICAgIG1pcnJvckhlaWdodCA9IG1pcnJvci5zY3JvbGxIZWlnaHQ7XG5cbiAgICAgICAgICAgIGlmIChtaXJyb3JIZWlnaHQgPiBtYXhIZWlnaHQpIHtcbiAgICAgICAgICAgICAgbWlycm9ySGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgICAgICAgICAgICBvdmVyZmxvdyA9ICdzY3JvbGwnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtaXJyb3JIZWlnaHQgPCBtaW5IZWlnaHQpIHtcbiAgICAgICAgICAgICAgbWlycm9ySGVpZ2h0ID0gbWluSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWlycm9ySGVpZ2h0ICs9IGJveE91dGVyLmhlaWdodDtcblxuICAgICAgICAgICAgdGEuc3R5bGUub3ZlcmZsb3dZID0gb3ZlcmZsb3cgfHwgJ2hpZGRlbic7XG5cbiAgICAgICAgICAgIGlmICh0YUhlaWdodCAhPT0gbWlycm9ySGVpZ2h0KSB7XG4gICAgICAgICAgICAgIHRhLnN0eWxlLmhlaWdodCA9IG1pcnJvckhlaWdodCArICdweCc7XG4gICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCdlbGFzdGljOnJlc2l6ZScsICR0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNtYWxsIGRlbGF5IHRvIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSwgMSk7XG5cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmb3JjZUFkanVzdCgpIHtcbiAgICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICBhZGp1c3QoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIGluaXRpYWxpc2VcbiAgICAgICAgICovXG5cbiAgICAgICAgLy8gbGlzdGVuXG4gICAgICAgIGlmICgnb25wcm9wZXJ0eWNoYW5nZScgaW4gdGEgJiYgJ29uaW5wdXQnIGluIHRhKSB7XG4gICAgICAgICAgLy8gSUU5XG4gICAgICAgICAgdGFbJ29uaW5wdXQnXSA9IHRhLm9ua2V5dXAgPSBhZGp1c3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFbJ29uaW5wdXQnXSA9IGFkanVzdDtcbiAgICAgICAgfVxuXG4gICAgICAgICR3aW4uYmluZCgncmVzaXplJywgZm9yY2VBZGp1c3QpO1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbmdNb2RlbC4kbW9kZWxWYWx1ZTtcbiAgICAgICAgfSwgZnVuY3Rpb24obmV3VmFsdWUpIHtcbiAgICAgICAgICBmb3JjZUFkanVzdCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzY29wZS4kb24oJ2VsYXN0aWM6YWRqdXN0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZm9yY2VBZGp1c3QoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHRpbWVvdXQoYWRqdXN0KTtcblxuICAgICAgICAvKlxuICAgICAgICAgKiBkZXN0cm95XG4gICAgICAgICAqL1xuXG4gICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbWlycm9yLnJlbW92ZSgpO1xuICAgICAgICAgICR3aW4udW5iaW5kKCdyZXNpemUnLCBmb3JjZUFkanVzdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgfV0pO1xuIiwiLypcbiBBbmd1bGFySlMgdjEuMi4xNlxuIChjKSAyMDEwLTIwMTQgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gTGljZW5zZTogTUlUXG4qL1xuKGZ1bmN0aW9uKE8sVSxzKXsndXNlIHN0cmljdCc7ZnVuY3Rpb24gdChiKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYT1hcmd1bWVudHNbMF0sYyxhPVwiW1wiKyhiP2IrXCI6XCI6XCJcIikrYStcIl0gaHR0cDovL2Vycm9ycy5hbmd1bGFyanMub3JnLzEuMi4xNi9cIisoYj9iK1wiL1wiOlwiXCIpK2E7Zm9yKGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWE9YSsoMT09Yz9cIj9cIjpcIiZcIikrXCJwXCIrKGMtMSkrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KFwiZnVuY3Rpb25cIj09dHlwZW9mIGFyZ3VtZW50c1tjXT9hcmd1bWVudHNbY10udG9TdHJpbmcoKS5yZXBsYWNlKC8gXFx7W1xcc1xcU10qJC8sXCJcIik6XCJ1bmRlZmluZWRcIj09dHlwZW9mIGFyZ3VtZW50c1tjXT9cInVuZGVmaW5lZFwiOlwic3RyaW5nXCIhPXR5cGVvZiBhcmd1bWVudHNbY10/SlNPTi5zdHJpbmdpZnkoYXJndW1lbnRzW2NdKTphcmd1bWVudHNbY10pO3JldHVybiBFcnJvcihhKX19ZnVuY3Rpb24gYWIoYil7aWYobnVsbD09Ynx8Q2EoYikpcmV0dXJuITE7XG52YXIgYT1iLmxlbmd0aDtyZXR1cm4gMT09PWIubm9kZVR5cGUmJmE/ITA6dyhiKXx8TShiKXx8MD09PWF8fFwibnVtYmVyXCI9PT10eXBlb2YgYSYmMDxhJiZhLTEgaW4gYn1mdW5jdGlvbiBxKGIsYSxjKXt2YXIgZDtpZihiKWlmKFAoYikpZm9yKGQgaW4gYilcInByb3RvdHlwZVwiPT1kfHwoXCJsZW5ndGhcIj09ZHx8XCJuYW1lXCI9PWR8fGIuaGFzT3duUHJvcGVydHkmJiFiLmhhc093blByb3BlcnR5KGQpKXx8YS5jYWxsKGMsYltkXSxkKTtlbHNlIGlmKGIuZm9yRWFjaCYmYi5mb3JFYWNoIT09cSliLmZvckVhY2goYSxjKTtlbHNlIGlmKGFiKGIpKWZvcihkPTA7ZDxiLmxlbmd0aDtkKyspYS5jYWxsKGMsYltkXSxkKTtlbHNlIGZvcihkIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShkKSYmYS5jYWxsKGMsYltkXSxkKTtyZXR1cm4gYn1mdW5jdGlvbiBRYihiKXt2YXIgYT1bXSxjO2ZvcihjIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShjKSYmYS5wdXNoKGMpO3JldHVybiBhLnNvcnQoKX1mdW5jdGlvbiBTYyhiLFxuYSxjKXtmb3IodmFyIGQ9UWIoYiksZT0wO2U8ZC5sZW5ndGg7ZSsrKWEuY2FsbChjLGJbZFtlXV0sZFtlXSk7cmV0dXJuIGR9ZnVuY3Rpb24gUmIoYil7cmV0dXJuIGZ1bmN0aW9uKGEsYyl7YihjLGEpfX1mdW5jdGlvbiBiYigpe2Zvcih2YXIgYj1rYS5sZW5ndGgsYTtiOyl7Yi0tO2E9a2FbYl0uY2hhckNvZGVBdCgwKTtpZig1Nz09YSlyZXR1cm4ga2FbYl09XCJBXCIsa2Euam9pbihcIlwiKTtpZig5MD09YSlrYVtiXT1cIjBcIjtlbHNlIHJldHVybiBrYVtiXT1TdHJpbmcuZnJvbUNoYXJDb2RlKGErMSksa2Euam9pbihcIlwiKX1rYS51bnNoaWZ0KFwiMFwiKTtyZXR1cm4ga2Euam9pbihcIlwiKX1mdW5jdGlvbiBTYihiLGEpe2E/Yi4kJGhhc2hLZXk9YTpkZWxldGUgYi4kJGhhc2hLZXl9ZnVuY3Rpb24gRChiKXt2YXIgYT1iLiQkaGFzaEtleTtxKGFyZ3VtZW50cyxmdW5jdGlvbihhKXthIT09YiYmcShhLGZ1bmN0aW9uKGEsYyl7YltjXT1hfSl9KTtTYihiLGEpO3JldHVybiBifWZ1bmN0aW9uIFkoYil7cmV0dXJuIHBhcnNlSW50KGIsXG4xMCl9ZnVuY3Rpb24gVGIoYixhKXtyZXR1cm4gRChuZXcgKEQoZnVuY3Rpb24oKXt9LHtwcm90b3R5cGU6Yn0pKSxhKX1mdW5jdGlvbiBDKCl7fWZ1bmN0aW9uIERhKGIpe3JldHVybiBifWZ1bmN0aW9uIGFhKGIpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBifX1mdW5jdGlvbiBFKGIpe3JldHVyblwidW5kZWZpbmVkXCI9PT10eXBlb2YgYn1mdW5jdGlvbiBCKGIpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgYn1mdW5jdGlvbiBYKGIpe3JldHVybiBudWxsIT1iJiZcIm9iamVjdFwiPT09dHlwZW9mIGJ9ZnVuY3Rpb24gdyhiKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGJ9ZnVuY3Rpb24gdmIoYil7cmV0dXJuXCJudW1iZXJcIj09PXR5cGVvZiBifWZ1bmN0aW9uIE5hKGIpe3JldHVyblwiW29iamVjdCBEYXRlXVwiPT09d2EuY2FsbChiKX1mdW5jdGlvbiBNKGIpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PXdhLmNhbGwoYil9ZnVuY3Rpb24gUChiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYn1cbmZ1bmN0aW9uIGNiKGIpe3JldHVyblwiW29iamVjdCBSZWdFeHBdXCI9PT13YS5jYWxsKGIpfWZ1bmN0aW9uIENhKGIpe3JldHVybiBiJiZiLmRvY3VtZW50JiZiLmxvY2F0aW9uJiZiLmFsZXJ0JiZiLnNldEludGVydmFsfWZ1bmN0aW9uIFRjKGIpe3JldHVybiEoIWJ8fCEoYi5ub2RlTmFtZXx8Yi5wcm9wJiZiLmF0dHImJmIuZmluZCkpfWZ1bmN0aW9uIFVjKGIsYSxjKXt2YXIgZD1bXTtxKGIsZnVuY3Rpb24oYixnLGYpe2QucHVzaChhLmNhbGwoYyxiLGcsZikpfSk7cmV0dXJuIGR9ZnVuY3Rpb24gZGIoYixhKXtpZihiLmluZGV4T2YpcmV0dXJuIGIuaW5kZXhPZihhKTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKylpZihhPT09YltjXSlyZXR1cm4gYztyZXR1cm4tMX1mdW5jdGlvbiBPYShiLGEpe3ZhciBjPWRiKGIsYSk7MDw9YyYmYi5zcGxpY2UoYywxKTtyZXR1cm4gYX1mdW5jdGlvbiBiYShiLGEpe2lmKENhKGIpfHxiJiZiLiRldmFsQXN5bmMmJmIuJHdhdGNoKXRocm93IFBhKFwiY3B3c1wiKTtcbmlmKGEpe2lmKGI9PT1hKXRocm93IFBhKFwiY3BpXCIpO2lmKE0oYikpZm9yKHZhciBjPWEubGVuZ3RoPTA7YzxiLmxlbmd0aDtjKyspYS5wdXNoKGJhKGJbY10pKTtlbHNle2M9YS4kJGhhc2hLZXk7cShhLGZ1bmN0aW9uKGIsYyl7ZGVsZXRlIGFbY119KTtmb3IodmFyIGQgaW4gYilhW2RdPWJhKGJbZF0pO1NiKGEsYyl9fWVsc2UoYT1iKSYmKE0oYik/YT1iYShiLFtdKTpOYShiKT9hPW5ldyBEYXRlKGIuZ2V0VGltZSgpKTpjYihiKT9hPVJlZ0V4cChiLnNvdXJjZSk6WChiKSYmKGE9YmEoYix7fSkpKTtyZXR1cm4gYX1mdW5jdGlvbiBVYihiLGEpe2E9YXx8e307Zm9yKHZhciBjIGluIGIpIWIuaGFzT3duUHJvcGVydHkoYyl8fFwiJFwiPT09Yy5jaGFyQXQoMCkmJlwiJFwiPT09Yy5jaGFyQXQoMSl8fChhW2NdPWJbY10pO3JldHVybiBhfWZ1bmN0aW9uIHhhKGIsYSl7aWYoYj09PWEpcmV0dXJuITA7aWYobnVsbD09PWJ8fG51bGw9PT1hKXJldHVybiExO2lmKGIhPT1iJiZhIT09YSlyZXR1cm4hMDtcbnZhciBjPXR5cGVvZiBiLGQ7aWYoYz09dHlwZW9mIGEmJlwib2JqZWN0XCI9PWMpaWYoTShiKSl7aWYoIU0oYSkpcmV0dXJuITE7aWYoKGM9Yi5sZW5ndGgpPT1hLmxlbmd0aCl7Zm9yKGQ9MDtkPGM7ZCsrKWlmKCF4YShiW2RdLGFbZF0pKXJldHVybiExO3JldHVybiEwfX1lbHNle2lmKE5hKGIpKXJldHVybiBOYShhKSYmYi5nZXRUaW1lKCk9PWEuZ2V0VGltZSgpO2lmKGNiKGIpJiZjYihhKSlyZXR1cm4gYi50b1N0cmluZygpPT1hLnRvU3RyaW5nKCk7aWYoYiYmYi4kZXZhbEFzeW5jJiZiLiR3YXRjaHx8YSYmYS4kZXZhbEFzeW5jJiZhLiR3YXRjaHx8Q2EoYil8fENhKGEpfHxNKGEpKXJldHVybiExO2M9e307Zm9yKGQgaW4gYilpZihcIiRcIiE9PWQuY2hhckF0KDApJiYhUChiW2RdKSl7aWYoIXhhKGJbZF0sYVtkXSkpcmV0dXJuITE7Y1tkXT0hMH1mb3IoZCBpbiBhKWlmKCFjLmhhc093blByb3BlcnR5KGQpJiZcIiRcIiE9PWQuY2hhckF0KDApJiZhW2RdIT09cyYmIVAoYVtkXSkpcmV0dXJuITE7XG5yZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBWYigpe3JldHVybiBVLnNlY3VyaXR5UG9saWN5JiZVLnNlY3VyaXR5UG9saWN5LmlzQWN0aXZlfHxVLnF1ZXJ5U2VsZWN0b3ImJiEoIVUucXVlcnlTZWxlY3RvcihcIltuZy1jc3BdXCIpJiYhVS5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtbmctY3NwXVwiKSl9ZnVuY3Rpb24gZWIoYixhKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGg/eWEuY2FsbChhcmd1bWVudHMsMik6W107cmV0dXJuIVAoYSl8fGEgaW5zdGFuY2VvZiBSZWdFeHA/YTpjLmxlbmd0aD9mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoP2EuYXBwbHkoYixjLmNvbmNhdCh5YS5jYWxsKGFyZ3VtZW50cywwKSkpOmEuYXBwbHkoYixjKX06ZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD9hLmFwcGx5KGIsYXJndW1lbnRzKTphLmNhbGwoYil9fWZ1bmN0aW9uIFZjKGIsYSl7dmFyIGM9YTtcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiJFwiPT09Yi5jaGFyQXQoMCk/Yz1cbnM6Q2EoYSk/Yz1cIiRXSU5ET1dcIjphJiZVPT09YT9jPVwiJERPQ1VNRU5UXCI6YSYmKGEuJGV2YWxBc3luYyYmYS4kd2F0Y2gpJiYoYz1cIiRTQ09QRVwiKTtyZXR1cm4gY31mdW5jdGlvbiBxYShiLGEpe3JldHVyblwidW5kZWZpbmVkXCI9PT10eXBlb2YgYj9zOkpTT04uc3RyaW5naWZ5KGIsVmMsYT9cIiAgXCI6bnVsbCl9ZnVuY3Rpb24gV2IoYil7cmV0dXJuIHcoYik/SlNPTi5wYXJzZShiKTpifWZ1bmN0aW9uIFFhKGIpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2I9ITA6YiYmMCE9PWIubGVuZ3RoPyhiPUsoXCJcIitiKSxiPSEoXCJmXCI9PWJ8fFwiMFwiPT1ifHxcImZhbHNlXCI9PWJ8fFwibm9cIj09Ynx8XCJuXCI9PWJ8fFwiW11cIj09YikpOmI9ITE7cmV0dXJuIGJ9ZnVuY3Rpb24gaGEoYil7Yj15KGIpLmNsb25lKCk7dHJ5e2IuZW1wdHkoKX1jYXRjaChhKXt9dmFyIGM9eShcIjxkaXY+XCIpLmFwcGVuZChiKS5odG1sKCk7dHJ5e3JldHVybiAzPT09YlswXS5ub2RlVHlwZT9LKGMpOmMubWF0Y2goL14oPFtePl0rPikvKVsxXS5yZXBsYWNlKC9ePChbXFx3XFwtXSspLyxcbmZ1bmN0aW9uKGEsYil7cmV0dXJuXCI8XCIrSyhiKX0pfWNhdGNoKGQpe3JldHVybiBLKGMpfX1mdW5jdGlvbiBYYihiKXt0cnl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChiKX1jYXRjaChhKXt9fWZ1bmN0aW9uIFliKGIpe3ZhciBhPXt9LGMsZDtxKChifHxcIlwiKS5zcGxpdChcIiZcIiksZnVuY3Rpb24oYil7YiYmKGM9Yi5zcGxpdChcIj1cIiksZD1YYihjWzBdKSxCKGQpJiYoYj1CKGNbMV0pP1hiKGNbMV0pOiEwLGFbZF0/TShhW2RdKT9hW2RdLnB1c2goYik6YVtkXT1bYVtkXSxiXTphW2RdPWIpKX0pO3JldHVybiBhfWZ1bmN0aW9uIFpiKGIpe3ZhciBhPVtdO3EoYixmdW5jdGlvbihiLGQpe00oYik/cShiLGZ1bmN0aW9uKGIpe2EucHVzaCh6YShkLCEwKSsoITA9PT1iP1wiXCI6XCI9XCIremEoYiwhMCkpKX0pOmEucHVzaCh6YShkLCEwKSsoITA9PT1iP1wiXCI6XCI9XCIremEoYiwhMCkpKX0pO3JldHVybiBhLmxlbmd0aD9hLmpvaW4oXCImXCIpOlwiXCJ9ZnVuY3Rpb24gd2IoYil7cmV0dXJuIHphKGIsXG4hMCkucmVwbGFjZSgvJTI2L2dpLFwiJlwiKS5yZXBsYWNlKC8lM0QvZ2ksXCI9XCIpLnJlcGxhY2UoLyUyQi9naSxcIitcIil9ZnVuY3Rpb24gemEoYixhKXtyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGIpLnJlcGxhY2UoLyU0MC9naSxcIkBcIikucmVwbGFjZSgvJTNBL2dpLFwiOlwiKS5yZXBsYWNlKC8lMjQvZyxcIiRcIikucmVwbGFjZSgvJTJDL2dpLFwiLFwiKS5yZXBsYWNlKC8lMjAvZyxhP1wiJTIwXCI6XCIrXCIpfWZ1bmN0aW9uIFdjKGIsYSl7ZnVuY3Rpb24gYyhhKXthJiZkLnB1c2goYSl9dmFyIGQ9W2JdLGUsZyxmPVtcIm5nOmFwcFwiLFwibmctYXBwXCIsXCJ4LW5nLWFwcFwiLFwiZGF0YS1uZy1hcHBcIl0saD0vXFxzbmdbOlxcLV1hcHAoOlxccyooW1xcd1xcZF9dKyk7Pyk/XFxzLztxKGYsZnVuY3Rpb24oYSl7ZlthXT0hMDtjKFUuZ2V0RWxlbWVudEJ5SWQoYSkpO2E9YS5yZXBsYWNlKFwiOlwiLFwiXFxcXDpcIik7Yi5xdWVyeVNlbGVjdG9yQWxsJiYocShiLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIrYSksYykscShiLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIrXG5hK1wiXFxcXDpcIiksYykscShiLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbXCIrYStcIl1cIiksYykpfSk7cShkLGZ1bmN0aW9uKGEpe2lmKCFlKXt2YXIgYj1oLmV4ZWMoXCIgXCIrYS5jbGFzc05hbWUrXCIgXCIpO2I/KGU9YSxnPShiWzJdfHxcIlwiKS5yZXBsYWNlKC9cXHMrL2csXCIsXCIpKTpxKGEuYXR0cmlidXRlcyxmdW5jdGlvbihiKXshZSYmZltiLm5hbWVdJiYoZT1hLGc9Yi52YWx1ZSl9KX19KTtlJiZhKGUsZz9bZ106W10pfWZ1bmN0aW9uICRiKGIsYSl7dmFyIGM9ZnVuY3Rpb24oKXtiPXkoYik7aWYoYi5pbmplY3RvcigpKXt2YXIgYz1iWzBdPT09VT9cImRvY3VtZW50XCI6aGEoYik7dGhyb3cgUGEoXCJidHN0cnBkXCIsYyk7fWE9YXx8W107YS51bnNoaWZ0KFtcIiRwcm92aWRlXCIsZnVuY3Rpb24oYSl7YS52YWx1ZShcIiRyb290RWxlbWVudFwiLGIpfV0pO2EudW5zaGlmdChcIm5nXCIpO2M9YWMoYSk7Yy5pbnZva2UoW1wiJHJvb3RTY29wZVwiLFwiJHJvb3RFbGVtZW50XCIsXCIkY29tcGlsZVwiLFwiJGluamVjdG9yXCIsXCIkYW5pbWF0ZVwiLFxuZnVuY3Rpb24oYSxiLGMsZCxlKXthLiRhcHBseShmdW5jdGlvbigpe2IuZGF0YShcIiRpbmplY3RvclwiLGQpO2MoYikoYSl9KX1dKTtyZXR1cm4gY30sZD0vXk5HX0RFRkVSX0JPT1RTVFJBUCEvO2lmKE8mJiFkLnRlc3QoTy5uYW1lKSlyZXR1cm4gYygpO08ubmFtZT1PLm5hbWUucmVwbGFjZShkLFwiXCIpO0VhLnJlc3VtZUJvb3RzdHJhcD1mdW5jdGlvbihiKXtxKGIsZnVuY3Rpb24oYil7YS5wdXNoKGIpfSk7YygpfX1mdW5jdGlvbiBmYihiLGEpe2E9YXx8XCJfXCI7cmV0dXJuIGIucmVwbGFjZShYYyxmdW5jdGlvbihiLGQpe3JldHVybihkP2E6XCJcIikrYi50b0xvd2VyQ2FzZSgpfSl9ZnVuY3Rpb24geGIoYixhLGMpe2lmKCFiKXRocm93IFBhKFwiYXJlcVwiLGF8fFwiP1wiLGN8fFwicmVxdWlyZWRcIik7cmV0dXJuIGJ9ZnVuY3Rpb24gUmEoYixhLGMpe2MmJk0oYikmJihiPWJbYi5sZW5ndGgtMV0pO3hiKFAoYiksYSxcIm5vdCBhIGZ1bmN0aW9uLCBnb3QgXCIrKGImJlwib2JqZWN0XCI9PXR5cGVvZiBiP1xuYi5jb25zdHJ1Y3Rvci5uYW1lfHxcIk9iamVjdFwiOnR5cGVvZiBiKSk7cmV0dXJuIGJ9ZnVuY3Rpb24gQWEoYixhKXtpZihcImhhc093blByb3BlcnR5XCI9PT1iKXRocm93IFBhKFwiYmFkbmFtZVwiLGEpO31mdW5jdGlvbiBiYyhiLGEsYyl7aWYoIWEpcmV0dXJuIGI7YT1hLnNwbGl0KFwiLlwiKTtmb3IodmFyIGQsZT1iLGc9YS5sZW5ndGgsZj0wO2Y8ZztmKyspZD1hW2ZdLGImJihiPShlPWIpW2RdKTtyZXR1cm4hYyYmUChiKT9lYihlLGIpOmJ9ZnVuY3Rpb24geWIoYil7dmFyIGE9YlswXTtiPWJbYi5sZW5ndGgtMV07aWYoYT09PWIpcmV0dXJuIHkoYSk7dmFyIGM9W2FdO2Rve2E9YS5uZXh0U2libGluZztpZighYSlicmVhaztjLnB1c2goYSl9d2hpbGUoYSE9PWIpO3JldHVybiB5KGMpfWZ1bmN0aW9uIFljKGIpe3ZhciBhPXQoXCIkaW5qZWN0b3JcIiksYz10KFwibmdcIik7Yj1iLmFuZ3VsYXJ8fChiLmFuZ3VsYXI9e30pO2IuJCRtaW5FcnI9Yi4kJG1pbkVycnx8dDtyZXR1cm4gYi5tb2R1bGV8fFxuKGIubW9kdWxlPWZ1bmN0aW9uKCl7dmFyIGI9e307cmV0dXJuIGZ1bmN0aW9uKGUsZyxmKXtpZihcImhhc093blByb3BlcnR5XCI9PT1lKXRocm93IGMoXCJiYWRuYW1lXCIsXCJtb2R1bGVcIik7ZyYmYi5oYXNPd25Qcm9wZXJ0eShlKSYmKGJbZV09bnVsbCk7cmV0dXJuIGJbZV18fChiW2VdPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYihhLGQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7Y1tlfHxcInB1c2hcIl0oW2EsZCxhcmd1bWVudHNdKTtyZXR1cm4gbn19aWYoIWcpdGhyb3cgYShcIm5vbW9kXCIsZSk7dmFyIGM9W10sZD1bXSxtPWIoXCIkaW5qZWN0b3JcIixcImludm9rZVwiKSxuPXtfaW52b2tlUXVldWU6YyxfcnVuQmxvY2tzOmQscmVxdWlyZXM6ZyxuYW1lOmUscHJvdmlkZXI6YihcIiRwcm92aWRlXCIsXCJwcm92aWRlclwiKSxmYWN0b3J5OmIoXCIkcHJvdmlkZVwiLFwiZmFjdG9yeVwiKSxzZXJ2aWNlOmIoXCIkcHJvdmlkZVwiLFwic2VydmljZVwiKSx2YWx1ZTpiKFwiJHByb3ZpZGVcIixcInZhbHVlXCIpLGNvbnN0YW50OmIoXCIkcHJvdmlkZVwiLFxuXCJjb25zdGFudFwiLFwidW5zaGlmdFwiKSxhbmltYXRpb246YihcIiRhbmltYXRlUHJvdmlkZXJcIixcInJlZ2lzdGVyXCIpLGZpbHRlcjpiKFwiJGZpbHRlclByb3ZpZGVyXCIsXCJyZWdpc3RlclwiKSxjb250cm9sbGVyOmIoXCIkY29udHJvbGxlclByb3ZpZGVyXCIsXCJyZWdpc3RlclwiKSxkaXJlY3RpdmU6YihcIiRjb21waWxlUHJvdmlkZXJcIixcImRpcmVjdGl2ZVwiKSxjb25maWc6bSxydW46ZnVuY3Rpb24oYSl7ZC5wdXNoKGEpO3JldHVybiB0aGlzfX07ZiYmbShmKTtyZXR1cm4gbn0oKSl9fSgpKX1mdW5jdGlvbiBaYyhiKXtEKGIse2Jvb3RzdHJhcDokYixjb3B5OmJhLGV4dGVuZDpELGVxdWFsczp4YSxlbGVtZW50OnksZm9yRWFjaDpxLGluamVjdG9yOmFjLG5vb3A6QyxiaW5kOmViLHRvSnNvbjpxYSxmcm9tSnNvbjpXYixpZGVudGl0eTpEYSxpc1VuZGVmaW5lZDpFLGlzRGVmaW5lZDpCLGlzU3RyaW5nOncsaXNGdW5jdGlvbjpQLGlzT2JqZWN0OlgsaXNOdW1iZXI6dmIsaXNFbGVtZW50OlRjLGlzQXJyYXk6TSxcbnZlcnNpb246JGMsaXNEYXRlOk5hLGxvd2VyY2FzZTpLLHVwcGVyY2FzZTpGYSxjYWxsYmFja3M6e2NvdW50ZXI6MH0sJCRtaW5FcnI6dCwkJGNzcDpWYn0pO1NhPVljKE8pO3RyeXtTYShcIm5nTG9jYWxlXCIpfWNhdGNoKGEpe1NhKFwibmdMb2NhbGVcIixbXSkucHJvdmlkZXIoXCIkbG9jYWxlXCIsYWQpfVNhKFwibmdcIixbXCJuZ0xvY2FsZVwiXSxbXCIkcHJvdmlkZVwiLGZ1bmN0aW9uKGEpe2EucHJvdmlkZXIoeyQkc2FuaXRpemVVcmk6YmR9KTthLnByb3ZpZGVyKFwiJGNvbXBpbGVcIixjYykuZGlyZWN0aXZlKHthOmNkLGlucHV0OmRjLHRleHRhcmVhOmRjLGZvcm06ZGQsc2NyaXB0OmVkLHNlbGVjdDpmZCxzdHlsZTpnZCxvcHRpb246aGQsbmdCaW5kOmlkLG5nQmluZEh0bWw6amQsbmdCaW5kVGVtcGxhdGU6a2QsbmdDbGFzczpsZCxuZ0NsYXNzRXZlbjptZCxuZ0NsYXNzT2RkOm5kLG5nQ2xvYWs6b2QsbmdDb250cm9sbGVyOnBkLG5nRm9ybTpxZCxuZ0hpZGU6cmQsbmdJZjpzZCxuZ0luY2x1ZGU6dGQsXG5uZ0luaXQ6dWQsbmdOb25CaW5kYWJsZTp2ZCxuZ1BsdXJhbGl6ZTp3ZCxuZ1JlcGVhdDp4ZCxuZ1Nob3c6eWQsbmdTdHlsZTp6ZCxuZ1N3aXRjaDpBZCxuZ1N3aXRjaFdoZW46QmQsbmdTd2l0Y2hEZWZhdWx0OkNkLG5nT3B0aW9uczpEZCxuZ1RyYW5zY2x1ZGU6RWQsbmdNb2RlbDpGZCxuZ0xpc3Q6R2QsbmdDaGFuZ2U6SGQscmVxdWlyZWQ6ZWMsbmdSZXF1aXJlZDplYyxuZ1ZhbHVlOklkfSkuZGlyZWN0aXZlKHtuZ0luY2x1ZGU6SmR9KS5kaXJlY3RpdmUoemIpLmRpcmVjdGl2ZShmYyk7YS5wcm92aWRlcih7JGFuY2hvclNjcm9sbDpLZCwkYW5pbWF0ZTpMZCwkYnJvd3NlcjpNZCwkY2FjaGVGYWN0b3J5Ok5kLCRjb250cm9sbGVyOk9kLCRkb2N1bWVudDpQZCwkZXhjZXB0aW9uSGFuZGxlcjpRZCwkZmlsdGVyOmdjLCRpbnRlcnBvbGF0ZTpSZCwkaW50ZXJ2YWw6U2QsJGh0dHA6VGQsJGh0dHBCYWNrZW5kOlVkLCRsb2NhdGlvbjpWZCwkbG9nOldkLCRwYXJzZTpYZCwkcm9vdFNjb3BlOllkLFxuJHE6WmQsJHNjZTokZCwkc2NlRGVsZWdhdGU6YWUsJHNuaWZmZXI6YmUsJHRlbXBsYXRlQ2FjaGU6Y2UsJHRpbWVvdXQ6ZGUsJHdpbmRvdzplZSwkJHJBRjpmZSwkJGFzeW5jQ2FsbGJhY2s6Z2V9KX1dKX1mdW5jdGlvbiBUYShiKXtyZXR1cm4gYi5yZXBsYWNlKGhlLGZ1bmN0aW9uKGEsYixkLGUpe3JldHVybiBlP2QudG9VcHBlckNhc2UoKTpkfSkucmVwbGFjZShpZSxcIk1veiQxXCIpfWZ1bmN0aW9uIEFiKGIsYSxjLGQpe2Z1bmN0aW9uIGUoYil7dmFyIGU9YyYmYj9bdGhpcy5maWx0ZXIoYildOlt0aGlzXSxsPWEsayxtLG4scCxyLHo7aWYoIWR8fG51bGwhPWIpZm9yKDtlLmxlbmd0aDspZm9yKGs9ZS5zaGlmdCgpLG09MCxuPWsubGVuZ3RoO208bjttKyspZm9yKHA9eShrW21dKSxsP3AudHJpZ2dlckhhbmRsZXIoXCIkZGVzdHJveVwiKTpsPSFsLHI9MCxwPSh6PXAuY2hpbGRyZW4oKSkubGVuZ3RoO3I8cDtyKyspZS5wdXNoKEdhKHpbcl0pKTtyZXR1cm4gZy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9XG52YXIgZz1HYS5mbltiXSxnPWcuJG9yaWdpbmFsfHxnO2UuJG9yaWdpbmFsPWc7R2EuZm5bYl09ZX1mdW5jdGlvbiBOKGIpe2lmKGIgaW5zdGFuY2VvZiBOKXJldHVybiBiO3coYikmJihiPWNhKGIpKTtpZighKHRoaXMgaW5zdGFuY2VvZiBOKSl7aWYodyhiKSYmXCI8XCIhPWIuY2hhckF0KDApKXRocm93IEJiKFwibm9zZWxcIik7cmV0dXJuIG5ldyBOKGIpfWlmKHcoYikpe3ZhciBhPWI7Yj1VO3ZhciBjO2lmKGM9amUuZXhlYyhhKSliPVtiLmNyZWF0ZUVsZW1lbnQoY1sxXSldO2Vsc2V7dmFyIGQ9YixlO2I9ZC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7Yz1bXTtpZihDYi50ZXN0KGEpKXtkPWIuYXBwZW5kQ2hpbGQoZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTtlPShrZS5leGVjKGEpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKTtlPWVhW2VdfHxlYS5fZGVmYXVsdDtkLmlubmVySFRNTD1cIjxkaXY+JiMxNjA7PC9kaXY+XCIrZVsxXSthLnJlcGxhY2UobGUsXCI8JDE+PC8kMj5cIikrZVsyXTtcbmQucmVtb3ZlQ2hpbGQoZC5maXJzdENoaWxkKTtmb3IoYT1lWzBdO2EtLTspZD1kLmxhc3RDaGlsZDthPTA7Zm9yKGU9ZC5jaGlsZE5vZGVzLmxlbmd0aDthPGU7KythKWMucHVzaChkLmNoaWxkTm9kZXNbYV0pO2Q9Yi5maXJzdENoaWxkO2QudGV4dENvbnRlbnQ9XCJcIn1lbHNlIGMucHVzaChkLmNyZWF0ZVRleHROb2RlKGEpKTtiLnRleHRDb250ZW50PVwiXCI7Yi5pbm5lckhUTUw9XCJcIjtiPWN9RGIodGhpcyxiKTt5KFUuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpKS5hcHBlbmQodGhpcyl9ZWxzZSBEYih0aGlzLGIpfWZ1bmN0aW9uIEViKGIpe3JldHVybiBiLmNsb25lTm9kZSghMCl9ZnVuY3Rpb24gSGEoYil7aGMoYik7dmFyIGE9MDtmb3IoYj1iLmNoaWxkTm9kZXN8fFtdO2E8Yi5sZW5ndGg7YSsrKUhhKGJbYV0pfWZ1bmN0aW9uIGljKGIsYSxjLGQpe2lmKEIoZCkpdGhyb3cgQmIoXCJvZmZhcmdzXCIpO3ZhciBlPWxhKGIsXCJldmVudHNcIik7bGEoYixcImhhbmRsZVwiKSYmKEUoYSk/cShlLFxuZnVuY3Rpb24oYSxjKXtGYihiLGMsYSk7ZGVsZXRlIGVbY119KTpxKGEuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEpe0UoYyk/KEZiKGIsYSxlW2FdKSxkZWxldGUgZVthXSk6T2EoZVthXXx8W10sYyl9KSl9ZnVuY3Rpb24gaGMoYixhKXt2YXIgYz1iW2diXSxkPVVhW2NdO2QmJihhP2RlbGV0ZSBVYVtjXS5kYXRhW2FdOihkLmhhbmRsZSYmKGQuZXZlbnRzLiRkZXN0cm95JiZkLmhhbmRsZSh7fSxcIiRkZXN0cm95XCIpLGljKGIpKSxkZWxldGUgVWFbY10sYltnYl09cykpfWZ1bmN0aW9uIGxhKGIsYSxjKXt2YXIgZD1iW2diXSxkPVVhW2R8fC0xXTtpZihCKGMpKWR8fChiW2diXT1kPSsrbWUsZD1VYVtkXT17fSksZFthXT1jO2Vsc2UgcmV0dXJuIGQmJmRbYV19ZnVuY3Rpb24gamMoYixhLGMpe3ZhciBkPWxhKGIsXCJkYXRhXCIpLGU9QihjKSxnPSFlJiZCKGEpLGY9ZyYmIVgoYSk7ZHx8Znx8bGEoYixcImRhdGFcIixkPXt9KTtpZihlKWRbYV09YztlbHNlIGlmKGcpe2lmKGYpcmV0dXJuIGQmJmRbYV07XG5EKGQsYSl9ZWxzZSByZXR1cm4gZH1mdW5jdGlvbiBHYihiLGEpe3JldHVybiBiLmdldEF0dHJpYnV0ZT8tMTwoXCIgXCIrKGIuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCIpK1wiIFwiKS5yZXBsYWNlKC9bXFxuXFx0XS9nLFwiIFwiKS5pbmRleE9mKFwiIFwiK2ErXCIgXCIpOiExfWZ1bmN0aW9uIGhiKGIsYSl7YSYmYi5zZXRBdHRyaWJ1dGUmJnEoYS5zcGxpdChcIiBcIiksZnVuY3Rpb24oYSl7Yi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGNhKChcIiBcIisoYi5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIikrXCIgXCIpLnJlcGxhY2UoL1tcXG5cXHRdL2csXCIgXCIpLnJlcGxhY2UoXCIgXCIrY2EoYSkrXCIgXCIsXCIgXCIpKSl9KX1mdW5jdGlvbiBpYihiLGEpe2lmKGEmJmIuc2V0QXR0cmlidXRlKXt2YXIgYz0oXCIgXCIrKGIuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCIpK1wiIFwiKS5yZXBsYWNlKC9bXFxuXFx0XS9nLFwiIFwiKTtxKGEuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEpe2E9Y2EoYSk7LTE9PT1jLmluZGV4T2YoXCIgXCIrYStcIiBcIikmJlxuKGMrPWErXCIgXCIpfSk7Yi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGNhKGMpKX19ZnVuY3Rpb24gRGIoYixhKXtpZihhKXthPWEubm9kZU5hbWV8fCFCKGEubGVuZ3RoKXx8Q2EoYSk/W2FdOmE7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspYi5wdXNoKGFbY10pfX1mdW5jdGlvbiBrYyhiLGEpe3JldHVybiBqYihiLFwiJFwiKyhhfHxcIm5nQ29udHJvbGxlclwiKStcIkNvbnRyb2xsZXJcIil9ZnVuY3Rpb24gamIoYixhLGMpe2I9eShiKTs5PT1iWzBdLm5vZGVUeXBlJiYoYj1iLmZpbmQoXCJodG1sXCIpKTtmb3IoYT1NKGEpP2E6W2FdO2IubGVuZ3RoOyl7Zm9yKHZhciBkPWJbMF0sZT0wLGc9YS5sZW5ndGg7ZTxnO2UrKylpZigoYz1iLmRhdGEoYVtlXSkpIT09cylyZXR1cm4gYztiPXkoZC5wYXJlbnROb2RlfHwxMT09PWQubm9kZVR5cGUmJmQuaG9zdCl9fWZ1bmN0aW9uIGxjKGIpe2Zvcih2YXIgYT0wLGM9Yi5jaGlsZE5vZGVzO2E8Yy5sZW5ndGg7YSsrKUhhKGNbYV0pO2Zvcig7Yi5maXJzdENoaWxkOyliLnJlbW92ZUNoaWxkKGIuZmlyc3RDaGlsZCl9XG5mdW5jdGlvbiBtYyhiLGEpe3ZhciBjPWtiW2EudG9Mb3dlckNhc2UoKV07cmV0dXJuIGMmJm5jW2Iubm9kZU5hbWVdJiZjfWZ1bmN0aW9uIG5lKGIsYSl7dmFyIGM9ZnVuY3Rpb24oYyxlKXtjLnByZXZlbnREZWZhdWx0fHwoYy5wcmV2ZW50RGVmYXVsdD1mdW5jdGlvbigpe2MucmV0dXJuVmFsdWU9ITF9KTtjLnN0b3BQcm9wYWdhdGlvbnx8KGMuc3RvcFByb3BhZ2F0aW9uPWZ1bmN0aW9uKCl7Yy5jYW5jZWxCdWJibGU9ITB9KTtjLnRhcmdldHx8KGMudGFyZ2V0PWMuc3JjRWxlbWVudHx8VSk7aWYoRShjLmRlZmF1bHRQcmV2ZW50ZWQpKXt2YXIgZz1jLnByZXZlbnREZWZhdWx0O2MucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oKXtjLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7Zy5jYWxsKGMpfTtjLmRlZmF1bHRQcmV2ZW50ZWQ9ITF9Yy5pc0RlZmF1bHRQcmV2ZW50ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gYy5kZWZhdWx0UHJldmVudGVkfHwhMT09PWMucmV0dXJuVmFsdWV9O3ZhciBmPVViKGFbZXx8XG5jLnR5cGVdfHxbXSk7cShmLGZ1bmN0aW9uKGEpe2EuY2FsbChiLGMpfSk7OD49Uz8oYy5wcmV2ZW50RGVmYXVsdD1udWxsLGMuc3RvcFByb3BhZ2F0aW9uPW51bGwsYy5pc0RlZmF1bHRQcmV2ZW50ZWQ9bnVsbCk6KGRlbGV0ZSBjLnByZXZlbnREZWZhdWx0LGRlbGV0ZSBjLnN0b3BQcm9wYWdhdGlvbixkZWxldGUgYy5pc0RlZmF1bHRQcmV2ZW50ZWQpfTtjLmVsZW09YjtyZXR1cm4gY31mdW5jdGlvbiBJYShiKXt2YXIgYT10eXBlb2YgYixjO1wib2JqZWN0XCI9PWEmJm51bGwhPT1iP1wiZnVuY3Rpb25cIj09dHlwZW9mKGM9Yi4kJGhhc2hLZXkpP2M9Yi4kJGhhc2hLZXkoKTpjPT09cyYmKGM9Yi4kJGhhc2hLZXk9YmIoKSk6Yz1iO3JldHVybiBhK1wiOlwiK2N9ZnVuY3Rpb24gVmEoYil7cShiLHRoaXMucHV0LHRoaXMpfWZ1bmN0aW9uIG9jKGIpe3ZhciBhLGM7XCJmdW5jdGlvblwiPT10eXBlb2YgYj8oYT1iLiRpbmplY3QpfHwoYT1bXSxiLmxlbmd0aCYmKGM9Yi50b1N0cmluZygpLnJlcGxhY2Uob2UsXG5cIlwiKSxjPWMubWF0Y2gocGUpLHEoY1sxXS5zcGxpdChxZSksZnVuY3Rpb24oYil7Yi5yZXBsYWNlKHJlLGZ1bmN0aW9uKGIsYyxkKXthLnB1c2goZCl9KX0pKSxiLiRpbmplY3Q9YSk6TShiKT8oYz1iLmxlbmd0aC0xLFJhKGJbY10sXCJmblwiKSxhPWIuc2xpY2UoMCxjKSk6UmEoYixcImZuXCIsITApO3JldHVybiBhfWZ1bmN0aW9uIGFjKGIpe2Z1bmN0aW9uIGEoYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7aWYoWChiKSlxKGIsUmIoYSkpO2Vsc2UgcmV0dXJuIGEoYixjKX19ZnVuY3Rpb24gYyhhLGIpe0FhKGEsXCJzZXJ2aWNlXCIpO2lmKFAoYil8fE0oYikpYj1uLmluc3RhbnRpYXRlKGIpO2lmKCFiLiRnZXQpdGhyb3cgV2EoXCJwZ2V0XCIsYSk7cmV0dXJuIG1bYStoXT1ifWZ1bmN0aW9uIGQoYSxiKXtyZXR1cm4gYyhhLHskZ2V0OmJ9KX1mdW5jdGlvbiBlKGEpe3ZhciBiPVtdLGMsZCxnLGg7cShhLGZ1bmN0aW9uKGEpe2lmKCFrLmdldChhKSl7ay5wdXQoYSwhMCk7dHJ5e2lmKHcoYSkpZm9yKGM9XG5TYShhKSxiPWIuY29uY2F0KGUoYy5yZXF1aXJlcykpLmNvbmNhdChjLl9ydW5CbG9ja3MpLGQ9Yy5faW52b2tlUXVldWUsZz0wLGg9ZC5sZW5ndGg7ZzxoO2crKyl7dmFyIGY9ZFtnXSxsPW4uZ2V0KGZbMF0pO2xbZlsxXV0uYXBwbHkobCxmWzJdKX1lbHNlIFAoYSk/Yi5wdXNoKG4uaW52b2tlKGEpKTpNKGEpP2IucHVzaChuLmludm9rZShhKSk6UmEoYSxcIm1vZHVsZVwiKX1jYXRjaChtKXt0aHJvdyBNKGEpJiYoYT1hW2EubGVuZ3RoLTFdKSxtLm1lc3NhZ2UmJihtLnN0YWNrJiYtMT09bS5zdGFjay5pbmRleE9mKG0ubWVzc2FnZSkpJiYobT1tLm1lc3NhZ2UrXCJcXG5cIittLnN0YWNrKSxXYShcIm1vZHVsZXJyXCIsYSxtLnN0YWNrfHxtLm1lc3NhZ2V8fG0pO319fSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZyhhLGIpe2Z1bmN0aW9uIGMoZCl7aWYoYS5oYXNPd25Qcm9wZXJ0eShkKSl7aWYoYVtkXT09PWYpdGhyb3cgV2EoXCJjZGVwXCIsbC5qb2luKFwiIDwtIFwiKSk7cmV0dXJuIGFbZF19dHJ5e3JldHVybiBsLnVuc2hpZnQoZCksXG5hW2RdPWYsYVtkXT1iKGQpfWNhdGNoKGUpe3Rocm93IGFbZF09PT1mJiZkZWxldGUgYVtkXSxlO31maW5hbGx5e2wuc2hpZnQoKX19ZnVuY3Rpb24gZChhLGIsZSl7dmFyIGc9W10saD1vYyhhKSxmLGwsaztsPTA7Zm9yKGY9aC5sZW5ndGg7bDxmO2wrKyl7az1oW2xdO2lmKFwic3RyaW5nXCIhPT10eXBlb2Ygayl0aHJvdyBXYShcIml0a25cIixrKTtnLnB1c2goZSYmZS5oYXNPd25Qcm9wZXJ0eShrKT9lW2tdOmMoaykpfWEuJGluamVjdHx8KGE9YVtmXSk7cmV0dXJuIGEuYXBwbHkoYixnKX1yZXR1cm57aW52b2tlOmQsaW5zdGFudGlhdGU6ZnVuY3Rpb24oYSxiKXt2YXIgYz1mdW5jdGlvbigpe30sZTtjLnByb3RvdHlwZT0oTShhKT9hW2EubGVuZ3RoLTFdOmEpLnByb3RvdHlwZTtjPW5ldyBjO2U9ZChhLGMsYik7cmV0dXJuIFgoZSl8fFAoZSk/ZTpjfSxnZXQ6Yyxhbm5vdGF0ZTpvYyxoYXM6ZnVuY3Rpb24oYil7cmV0dXJuIG0uaGFzT3duUHJvcGVydHkoYitoKXx8YS5oYXNPd25Qcm9wZXJ0eShiKX19fVxudmFyIGY9e30saD1cIlByb3ZpZGVyXCIsbD1bXSxrPW5ldyBWYSxtPXskcHJvdmlkZTp7cHJvdmlkZXI6YShjKSxmYWN0b3J5OmEoZCksc2VydmljZTphKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGQoYSxbXCIkaW5qZWN0b3JcIixmdW5jdGlvbihhKXtyZXR1cm4gYS5pbnN0YW50aWF0ZShiKX1dKX0pLHZhbHVlOmEoZnVuY3Rpb24oYSxiKXtyZXR1cm4gZChhLGFhKGIpKX0pLGNvbnN0YW50OmEoZnVuY3Rpb24oYSxiKXtBYShhLFwiY29uc3RhbnRcIik7bVthXT1iO3BbYV09Yn0pLGRlY29yYXRvcjpmdW5jdGlvbihhLGIpe3ZhciBjPW4uZ2V0KGEraCksZD1jLiRnZXQ7Yy4kZ2V0PWZ1bmN0aW9uKCl7dmFyIGE9ci5pbnZva2UoZCxjKTtyZXR1cm4gci5pbnZva2UoYixudWxsLHskZGVsZWdhdGU6YX0pfX19fSxuPW0uJGluamVjdG9yPWcobSxmdW5jdGlvbigpe3Rocm93IFdhKFwidW5wclwiLGwuam9pbihcIiA8LSBcIikpO30pLHA9e30scj1wLiRpbmplY3Rvcj1nKHAsZnVuY3Rpb24oYSl7YT1uLmdldChhK1xuaCk7cmV0dXJuIHIuaW52b2tlKGEuJGdldCxhKX0pO3EoZShiKSxmdW5jdGlvbihhKXtyLmludm9rZShhfHxDKX0pO3JldHVybiByfWZ1bmN0aW9uIEtkKCl7dmFyIGI9ITA7dGhpcy5kaXNhYmxlQXV0b1Njcm9sbGluZz1mdW5jdGlvbigpe2I9ITF9O3RoaXMuJGdldD1bXCIkd2luZG93XCIsXCIkbG9jYXRpb25cIixcIiRyb290U2NvcGVcIixmdW5jdGlvbihhLGMsZCl7ZnVuY3Rpb24gZShhKXt2YXIgYj1udWxsO3EoYSxmdW5jdGlvbihhKXtifHxcImFcIiE9PUsoYS5ub2RlTmFtZSl8fChiPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZygpe3ZhciBiPWMuaGFzaCgpLGQ7Yj8oZD1mLmdldEVsZW1lbnRCeUlkKGIpKT9kLnNjcm9sbEludG9WaWV3KCk6KGQ9ZShmLmdldEVsZW1lbnRzQnlOYW1lKGIpKSk/ZC5zY3JvbGxJbnRvVmlldygpOlwidG9wXCI9PT1iJiZhLnNjcm9sbFRvKDAsMCk6YS5zY3JvbGxUbygwLDApfXZhciBmPWEuZG9jdW1lbnQ7YiYmZC4kd2F0Y2goZnVuY3Rpb24oKXtyZXR1cm4gYy5oYXNoKCl9LFxuZnVuY3Rpb24oKXtkLiRldmFsQXN5bmMoZyl9KTtyZXR1cm4gZ31dfWZ1bmN0aW9uIGdlKCl7dGhpcy4kZ2V0PVtcIiQkckFGXCIsXCIkdGltZW91dFwiLGZ1bmN0aW9uKGIsYSl7cmV0dXJuIGIuc3VwcG9ydGVkP2Z1bmN0aW9uKGEpe3JldHVybiBiKGEpfTpmdW5jdGlvbihiKXtyZXR1cm4gYShiLDAsITEpfX1dfWZ1bmN0aW9uIHNlKGIsYSxjLGQpe2Z1bmN0aW9uIGUoYSl7dHJ5e2EuYXBwbHkobnVsbCx5YS5jYWxsKGFyZ3VtZW50cywxKSl9ZmluYWxseXtpZih6LS0sMD09PXopZm9yKDt1Lmxlbmd0aDspdHJ5e3UucG9wKCkoKX1jYXRjaChiKXtjLmVycm9yKGIpfX19ZnVuY3Rpb24gZyhhLGIpeyhmdW5jdGlvbiBUKCl7cShGLGZ1bmN0aW9uKGEpe2EoKX0pO3Y9YihULGEpfSkoKX1mdW5jdGlvbiBmKCl7eD1udWxsO0ohPWgudXJsKCkmJihKPWgudXJsKCkscShtYSxmdW5jdGlvbihhKXthKGgudXJsKCkpfSkpfXZhciBoPXRoaXMsbD1hWzBdLGs9Yi5sb2NhdGlvbixtPWIuaGlzdG9yeSxcbm49Yi5zZXRUaW1lb3V0LHA9Yi5jbGVhclRpbWVvdXQscj17fTtoLmlzTW9jaz0hMTt2YXIgej0wLHU9W107aC4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0PWU7aC4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50PWZ1bmN0aW9uKCl7eisrfTtoLm5vdGlmeVdoZW5Ob091dHN0YW5kaW5nUmVxdWVzdHM9ZnVuY3Rpb24oYSl7cShGLGZ1bmN0aW9uKGEpe2EoKX0pOzA9PT16P2EoKTp1LnB1c2goYSl9O3ZhciBGPVtdLHY7aC5hZGRQb2xsRm49ZnVuY3Rpb24oYSl7RSh2KSYmZygxMDAsbik7Ri5wdXNoKGEpO3JldHVybiBhfTt2YXIgSj1rLmhyZWYsQT1hLmZpbmQoXCJiYXNlXCIpLHg9bnVsbDtoLnVybD1mdW5jdGlvbihhLGMpe2shPT1iLmxvY2F0aW9uJiYoaz1iLmxvY2F0aW9uKTttIT09Yi5oaXN0b3J5JiYobT1iLmhpc3RvcnkpO2lmKGEpe2lmKEohPWEpcmV0dXJuIEo9YSxkLmhpc3Rvcnk/Yz9tLnJlcGxhY2VTdGF0ZShudWxsLFwiXCIsYSk6KG0ucHVzaFN0YXRlKG51bGwsXCJcIixcbmEpLEEuYXR0cihcImhyZWZcIixBLmF0dHIoXCJocmVmXCIpKSk6KHg9YSxjP2sucmVwbGFjZShhKTprLmhyZWY9YSksaH1lbHNlIHJldHVybiB4fHxrLmhyZWYucmVwbGFjZSgvJTI3L2csXCInXCIpfTt2YXIgbWE9W10sTD0hMTtoLm9uVXJsQ2hhbmdlPWZ1bmN0aW9uKGEpe2lmKCFMKXtpZihkLmhpc3RvcnkpeShiKS5vbihcInBvcHN0YXRlXCIsZik7aWYoZC5oYXNoY2hhbmdlKXkoYikub24oXCJoYXNoY2hhbmdlXCIsZik7ZWxzZSBoLmFkZFBvbGxGbihmKTtMPSEwfW1hLnB1c2goYSk7cmV0dXJuIGF9O2guYmFzZUhyZWY9ZnVuY3Rpb24oKXt2YXIgYT1BLmF0dHIoXCJocmVmXCIpO3JldHVybiBhP2EucmVwbGFjZSgvXihodHRwcz9cXDopP1xcL1xcL1teXFwvXSovLFwiXCIpOlwiXCJ9O3ZhciBRPXt9LGRhPVwiXCIsSD1oLmJhc2VIcmVmKCk7aC5jb29raWVzPWZ1bmN0aW9uKGEsYil7dmFyIGQsZSxnLGg7aWYoYSliPT09cz9sLmNvb2tpZT1lc2NhcGUoYSkrXCI9O3BhdGg9XCIrSCtcIjtleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgR01UXCI6XG53KGIpJiYoZD0obC5jb29raWU9ZXNjYXBlKGEpK1wiPVwiK2VzY2FwZShiKStcIjtwYXRoPVwiK0gpLmxlbmd0aCsxLDQwOTY8ZCYmYy53YXJuKFwiQ29va2llICdcIithK1wiJyBwb3NzaWJseSBub3Qgc2V0IG9yIG92ZXJmbG93ZWQgYmVjYXVzZSBpdCB3YXMgdG9vIGxhcmdlIChcIitkK1wiID4gNDA5NiBieXRlcykhXCIpKTtlbHNle2lmKGwuY29va2llIT09ZGEpZm9yKGRhPWwuY29va2llLGQ9ZGEuc3BsaXQoXCI7IFwiKSxRPXt9LGc9MDtnPGQubGVuZ3RoO2crKyllPWRbZ10saD1lLmluZGV4T2YoXCI9XCIpLDA8aCYmKGE9dW5lc2NhcGUoZS5zdWJzdHJpbmcoMCxoKSksUVthXT09PXMmJihRW2FdPXVuZXNjYXBlKGUuc3Vic3RyaW5nKGgrMSkpKSk7cmV0dXJuIFF9fTtoLmRlZmVyPWZ1bmN0aW9uKGEsYil7dmFyIGM7eisrO2M9bihmdW5jdGlvbigpe2RlbGV0ZSByW2NdO2UoYSl9LGJ8fDApO3JbY109ITA7cmV0dXJuIGN9O2guZGVmZXIuY2FuY2VsPWZ1bmN0aW9uKGEpe3JldHVybiByW2FdPyhkZWxldGUgclthXSxcbnAoYSksZShDKSwhMCk6ITF9fWZ1bmN0aW9uIE1kKCl7dGhpcy4kZ2V0PVtcIiR3aW5kb3dcIixcIiRsb2dcIixcIiRzbmlmZmVyXCIsXCIkZG9jdW1lbnRcIixmdW5jdGlvbihiLGEsYyxkKXtyZXR1cm4gbmV3IHNlKGIsZCxhLGMpfV19ZnVuY3Rpb24gTmQoKXt0aGlzLiRnZXQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGIsZCl7ZnVuY3Rpb24gZShhKXthIT1uJiYocD9wPT1hJiYocD1hLm4pOnA9YSxnKGEubixhLnApLGcoYSxuKSxuPWEsbi5uPW51bGwpfWZ1bmN0aW9uIGcoYSxiKXthIT1iJiYoYSYmKGEucD1iKSxiJiYoYi5uPWEpKX1pZihiIGluIGEpdGhyb3cgdChcIiRjYWNoZUZhY3RvcnlcIikoXCJpaWRcIixiKTt2YXIgZj0wLGg9RCh7fSxkLHtpZDpifSksbD17fSxrPWQmJmQuY2FwYWNpdHl8fE51bWJlci5NQVhfVkFMVUUsbT17fSxuPW51bGwscD1udWxsO3JldHVybiBhW2JdPXtwdXQ6ZnVuY3Rpb24oYSxiKXtpZihrPE51bWJlci5NQVhfVkFMVUUpe3ZhciBjPW1bYV18fChtW2FdPXtrZXk6YX0pO1xuZShjKX1pZighRShiKSlyZXR1cm4gYSBpbiBsfHxmKyssbFthXT1iLGY+ayYmdGhpcy5yZW1vdmUocC5rZXkpLGJ9LGdldDpmdW5jdGlvbihhKXtpZihrPE51bWJlci5NQVhfVkFMVUUpe3ZhciBiPW1bYV07aWYoIWIpcmV0dXJuO2UoYil9cmV0dXJuIGxbYV19LHJlbW92ZTpmdW5jdGlvbihhKXtpZihrPE51bWJlci5NQVhfVkFMVUUpe3ZhciBiPW1bYV07aWYoIWIpcmV0dXJuO2I9PW4mJihuPWIucCk7Yj09cCYmKHA9Yi5uKTtnKGIubixiLnApO2RlbGV0ZSBtW2FdfWRlbGV0ZSBsW2FdO2YtLX0scmVtb3ZlQWxsOmZ1bmN0aW9uKCl7bD17fTtmPTA7bT17fTtuPXA9bnVsbH0sZGVzdHJveTpmdW5jdGlvbigpe209aD1sPW51bGw7ZGVsZXRlIGFbYl19LGluZm86ZnVuY3Rpb24oKXtyZXR1cm4gRCh7fSxoLHtzaXplOmZ9KX19fXZhciBhPXt9O2IuaW5mbz1mdW5jdGlvbigpe3ZhciBiPXt9O3EoYSxmdW5jdGlvbihhLGUpe2JbZV09YS5pbmZvKCl9KTtyZXR1cm4gYn07Yi5nZXQ9ZnVuY3Rpb24oYil7cmV0dXJuIGFbYl19O1xucmV0dXJuIGJ9fWZ1bmN0aW9uIGNlKCl7dGhpcy4kZ2V0PVtcIiRjYWNoZUZhY3RvcnlcIixmdW5jdGlvbihiKXtyZXR1cm4gYihcInRlbXBsYXRlc1wiKX1dfWZ1bmN0aW9uIGNjKGIsYSl7dmFyIGM9e30sZD1cIkRpcmVjdGl2ZVwiLGU9L15cXHMqZGlyZWN0aXZlXFw6XFxzKihbXFxkXFx3XFwtX10rKVxccysoLiopJC8sZz0vKChbXFxkXFx3XFwtX10rKSg/OlxcOihbXjtdKykpPzs/KS8sZj0vXihvblthLXpdK3xmb3JtYWN0aW9uKSQvO3RoaXMuZGlyZWN0aXZlPWZ1bmN0aW9uIGwoYSxlKXtBYShhLFwiZGlyZWN0aXZlXCIpO3coYSk/KHhiKGUsXCJkaXJlY3RpdmVGYWN0b3J5XCIpLGMuaGFzT3duUHJvcGVydHkoYSl8fChjW2FdPVtdLGIuZmFjdG9yeShhK2QsW1wiJGluamVjdG9yXCIsXCIkZXhjZXB0aW9uSGFuZGxlclwiLGZ1bmN0aW9uKGIsZCl7dmFyIGU9W107cShjW2FdLGZ1bmN0aW9uKGMsZyl7dHJ5e3ZhciBmPWIuaW52b2tlKGMpO1AoZik/Zj17Y29tcGlsZTphYShmKX06IWYuY29tcGlsZSYmZi5saW5rJiYoZi5jb21waWxlPVxuYWEoZi5saW5rKSk7Zi5wcmlvcml0eT1mLnByaW9yaXR5fHwwO2YuaW5kZXg9ZztmLm5hbWU9Zi5uYW1lfHxhO2YucmVxdWlyZT1mLnJlcXVpcmV8fGYuY29udHJvbGxlciYmZi5uYW1lO2YucmVzdHJpY3Q9Zi5yZXN0cmljdHx8XCJBXCI7ZS5wdXNoKGYpfWNhdGNoKGwpe2QobCl9fSk7cmV0dXJuIGV9XSkpLGNbYV0ucHVzaChlKSk6cShhLFJiKGwpKTtyZXR1cm4gdGhpc307dGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdD1mdW5jdGlvbihiKXtyZXR1cm4gQihiKT8oYS5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdChiKSx0aGlzKTphLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KCl9O3RoaXMuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0PWZ1bmN0aW9uKGIpe3JldHVybiBCKGIpPyhhLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdChiKSx0aGlzKTphLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCgpfTt0aGlzLiRnZXQ9W1wiJGluamVjdG9yXCIsXCIkaW50ZXJwb2xhdGVcIixcblwiJGV4Y2VwdGlvbkhhbmRsZXJcIixcIiRodHRwXCIsXCIkdGVtcGxhdGVDYWNoZVwiLFwiJHBhcnNlXCIsXCIkY29udHJvbGxlclwiLFwiJHJvb3RTY29wZVwiLFwiJGRvY3VtZW50XCIsXCIkc2NlXCIsXCIkYW5pbWF0ZVwiLFwiJCRzYW5pdGl6ZVVyaVwiLGZ1bmN0aW9uKGEsYixtLG4scCxyLHosdSxGLHYsSixBKXtmdW5jdGlvbiB4KGEsYixjLGQsZSl7YSBpbnN0YW5jZW9mIHl8fChhPXkoYSkpO3EoYSxmdW5jdGlvbihiLGMpezM9PWIubm9kZVR5cGUmJmIubm9kZVZhbHVlLm1hdGNoKC9cXFMrLykmJihhW2NdPXkoYikud3JhcChcIjxzcGFuPjwvc3Bhbj5cIikucGFyZW50KClbMF0pfSk7dmFyIGc9TChhLGIsYSxjLGQsZSk7bWEoYSxcIm5nLXNjb3BlXCIpO3JldHVybiBmdW5jdGlvbihiLGMsZCl7eGIoYixcInNjb3BlXCIpO3ZhciBlPWM/SmEuY2xvbmUuY2FsbChhKTphO3EoZCxmdW5jdGlvbihhLGIpe2UuZGF0YShcIiRcIitiK1wiQ29udHJvbGxlclwiLGEpfSk7ZD0wO2Zvcih2YXIgZj1lLmxlbmd0aDtkPGY7ZCsrKXt2YXIgbD1cbmVbZF0ubm9kZVR5cGU7MSE9PWwmJjkhPT1sfHxlLmVxKGQpLmRhdGEoXCIkc2NvcGVcIixiKX1jJiZjKGUsYik7ZyYmZyhiLGUsZSk7cmV0dXJuIGV9fWZ1bmN0aW9uIG1hKGEsYil7dHJ5e2EuYWRkQ2xhc3MoYil9Y2F0Y2goYyl7fX1mdW5jdGlvbiBMKGEsYixjLGQsZSxnKXtmdW5jdGlvbiBmKGEsYyxkLGUpe3ZhciBnLGssbSxyLG4scCx6O2c9Yy5sZW5ndGg7dmFyIEk9QXJyYXkoZyk7Zm9yKG49MDtuPGc7bisrKUlbbl09Y1tuXTt6PW49MDtmb3IocD1sLmxlbmd0aDtuPHA7eisrKWs9SVt6XSxjPWxbbisrXSxnPWxbbisrXSxtPXkoayksYz8oYy5zY29wZT8ocj1hLiRuZXcoKSxtLmRhdGEoXCIkc2NvcGVcIixyKSk6cj1hLChtPWMudHJhbnNjbHVkZSl8fCFlJiZiP2MoZyxyLGssZCxRKGEsbXx8YikpOmMoZyxyLGssZCxlKSk6ZyYmZyhhLGsuY2hpbGROb2RlcyxzLGUpfWZvcih2YXIgbD1bXSxrLG0scixuLHA9MDtwPGEubGVuZ3RoO3ArKylrPW5ldyBIYixtPWRhKGFbcF0sW10sayxcbjA9PT1wP2Q6cyxlKSwoZz1tLmxlbmd0aD9pYShtLGFbcF0sayxiLGMsbnVsbCxbXSxbXSxnKTpudWxsKSYmZy5zY29wZSYmbWEoeShhW3BdKSxcIm5nLXNjb3BlXCIpLGs9ZyYmZy50ZXJtaW5hbHx8IShyPWFbcF0uY2hpbGROb2Rlcyl8fCFyLmxlbmd0aD9udWxsOkwocixnP2cudHJhbnNjbHVkZTpiKSxsLnB1c2goZyxrKSxuPW58fGd8fGssZz1udWxsO3JldHVybiBuP2Y6bnVsbH1mdW5jdGlvbiBRKGEsYil7cmV0dXJuIGZ1bmN0aW9uKGMsZCxlKXt2YXIgZz0hMTtjfHwoYz1hLiRuZXcoKSxnPWMuJCR0cmFuc2NsdWRlZD0hMCk7ZD1iKGMsZCxlKTtpZihnKWQub24oXCIkZGVzdHJveVwiLGViKGMsYy4kZGVzdHJveSkpO3JldHVybiBkfX1mdW5jdGlvbiBkYShhLGIsYyxkLGYpe3ZhciBrPWMuJGF0dHIsbDtzd2l0Y2goYS5ub2RlVHlwZSl7Y2FzZSAxOlQoYixuYShLYShhKS50b0xvd2VyQ2FzZSgpKSxcIkVcIixkLGYpO3ZhciBtLHIsbjtsPWEuYXR0cmlidXRlcztmb3IodmFyIHA9MCx6PVxubCYmbC5sZW5ndGg7cDx6O3ArKyl7dmFyIHU9ITEsRj0hMTttPWxbcF07aWYoIVN8fDg8PVN8fG0uc3BlY2lmaWVkKXtyPW0ubmFtZTtuPW5hKHIpO1cudGVzdChuKSYmKHI9ZmIobi5zdWJzdHIoNiksXCItXCIpKTt2YXIgSj1uLnJlcGxhY2UoLyhTdGFydHxFbmQpJC8sXCJcIik7bj09PUorXCJTdGFydFwiJiYodT1yLEY9ci5zdWJzdHIoMCxyLmxlbmd0aC01KStcImVuZFwiLHI9ci5zdWJzdHIoMCxyLmxlbmd0aC02KSk7bj1uYShyLnRvTG93ZXJDYXNlKCkpO2tbbl09cjtjW25dPW09Y2EobS52YWx1ZSk7bWMoYSxuKSYmKGNbbl09ITApO04oYSxiLG0sbik7VChiLG4sXCJBXCIsZCxmLHUsRil9fWE9YS5jbGFzc05hbWU7aWYodyhhKSYmXCJcIiE9PWEpZm9yKDtsPWcuZXhlYyhhKTspbj1uYShsWzJdKSxUKGIsbixcIkNcIixkLGYpJiYoY1tuXT1jYShsWzNdKSksYT1hLnN1YnN0cihsLmluZGV4K2xbMF0ubGVuZ3RoKTticmVhaztjYXNlIDM6dChiLGEubm9kZVZhbHVlKTticmVhaztjYXNlIDg6dHJ5e2lmKGw9XG5lLmV4ZWMoYS5ub2RlVmFsdWUpKW49bmEobFsxXSksVChiLG4sXCJNXCIsZCxmKSYmKGNbbl09Y2EobFsyXSkpfWNhdGNoKHgpe319Yi5zb3J0KEUpO3JldHVybiBifWZ1bmN0aW9uIEgoYSxiLGMpe3ZhciBkPVtdLGU9MDtpZihiJiZhLmhhc0F0dHJpYnV0ZSYmYS5oYXNBdHRyaWJ1dGUoYikpe2Rve2lmKCFhKXRocm93IGphKFwidXRlcmRpclwiLGIsYyk7MT09YS5ub2RlVHlwZSYmKGEuaGFzQXR0cmlidXRlKGIpJiZlKyssYS5oYXNBdHRyaWJ1dGUoYykmJmUtLSk7ZC5wdXNoKGEpO2E9YS5uZXh0U2libGluZ313aGlsZSgwPGUpfWVsc2UgZC5wdXNoKGEpO3JldHVybiB5KGQpfWZ1bmN0aW9uIFIoYSxiLGMpe3JldHVybiBmdW5jdGlvbihkLGUsZyxmLGwpe2U9SChlWzBdLGIsYyk7cmV0dXJuIGEoZCxlLGcsZixsKX19ZnVuY3Rpb24gaWEoYSxjLGQsZSxnLGYsbCxuLHApe2Z1bmN0aW9uIHUoYSxiLGMsZCl7aWYoYSl7YyYmKGE9UihhLGMsZCkpO2EucmVxdWlyZT1HLnJlcXVpcmU7aWYoUT09PVxuR3x8Ry4kJGlzb2xhdGVTY29wZSlhPXFjKGEse2lzb2xhdGVTY29wZTohMH0pO2wucHVzaChhKX1pZihiKXtjJiYoYj1SKGIsYyxkKSk7Yi5yZXF1aXJlPUcucmVxdWlyZTtpZihRPT09R3x8Ry4kJGlzb2xhdGVTY29wZSliPXFjKGIse2lzb2xhdGVTY29wZTohMH0pO24ucHVzaChiKX19ZnVuY3Rpb24gRihhLGIsYyl7dmFyIGQsZT1cImRhdGFcIixnPSExO2lmKHcoYSkpe2Zvcig7XCJeXCI9PShkPWEuY2hhckF0KDApKXx8XCI/XCI9PWQ7KWE9YS5zdWJzdHIoMSksXCJeXCI9PWQmJihlPVwiaW5oZXJpdGVkRGF0YVwiKSxnPWd8fFwiP1wiPT1kO2Q9bnVsbDtjJiZcImRhdGFcIj09PWUmJihkPWNbYV0pO2Q9ZHx8YltlXShcIiRcIithK1wiQ29udHJvbGxlclwiKTtpZighZCYmIWcpdGhyb3cgamEoXCJjdHJlcVwiLGEsdCk7fWVsc2UgTShhKSYmKGQ9W10scShhLGZ1bmN0aW9uKGEpe2QucHVzaChGKGEsYixjKSl9KSk7cmV0dXJuIGR9ZnVuY3Rpb24gSihhLGUsZyxmLHApe2Z1bmN0aW9uIHUoYSxiKXt2YXIgYzsyPmFyZ3VtZW50cy5sZW5ndGgmJlxuKGI9YSxhPXMpO0QmJihjPWxiKTtyZXR1cm4gcChhLGIsYyl9dmFyIEkseCx2LEEsUixILGxiPXt9LGRhO0k9Yz09PWc/ZDpVYihkLG5ldyBIYih5KGcpLGQuJGF0dHIpKTt4PUkuJCRlbGVtZW50O2lmKFEpe3ZhciBUPS9eXFxzKihbQD0mXSkoXFw/PylcXHMqKFxcdyopXFxzKiQvO2Y9eShnKTtIPWUuJG5ldyghMCk7aWEmJmlhPT09US4kJG9yaWdpbmFsRGlyZWN0aXZlP2YuZGF0YShcIiRpc29sYXRlU2NvcGVcIixIKTpmLmRhdGEoXCIkaXNvbGF0ZVNjb3BlTm9UZW1wbGF0ZVwiLEgpO21hKGYsXCJuZy1pc29sYXRlLXNjb3BlXCIpO3EoUS5zY29wZSxmdW5jdGlvbihhLGMpe3ZhciBkPWEubWF0Y2goVCl8fFtdLGc9ZFszXXx8YyxmPVwiP1wiPT1kWzJdLGQ9ZFsxXSxsLG0sbixwO0guJCRpc29sYXRlQmluZGluZ3NbY109ZCtnO3N3aXRjaChkKXtjYXNlIFwiQFwiOkkuJG9ic2VydmUoZyxmdW5jdGlvbihhKXtIW2NdPWF9KTtJLiQkb2JzZXJ2ZXJzW2ddLiQkc2NvcGU9ZTtJW2ddJiYoSFtjXT1iKElbZ10pKGUpKTtcbmJyZWFrO2Nhc2UgXCI9XCI6aWYoZiYmIUlbZ10pYnJlYWs7bT1yKElbZ10pO3A9bS5saXRlcmFsP3hhOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9PT1ifTtuPW0uYXNzaWdufHxmdW5jdGlvbigpe2w9SFtjXT1tKGUpO3Rocm93IGphKFwibm9uYXNzaWduXCIsSVtnXSxRLm5hbWUpO307bD1IW2NdPW0oZSk7SC4kd2F0Y2goZnVuY3Rpb24oKXt2YXIgYT1tKGUpO3AoYSxIW2NdKXx8KHAoYSxsKT9uKGUsYT1IW2NdKTpIW2NdPWEpO3JldHVybiBsPWF9LG51bGwsbS5saXRlcmFsKTticmVhaztjYXNlIFwiJlwiOm09cihJW2ddKTtIW2NdPWZ1bmN0aW9uKGEpe3JldHVybiBtKGUsYSl9O2JyZWFrO2RlZmF1bHQ6dGhyb3cgamEoXCJpc2NwXCIsUS5uYW1lLGMsYSk7fX0pfWRhPXAmJnU7TCYmcShMLGZ1bmN0aW9uKGEpe3ZhciBiPXskc2NvcGU6YT09PVF8fGEuJCRpc29sYXRlU2NvcGU/SDplLCRlbGVtZW50OngsJGF0dHJzOkksJHRyYW5zY2x1ZGU6ZGF9LGM7Uj1hLmNvbnRyb2xsZXI7XCJAXCI9PVImJihSPVxuSVthLm5hbWVdKTtjPXooUixiKTtsYlthLm5hbWVdPWM7RHx8eC5kYXRhKFwiJFwiK2EubmFtZStcIkNvbnRyb2xsZXJcIixjKTthLmNvbnRyb2xsZXJBcyYmKGIuJHNjb3BlW2EuY29udHJvbGxlckFzXT1jKX0pO2Y9MDtmb3Iodj1sLmxlbmd0aDtmPHY7ZisrKXRyeXtBPWxbZl0sQShBLmlzb2xhdGVTY29wZT9IOmUseCxJLEEucmVxdWlyZSYmRihBLnJlcXVpcmUseCxsYiksZGEpfWNhdGNoKEcpe20oRyxoYSh4KSl9Zj1lO1EmJihRLnRlbXBsYXRlfHxudWxsPT09US50ZW1wbGF0ZVVybCkmJihmPUgpO2EmJmEoZixnLmNoaWxkTm9kZXMscyxwKTtmb3IoZj1uLmxlbmd0aC0xOzA8PWY7Zi0tKXRyeXtBPW5bZl0sQShBLmlzb2xhdGVTY29wZT9IOmUseCxJLEEucmVxdWlyZSYmRihBLnJlcXVpcmUseCxsYiksZGEpfWNhdGNoKEIpe20oQixoYSh4KSl9fXA9cHx8e307Zm9yKHZhciB2PS1OdW1iZXIuTUFYX1ZBTFVFLEEsTD1wLmNvbnRyb2xsZXJEaXJlY3RpdmVzLFE9cC5uZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsXG5pYT1wLnRlbXBsYXRlRGlyZWN0aXZlLFQ9cC5ub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlLEU9ITEsRD1wLmhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlLFo9ZC4kJGVsZW1lbnQ9eShjKSxHLHQsVixYYT1lLE8sTj0wLFM9YS5sZW5ndGg7TjxTO04rKyl7Rz1hW05dO3ZhciByYT1HLiQkc3RhcnQsVz1HLiQkZW5kO3JhJiYoWj1IKGMscmEsVykpO1Y9cztpZih2PkcucHJpb3JpdHkpYnJlYWs7aWYoVj1HLnNjb3BlKUE9QXx8RyxHLnRlbXBsYXRlVXJsfHwoSyhcIm5ldy9pc29sYXRlZCBzY29wZVwiLFEsRyxaKSxYKFYpJiYoUT1HKSk7dD1HLm5hbWU7IUcudGVtcGxhdGVVcmwmJkcuY29udHJvbGxlciYmKFY9Ry5jb250cm9sbGVyLEw9THx8e30sSyhcIidcIit0K1wiJyBjb250cm9sbGVyXCIsTFt0XSxHLFopLExbdF09Ryk7aWYoVj1HLnRyYW5zY2x1ZGUpRT0hMCxHLiQkdGxifHwoSyhcInRyYW5zY2x1c2lvblwiLFQsRyxaKSxUPUcpLFwiZWxlbWVudFwiPT1WPyhEPSEwLHY9Ry5wcmlvcml0eSxcblY9SChjLHJhLFcpLFo9ZC4kJGVsZW1lbnQ9eShVLmNyZWF0ZUNvbW1lbnQoXCIgXCIrdCtcIjogXCIrZFt0XStcIiBcIikpLGM9WlswXSxtYihnLHkoeWEuY2FsbChWLDApKSxjKSxYYT14KFYsZSx2LGYmJmYubmFtZSx7bm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZTpUfSkpOihWPXkoRWIoYykpLmNvbnRlbnRzKCksWi5lbXB0eSgpLFhhPXgoVixlKSk7aWYoRy50ZW1wbGF0ZSlpZihLKFwidGVtcGxhdGVcIixpYSxHLFopLGlhPUcsVj1QKEcudGVtcGxhdGUpP0cudGVtcGxhdGUoWixkKTpHLnRlbXBsYXRlLFY9WShWKSxHLnJlcGxhY2Upe2Y9RztWPUNiLnRlc3QoVik/eShWKTpbXTtjPVZbMF07aWYoMSE9Vi5sZW5ndGh8fDEhPT1jLm5vZGVUeXBlKXRocm93IGphKFwidHBscnRcIix0LFwiXCIpO21iKGcsWixjKTtTPXskYXR0cjp7fX07Vj1kYShjLFtdLFMpO3ZhciAkPWEuc3BsaWNlKE4rMSxhLmxlbmd0aC0oTisxKSk7USYmcGMoVik7YT1hLmNvbmNhdChWKS5jb25jYXQoJCk7QihkLFMpO1M9YS5sZW5ndGh9ZWxzZSBaLmh0bWwoVik7XG5pZihHLnRlbXBsYXRlVXJsKUsoXCJ0ZW1wbGF0ZVwiLGlhLEcsWiksaWE9RyxHLnJlcGxhY2UmJihmPUcpLEo9QyhhLnNwbGljZShOLGEubGVuZ3RoLU4pLFosZCxnLFhhLGwsbix7Y29udHJvbGxlckRpcmVjdGl2ZXM6TCxuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmU6USx0ZW1wbGF0ZURpcmVjdGl2ZTppYSxub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlOlR9KSxTPWEubGVuZ3RoO2Vsc2UgaWYoRy5jb21waWxlKXRyeXtPPUcuY29tcGlsZShaLGQsWGEpLFAoTyk/dShudWxsLE8scmEsVyk6TyYmdShPLnByZSxPLnBvc3QscmEsVyl9Y2F0Y2goYWEpe20oYWEsaGEoWikpfUcudGVybWluYWwmJihKLnRlcm1pbmFsPSEwLHY9TWF0aC5tYXgodixHLnByaW9yaXR5KSl9Si5zY29wZT1BJiYhMD09PUEuc2NvcGU7Si50cmFuc2NsdWRlPUUmJlhhO3AuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmU9RDtyZXR1cm4gSn1mdW5jdGlvbiBwYyhhKXtmb3IodmFyIGI9MCxjPWEubGVuZ3RoO2I8YztiKyspYVtiXT1cblRiKGFbYl0seyQkaXNvbGF0ZVNjb3BlOiEwfSl9ZnVuY3Rpb24gVChiLGUsZyxmLGssbixyKXtpZihlPT09aylyZXR1cm4gbnVsbDtrPW51bGw7aWYoYy5oYXNPd25Qcm9wZXJ0eShlKSl7dmFyIHA7ZT1hLmdldChlK2QpO2Zvcih2YXIgej0wLHU9ZS5sZW5ndGg7ejx1O3orKyl0cnl7cD1lW3pdLChmPT09c3x8Zj5wLnByaW9yaXR5KSYmLTEhPXAucmVzdHJpY3QuaW5kZXhPZihnKSYmKG4mJihwPVRiKHAseyQkc3RhcnQ6biwkJGVuZDpyfSkpLGIucHVzaChwKSxrPXApfWNhdGNoKEYpe20oRil9fXJldHVybiBrfWZ1bmN0aW9uIEIoYSxiKXt2YXIgYz1iLiRhdHRyLGQ9YS4kYXR0cixlPWEuJCRlbGVtZW50O3EoYSxmdW5jdGlvbihkLGUpe1wiJFwiIT1lLmNoYXJBdCgwKSYmKGJbZV0mJihkKz0oXCJzdHlsZVwiPT09ZT9cIjtcIjpcIiBcIikrYltlXSksYS4kc2V0KGUsZCwhMCxjW2VdKSl9KTtxKGIsZnVuY3Rpb24oYixnKXtcImNsYXNzXCI9PWc/KG1hKGUsYiksYVtcImNsYXNzXCJdPShhW1wiY2xhc3NcIl0/XG5hW1wiY2xhc3NcIl0rXCIgXCI6XCJcIikrYik6XCJzdHlsZVwiPT1nPyhlLmF0dHIoXCJzdHlsZVwiLGUuYXR0cihcInN0eWxlXCIpK1wiO1wiK2IpLGEuc3R5bGU9KGEuc3R5bGU/YS5zdHlsZStcIjtcIjpcIlwiKStiKTpcIiRcIj09Zy5jaGFyQXQoMCl8fGEuaGFzT3duUHJvcGVydHkoZyl8fChhW2ddPWIsZFtnXT1jW2ddKX0pfWZ1bmN0aW9uIEMoYSxiLGMsZCxlLGcsZixsKXt2YXIgaz1bXSxtLHIsej1iWzBdLHU9YS5zaGlmdCgpLEY9RCh7fSx1LHt0ZW1wbGF0ZVVybDpudWxsLHRyYW5zY2x1ZGU6bnVsbCxyZXBsYWNlOm51bGwsJCRvcmlnaW5hbERpcmVjdGl2ZTp1fSkseD1QKHUudGVtcGxhdGVVcmwpP3UudGVtcGxhdGVVcmwoYixjKTp1LnRlbXBsYXRlVXJsO2IuZW1wdHkoKTtuLmdldCh2LmdldFRydXN0ZWRSZXNvdXJjZVVybCh4KSx7Y2FjaGU6cH0pLnN1Y2Nlc3MoZnVuY3Rpb24obil7dmFyIHAsSjtuPVkobik7aWYodS5yZXBsYWNlKXtuPUNiLnRlc3Qobik/eShuKTpbXTtwPW5bMF07aWYoMSE9bi5sZW5ndGh8fFxuMSE9PXAubm9kZVR5cGUpdGhyb3cgamEoXCJ0cGxydFwiLHUubmFtZSx4KTtuPXskYXR0cjp7fX07bWIoZCxiLHApO3ZhciB2PWRhKHAsW10sbik7WCh1LnNjb3BlKSYmcGModik7YT12LmNvbmNhdChhKTtCKGMsbil9ZWxzZSBwPXosYi5odG1sKG4pO2EudW5zaGlmdChGKTttPWlhKGEscCxjLGUsYix1LGcsZixsKTtxKGQsZnVuY3Rpb24oYSxjKXthPT1wJiYoZFtjXT1iWzBdKX0pO2ZvcihyPUwoYlswXS5jaGlsZE5vZGVzLGUpO2subGVuZ3RoOyl7bj1rLnNoaWZ0KCk7Sj1rLnNoaWZ0KCk7dmFyIEE9ay5zaGlmdCgpLFI9ay5zaGlmdCgpLHY9YlswXTtpZihKIT09eil7dmFyIEg9Si5jbGFzc05hbWU7bC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSYmdS5yZXBsYWNlfHwodj1FYihwKSk7bWIoQSx5KEopLHYpO21hKHkodiksSCl9Sj1tLnRyYW5zY2x1ZGU/UShuLG0udHJhbnNjbHVkZSk6UjttKHIsbix2LGQsSil9az1udWxsfSkuZXJyb3IoZnVuY3Rpb24oYSxiLGMsZCl7dGhyb3cgamEoXCJ0cGxvYWRcIixcbmQudXJsKTt9KTtyZXR1cm4gZnVuY3Rpb24oYSxiLGMsZCxlKXtrPyhrLnB1c2goYiksay5wdXNoKGMpLGsucHVzaChkKSxrLnB1c2goZSkpOm0ocixiLGMsZCxlKX19ZnVuY3Rpb24gRShhLGIpe3ZhciBjPWIucHJpb3JpdHktYS5wcmlvcml0eTtyZXR1cm4gMCE9PWM/YzphLm5hbWUhPT1iLm5hbWU/YS5uYW1lPGIubmFtZT8tMToxOmEuaW5kZXgtYi5pbmRleH1mdW5jdGlvbiBLKGEsYixjLGQpe2lmKGIpdGhyb3cgamEoXCJtdWx0aWRpclwiLGIubmFtZSxjLm5hbWUsYSxoYShkKSk7fWZ1bmN0aW9uIHQoYSxjKXt2YXIgZD1iKGMsITApO2QmJmEucHVzaCh7cHJpb3JpdHk6MCxjb21waWxlOmFhKGZ1bmN0aW9uKGEsYil7dmFyIGM9Yi5wYXJlbnQoKSxlPWMuZGF0YShcIiRiaW5kaW5nXCIpfHxbXTtlLnB1c2goZCk7bWEoYy5kYXRhKFwiJGJpbmRpbmdcIixlKSxcIm5nLWJpbmRpbmdcIik7YS4kd2F0Y2goZCxmdW5jdGlvbihhKXtiWzBdLm5vZGVWYWx1ZT1hfSl9KX0pfWZ1bmN0aW9uIE8oYSxiKXtpZihcInNyY2RvY1wiPT1cbmIpcmV0dXJuIHYuSFRNTDt2YXIgYz1LYShhKTtpZihcInhsaW5rSHJlZlwiPT1ifHxcIkZPUk1cIj09YyYmXCJhY3Rpb25cIj09Ynx8XCJJTUdcIiE9YyYmKFwic3JjXCI9PWJ8fFwibmdTcmNcIj09YikpcmV0dXJuIHYuUkVTT1VSQ0VfVVJMfWZ1bmN0aW9uIE4oYSxjLGQsZSl7dmFyIGc9YihkLCEwKTtpZihnKXtpZihcIm11bHRpcGxlXCI9PT1lJiZcIlNFTEVDVFwiPT09S2EoYSkpdGhyb3cgamEoXCJzZWxtdWx0aVwiLGhhKGEpKTtjLnB1c2goe3ByaW9yaXR5OjEwMCxjb21waWxlOmZ1bmN0aW9uKCl7cmV0dXJue3ByZTpmdW5jdGlvbihjLGQsbCl7ZD1sLiQkb2JzZXJ2ZXJzfHwobC4kJG9ic2VydmVycz17fSk7aWYoZi50ZXN0KGUpKXRocm93IGphKFwibm9kb21ldmVudHNcIik7aWYoZz1iKGxbZV0sITAsTyhhLGUpKSlsW2VdPWcoYyksKGRbZV18fChkW2VdPVtdKSkuJCRpbnRlcj0hMCwobC4kJG9ic2VydmVycyYmbC4kJG9ic2VydmVyc1tlXS4kJHNjb3BlfHxjKS4kd2F0Y2goZyxmdW5jdGlvbihhLGIpe1wiY2xhc3NcIj09PVxuZSYmYSE9Yj9sLiR1cGRhdGVDbGFzcyhhLGIpOmwuJHNldChlLGEpfSl9fX19KX19ZnVuY3Rpb24gbWIoYSxiLGMpe3ZhciBkPWJbMF0sZT1iLmxlbmd0aCxnPWQucGFyZW50Tm9kZSxmLGw7aWYoYSlmb3IoZj0wLGw9YS5sZW5ndGg7ZjxsO2YrKylpZihhW2ZdPT1kKXthW2YrK109YztsPWYrZS0xO2Zvcih2YXIgaz1hLmxlbmd0aDtmPGs7ZisrLGwrKylsPGs/YVtmXT1hW2xdOmRlbGV0ZSBhW2ZdO2EubGVuZ3RoLT1lLTE7YnJlYWt9ZyYmZy5yZXBsYWNlQ2hpbGQoYyxkKTthPVUuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO2EuYXBwZW5kQ2hpbGQoZCk7Y1t5LmV4cGFuZG9dPWRbeS5leHBhbmRvXTtkPTE7Zm9yKGU9Yi5sZW5ndGg7ZDxlO2QrKylnPWJbZF0seShnKS5yZW1vdmUoKSxhLmFwcGVuZENoaWxkKGcpLGRlbGV0ZSBiW2RdO2JbMF09YztiLmxlbmd0aD0xfWZ1bmN0aW9uIHFjKGEsYil7cmV0dXJuIEQoZnVuY3Rpb24oKXtyZXR1cm4gYS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFxuYSxiKX12YXIgSGI9ZnVuY3Rpb24oYSxiKXt0aGlzLiQkZWxlbWVudD1hO3RoaXMuJGF0dHI9Ynx8e319O0hiLnByb3RvdHlwZT17JG5vcm1hbGl6ZTpuYSwkYWRkQ2xhc3M6ZnVuY3Rpb24oYSl7YSYmMDxhLmxlbmd0aCYmSi5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCxhKX0sJHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGEpe2EmJjA8YS5sZW5ndGgmJkoucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsYSl9LCR1cGRhdGVDbGFzczpmdW5jdGlvbihhLGIpe3ZhciBjPXJjKGEsYiksZD1yYyhiLGEpOzA9PT1jLmxlbmd0aD9KLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LGQpOjA9PT1kLmxlbmd0aD9KLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LGMpOkouc2V0Q2xhc3ModGhpcy4kJGVsZW1lbnQsYyxkKX0sJHNldDpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1tYyh0aGlzLiQkZWxlbWVudFswXSxhKTtlJiYodGhpcy4kJGVsZW1lbnQucHJvcChhLGIpLGQ9ZSk7dGhpc1thXT1iO2Q/dGhpcy4kYXR0clthXT1cbmQ6KGQ9dGhpcy4kYXR0clthXSl8fCh0aGlzLiRhdHRyW2FdPWQ9ZmIoYSxcIi1cIikpO2U9S2EodGhpcy4kJGVsZW1lbnQpO2lmKFwiQVwiPT09ZSYmXCJocmVmXCI9PT1hfHxcIklNR1wiPT09ZSYmXCJzcmNcIj09PWEpdGhpc1thXT1iPUEoYixcInNyY1wiPT09YSk7ITEhPT1jJiYobnVsbD09PWJ8fGI9PT1zP3RoaXMuJCRlbGVtZW50LnJlbW92ZUF0dHIoZCk6dGhpcy4kJGVsZW1lbnQuYXR0cihkLGIpKTsoYz10aGlzLiQkb2JzZXJ2ZXJzKSYmcShjW2FdLGZ1bmN0aW9uKGEpe3RyeXthKGIpfWNhdGNoKGMpe20oYyl9fSl9LCRvYnNlcnZlOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcyxkPWMuJCRvYnNlcnZlcnN8fChjLiQkb2JzZXJ2ZXJzPXt9KSxlPWRbYV18fChkW2FdPVtdKTtlLnB1c2goYik7dS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCl7ZS4kJGludGVyfHxiKGNbYV0pfSk7cmV0dXJuIGJ9fTt2YXIgWj1iLnN0YXJ0U3ltYm9sKCkscmE9Yi5lbmRTeW1ib2woKSxZPVwie3tcIj09Wnx8XCJ9fVwiPT1yYT9cbkRhOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1xce1xcey9nLFopLnJlcGxhY2UoL319L2cscmEpfSxXPS9ebmdBdHRyW0EtWl0vO3JldHVybiB4fV19ZnVuY3Rpb24gbmEoYil7cmV0dXJuIFRhKGIucmVwbGFjZSh0ZSxcIlwiKSl9ZnVuY3Rpb24gcmMoYixhKXt2YXIgYz1cIlwiLGQ9Yi5zcGxpdCgvXFxzKy8pLGU9YS5zcGxpdCgvXFxzKy8pLGc9MDthOmZvcig7ZzxkLmxlbmd0aDtnKyspe2Zvcih2YXIgZj1kW2ddLGg9MDtoPGUubGVuZ3RoO2grKylpZihmPT1lW2hdKWNvbnRpbnVlIGE7Yys9KDA8Yy5sZW5ndGg/XCIgXCI6XCJcIikrZn1yZXR1cm4gY31mdW5jdGlvbiBPZCgpe3ZhciBiPXt9LGE9L14oXFxTKykoXFxzK2FzXFxzKyhcXHcrKSk/JC87dGhpcy5yZWdpc3Rlcj1mdW5jdGlvbihhLGQpe0FhKGEsXCJjb250cm9sbGVyXCIpO1goYSk/RChiLGEpOmJbYV09ZH07dGhpcy4kZ2V0PVtcIiRpbmplY3RvclwiLFwiJHdpbmRvd1wiLGZ1bmN0aW9uKGMsZCl7cmV0dXJuIGZ1bmN0aW9uKGUsZyl7dmFyIGYsXG5oLGw7dyhlKSYmKGY9ZS5tYXRjaChhKSxoPWZbMV0sbD1mWzNdLGU9Yi5oYXNPd25Qcm9wZXJ0eShoKT9iW2hdOmJjKGcuJHNjb3BlLGgsITApfHxiYyhkLGgsITApLFJhKGUsaCwhMCkpO2Y9Yy5pbnN0YW50aWF0ZShlLGcpO2lmKGwpe2lmKCFnfHxcIm9iamVjdFwiIT10eXBlb2YgZy4kc2NvcGUpdGhyb3cgdChcIiRjb250cm9sbGVyXCIpKFwibm9zY3BcIixofHxlLm5hbWUsbCk7Zy4kc2NvcGVbbF09Zn1yZXR1cm4gZn19XX1mdW5jdGlvbiBQZCgpe3RoaXMuJGdldD1bXCIkd2luZG93XCIsZnVuY3Rpb24oYil7cmV0dXJuIHkoYi5kb2N1bWVudCl9XX1mdW5jdGlvbiBRZCgpe3RoaXMuJGdldD1bXCIkbG9nXCIsZnVuY3Rpb24oYil7cmV0dXJuIGZ1bmN0aW9uKGEsYyl7Yi5lcnJvci5hcHBseShiLGFyZ3VtZW50cyl9fV19ZnVuY3Rpb24gc2MoYil7dmFyIGE9e30sYyxkLGU7aWYoIWIpcmV0dXJuIGE7cShiLnNwbGl0KFwiXFxuXCIpLGZ1bmN0aW9uKGIpe2U9Yi5pbmRleE9mKFwiOlwiKTtjPUsoY2EoYi5zdWJzdHIoMCxcbmUpKSk7ZD1jYShiLnN1YnN0cihlKzEpKTtjJiYoYVtjXT1hW2NdP2FbY10rKFwiLCBcIitkKTpkKX0pO3JldHVybiBhfWZ1bmN0aW9uIHRjKGIpe3ZhciBhPVgoYik/YjpzO3JldHVybiBmdW5jdGlvbihjKXthfHwoYT1zYyhiKSk7cmV0dXJuIGM/YVtLKGMpXXx8bnVsbDphfX1mdW5jdGlvbiB1YyhiLGEsYyl7aWYoUChjKSlyZXR1cm4gYyhiLGEpO3EoYyxmdW5jdGlvbihjKXtiPWMoYixhKX0pO3JldHVybiBifWZ1bmN0aW9uIFRkKCl7dmFyIGI9L15cXHMqKFxcW3xcXHtbXlxce10pLyxhPS9bXFx9XFxdXVxccyokLyxjPS9eXFwpXFxdXFx9Jyw/XFxuLyxkPXtcIkNvbnRlbnQtVHlwZVwiOlwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04XCJ9LGU9dGhpcy5kZWZhdWx0cz17dHJhbnNmb3JtUmVzcG9uc2U6W2Z1bmN0aW9uKGQpe3coZCkmJihkPWQucmVwbGFjZShjLFwiXCIpLGIudGVzdChkKSYmYS50ZXN0KGQpJiYoZD1XYihkKSkpO3JldHVybiBkfV0sdHJhbnNmb3JtUmVxdWVzdDpbZnVuY3Rpb24oYSl7cmV0dXJuIFgoYSkmJlxuXCJbb2JqZWN0IEZpbGVdXCIhPT13YS5jYWxsKGEpJiZcIltvYmplY3QgQmxvYl1cIiE9PXdhLmNhbGwoYSk/cWEoYSk6YX1dLGhlYWRlcnM6e2NvbW1vbjp7QWNjZXB0OlwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qXCJ9LHBvc3Q6YmEoZCkscHV0OmJhKGQpLHBhdGNoOmJhKGQpfSx4c3JmQ29va2llTmFtZTpcIlhTUkYtVE9LRU5cIix4c3JmSGVhZGVyTmFtZTpcIlgtWFNSRi1UT0tFTlwifSxnPXRoaXMuaW50ZXJjZXB0b3JzPVtdLGY9dGhpcy5yZXNwb25zZUludGVyY2VwdG9ycz1bXTt0aGlzLiRnZXQ9W1wiJGh0dHBCYWNrZW5kXCIsXCIkYnJvd3NlclwiLFwiJGNhY2hlRmFjdG9yeVwiLFwiJHJvb3RTY29wZVwiLFwiJHFcIixcIiRpbmplY3RvclwiLGZ1bmN0aW9uKGEsYixjLGQsbixwKXtmdW5jdGlvbiByKGEpe2Z1bmN0aW9uIGMoYSl7dmFyIGI9RCh7fSxhLHtkYXRhOnVjKGEuZGF0YSxhLmhlYWRlcnMsZC50cmFuc2Zvcm1SZXNwb25zZSl9KTtyZXR1cm4gMjAwPD1hLnN0YXR1cyYmMzAwPmEuc3RhdHVzP1xuYjpuLnJlamVjdChiKX12YXIgZD17bWV0aG9kOlwiZ2V0XCIsdHJhbnNmb3JtUmVxdWVzdDplLnRyYW5zZm9ybVJlcXVlc3QsdHJhbnNmb3JtUmVzcG9uc2U6ZS50cmFuc2Zvcm1SZXNwb25zZX0sZz1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEpe3ZhciBjO3EoYSxmdW5jdGlvbihiLGQpe1AoYikmJihjPWIoKSxudWxsIT1jP2FbZF09YzpkZWxldGUgYVtkXSl9KX12YXIgYz1lLmhlYWRlcnMsZD1EKHt9LGEuaGVhZGVycyksZyxmLGM9RCh7fSxjLmNvbW1vbixjW0soYS5tZXRob2QpXSk7YihjKTtiKGQpO2E6Zm9yKGcgaW4gYyl7YT1LKGcpO2ZvcihmIGluIGQpaWYoSyhmKT09PWEpY29udGludWUgYTtkW2ddPWNbZ119cmV0dXJuIGR9KGEpO0QoZCxhKTtkLmhlYWRlcnM9ZztkLm1ldGhvZD1GYShkLm1ldGhvZCk7KGE9SWIoZC51cmwpP2IuY29va2llcygpW2QueHNyZkNvb2tpZU5hbWV8fGUueHNyZkNvb2tpZU5hbWVdOnMpJiYoZ1tkLnhzcmZIZWFkZXJOYW1lfHxlLnhzcmZIZWFkZXJOYW1lXT1cbmEpO3ZhciBmPVtmdW5jdGlvbihhKXtnPWEuaGVhZGVyczt2YXIgYj11YyhhLmRhdGEsdGMoZyksYS50cmFuc2Zvcm1SZXF1ZXN0KTtFKGEuZGF0YSkmJnEoZyxmdW5jdGlvbihhLGIpe1wiY29udGVudC10eXBlXCI9PT1LKGIpJiZkZWxldGUgZ1tiXX0pO0UoYS53aXRoQ3JlZGVudGlhbHMpJiYhRShlLndpdGhDcmVkZW50aWFscykmJihhLndpdGhDcmVkZW50aWFscz1lLndpdGhDcmVkZW50aWFscyk7cmV0dXJuIHooYSxiLGcpLnRoZW4oYyxjKX0sc10saD1uLndoZW4oZCk7Zm9yKHEodixmdW5jdGlvbihhKXsoYS5yZXF1ZXN0fHxhLnJlcXVlc3RFcnJvcikmJmYudW5zaGlmdChhLnJlcXVlc3QsYS5yZXF1ZXN0RXJyb3IpOyhhLnJlc3BvbnNlfHxhLnJlc3BvbnNlRXJyb3IpJiZmLnB1c2goYS5yZXNwb25zZSxhLnJlc3BvbnNlRXJyb3IpfSk7Zi5sZW5ndGg7KXthPWYuc2hpZnQoKTt2YXIgaz1mLnNoaWZ0KCksaD1oLnRoZW4oYSxrKX1oLnN1Y2Nlc3M9ZnVuY3Rpb24oYSl7aC50aGVuKGZ1bmN0aW9uKGIpe2EoYi5kYXRhLFxuYi5zdGF0dXMsYi5oZWFkZXJzLGQpfSk7cmV0dXJuIGh9O2guZXJyb3I9ZnVuY3Rpb24oYSl7aC50aGVuKG51bGwsZnVuY3Rpb24oYil7YShiLmRhdGEsYi5zdGF0dXMsYi5oZWFkZXJzLGQpfSk7cmV0dXJuIGh9O3JldHVybiBofWZ1bmN0aW9uIHooYixjLGcpe2Z1bmN0aW9uIGYoYSxiLGMsZSl7diYmKDIwMDw9YSYmMzAwPmE/di5wdXQocyxbYSxiLHNjKGMpLGVdKTp2LnJlbW92ZShzKSk7bChiLGEsYyxlKTtkLiQkcGhhc2V8fGQuJGFwcGx5KCl9ZnVuY3Rpb24gbChhLGMsZCxlKXtjPU1hdGgubWF4KGMsMCk7KDIwMDw9YyYmMzAwPmM/cC5yZXNvbHZlOnAucmVqZWN0KSh7ZGF0YTphLHN0YXR1czpjLGhlYWRlcnM6dGMoZCksY29uZmlnOmIsc3RhdHVzVGV4dDplfSl9ZnVuY3Rpb24gaygpe3ZhciBhPWRiKHIucGVuZGluZ1JlcXVlc3RzLGIpOy0xIT09YSYmci5wZW5kaW5nUmVxdWVzdHMuc3BsaWNlKGEsMSl9dmFyIHA9bi5kZWZlcigpLHo9cC5wcm9taXNlLHYscSxzPXUoYi51cmwsXG5iLnBhcmFtcyk7ci5wZW5kaW5nUmVxdWVzdHMucHVzaChiKTt6LnRoZW4oayxrKTsoYi5jYWNoZXx8ZS5jYWNoZSkmJighMSE9PWIuY2FjaGUmJlwiR0VUXCI9PWIubWV0aG9kKSYmKHY9WChiLmNhY2hlKT9iLmNhY2hlOlgoZS5jYWNoZSk/ZS5jYWNoZTpGKTtpZih2KWlmKHE9di5nZXQocyksQihxKSl7aWYocS50aGVuKXJldHVybiBxLnRoZW4oayxrKSxxO00ocSk/bChxWzFdLHFbMF0sYmEocVsyXSkscVszXSk6bChxLDIwMCx7fSxcIk9LXCIpfWVsc2Ugdi5wdXQocyx6KTtFKHEpJiZhKGIubWV0aG9kLHMsYyxmLGcsYi50aW1lb3V0LGIud2l0aENyZWRlbnRpYWxzLGIucmVzcG9uc2VUeXBlKTtyZXR1cm4gen1mdW5jdGlvbiB1KGEsYil7aWYoIWIpcmV0dXJuIGE7dmFyIGM9W107U2MoYixmdW5jdGlvbihhLGIpe251bGw9PT1hfHxFKGEpfHwoTShhKXx8KGE9W2FdKSxxKGEsZnVuY3Rpb24oYSl7WChhKSYmKGE9cWEoYSkpO2MucHVzaCh6YShiKStcIj1cIit6YShhKSl9KSl9KTswPGMubGVuZ3RoJiZcbihhKz0oLTE9PWEuaW5kZXhPZihcIj9cIik/XCI/XCI6XCImXCIpK2Muam9pbihcIiZcIikpO3JldHVybiBhfXZhciBGPWMoXCIkaHR0cFwiKSx2PVtdO3EoZyxmdW5jdGlvbihhKXt2LnVuc2hpZnQodyhhKT9wLmdldChhKTpwLmludm9rZShhKSl9KTtxKGYsZnVuY3Rpb24oYSxiKXt2YXIgYz13KGEpP3AuZ2V0KGEpOnAuaW52b2tlKGEpO3Yuc3BsaWNlKGIsMCx7cmVzcG9uc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGMobi53aGVuKGEpKX0scmVzcG9uc2VFcnJvcjpmdW5jdGlvbihhKXtyZXR1cm4gYyhuLnJlamVjdChhKSl9fSl9KTtyLnBlbmRpbmdSZXF1ZXN0cz1bXTsoZnVuY3Rpb24oYSl7cShhcmd1bWVudHMsZnVuY3Rpb24oYSl7clthXT1mdW5jdGlvbihiLGMpe3JldHVybiByKEQoY3x8e30se21ldGhvZDphLHVybDpifSkpfX0pfSkoXCJnZXRcIixcImRlbGV0ZVwiLFwiaGVhZFwiLFwianNvbnBcIik7KGZ1bmN0aW9uKGEpe3EoYXJndW1lbnRzLGZ1bmN0aW9uKGEpe3JbYV09ZnVuY3Rpb24oYixjLGQpe3JldHVybiByKEQoZHx8XG57fSx7bWV0aG9kOmEsdXJsOmIsZGF0YTpjfSkpfX0pfSkoXCJwb3N0XCIsXCJwdXRcIik7ci5kZWZhdWx0cz1lO3JldHVybiByfV19ZnVuY3Rpb24gdWUoYil7aWYoOD49UyYmKCFiLm1hdGNoKC9eKGdldHxwb3N0fGhlYWR8cHV0fGRlbGV0ZXxvcHRpb25zKSQvaSl8fCFPLlhNTEh0dHBSZXF1ZXN0KSlyZXR1cm4gbmV3IE8uQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxIVFRQXCIpO2lmKE8uWE1MSHR0cFJlcXVlc3QpcmV0dXJuIG5ldyBPLlhNTEh0dHBSZXF1ZXN0O3Rocm93IHQoXCIkaHR0cEJhY2tlbmRcIikoXCJub3hoclwiKTt9ZnVuY3Rpb24gVWQoKXt0aGlzLiRnZXQ9W1wiJGJyb3dzZXJcIixcIiR3aW5kb3dcIixcIiRkb2N1bWVudFwiLGZ1bmN0aW9uKGIsYSxjKXtyZXR1cm4gdmUoYix1ZSxiLmRlZmVyLGEuYW5ndWxhci5jYWxsYmFja3MsY1swXSl9XX1mdW5jdGlvbiB2ZShiLGEsYyxkLGUpe2Z1bmN0aW9uIGcoYSxiKXt2YXIgYz1lLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksZD1mdW5jdGlvbigpe2Mub25yZWFkeXN0YXRlY2hhbmdlPVxuYy5vbmxvYWQ9Yy5vbmVycm9yPW51bGw7ZS5ib2R5LnJlbW92ZUNoaWxkKGMpO2ImJmIoKX07Yy50eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI7Yy5zcmM9YTtTJiY4Pj1TP2Mub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7L2xvYWRlZHxjb21wbGV0ZS8udGVzdChjLnJlYWR5U3RhdGUpJiZkKCl9OmMub25sb2FkPWMub25lcnJvcj1mdW5jdGlvbigpe2QoKX07ZS5ib2R5LmFwcGVuZENoaWxkKGMpO3JldHVybiBkfXZhciBmPS0xO3JldHVybiBmdW5jdGlvbihlLGwsayxtLG4scCxyLHope2Z1bmN0aW9uIHUoKXt2PWY7QSYmQSgpO3gmJnguYWJvcnQoKX1mdW5jdGlvbiBGKGEsZCxlLGcsZil7TCYmYy5jYW5jZWwoTCk7QT14PW51bGw7MD09PWQmJihkPWU/MjAwOlwiZmlsZVwiPT1zYShsKS5wcm90b2NvbD80MDQ6MCk7YSgxMjIzPT09ZD8yMDQ6ZCxlLGcsZnx8XCJcIik7Yi4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KEMpfXZhciB2O2IuJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCgpO1xubD1sfHxiLnVybCgpO2lmKFwianNvbnBcIj09SyhlKSl7dmFyIEo9XCJfXCIrKGQuY291bnRlcisrKS50b1N0cmluZygzNik7ZFtKXT1mdW5jdGlvbihhKXtkW0pdLmRhdGE9YX07dmFyIEE9ZyhsLnJlcGxhY2UoXCJKU09OX0NBTExCQUNLXCIsXCJhbmd1bGFyLmNhbGxiYWNrcy5cIitKKSxmdW5jdGlvbigpe2RbSl0uZGF0YT9GKG0sMjAwLGRbSl0uZGF0YSk6RihtLHZ8fC0yKTtkW0pdPUVhLm5vb3B9KX1lbHNle3ZhciB4PWEoZSk7eC5vcGVuKGUsbCwhMCk7cShuLGZ1bmN0aW9uKGEsYil7QihhKSYmeC5zZXRSZXF1ZXN0SGVhZGVyKGIsYSl9KTt4Lm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2lmKHgmJjQ9PXgucmVhZHlTdGF0ZSl7dmFyIGE9bnVsbCxiPW51bGw7diE9PWYmJihhPXguZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCksYj1cInJlc3BvbnNlXCJpbiB4P3gucmVzcG9uc2U6eC5yZXNwb25zZVRleHQpO0YobSx2fHx4LnN0YXR1cyxiLGEseC5zdGF0dXNUZXh0fHxcIlwiKX19O3ImJih4LndpdGhDcmVkZW50aWFscz1cbiEwKTtpZih6KXRyeXt4LnJlc3BvbnNlVHlwZT16fWNhdGNoKHMpe2lmKFwianNvblwiIT09eil0aHJvdyBzO314LnNlbmQoa3x8bnVsbCl9aWYoMDxwKXZhciBMPWModSxwKTtlbHNlIHAmJnAudGhlbiYmcC50aGVuKHUpfX1mdW5jdGlvbiBSZCgpe3ZhciBiPVwie3tcIixhPVwifX1cIjt0aGlzLnN0YXJ0U3ltYm9sPWZ1bmN0aW9uKGEpe3JldHVybiBhPyhiPWEsdGhpcyk6Yn07dGhpcy5lbmRTeW1ib2w9ZnVuY3Rpb24oYil7cmV0dXJuIGI/KGE9Yix0aGlzKTphfTt0aGlzLiRnZXQ9W1wiJHBhcnNlXCIsXCIkZXhjZXB0aW9uSGFuZGxlclwiLFwiJHNjZVwiLGZ1bmN0aW9uKGMsZCxlKXtmdW5jdGlvbiBnKGcsayxtKXtmb3IodmFyIG4scCxyPTAsej1bXSx1PWcubGVuZ3RoLEY9ITEsdj1bXTtyPHU7KS0xIT0obj1nLmluZGV4T2YoYixyKSkmJi0xIT0ocD1nLmluZGV4T2YoYSxuK2YpKT8ociE9biYmei5wdXNoKGcuc3Vic3RyaW5nKHIsbikpLHoucHVzaChyPWMoRj1nLnN1YnN0cmluZyhuK2YscCkpKSxcbnIuZXhwPUYscj1wK2gsRj0hMCk6KHIhPXUmJnoucHVzaChnLnN1YnN0cmluZyhyKSkscj11KTsodT16Lmxlbmd0aCl8fCh6LnB1c2goXCJcIiksdT0xKTtpZihtJiYxPHoubGVuZ3RoKXRocm93IHZjKFwibm9jb25jYXRcIixnKTtpZigha3x8RilyZXR1cm4gdi5sZW5ndGg9dSxyPWZ1bmN0aW9uKGEpe3RyeXtmb3IodmFyIGI9MCxjPXUsZjtiPGM7YisrKVwiZnVuY3Rpb25cIj09dHlwZW9mKGY9eltiXSkmJihmPWYoYSksZj1tP2UuZ2V0VHJ1c3RlZChtLGYpOmUudmFsdWVPZihmKSxudWxsPT09Znx8RShmKT9mPVwiXCI6XCJzdHJpbmdcIiE9dHlwZW9mIGYmJihmPXFhKGYpKSksdltiXT1mO3JldHVybiB2LmpvaW4oXCJcIil9Y2F0Y2goaCl7YT12YyhcImludGVyclwiLGcsaC50b1N0cmluZygpKSxkKGEpfX0sci5leHA9ZyxyLnBhcnRzPXoscn12YXIgZj1iLmxlbmd0aCxoPWEubGVuZ3RoO2cuc3RhcnRTeW1ib2w9ZnVuY3Rpb24oKXtyZXR1cm4gYn07Zy5lbmRTeW1ib2w9ZnVuY3Rpb24oKXtyZXR1cm4gYX07XG5yZXR1cm4gZ31dfWZ1bmN0aW9uIFNkKCl7dGhpcy4kZ2V0PVtcIiRyb290U2NvcGVcIixcIiR3aW5kb3dcIixcIiRxXCIsZnVuY3Rpb24oYixhLGMpe2Z1bmN0aW9uIGQoZCxmLGgsbCl7dmFyIGs9YS5zZXRJbnRlcnZhbCxtPWEuY2xlYXJJbnRlcnZhbCxuPWMuZGVmZXIoKSxwPW4ucHJvbWlzZSxyPTAsej1CKGwpJiYhbDtoPUIoaCk/aDowO3AudGhlbihudWxsLG51bGwsZCk7cC4kJGludGVydmFsSWQ9ayhmdW5jdGlvbigpe24ubm90aWZ5KHIrKyk7MDxoJiZyPj1oJiYobi5yZXNvbHZlKHIpLG0ocC4kJGludGVydmFsSWQpLGRlbGV0ZSBlW3AuJCRpbnRlcnZhbElkXSk7enx8Yi4kYXBwbHkoKX0sZik7ZVtwLiQkaW50ZXJ2YWxJZF09bjtyZXR1cm4gcH12YXIgZT17fTtkLmNhbmNlbD1mdW5jdGlvbihhKXtyZXR1cm4gYSYmYS4kJGludGVydmFsSWQgaW4gZT8oZVthLiQkaW50ZXJ2YWxJZF0ucmVqZWN0KFwiY2FuY2VsZWRcIiksY2xlYXJJbnRlcnZhbChhLiQkaW50ZXJ2YWxJZCksZGVsZXRlIGVbYS4kJGludGVydmFsSWRdLFxuITApOiExfTtyZXR1cm4gZH1dfWZ1bmN0aW9uIGFkKCl7dGhpcy4kZ2V0PWZ1bmN0aW9uKCl7cmV0dXJue2lkOlwiZW4tdXNcIixOVU1CRVJfRk9STUFUUzp7REVDSU1BTF9TRVA6XCIuXCIsR1JPVVBfU0VQOlwiLFwiLFBBVFRFUk5TOlt7bWluSW50OjEsbWluRnJhYzowLG1heEZyYWM6Myxwb3NQcmU6XCJcIixwb3NTdWY6XCJcIixuZWdQcmU6XCItXCIsbmVnU3VmOlwiXCIsZ1NpemU6MyxsZ1NpemU6M30se21pbkludDoxLG1pbkZyYWM6MixtYXhGcmFjOjIscG9zUHJlOlwiXFx1MDBhNFwiLHBvc1N1ZjpcIlwiLG5lZ1ByZTpcIihcXHUwMGE0XCIsbmVnU3VmOlwiKVwiLGdTaXplOjMsbGdTaXplOjN9XSxDVVJSRU5DWV9TWU06XCIkXCJ9LERBVEVUSU1FX0ZPUk1BVFM6e01PTlRIOlwiSmFudWFyeSBGZWJydWFyeSBNYXJjaCBBcHJpbCBNYXkgSnVuZSBKdWx5IEF1Z3VzdCBTZXB0ZW1iZXIgT2N0b2JlciBOb3ZlbWJlciBEZWNlbWJlclwiLnNwbGl0KFwiIFwiKSxTSE9SVE1PTlRIOlwiSmFuIEZlYiBNYXIgQXByIE1heSBKdW4gSnVsIEF1ZyBTZXAgT2N0IE5vdiBEZWNcIi5zcGxpdChcIiBcIiksXG5EQVk6XCJTdW5kYXkgTW9uZGF5IFR1ZXNkYXkgV2VkbmVzZGF5IFRodXJzZGF5IEZyaWRheSBTYXR1cmRheVwiLnNwbGl0KFwiIFwiKSxTSE9SVERBWTpcIlN1biBNb24gVHVlIFdlZCBUaHUgRnJpIFNhdFwiLnNwbGl0KFwiIFwiKSxBTVBNUzpbXCJBTVwiLFwiUE1cIl0sbWVkaXVtOlwiTU1NIGQsIHkgaDptbTpzcyBhXCIsXCJzaG9ydFwiOlwiTS9kL3l5IGg6bW0gYVwiLGZ1bGxEYXRlOlwiRUVFRSwgTU1NTSBkLCB5XCIsbG9uZ0RhdGU6XCJNTU1NIGQsIHlcIixtZWRpdW1EYXRlOlwiTU1NIGQsIHlcIixzaG9ydERhdGU6XCJNL2QveXlcIixtZWRpdW1UaW1lOlwiaDptbTpzcyBhXCIsc2hvcnRUaW1lOlwiaDptbSBhXCJ9LHBsdXJhbENhdDpmdW5jdGlvbihiKXtyZXR1cm4gMT09PWI/XCJvbmVcIjpcIm90aGVyXCJ9fX19ZnVuY3Rpb24gd2MoYil7Yj1iLnNwbGl0KFwiL1wiKTtmb3IodmFyIGE9Yi5sZW5ndGg7YS0tOyliW2FdPXdiKGJbYV0pO3JldHVybiBiLmpvaW4oXCIvXCIpfWZ1bmN0aW9uIHhjKGIsYSxjKXtiPXNhKGIsYyk7YS4kJHByb3RvY29sPVxuYi5wcm90b2NvbDthLiQkaG9zdD1iLmhvc3RuYW1lO2EuJCRwb3J0PVkoYi5wb3J0KXx8d2VbYi5wcm90b2NvbF18fG51bGx9ZnVuY3Rpb24geWMoYixhLGMpe3ZhciBkPVwiL1wiIT09Yi5jaGFyQXQoMCk7ZCYmKGI9XCIvXCIrYik7Yj1zYShiLGMpO2EuJCRwYXRoPWRlY29kZVVSSUNvbXBvbmVudChkJiZcIi9cIj09PWIucGF0aG5hbWUuY2hhckF0KDApP2IucGF0aG5hbWUuc3Vic3RyaW5nKDEpOmIucGF0aG5hbWUpO2EuJCRzZWFyY2g9WWIoYi5zZWFyY2gpO2EuJCRoYXNoPWRlY29kZVVSSUNvbXBvbmVudChiLmhhc2gpO2EuJCRwYXRoJiZcIi9cIiE9YS4kJHBhdGguY2hhckF0KDApJiYoYS4kJHBhdGg9XCIvXCIrYS4kJHBhdGgpfWZ1bmN0aW9uIG9hKGIsYSl7aWYoMD09PWEuaW5kZXhPZihiKSlyZXR1cm4gYS5zdWJzdHIoYi5sZW5ndGgpfWZ1bmN0aW9uIFlhKGIpe3ZhciBhPWIuaW5kZXhPZihcIiNcIik7cmV0dXJuLTE9PWE/YjpiLnN1YnN0cigwLGEpfWZ1bmN0aW9uIEpiKGIpe3JldHVybiBiLnN1YnN0cigwLFxuWWEoYikubGFzdEluZGV4T2YoXCIvXCIpKzEpfWZ1bmN0aW9uIHpjKGIsYSl7dGhpcy4kJGh0bWw1PSEwO2E9YXx8XCJcIjt2YXIgYz1KYihiKTt4YyhiLHRoaXMsYik7dGhpcy4kJHBhcnNlPWZ1bmN0aW9uKGEpe3ZhciBlPW9hKGMsYSk7aWYoIXcoZSkpdGhyb3cgS2IoXCJpcHRocHJmeFwiLGEsYyk7eWMoZSx0aGlzLGIpO3RoaXMuJCRwYXRofHwodGhpcy4kJHBhdGg9XCIvXCIpO3RoaXMuJCRjb21wb3NlKCl9O3RoaXMuJCRjb21wb3NlPWZ1bmN0aW9uKCl7dmFyIGE9WmIodGhpcy4kJHNlYXJjaCksYj10aGlzLiQkaGFzaD9cIiNcIit3Yih0aGlzLiQkaGFzaCk6XCJcIjt0aGlzLiQkdXJsPXdjKHRoaXMuJCRwYXRoKSsoYT9cIj9cIithOlwiXCIpK2I7dGhpcy4kJGFic1VybD1jK3RoaXMuJCR1cmwuc3Vic3RyKDEpfTt0aGlzLiQkcmV3cml0ZT1mdW5jdGlvbihkKXt2YXIgZTtpZigoZT1vYShiLGQpKSE9PXMpcmV0dXJuIGQ9ZSwoZT1vYShhLGUpKSE9PXM/Yysob2EoXCIvXCIsZSl8fGUpOmIrZDtpZigoZT1vYShjLFxuZCkpIT09cylyZXR1cm4gYytlO2lmKGM9PWQrXCIvXCIpcmV0dXJuIGN9fWZ1bmN0aW9uIExiKGIsYSl7dmFyIGM9SmIoYik7eGMoYix0aGlzLGIpO3RoaXMuJCRwYXJzZT1mdW5jdGlvbihkKXt2YXIgZT1vYShiLGQpfHxvYShjLGQpLGU9XCIjXCI9PWUuY2hhckF0KDApP29hKGEsZSk6dGhpcy4kJGh0bWw1P2U6XCJcIjtpZighdyhlKSl0aHJvdyBLYihcImloc2hwcmZ4XCIsZCxhKTt5YyhlLHRoaXMsYik7ZD10aGlzLiQkcGF0aDt2YXIgZz0vXlxcLz8uKj86KFxcLy4qKS87MD09PWUuaW5kZXhPZihiKSYmKGU9ZS5yZXBsYWNlKGIsXCJcIikpO2cuZXhlYyhlKXx8KGQ9KGU9Zy5leGVjKGQpKT9lWzFdOmQpO3RoaXMuJCRwYXRoPWQ7dGhpcy4kJGNvbXBvc2UoKX07dGhpcy4kJGNvbXBvc2U9ZnVuY3Rpb24oKXt2YXIgYz1aYih0aGlzLiQkc2VhcmNoKSxlPXRoaXMuJCRoYXNoP1wiI1wiK3diKHRoaXMuJCRoYXNoKTpcIlwiO3RoaXMuJCR1cmw9d2ModGhpcy4kJHBhdGgpKyhjP1wiP1wiK2M6XCJcIikrZTt0aGlzLiQkYWJzVXJsPVxuYisodGhpcy4kJHVybD9hK3RoaXMuJCR1cmw6XCJcIil9O3RoaXMuJCRyZXdyaXRlPWZ1bmN0aW9uKGEpe2lmKFlhKGIpPT1ZYShhKSlyZXR1cm4gYX19ZnVuY3Rpb24gQWMoYixhKXt0aGlzLiQkaHRtbDU9ITA7TGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBjPUpiKGIpO3RoaXMuJCRyZXdyaXRlPWZ1bmN0aW9uKGQpe3ZhciBlO2lmKGI9PVlhKGQpKXJldHVybiBkO2lmKGU9b2EoYyxkKSlyZXR1cm4gYithK2U7aWYoYz09PWQrXCIvXCIpcmV0dXJuIGN9fWZ1bmN0aW9uIG5iKGIpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0aGlzW2JdfX1mdW5jdGlvbiBCYyhiLGEpe3JldHVybiBmdW5jdGlvbihjKXtpZihFKGMpKXJldHVybiB0aGlzW2JdO3RoaXNbYl09YShjKTt0aGlzLiQkY29tcG9zZSgpO3JldHVybiB0aGlzfX1mdW5jdGlvbiBWZCgpe3ZhciBiPVwiXCIsYT0hMTt0aGlzLmhhc2hQcmVmaXg9ZnVuY3Rpb24oYSl7cmV0dXJuIEIoYSk/KGI9YSx0aGlzKTpifTt0aGlzLmh0bWw1TW9kZT1cbmZ1bmN0aW9uKGIpe3JldHVybiBCKGIpPyhhPWIsdGhpcyk6YX07dGhpcy4kZ2V0PVtcIiRyb290U2NvcGVcIixcIiRicm93c2VyXCIsXCIkc25pZmZlclwiLFwiJHJvb3RFbGVtZW50XCIsZnVuY3Rpb24oYyxkLGUsZyl7ZnVuY3Rpb24gZihhKXtjLiRicm9hZGNhc3QoXCIkbG9jYXRpb25DaGFuZ2VTdWNjZXNzXCIsaC5hYnNVcmwoKSxhKX12YXIgaCxsPWQuYmFzZUhyZWYoKSxrPWQudXJsKCk7YT8obD1rLnN1YnN0cmluZygwLGsuaW5kZXhPZihcIi9cIixrLmluZGV4T2YoXCIvL1wiKSsyKSkrKGx8fFwiL1wiKSxlPWUuaGlzdG9yeT96YzpBYyk6KGw9WWEoayksZT1MYik7aD1uZXcgZShsLFwiI1wiK2IpO2guJCRwYXJzZShoLiQkcmV3cml0ZShrKSk7Zy5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSl7aWYoIWEuY3RybEtleSYmIWEubWV0YUtleSYmMiE9YS53aGljaCl7Zm9yKHZhciBiPXkoYS50YXJnZXQpO1wiYVwiIT09SyhiWzBdLm5vZGVOYW1lKTspaWYoYlswXT09PWdbMF18fCEoYj1iLnBhcmVudCgpKVswXSlyZXR1cm47XG52YXIgZT1iLnByb3AoXCJocmVmXCIpO1goZSkmJlwiW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ11cIj09PWUudG9TdHJpbmcoKSYmKGU9c2EoZS5hbmltVmFsKS5ocmVmKTt2YXIgZj1oLiQkcmV3cml0ZShlKTtlJiYoIWIuYXR0cihcInRhcmdldFwiKSYmZiYmIWEuaXNEZWZhdWx0UHJldmVudGVkKCkpJiYoYS5wcmV2ZW50RGVmYXVsdCgpLGYhPWQudXJsKCkmJihoLiQkcGFyc2UoZiksYy4kYXBwbHkoKSxPLmFuZ3VsYXJbXCJmZi02ODQyMDgtcHJldmVudERlZmF1bHRcIl09ITApKX19KTtoLmFic1VybCgpIT1rJiZkLnVybChoLmFic1VybCgpLCEwKTtkLm9uVXJsQ2hhbmdlKGZ1bmN0aW9uKGEpe2guYWJzVXJsKCkhPWEmJihjLiRldmFsQXN5bmMoZnVuY3Rpb24oKXt2YXIgYj1oLmFic1VybCgpO2guJCRwYXJzZShhKTtjLiRicm9hZGNhc3QoXCIkbG9jYXRpb25DaGFuZ2VTdGFydFwiLGEsYikuZGVmYXVsdFByZXZlbnRlZD8oaC4kJHBhcnNlKGIpLGQudXJsKGIpKTpmKGIpfSksYy4kJHBoYXNlfHxcbmMuJGRpZ2VzdCgpKX0pO3ZhciBtPTA7Yy4kd2F0Y2goZnVuY3Rpb24oKXt2YXIgYT1kLnVybCgpLGI9aC4kJHJlcGxhY2U7bSYmYT09aC5hYnNVcmwoKXx8KG0rKyxjLiRldmFsQXN5bmMoZnVuY3Rpb24oKXtjLiRicm9hZGNhc3QoXCIkbG9jYXRpb25DaGFuZ2VTdGFydFwiLGguYWJzVXJsKCksYSkuZGVmYXVsdFByZXZlbnRlZD9oLiQkcGFyc2UoYSk6KGQudXJsKGguYWJzVXJsKCksYiksZihhKSl9KSk7aC4kJHJlcGxhY2U9ITE7cmV0dXJuIG19KTtyZXR1cm4gaH1dfWZ1bmN0aW9uIFdkKCl7dmFyIGI9ITAsYT10aGlzO3RoaXMuZGVidWdFbmFibGVkPWZ1bmN0aW9uKGEpe3JldHVybiBCKGEpPyhiPWEsdGhpcyk6Yn07dGhpcy4kZ2V0PVtcIiR3aW5kb3dcIixmdW5jdGlvbihjKXtmdW5jdGlvbiBkKGEpe2EgaW5zdGFuY2VvZiBFcnJvciYmKGEuc3RhY2s/YT1hLm1lc3NhZ2UmJi0xPT09YS5zdGFjay5pbmRleE9mKGEubWVzc2FnZSk/XCJFcnJvcjogXCIrYS5tZXNzYWdlK1wiXFxuXCIrYS5zdGFjazpcbmEuc3RhY2s6YS5zb3VyY2VVUkwmJihhPWEubWVzc2FnZStcIlxcblwiK2Euc291cmNlVVJMK1wiOlwiK2EubGluZSkpO3JldHVybiBhfWZ1bmN0aW9uIGUoYSl7dmFyIGI9Yy5jb25zb2xlfHx7fSxlPWJbYV18fGIubG9nfHxDO2E9ITE7dHJ5e2E9ISFlLmFwcGx5fWNhdGNoKGwpe31yZXR1cm4gYT9mdW5jdGlvbigpe3ZhciBhPVtdO3EoYXJndW1lbnRzLGZ1bmN0aW9uKGIpe2EucHVzaChkKGIpKX0pO3JldHVybiBlLmFwcGx5KGIsYSl9OmZ1bmN0aW9uKGEsYil7ZShhLG51bGw9PWI/XCJcIjpiKX19cmV0dXJue2xvZzplKFwibG9nXCIpLGluZm86ZShcImluZm9cIiksd2FybjplKFwid2FyblwiKSxlcnJvcjplKFwiZXJyb3JcIiksZGVidWc6ZnVuY3Rpb24oKXt2YXIgYz1lKFwiZGVidWdcIik7cmV0dXJuIGZ1bmN0aW9uKCl7YiYmYy5hcHBseShhLGFyZ3VtZW50cyl9fSgpfX1dfWZ1bmN0aW9uIGZhKGIsYSl7aWYoXCJjb25zdHJ1Y3RvclwiPT09Yil0aHJvdyBCYShcImlzZWNmbGRcIixhKTtyZXR1cm4gYn1mdW5jdGlvbiBaYShiLFxuYSl7aWYoYil7aWYoYi5jb25zdHJ1Y3Rvcj09PWIpdGhyb3cgQmEoXCJpc2VjZm5cIixhKTtpZihiLmRvY3VtZW50JiZiLmxvY2F0aW9uJiZiLmFsZXJ0JiZiLnNldEludGVydmFsKXRocm93IEJhKFwiaXNlY3dpbmRvd1wiLGEpO2lmKGIuY2hpbGRyZW4mJihiLm5vZGVOYW1lfHxiLnByb3AmJmIuYXR0ciYmYi5maW5kKSl0aHJvdyBCYShcImlzZWNkb21cIixhKTt9cmV0dXJuIGJ9ZnVuY3Rpb24gb2IoYixhLGMsZCxlKXtlPWV8fHt9O2E9YS5zcGxpdChcIi5cIik7Zm9yKHZhciBnLGY9MDsxPGEubGVuZ3RoO2YrKyl7Zz1mYShhLnNoaWZ0KCksZCk7dmFyIGg9YltnXTtofHwoaD17fSxiW2ddPWgpO2I9aDtiLnRoZW4mJmUudW53cmFwUHJvbWlzZXMmJih0YShkKSxcIiQkdlwiaW4gYnx8ZnVuY3Rpb24oYSl7YS50aGVuKGZ1bmN0aW9uKGIpe2EuJCR2PWJ9KX0oYiksYi4kJHY9PT1zJiYoYi4kJHY9e30pLGI9Yi4kJHYpfWc9ZmEoYS5zaGlmdCgpLGQpO3JldHVybiBiW2ddPWN9ZnVuY3Rpb24gQ2MoYixcbmEsYyxkLGUsZyxmKXtmYShiLGcpO2ZhKGEsZyk7ZmEoYyxnKTtmYShkLGcpO2ZhKGUsZyk7cmV0dXJuIGYudW53cmFwUHJvbWlzZXM/ZnVuY3Rpb24oZixsKXt2YXIgaz1sJiZsLmhhc093blByb3BlcnR5KGIpP2w6ZixtO2lmKG51bGw9PWspcmV0dXJuIGs7KGs9a1tiXSkmJmsudGhlbiYmKHRhKGcpLFwiJCR2XCJpbiBrfHwobT1rLG0uJCR2PXMsbS50aGVuKGZ1bmN0aW9uKGEpe20uJCR2PWF9KSksaz1rLiQkdik7aWYoIWEpcmV0dXJuIGs7aWYobnVsbD09aylyZXR1cm4gczsoaz1rW2FdKSYmay50aGVuJiYodGEoZyksXCIkJHZcImluIGt8fChtPWssbS4kJHY9cyxtLnRoZW4oZnVuY3Rpb24oYSl7bS4kJHY9YX0pKSxrPWsuJCR2KTtpZighYylyZXR1cm4gaztpZihudWxsPT1rKXJldHVybiBzOyhrPWtbY10pJiZrLnRoZW4mJih0YShnKSxcIiQkdlwiaW4ga3x8KG09ayxtLiQkdj1zLG0udGhlbihmdW5jdGlvbihhKXttLiQkdj1hfSkpLGs9ay4kJHYpO2lmKCFkKXJldHVybiBrO2lmKG51bGw9PVxuaylyZXR1cm4gczsoaz1rW2RdKSYmay50aGVuJiYodGEoZyksXCIkJHZcImluIGt8fChtPWssbS4kJHY9cyxtLnRoZW4oZnVuY3Rpb24oYSl7bS4kJHY9YX0pKSxrPWsuJCR2KTtpZighZSlyZXR1cm4gaztpZihudWxsPT1rKXJldHVybiBzOyhrPWtbZV0pJiZrLnRoZW4mJih0YShnKSxcIiQkdlwiaW4ga3x8KG09ayxtLiQkdj1zLG0udGhlbihmdW5jdGlvbihhKXttLiQkdj1hfSkpLGs9ay4kJHYpO3JldHVybiBrfTpmdW5jdGlvbihnLGYpe3ZhciBrPWYmJmYuaGFzT3duUHJvcGVydHkoYik/ZjpnO2lmKG51bGw9PWspcmV0dXJuIGs7az1rW2JdO2lmKCFhKXJldHVybiBrO2lmKG51bGw9PWspcmV0dXJuIHM7az1rW2FdO2lmKCFjKXJldHVybiBrO2lmKG51bGw9PWspcmV0dXJuIHM7az1rW2NdO2lmKCFkKXJldHVybiBrO2lmKG51bGw9PWspcmV0dXJuIHM7az1rW2RdO3JldHVybiBlP251bGw9PWs/czprPWtbZV06a319ZnVuY3Rpb24geGUoYixhKXtmYShiLGEpO3JldHVybiBmdW5jdGlvbihhLFxuZCl7cmV0dXJuIG51bGw9PWE/czooZCYmZC5oYXNPd25Qcm9wZXJ0eShiKT9kOmEpW2JdfX1mdW5jdGlvbiB5ZShiLGEsYyl7ZmEoYixjKTtmYShhLGMpO3JldHVybiBmdW5jdGlvbihjLGUpe2lmKG51bGw9PWMpcmV0dXJuIHM7Yz0oZSYmZS5oYXNPd25Qcm9wZXJ0eShiKT9lOmMpW2JdO3JldHVybiBudWxsPT1jP3M6Y1thXX19ZnVuY3Rpb24gRGMoYixhLGMpe2lmKE1iLmhhc093blByb3BlcnR5KGIpKXJldHVybiBNYltiXTt2YXIgZD1iLnNwbGl0KFwiLlwiKSxlPWQubGVuZ3RoLGc7aWYoYS51bndyYXBQcm9taXNlc3x8MSE9PWUpaWYoYS51bndyYXBQcm9taXNlc3x8MiE9PWUpaWYoYS5jc3ApZz02PmU/Q2MoZFswXSxkWzFdLGRbMl0sZFszXSxkWzRdLGMsYSk6ZnVuY3Rpb24oYixnKXt2YXIgZj0wLGg7ZG8gaD1DYyhkW2YrK10sZFtmKytdLGRbZisrXSxkW2YrK10sZFtmKytdLGMsYSkoYixnKSxnPXMsYj1oO3doaWxlKGY8ZSk7cmV0dXJuIGh9O2Vsc2V7dmFyIGY9XCJ2YXIgcDtcXG5cIjtcbnEoZCxmdW5jdGlvbihiLGQpe2ZhKGIsYyk7Zis9XCJpZihzID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7XFxucz1cIisoZD9cInNcIjonKChrJiZrLmhhc093blByb3BlcnR5KFwiJytiKydcIikpP2s6cyknKSsnW1wiJytiKydcIl07XFxuJysoYS51bndyYXBQcm9taXNlcz8naWYgKHMgJiYgcy50aGVuKSB7XFxuIHB3KFwiJytjLnJlcGxhY2UoLyhbXCJcXHJcXG5dKS9nLFwiXFxcXCQxXCIpKydcIik7XFxuIGlmICghKFwiJCR2XCIgaW4gcykpIHtcXG4gcD1zO1xcbiBwLiQkdiA9IHVuZGVmaW5lZDtcXG4gcC50aGVuKGZ1bmN0aW9uKHYpIHtwLiQkdj12O30pO1xcbn1cXG4gcz1zLiQkdlxcbn1cXG4nOlwiXCIpfSk7dmFyIGY9ZitcInJldHVybiBzO1wiLGg9bmV3IEZ1bmN0aW9uKFwic1wiLFwia1wiLFwicHdcIixmKTtoLnRvU3RyaW5nPWFhKGYpO2c9YS51bndyYXBQcm9taXNlcz9mdW5jdGlvbihhLGIpe3JldHVybiBoKGEsYix0YSl9Omh9ZWxzZSBnPXllKGRbMF0sZFsxXSxjKTtlbHNlIGc9eGUoZFswXSxjKTtcImhhc093blByb3BlcnR5XCIhPT1cbmImJihNYltiXT1nKTtyZXR1cm4gZ31mdW5jdGlvbiBYZCgpe3ZhciBiPXt9LGE9e2NzcDohMSx1bndyYXBQcm9taXNlczohMSxsb2dQcm9taXNlV2FybmluZ3M6ITB9O3RoaXMudW53cmFwUHJvbWlzZXM9ZnVuY3Rpb24oYil7cmV0dXJuIEIoYik/KGEudW53cmFwUHJvbWlzZXM9ISFiLHRoaXMpOmEudW53cmFwUHJvbWlzZXN9O3RoaXMubG9nUHJvbWlzZVdhcm5pbmdzPWZ1bmN0aW9uKGIpe3JldHVybiBCKGIpPyhhLmxvZ1Byb21pc2VXYXJuaW5ncz1iLHRoaXMpOmEubG9nUHJvbWlzZVdhcm5pbmdzfTt0aGlzLiRnZXQ9W1wiJGZpbHRlclwiLFwiJHNuaWZmZXJcIixcIiRsb2dcIixmdW5jdGlvbihjLGQsZSl7YS5jc3A9ZC5jc3A7dGE9ZnVuY3Rpb24oYil7YS5sb2dQcm9taXNlV2FybmluZ3MmJiFFYy5oYXNPd25Qcm9wZXJ0eShiKSYmKEVjW2JdPSEwLGUud2FybihcIlskcGFyc2VdIFByb21pc2UgZm91bmQgaW4gdGhlIGV4cHJlc3Npb24gYFwiK2IrXCJgLiBBdXRvbWF0aWMgdW53cmFwcGluZyBvZiBwcm9taXNlcyBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRlcHJlY2F0ZWQuXCIpKX07XG5yZXR1cm4gZnVuY3Rpb24oZCl7dmFyIGU7c3dpdGNoKHR5cGVvZiBkKXtjYXNlIFwic3RyaW5nXCI6aWYoYi5oYXNPd25Qcm9wZXJ0eShkKSlyZXR1cm4gYltkXTtlPW5ldyBOYihhKTtlPShuZXcgJGEoZSxjLGEpKS5wYXJzZShkLCExKTtcImhhc093blByb3BlcnR5XCIhPT1kJiYoYltkXT1lKTtyZXR1cm4gZTtjYXNlIFwiZnVuY3Rpb25cIjpyZXR1cm4gZDtkZWZhdWx0OnJldHVybiBDfX19XX1mdW5jdGlvbiBaZCgpe3RoaXMuJGdldD1bXCIkcm9vdFNjb3BlXCIsXCIkZXhjZXB0aW9uSGFuZGxlclwiLGZ1bmN0aW9uKGIsYSl7cmV0dXJuIHplKGZ1bmN0aW9uKGEpe2IuJGV2YWxBc3luYyhhKX0sYSl9XX1mdW5jdGlvbiB6ZShiLGEpe2Z1bmN0aW9uIGMoYSl7cmV0dXJuIGF9ZnVuY3Rpb24gZChhKXtyZXR1cm4gZihhKX12YXIgZT1mdW5jdGlvbigpe3ZhciBmPVtdLGssbTtyZXR1cm4gbT17cmVzb2x2ZTpmdW5jdGlvbihhKXtpZihmKXt2YXIgYz1mO2Y9cztrPWcoYSk7Yy5sZW5ndGgmJmIoZnVuY3Rpb24oKXtmb3IodmFyIGEsXG5iPTAsZD1jLmxlbmd0aDtiPGQ7YisrKWE9Y1tiXSxrLnRoZW4oYVswXSxhWzFdLGFbMl0pfSl9fSxyZWplY3Q6ZnVuY3Rpb24oYSl7bS5yZXNvbHZlKGgoYSkpfSxub3RpZnk6ZnVuY3Rpb24oYSl7aWYoZil7dmFyIGM9ZjtmLmxlbmd0aCYmYihmdW5jdGlvbigpe2Zvcih2YXIgYixkPTAsZT1jLmxlbmd0aDtkPGU7ZCsrKWI9Y1tkXSxiWzJdKGEpfSl9fSxwcm9taXNlOnt0aGVuOmZ1bmN0aW9uKGIsZyxoKXt2YXIgbT1lKCksdT1mdW5jdGlvbihkKXt0cnl7bS5yZXNvbHZlKChQKGIpP2I6YykoZCkpfWNhdGNoKGUpe20ucmVqZWN0KGUpLGEoZSl9fSxGPWZ1bmN0aW9uKGIpe3RyeXttLnJlc29sdmUoKFAoZyk/ZzpkKShiKSl9Y2F0Y2goYyl7bS5yZWplY3QoYyksYShjKX19LHY9ZnVuY3Rpb24oYil7dHJ5e20ubm90aWZ5KChQKGgpP2g6YykoYikpfWNhdGNoKGQpe2EoZCl9fTtmP2YucHVzaChbdSxGLHZdKTprLnRoZW4odSxGLHYpO3JldHVybiBtLnByb21pc2V9LFwiY2F0Y2hcIjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy50aGVuKG51bGwsXG5hKX0sXCJmaW5hbGx5XCI6ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhLGMpe3ZhciBkPWUoKTtjP2QucmVzb2x2ZShhKTpkLnJlamVjdChhKTtyZXR1cm4gZC5wcm9taXNlfWZ1bmN0aW9uIGQoZSxnKXt2YXIgZj1udWxsO3RyeXtmPShhfHxjKSgpfWNhdGNoKGgpe3JldHVybiBiKGgsITEpfXJldHVybiBmJiZQKGYudGhlbik/Zi50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGIoZSxnKX0sZnVuY3Rpb24oYSl7cmV0dXJuIGIoYSwhMSl9KTpiKGUsZyl9cmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gZChhLCEwKX0sZnVuY3Rpb24oYSl7cmV0dXJuIGQoYSwhMSl9KX19fX0sZz1mdW5jdGlvbihhKXtyZXR1cm4gYSYmUChhLnRoZW4pP2E6e3RoZW46ZnVuY3Rpb24oYyl7dmFyIGQ9ZSgpO2IoZnVuY3Rpb24oKXtkLnJlc29sdmUoYyhhKSl9KTtyZXR1cm4gZC5wcm9taXNlfX19LGY9ZnVuY3Rpb24oYSl7dmFyIGI9ZSgpO2IucmVqZWN0KGEpO3JldHVybiBiLnByb21pc2V9LGg9ZnVuY3Rpb24oYyl7cmV0dXJue3RoZW46ZnVuY3Rpb24oZyxcbmYpe3ZhciBoPWUoKTtiKGZ1bmN0aW9uKCl7dHJ5e2gucmVzb2x2ZSgoUChmKT9mOmQpKGMpKX1jYXRjaChiKXtoLnJlamVjdChiKSxhKGIpfX0pO3JldHVybiBoLnByb21pc2V9fX07cmV0dXJue2RlZmVyOmUscmVqZWN0OmYsd2hlbjpmdW5jdGlvbihoLGssbSxuKXt2YXIgcD1lKCkscix6PWZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4oUChrKT9rOmMpKGIpfWNhdGNoKGQpe3JldHVybiBhKGQpLGYoZCl9fSx1PWZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4oUChtKT9tOmQpKGIpfWNhdGNoKGMpe3JldHVybiBhKGMpLGYoYyl9fSxGPWZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4oUChuKT9uOmMpKGIpfWNhdGNoKGQpe2EoZCl9fTtiKGZ1bmN0aW9uKCl7ZyhoKS50aGVuKGZ1bmN0aW9uKGEpe3J8fChyPSEwLHAucmVzb2x2ZShnKGEpLnRoZW4oeix1LEYpKSl9LGZ1bmN0aW9uKGEpe3J8fChyPSEwLHAucmVzb2x2ZSh1KGEpKSl9LGZ1bmN0aW9uKGEpe3J8fHAubm90aWZ5KEYoYSkpfSl9KTtyZXR1cm4gcC5wcm9taXNlfSxcbmFsbDpmdW5jdGlvbihhKXt2YXIgYj1lKCksYz0wLGQ9TShhKT9bXTp7fTtxKGEsZnVuY3Rpb24oYSxlKXtjKys7ZyhhKS50aGVuKGZ1bmN0aW9uKGEpe2QuaGFzT3duUHJvcGVydHkoZSl8fChkW2VdPWEsLS1jfHxiLnJlc29sdmUoZCkpfSxmdW5jdGlvbihhKXtkLmhhc093blByb3BlcnR5KGUpfHxiLnJlamVjdChhKX0pfSk7MD09PWMmJmIucmVzb2x2ZShkKTtyZXR1cm4gYi5wcm9taXNlfX19ZnVuY3Rpb24gZmUoKXt0aGlzLiRnZXQ9W1wiJHdpbmRvd1wiLFwiJHRpbWVvdXRcIixmdW5jdGlvbihiLGEpe3ZhciBjPWIucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxiLndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZXx8Yi5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUsZD1iLmNhbmNlbEFuaW1hdGlvbkZyYW1lfHxiLndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lfHxiLm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lfHxiLndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSxlPSEhYyxnPWU/XG5mdW5jdGlvbihhKXt2YXIgYj1jKGEpO3JldHVybiBmdW5jdGlvbigpe2QoYil9fTpmdW5jdGlvbihiKXt2YXIgYz1hKGIsMTYuNjYsITEpO3JldHVybiBmdW5jdGlvbigpe2EuY2FuY2VsKGMpfX07Zy5zdXBwb3J0ZWQ9ZTtyZXR1cm4gZ31dfWZ1bmN0aW9uIFlkKCl7dmFyIGI9MTAsYT10KFwiJHJvb3RTY29wZVwiKSxjPW51bGw7dGhpcy5kaWdlc3RUdGw9ZnVuY3Rpb24oYSl7YXJndW1lbnRzLmxlbmd0aCYmKGI9YSk7cmV0dXJuIGJ9O3RoaXMuJGdldD1bXCIkaW5qZWN0b3JcIixcIiRleGNlcHRpb25IYW5kbGVyXCIsXCIkcGFyc2VcIixcIiRicm93c2VyXCIsZnVuY3Rpb24oZCxlLGcsZil7ZnVuY3Rpb24gaCgpe3RoaXMuJGlkPWJiKCk7dGhpcy4kJHBoYXNlPXRoaXMuJHBhcmVudD10aGlzLiQkd2F0Y2hlcnM9dGhpcy4kJG5leHRTaWJsaW5nPXRoaXMuJCRwcmV2U2libGluZz10aGlzLiQkY2hpbGRIZWFkPXRoaXMuJCRjaGlsZFRhaWw9bnVsbDt0aGlzW1widGhpc1wiXT10aGlzLiRyb290PXRoaXM7XG50aGlzLiQkZGVzdHJveWVkPSExO3RoaXMuJCRhc3luY1F1ZXVlPVtdO3RoaXMuJCRwb3N0RGlnZXN0UXVldWU9W107dGhpcy4kJGxpc3RlbmVycz17fTt0aGlzLiQkbGlzdGVuZXJDb3VudD17fTt0aGlzLiQkaXNvbGF0ZUJpbmRpbmdzPXt9fWZ1bmN0aW9uIGwoYil7aWYocC4kJHBoYXNlKXRocm93IGEoXCJpbnByb2dcIixwLiQkcGhhc2UpO3AuJCRwaGFzZT1ifWZ1bmN0aW9uIGsoYSxiKXt2YXIgYz1nKGEpO1JhKGMsYik7cmV0dXJuIGN9ZnVuY3Rpb24gbShhLGIsYyl7ZG8gYS4kJGxpc3RlbmVyQ291bnRbY10tPWIsMD09PWEuJCRsaXN0ZW5lckNvdW50W2NdJiZkZWxldGUgYS4kJGxpc3RlbmVyQ291bnRbY107d2hpbGUoYT1hLiRwYXJlbnQpfWZ1bmN0aW9uIG4oKXt9aC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmgsJG5ldzpmdW5jdGlvbihhKXthPyhhPW5ldyBoLGEuJHJvb3Q9dGhpcy4kcm9vdCxhLiQkYXN5bmNRdWV1ZT10aGlzLiQkYXN5bmNRdWV1ZSxhLiQkcG9zdERpZ2VzdFF1ZXVlPVxudGhpcy4kJHBvc3REaWdlc3RRdWV1ZSk6KGE9ZnVuY3Rpb24oKXt9LGEucHJvdG90eXBlPXRoaXMsYT1uZXcgYSxhLiRpZD1iYigpKTthW1widGhpc1wiXT1hO2EuJCRsaXN0ZW5lcnM9e307YS4kJGxpc3RlbmVyQ291bnQ9e307YS4kcGFyZW50PXRoaXM7YS4kJHdhdGNoZXJzPWEuJCRuZXh0U2libGluZz1hLiQkY2hpbGRIZWFkPWEuJCRjaGlsZFRhaWw9bnVsbDthLiQkcHJldlNpYmxpbmc9dGhpcy4kJGNoaWxkVGFpbDt0aGlzLiQkY2hpbGRIZWFkP3RoaXMuJCRjaGlsZFRhaWw9dGhpcy4kJGNoaWxkVGFpbC4kJG5leHRTaWJsaW5nPWE6dGhpcy4kJGNoaWxkSGVhZD10aGlzLiQkY2hpbGRUYWlsPWE7cmV0dXJuIGF9LCR3YXRjaDpmdW5jdGlvbihhLGIsZCl7dmFyIGU9ayhhLFwid2F0Y2hcIiksZz10aGlzLiQkd2F0Y2hlcnMsZj17Zm46YixsYXN0Om4sZ2V0OmUsZXhwOmEsZXE6ISFkfTtjPW51bGw7aWYoIVAoYikpe3ZhciBoPWsoYnx8QyxcImxpc3RlbmVyXCIpO2YuZm49ZnVuY3Rpb24oYSxcbmIsYyl7aChjKX19aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEmJmUuY29uc3RhbnQpe3ZhciBsPWYuZm47Zi5mbj1mdW5jdGlvbihhLGIsYyl7bC5jYWxsKHRoaXMsYSxiLGMpO09hKGcsZil9fWd8fChnPXRoaXMuJCR3YXRjaGVycz1bXSk7Zy51bnNoaWZ0KGYpO3JldHVybiBmdW5jdGlvbigpe09hKGcsZik7Yz1udWxsfX0sJHdhdGNoQ29sbGVjdGlvbjpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMsZCxlLGYsaD0xPGIubGVuZ3RoLGw9MCxrPWcoYSksbT1bXSxuPXt9LHA9ITAscT0wO3JldHVybiB0aGlzLiR3YXRjaChmdW5jdGlvbigpe2Q9ayhjKTt2YXIgYSxiO2lmKFgoZCkpaWYoYWIoZCkpZm9yKGUhPT1tJiYoZT1tLHE9ZS5sZW5ndGg9MCxsKyspLGE9ZC5sZW5ndGgscSE9PWEmJihsKyssZS5sZW5ndGg9cT1hKSxiPTA7YjxhO2IrKyllW2JdIT09ZVtiXSYmZFtiXSE9PWRbYl18fGVbYl09PT1kW2JdfHwobCsrLGVbYl09ZFtiXSk7ZWxzZXtlIT09biYmKGU9bj17fSxxPTAsbCsrKTthPVxuMDtmb3IoYiBpbiBkKWQuaGFzT3duUHJvcGVydHkoYikmJihhKyssZS5oYXNPd25Qcm9wZXJ0eShiKT9lW2JdIT09ZFtiXSYmKGwrKyxlW2JdPWRbYl0pOihxKyssZVtiXT1kW2JdLGwrKykpO2lmKHE+YSlmb3IoYiBpbiBsKyssZSllLmhhc093blByb3BlcnR5KGIpJiYhZC5oYXNPd25Qcm9wZXJ0eShiKSYmKHEtLSxkZWxldGUgZVtiXSl9ZWxzZSBlIT09ZCYmKGU9ZCxsKyspO3JldHVybiBsfSxmdW5jdGlvbigpe3A/KHA9ITEsYihkLGQsYykpOmIoZCxmLGMpO2lmKGgpaWYoWChkKSlpZihhYihkKSl7Zj1BcnJheShkLmxlbmd0aCk7Zm9yKHZhciBhPTA7YTxkLmxlbmd0aDthKyspZlthXT1kW2FdfWVsc2UgZm9yKGEgaW4gZj17fSxkKUZjLmNhbGwoZCxhKSYmKGZbYV09ZFthXSk7ZWxzZSBmPWR9KX0sJGRpZ2VzdDpmdW5jdGlvbigpe3ZhciBkLGcsZixoLGs9dGhpcy4kJGFzeW5jUXVldWUsbT10aGlzLiQkcG9zdERpZ2VzdFF1ZXVlLHEseCxzPWIsTCxRPVtdLHksSCxSO2woXCIkZGlnZXN0XCIpO1xuYz1udWxsO2Rve3g9ITE7Zm9yKEw9dGhpcztrLmxlbmd0aDspe3RyeXtSPWsuc2hpZnQoKSxSLnNjb3BlLiRldmFsKFIuZXhwcmVzc2lvbil9Y2F0Y2goQil7cC4kJHBoYXNlPW51bGwsZShCKX1jPW51bGx9YTpkb3tpZihoPUwuJCR3YXRjaGVycylmb3IocT1oLmxlbmd0aDtxLS07KXRyeXtpZihkPWhbcV0paWYoKGc9ZC5nZXQoTCkpIT09KGY9ZC5sYXN0KSYmIShkLmVxP3hhKGcsZik6XCJudW1iZXJcIj09dHlwZW9mIGcmJlwibnVtYmVyXCI9PXR5cGVvZiBmJiZpc05hTihnKSYmaXNOYU4oZikpKXg9ITAsYz1kLGQubGFzdD1kLmVxP2JhKGcpOmcsZC5mbihnLGY9PT1uP2c6ZixMKSw1PnMmJih5PTQtcyxRW3ldfHwoUVt5XT1bXSksSD1QKGQuZXhwKT9cImZuOiBcIisoZC5leHAubmFtZXx8ZC5leHAudG9TdHJpbmcoKSk6ZC5leHAsSCs9XCI7IG5ld1ZhbDogXCIrcWEoZykrXCI7IG9sZFZhbDogXCIrcWEoZiksUVt5XS5wdXNoKEgpKTtlbHNlIGlmKGQ9PT1jKXt4PSExO2JyZWFrIGF9fWNhdGNoKHcpe3AuJCRwaGFzZT1cbm51bGwsZSh3KX1pZighKGg9TC4kJGNoaWxkSGVhZHx8TCE9PXRoaXMmJkwuJCRuZXh0U2libGluZykpZm9yKDtMIT09dGhpcyYmIShoPUwuJCRuZXh0U2libGluZyk7KUw9TC4kcGFyZW50fXdoaWxlKEw9aCk7aWYoKHh8fGsubGVuZ3RoKSYmIXMtLSl0aHJvdyBwLiQkcGhhc2U9bnVsbCxhKFwiaW5mZGlnXCIsYixxYShRKSk7fXdoaWxlKHh8fGsubGVuZ3RoKTtmb3IocC4kJHBoYXNlPW51bGw7bS5sZW5ndGg7KXRyeXttLnNoaWZ0KCkoKX1jYXRjaChUKXtlKFQpfX0sJGRlc3Ryb3k6ZnVuY3Rpb24oKXtpZighdGhpcy4kJGRlc3Ryb3llZCl7dmFyIGE9dGhpcy4kcGFyZW50O3RoaXMuJGJyb2FkY2FzdChcIiRkZXN0cm95XCIpO3RoaXMuJCRkZXN0cm95ZWQ9ITA7dGhpcyE9PXAmJihxKHRoaXMuJCRsaXN0ZW5lckNvdW50LGViKG51bGwsbSx0aGlzKSksYS4kJGNoaWxkSGVhZD09dGhpcyYmKGEuJCRjaGlsZEhlYWQ9dGhpcy4kJG5leHRTaWJsaW5nKSxhLiQkY2hpbGRUYWlsPT10aGlzJiZcbihhLiQkY2hpbGRUYWlsPXRoaXMuJCRwcmV2U2libGluZyksdGhpcy4kJHByZXZTaWJsaW5nJiYodGhpcy4kJHByZXZTaWJsaW5nLiQkbmV4dFNpYmxpbmc9dGhpcy4kJG5leHRTaWJsaW5nKSx0aGlzLiQkbmV4dFNpYmxpbmcmJih0aGlzLiQkbmV4dFNpYmxpbmcuJCRwcmV2U2libGluZz10aGlzLiQkcHJldlNpYmxpbmcpLHRoaXMuJHBhcmVudD10aGlzLiQkbmV4dFNpYmxpbmc9dGhpcy4kJHByZXZTaWJsaW5nPXRoaXMuJCRjaGlsZEhlYWQ9dGhpcy4kJGNoaWxkVGFpbD10aGlzLiRyb290PW51bGwsdGhpcy4kJGxpc3RlbmVycz17fSx0aGlzLiQkd2F0Y2hlcnM9dGhpcy4kJGFzeW5jUXVldWU9dGhpcy4kJHBvc3REaWdlc3RRdWV1ZT1bXSx0aGlzLiRkZXN0cm95PXRoaXMuJGRpZ2VzdD10aGlzLiRhcHBseT1DLHRoaXMuJG9uPXRoaXMuJHdhdGNoPWZ1bmN0aW9uKCl7cmV0dXJuIEN9KX19LCRldmFsOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGcoYSkodGhpcyxiKX0sJGV2YWxBc3luYzpmdW5jdGlvbihhKXtwLiQkcGhhc2V8fFxucC4kJGFzeW5jUXVldWUubGVuZ3RofHxmLmRlZmVyKGZ1bmN0aW9uKCl7cC4kJGFzeW5jUXVldWUubGVuZ3RoJiZwLiRkaWdlc3QoKX0pO3RoaXMuJCRhc3luY1F1ZXVlLnB1c2goe3Njb3BlOnRoaXMsZXhwcmVzc2lvbjphfSl9LCQkcG9zdERpZ2VzdDpmdW5jdGlvbihhKXt0aGlzLiQkcG9zdERpZ2VzdFF1ZXVlLnB1c2goYSl9LCRhcHBseTpmdW5jdGlvbihhKXt0cnl7cmV0dXJuIGwoXCIkYXBwbHlcIiksdGhpcy4kZXZhbChhKX1jYXRjaChiKXtlKGIpfWZpbmFsbHl7cC4kJHBoYXNlPW51bGw7dHJ5e3AuJGRpZ2VzdCgpfWNhdGNoKGMpe3Rocm93IGUoYyksYzt9fX0sJG9uOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy4kJGxpc3RlbmVyc1thXTtjfHwodGhpcy4kJGxpc3RlbmVyc1thXT1jPVtdKTtjLnB1c2goYik7dmFyIGQ9dGhpcztkbyBkLiQkbGlzdGVuZXJDb3VudFthXXx8KGQuJCRsaXN0ZW5lckNvdW50W2FdPTApLGQuJCRsaXN0ZW5lckNvdW50W2FdKys7d2hpbGUoZD1kLiRwYXJlbnQpO1xudmFyIGU9dGhpcztyZXR1cm4gZnVuY3Rpb24oKXtjW2RiKGMsYildPW51bGw7bShlLDEsYSl9fSwkZW1pdDpmdW5jdGlvbihhLGIpe3ZhciBjPVtdLGQsZz10aGlzLGY9ITEsaD17bmFtZTphLHRhcmdldFNjb3BlOmcsc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7Zj0hMH0scHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXtoLmRlZmF1bHRQcmV2ZW50ZWQ9ITB9LGRlZmF1bHRQcmV2ZW50ZWQ6ITF9LGw9W2hdLmNvbmNhdCh5YS5jYWxsKGFyZ3VtZW50cywxKSksayxtO2Rve2Q9Zy4kJGxpc3RlbmVyc1thXXx8YztoLmN1cnJlbnRTY29wZT1nO2s9MDtmb3IobT1kLmxlbmd0aDtrPG07aysrKWlmKGRba10pdHJ5e2Rba10uYXBwbHkobnVsbCxsKX1jYXRjaChuKXtlKG4pfWVsc2UgZC5zcGxpY2UoaywxKSxrLS0sbS0tO2lmKGYpYnJlYWs7Zz1nLiRwYXJlbnR9d2hpbGUoZyk7cmV0dXJuIGh9LCRicm9hZGNhc3Q6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9dGhpcyxkPXRoaXMsZz17bmFtZTphLFxudGFyZ2V0U2NvcGU6dGhpcyxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe2cuZGVmYXVsdFByZXZlbnRlZD0hMH0sZGVmYXVsdFByZXZlbnRlZDohMX0sZj1bZ10uY29uY2F0KHlhLmNhbGwoYXJndW1lbnRzLDEpKSxoLGs7Yz1kOyl7Zy5jdXJyZW50U2NvcGU9YztkPWMuJCRsaXN0ZW5lcnNbYV18fFtdO2g9MDtmb3Ioaz1kLmxlbmd0aDtoPGs7aCsrKWlmKGRbaF0pdHJ5e2RbaF0uYXBwbHkobnVsbCxmKX1jYXRjaChsKXtlKGwpfWVsc2UgZC5zcGxpY2UoaCwxKSxoLS0say0tO2lmKCEoZD1jLiQkbGlzdGVuZXJDb3VudFthXSYmYy4kJGNoaWxkSGVhZHx8YyE9PXRoaXMmJmMuJCRuZXh0U2libGluZykpZm9yKDtjIT09dGhpcyYmIShkPWMuJCRuZXh0U2libGluZyk7KWM9Yy4kcGFyZW50fXJldHVybiBnfX07dmFyIHA9bmV3IGg7cmV0dXJuIHB9XX1mdW5jdGlvbiBiZCgpe3ZhciBiPS9eXFxzKihodHRwcz98ZnRwfG1haWx0b3x0ZWx8ZmlsZSk6LyxhPS9eXFxzKihodHRwcz98ZnRwfGZpbGUpOnxkYXRhOmltYWdlXFwvLztcbnRoaXMuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3Q9ZnVuY3Rpb24oYSl7cmV0dXJuIEIoYSk/KGI9YSx0aGlzKTpifTt0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdD1mdW5jdGlvbihiKXtyZXR1cm4gQihiKT8oYT1iLHRoaXMpOmF9O3RoaXMuJGdldD1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihjLGQpe3ZhciBlPWQ/YTpiLGc7aWYoIVN8fDg8PVMpaWYoZz1zYShjKS5ocmVmLFwiXCIhPT1nJiYhZy5tYXRjaChlKSlyZXR1cm5cInVuc2FmZTpcIitnO3JldHVybiBjfX19ZnVuY3Rpb24gQWUoYil7aWYoXCJzZWxmXCI9PT1iKXJldHVybiBiO2lmKHcoYikpe2lmKC0xPGIuaW5kZXhPZihcIioqKlwiKSl0aHJvdyB1YShcIml3Y2FyZFwiLGIpO2I9Yi5yZXBsYWNlKC8oWy0oKVxcW1xcXXt9Kz8qLiRcXF58LDojPCFcXFxcXSkvZyxcIlxcXFwkMVwiKS5yZXBsYWNlKC9cXHgwOC9nLFwiXFxcXHgwOFwiKS5yZXBsYWNlKFwiXFxcXCpcXFxcKlwiLFwiLipcIikucmVwbGFjZShcIlxcXFwqXCIsXCJbXjovLj8mO10qXCIpO3JldHVybiBSZWdFeHAoXCJeXCIrXG5iK1wiJFwiKX1pZihjYihiKSlyZXR1cm4gUmVnRXhwKFwiXlwiK2Iuc291cmNlK1wiJFwiKTt0aHJvdyB1YShcImltYXRjaGVyXCIpO31mdW5jdGlvbiBHYyhiKXt2YXIgYT1bXTtCKGIpJiZxKGIsZnVuY3Rpb24oYil7YS5wdXNoKEFlKGIpKX0pO3JldHVybiBhfWZ1bmN0aW9uIGFlKCl7dGhpcy5TQ0VfQ09OVEVYVFM9Z2E7dmFyIGI9W1wic2VsZlwiXSxhPVtdO3RoaXMucmVzb3VyY2VVcmxXaGl0ZWxpc3Q9ZnVuY3Rpb24oYSl7YXJndW1lbnRzLmxlbmd0aCYmKGI9R2MoYSkpO3JldHVybiBifTt0aGlzLnJlc291cmNlVXJsQmxhY2tsaXN0PWZ1bmN0aW9uKGIpe2FyZ3VtZW50cy5sZW5ndGgmJihhPUdjKGIpKTtyZXR1cm4gYX07dGhpcy4kZ2V0PVtcIiRpbmplY3RvclwiLGZ1bmN0aW9uKGMpe2Z1bmN0aW9uIGQoYSl7dmFyIGI9ZnVuY3Rpb24oYSl7dGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZT1mdW5jdGlvbigpe3JldHVybiBhfX07YSYmKGIucHJvdG90eXBlPW5ldyBhKTtiLnByb3RvdHlwZS52YWx1ZU9mPVxuZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpfTtiLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCkudG9TdHJpbmcoKX07cmV0dXJuIGJ9dmFyIGU9ZnVuY3Rpb24oYSl7dGhyb3cgdWEoXCJ1bnNhZmVcIik7fTtjLmhhcyhcIiRzYW5pdGl6ZVwiKSYmKGU9Yy5nZXQoXCIkc2FuaXRpemVcIikpO3ZhciBnPWQoKSxmPXt9O2ZbZ2EuSFRNTF09ZChnKTtmW2dhLkNTU109ZChnKTtmW2dhLlVSTF09ZChnKTtmW2dhLkpTXT1kKGcpO2ZbZ2EuUkVTT1VSQ0VfVVJMXT1kKGZbZ2EuVVJMXSk7cmV0dXJue3RydXN0QXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1mLmhhc093blByb3BlcnR5KGEpP2ZbYV06bnVsbDtpZighYyl0aHJvdyB1YShcImljb250ZXh0XCIsYSxiKTtpZihudWxsPT09Ynx8Yj09PXN8fFwiXCI9PT1iKXJldHVybiBiO2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYil0aHJvdyB1YShcIml0eXBlXCIsYSk7cmV0dXJuIG5ldyBjKGIpfSxcbmdldFRydXN0ZWQ6ZnVuY3Rpb24oYyxkKXtpZihudWxsPT09ZHx8ZD09PXN8fFwiXCI9PT1kKXJldHVybiBkO3ZhciBnPWYuaGFzT3duUHJvcGVydHkoYyk/ZltjXTpudWxsO2lmKGcmJmQgaW5zdGFuY2VvZiBnKXJldHVybiBkLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCk7aWYoYz09PWdhLlJFU09VUkNFX1VSTCl7dmFyIGc9c2EoZC50b1N0cmluZygpKSxtLG4scD0hMTttPTA7Zm9yKG49Yi5sZW5ndGg7bTxuO20rKylpZihcInNlbGZcIj09PWJbbV0/SWIoZyk6YlttXS5leGVjKGcuaHJlZikpe3A9ITA7YnJlYWt9aWYocClmb3IobT0wLG49YS5sZW5ndGg7bTxuO20rKylpZihcInNlbGZcIj09PWFbbV0/SWIoZyk6YVttXS5leGVjKGcuaHJlZikpe3A9ITE7YnJlYWt9aWYocClyZXR1cm4gZDt0aHJvdyB1YShcImluc2VjdXJsXCIsZC50b1N0cmluZygpKTt9aWYoYz09PWdhLkhUTUwpcmV0dXJuIGUoZCk7dGhyb3cgdWEoXCJ1bnNhZmVcIik7fSx2YWx1ZU9mOmZ1bmN0aW9uKGEpe3JldHVybiBhIGluc3RhbmNlb2Zcbmc/YS4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpOmF9fX1dfWZ1bmN0aW9uICRkKCl7dmFyIGI9ITA7dGhpcy5lbmFibGVkPWZ1bmN0aW9uKGEpe2FyZ3VtZW50cy5sZW5ndGgmJihiPSEhYSk7cmV0dXJuIGJ9O3RoaXMuJGdldD1bXCIkcGFyc2VcIixcIiRzbmlmZmVyXCIsXCIkc2NlRGVsZWdhdGVcIixmdW5jdGlvbihhLGMsZCl7aWYoYiYmYy5tc2llJiY4PmMubXNpZURvY3VtZW50TW9kZSl0aHJvdyB1YShcImllcXVpcmtzXCIpO3ZhciBlPWJhKGdhKTtlLmlzRW5hYmxlZD1mdW5jdGlvbigpe3JldHVybiBifTtlLnRydXN0QXM9ZC50cnVzdEFzO2UuZ2V0VHJ1c3RlZD1kLmdldFRydXN0ZWQ7ZS52YWx1ZU9mPWQudmFsdWVPZjtifHwoZS50cnVzdEFzPWUuZ2V0VHJ1c3RlZD1mdW5jdGlvbihhLGIpe3JldHVybiBifSxlLnZhbHVlT2Y9RGEpO2UucGFyc2VBcz1mdW5jdGlvbihiLGMpe3ZhciBkPWEoYyk7cmV0dXJuIGQubGl0ZXJhbCYmZC5jb25zdGFudD9kOmZ1bmN0aW9uKGEsYyl7cmV0dXJuIGUuZ2V0VHJ1c3RlZChiLFxuZChhLGMpKX19O3ZhciBnPWUucGFyc2VBcyxmPWUuZ2V0VHJ1c3RlZCxoPWUudHJ1c3RBcztxKGdhLGZ1bmN0aW9uKGEsYil7dmFyIGM9SyhiKTtlW1RhKFwicGFyc2VfYXNfXCIrYyldPWZ1bmN0aW9uKGIpe3JldHVybiBnKGEsYil9O2VbVGEoXCJnZXRfdHJ1c3RlZF9cIitjKV09ZnVuY3Rpb24oYil7cmV0dXJuIGYoYSxiKX07ZVtUYShcInRydXN0X2FzX1wiK2MpXT1mdW5jdGlvbihiKXtyZXR1cm4gaChhLGIpfX0pO3JldHVybiBlfV19ZnVuY3Rpb24gYmUoKXt0aGlzLiRnZXQ9W1wiJHdpbmRvd1wiLFwiJGRvY3VtZW50XCIsZnVuY3Rpb24oYixhKXt2YXIgYz17fSxkPVkoKC9hbmRyb2lkIChcXGQrKS8uZXhlYyhLKChiLm5hdmlnYXRvcnx8e30pLnVzZXJBZ2VudCkpfHxbXSlbMV0pLGU9L0JveGVlL2kudGVzdCgoYi5uYXZpZ2F0b3J8fHt9KS51c2VyQWdlbnQpLGc9YVswXXx8e30sZj1nLmRvY3VtZW50TW9kZSxoLGw9L14oTW96fHdlYmtpdHxPfG1zKSg/PVtBLVpdKS8saz1nLmJvZHkmJmcuYm9keS5zdHlsZSxcbm09ITEsbj0hMTtpZihrKXtmb3IodmFyIHAgaW4gaylpZihtPWwuZXhlYyhwKSl7aD1tWzBdO2g9aC5zdWJzdHIoMCwxKS50b1VwcGVyQ2FzZSgpK2guc3Vic3RyKDEpO2JyZWFrfWh8fChoPVwiV2Via2l0T3BhY2l0eVwiaW4gayYmXCJ3ZWJraXRcIik7bT0hIShcInRyYW5zaXRpb25cImluIGt8fGgrXCJUcmFuc2l0aW9uXCJpbiBrKTtuPSEhKFwiYW5pbWF0aW9uXCJpbiBrfHxoK1wiQW5pbWF0aW9uXCJpbiBrKTshZHx8bSYmbnx8KG09dyhnLmJvZHkuc3R5bGUud2Via2l0VHJhbnNpdGlvbiksbj13KGcuYm9keS5zdHlsZS53ZWJraXRBbmltYXRpb24pKX1yZXR1cm57aGlzdG9yeTohKCFiLmhpc3Rvcnl8fCFiLmhpc3RvcnkucHVzaFN0YXRlfHw0PmR8fGUpLGhhc2hjaGFuZ2U6XCJvbmhhc2hjaGFuZ2VcImluIGImJighZnx8NzxmKSxoYXNFdmVudDpmdW5jdGlvbihhKXtpZihcImlucHV0XCI9PWEmJjk9PVMpcmV0dXJuITE7aWYoRShjW2FdKSl7dmFyIGI9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2NbYV09XCJvblwiK1xuYSBpbiBifXJldHVybiBjW2FdfSxjc3A6VmIoKSx2ZW5kb3JQcmVmaXg6aCx0cmFuc2l0aW9uczptLGFuaW1hdGlvbnM6bixhbmRyb2lkOmQsbXNpZTpTLG1zaWVEb2N1bWVudE1vZGU6Zn19XX1mdW5jdGlvbiBkZSgpe3RoaXMuJGdldD1bXCIkcm9vdFNjb3BlXCIsXCIkYnJvd3NlclwiLFwiJHFcIixcIiRleGNlcHRpb25IYW5kbGVyXCIsZnVuY3Rpb24oYixhLGMsZCl7ZnVuY3Rpb24gZShlLGgsbCl7dmFyIGs9Yy5kZWZlcigpLG09ay5wcm9taXNlLG49QihsKSYmIWw7aD1hLmRlZmVyKGZ1bmN0aW9uKCl7dHJ5e2sucmVzb2x2ZShlKCkpfWNhdGNoKGEpe2sucmVqZWN0KGEpLGQoYSl9ZmluYWxseXtkZWxldGUgZ1ttLiQkdGltZW91dElkXX1ufHxiLiRhcHBseSgpfSxoKTttLiQkdGltZW91dElkPWg7Z1toXT1rO3JldHVybiBtfXZhciBnPXt9O2UuY2FuY2VsPWZ1bmN0aW9uKGIpe3JldHVybiBiJiZiLiQkdGltZW91dElkIGluIGc/KGdbYi4kJHRpbWVvdXRJZF0ucmVqZWN0KFwiY2FuY2VsZWRcIiksXG5kZWxldGUgZ1tiLiQkdGltZW91dElkXSxhLmRlZmVyLmNhbmNlbChiLiQkdGltZW91dElkKSk6ITF9O3JldHVybiBlfV19ZnVuY3Rpb24gc2EoYixhKXt2YXIgYz1iO1MmJihXLnNldEF0dHJpYnV0ZShcImhyZWZcIixjKSxjPVcuaHJlZik7Vy5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsYyk7cmV0dXJue2hyZWY6Vy5ocmVmLHByb3RvY29sOlcucHJvdG9jb2w/Vy5wcm90b2NvbC5yZXBsYWNlKC86JC8sXCJcIik6XCJcIixob3N0OlcuaG9zdCxzZWFyY2g6Vy5zZWFyY2g/Vy5zZWFyY2gucmVwbGFjZSgvXlxcPy8sXCJcIik6XCJcIixoYXNoOlcuaGFzaD9XLmhhc2gucmVwbGFjZSgvXiMvLFwiXCIpOlwiXCIsaG9zdG5hbWU6Vy5ob3N0bmFtZSxwb3J0OlcucG9ydCxwYXRobmFtZTpcIi9cIj09PVcucGF0aG5hbWUuY2hhckF0KDApP1cucGF0aG5hbWU6XCIvXCIrVy5wYXRobmFtZX19ZnVuY3Rpb24gSWIoYil7Yj13KGIpP3NhKGIpOmI7cmV0dXJuIGIucHJvdG9jb2w9PT1IYy5wcm90b2NvbCYmYi5ob3N0PT09SGMuaG9zdH1cbmZ1bmN0aW9uIGVlKCl7dGhpcy4kZ2V0PWFhKE8pfWZ1bmN0aW9uIGdjKGIpe2Z1bmN0aW9uIGEoZCxlKXtpZihYKGQpKXt2YXIgZz17fTtxKGQsZnVuY3Rpb24oYixjKXtnW2NdPWEoYyxiKX0pO3JldHVybiBnfXJldHVybiBiLmZhY3RvcnkoZCtjLGUpfXZhciBjPVwiRmlsdGVyXCI7dGhpcy5yZWdpc3Rlcj1hO3RoaXMuJGdldD1bXCIkaW5qZWN0b3JcIixmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGEuZ2V0KGIrYyl9fV07YShcImN1cnJlbmN5XCIsSWMpO2EoXCJkYXRlXCIsSmMpO2EoXCJmaWx0ZXJcIixCZSk7YShcImpzb25cIixDZSk7YShcImxpbWl0VG9cIixEZSk7YShcImxvd2VyY2FzZVwiLEVlKTthKFwibnVtYmVyXCIsS2MpO2EoXCJvcmRlckJ5XCIsTGMpO2EoXCJ1cHBlcmNhc2VcIixGZSl9ZnVuY3Rpb24gQmUoKXtyZXR1cm4gZnVuY3Rpb24oYixhLGMpe2lmKCFNKGIpKXJldHVybiBiO3ZhciBkPXR5cGVvZiBjLGU9W107ZS5jaGVjaz1mdW5jdGlvbihhKXtmb3IodmFyIGI9MDtiPGUubGVuZ3RoO2IrKylpZighZVtiXShhKSlyZXR1cm4hMTtcbnJldHVybiEwfTtcImZ1bmN0aW9uXCIhPT1kJiYoYz1cImJvb2xlYW5cIj09PWQmJmM/ZnVuY3Rpb24oYSxiKXtyZXR1cm4gRWEuZXF1YWxzKGEsYil9OmZ1bmN0aW9uKGEsYil7aWYoYSYmYiYmXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcIm9iamVjdFwiPT09dHlwZW9mIGIpe2Zvcih2YXIgZCBpbiBhKWlmKFwiJFwiIT09ZC5jaGFyQXQoMCkmJkZjLmNhbGwoYSxkKSYmYyhhW2RdLGJbZF0pKXJldHVybiEwO3JldHVybiExfWI9KFwiXCIrYikudG9Mb3dlckNhc2UoKTtyZXR1cm4tMTwoXCJcIithKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoYil9KTt2YXIgZz1mdW5jdGlvbihhLGIpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBiJiZcIiFcIj09PWIuY2hhckF0KDApKXJldHVybiFnKGEsYi5zdWJzdHIoMSkpO3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOnJldHVybiBjKGEsYik7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaCh0eXBlb2YgYil7Y2FzZSBcIm9iamVjdFwiOnJldHVybiBjKGEsXG5iKTtkZWZhdWx0OmZvcih2YXIgZCBpbiBhKWlmKFwiJFwiIT09ZC5jaGFyQXQoMCkmJmcoYVtkXSxiKSlyZXR1cm4hMH1yZXR1cm4hMTtjYXNlIFwiYXJyYXlcIjpmb3IoZD0wO2Q8YS5sZW5ndGg7ZCsrKWlmKGcoYVtkXSxiKSlyZXR1cm4hMDtyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX07c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6YT17JDphfTtjYXNlIFwib2JqZWN0XCI6Zm9yKHZhciBmIGluIGEpKGZ1bmN0aW9uKGIpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBhW2JdJiZlLnB1c2goZnVuY3Rpb24oYyl7cmV0dXJuIGcoXCIkXCI9PWI/YzpjJiZjW2JdLGFbYl0pfSl9KShmKTticmVhaztjYXNlIFwiZnVuY3Rpb25cIjplLnB1c2goYSk7YnJlYWs7ZGVmYXVsdDpyZXR1cm4gYn1kPVtdO2ZvcihmPTA7ZjxiLmxlbmd0aDtmKyspe3ZhciBoPWJbZl07ZS5jaGVjayhoKSYmZC5wdXNoKGgpfXJldHVybiBkfX1mdW5jdGlvbiBJYyhiKXt2YXIgYT1cbmIuTlVNQkVSX0ZPUk1BVFM7cmV0dXJuIGZ1bmN0aW9uKGIsZCl7RShkKSYmKGQ9YS5DVVJSRU5DWV9TWU0pO3JldHVybiBNYyhiLGEuUEFUVEVSTlNbMV0sYS5HUk9VUF9TRVAsYS5ERUNJTUFMX1NFUCwyKS5yZXBsYWNlKC9cXHUwMEE0L2csZCl9fWZ1bmN0aW9uIEtjKGIpe3ZhciBhPWIuTlVNQkVSX0ZPUk1BVFM7cmV0dXJuIGZ1bmN0aW9uKGIsZCl7cmV0dXJuIE1jKGIsYS5QQVRURVJOU1swXSxhLkdST1VQX1NFUCxhLkRFQ0lNQUxfU0VQLGQpfX1mdW5jdGlvbiBNYyhiLGEsYyxkLGUpe2lmKG51bGw9PWJ8fCFpc0Zpbml0ZShiKXx8WChiKSlyZXR1cm5cIlwiO3ZhciBnPTA+YjtiPU1hdGguYWJzKGIpO3ZhciBmPWIrXCJcIixoPVwiXCIsbD1bXSxrPSExO2lmKC0xIT09Zi5pbmRleE9mKFwiZVwiKSl7dmFyIG09Zi5tYXRjaCgvKFtcXGRcXC5dKyllKC0/KShcXGQrKS8pO20mJlwiLVwiPT1tWzJdJiZtWzNdPmUrMT9mPVwiMFwiOihoPWYsaz0hMCl9aWYoaykwPGUmJigtMTxiJiYxPmIpJiYoaD1iLnRvRml4ZWQoZSkpO1xuZWxzZXtmPShmLnNwbGl0KE5jKVsxXXx8XCJcIikubGVuZ3RoO0UoZSkmJihlPU1hdGgubWluKE1hdGgubWF4KGEubWluRnJhYyxmKSxhLm1heEZyYWMpKTtmPU1hdGgucG93KDEwLGUpO2I9TWF0aC5yb3VuZChiKmYpL2Y7Yj0oXCJcIitiKS5zcGxpdChOYyk7Zj1iWzBdO2I9YlsxXXx8XCJcIjt2YXIgbT0wLG49YS5sZ1NpemUscD1hLmdTaXplO2lmKGYubGVuZ3RoPj1uK3ApZm9yKG09Zi5sZW5ndGgtbixrPTA7azxtO2srKykwPT09KG0tayklcCYmMCE9PWsmJihoKz1jKSxoKz1mLmNoYXJBdChrKTtmb3Ioaz1tO2s8Zi5sZW5ndGg7aysrKTA9PT0oZi5sZW5ndGgtayklbiYmMCE9PWsmJihoKz1jKSxoKz1mLmNoYXJBdChrKTtmb3IoO2IubGVuZ3RoPGU7KWIrPVwiMFwiO2UmJlwiMFwiIT09ZSYmKGgrPWQrYi5zdWJzdHIoMCxlKSl9bC5wdXNoKGc/YS5uZWdQcmU6YS5wb3NQcmUpO2wucHVzaChoKTtsLnB1c2goZz9hLm5lZ1N1ZjphLnBvc1N1Zik7cmV0dXJuIGwuam9pbihcIlwiKX1mdW5jdGlvbiBPYihiLFxuYSxjKXt2YXIgZD1cIlwiOzA+YiYmKGQ9XCItXCIsYj0tYik7Zm9yKGI9XCJcIitiO2IubGVuZ3RoPGE7KWI9XCIwXCIrYjtjJiYoYj1iLnN1YnN0cihiLmxlbmd0aC1hKSk7cmV0dXJuIGQrYn1mdW5jdGlvbiAkKGIsYSxjLGQpe2M9Y3x8MDtyZXR1cm4gZnVuY3Rpb24oZSl7ZT1lW1wiZ2V0XCIrYl0oKTtpZigwPGN8fGU+LWMpZSs9YzswPT09ZSYmLTEyPT1jJiYoZT0xMik7cmV0dXJuIE9iKGUsYSxkKX19ZnVuY3Rpb24gcGIoYixhKXtyZXR1cm4gZnVuY3Rpb24oYyxkKXt2YXIgZT1jW1wiZ2V0XCIrYl0oKSxnPUZhKGE/XCJTSE9SVFwiK2I6Yik7cmV0dXJuIGRbZ11bZV19fWZ1bmN0aW9uIEpjKGIpe2Z1bmN0aW9uIGEoYSl7dmFyIGI7aWYoYj1hLm1hdGNoKGMpKXthPW5ldyBEYXRlKDApO3ZhciBnPTAsZj0wLGg9Yls4XT9hLnNldFVUQ0Z1bGxZZWFyOmEuc2V0RnVsbFllYXIsbD1iWzhdP2Euc2V0VVRDSG91cnM6YS5zZXRIb3VycztiWzldJiYoZz1ZKGJbOV0rYlsxMF0pLGY9WShiWzldK2JbMTFdKSk7XG5oLmNhbGwoYSxZKGJbMV0pLFkoYlsyXSktMSxZKGJbM10pKTtnPVkoYls0XXx8MCktZztmPVkoYls1XXx8MCktZjtoPVkoYls2XXx8MCk7Yj1NYXRoLnJvdW5kKDFFMypwYXJzZUZsb2F0KFwiMC5cIisoYls3XXx8MCkpKTtsLmNhbGwoYSxnLGYsaCxiKX1yZXR1cm4gYX12YXIgYz0vXihcXGR7NH0pLT8oXFxkXFxkKS0/KFxcZFxcZCkoPzpUKFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Oj8oXFxkXFxkKSg/OlxcLihcXGQrKSk/KT8pPyhafChbKy1dKShcXGRcXGQpOj8oXFxkXFxkKSk/KT8kLztyZXR1cm4gZnVuY3Rpb24oYyxlKXt2YXIgZz1cIlwiLGY9W10saCxsO2U9ZXx8XCJtZWRpdW1EYXRlXCI7ZT1iLkRBVEVUSU1FX0ZPUk1BVFNbZV18fGU7dyhjKSYmKGM9R2UudGVzdChjKT9ZKGMpOmEoYykpO3ZiKGMpJiYoYz1uZXcgRGF0ZShjKSk7aWYoIU5hKGMpKXJldHVybiBjO2Zvcig7ZTspKGw9SGUuZXhlYyhlKSk/KGY9Zi5jb25jYXQoeWEuY2FsbChsLDEpKSxlPWYucG9wKCkpOihmLnB1c2goZSksZT1udWxsKTtxKGYsZnVuY3Rpb24oYSl7aD1cbkllW2FdO2crPWg/aChjLGIuREFURVRJTUVfRk9STUFUUyk6YS5yZXBsYWNlKC8oXid8JyQpL2csXCJcIikucmVwbGFjZSgvJycvZyxcIidcIil9KTtyZXR1cm4gZ319ZnVuY3Rpb24gQ2UoKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIHFhKGIsITApfX1mdW5jdGlvbiBEZSgpe3JldHVybiBmdW5jdGlvbihiLGEpe2lmKCFNKGIpJiYhdyhiKSlyZXR1cm4gYjthPVkoYSk7aWYodyhiKSlyZXR1cm4gYT8wPD1hP2Iuc2xpY2UoMCxhKTpiLnNsaWNlKGEsYi5sZW5ndGgpOlwiXCI7dmFyIGM9W10sZCxlO2E+Yi5sZW5ndGg/YT1iLmxlbmd0aDphPC1iLmxlbmd0aCYmKGE9LWIubGVuZ3RoKTswPGE/KGQ9MCxlPWEpOihkPWIubGVuZ3RoK2EsZT1iLmxlbmd0aCk7Zm9yKDtkPGU7ZCsrKWMucHVzaChiW2RdKTtyZXR1cm4gY319ZnVuY3Rpb24gTGMoYil7cmV0dXJuIGZ1bmN0aW9uKGEsYyxkKXtmdW5jdGlvbiBlKGEsYil7cmV0dXJuIFFhKGIpP2Z1bmN0aW9uKGIsYyl7cmV0dXJuIGEoYyxiKX06YX1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz10eXBlb2YgYSxkPXR5cGVvZiBiO3JldHVybiBjPT1kPyhcInN0cmluZ1wiPT1jJiYoYT1hLnRvTG93ZXJDYXNlKCksYj1iLnRvTG93ZXJDYXNlKCkpLGE9PT1iPzA6YTxiPy0xOjEpOmM8ZD8tMToxfWlmKCFNKGEpfHwhYylyZXR1cm4gYTtjPU0oYyk/YzpbY107Yz1VYyhjLGZ1bmN0aW9uKGEpe3ZhciBjPSExLGQ9YXx8RGE7aWYodyhhKSl7aWYoXCIrXCI9PWEuY2hhckF0KDApfHxcIi1cIj09YS5jaGFyQXQoMCkpYz1cIi1cIj09YS5jaGFyQXQoMCksYT1hLnN1YnN0cmluZygxKTtkPWIoYSk7aWYoZC5jb25zdGFudCl7dmFyIGY9ZCgpO3JldHVybiBlKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGcoYVtmXSxiW2ZdKX0sYyl9fXJldHVybiBlKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGcoZChhKSxkKGIpKX0sYyl9KTtmb3IodmFyIGY9W10saD0wO2g8YS5sZW5ndGg7aCsrKWYucHVzaChhW2hdKTtyZXR1cm4gZi5zb3J0KGUoZnVuY3Rpb24oYSxiKXtmb3IodmFyIGQ9XG4wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdKGEsYik7aWYoMCE9PWUpcmV0dXJuIGV9cmV0dXJuIDB9LGQpKX19ZnVuY3Rpb24gdmEoYil7UChiKSYmKGI9e2xpbms6Yn0pO2IucmVzdHJpY3Q9Yi5yZXN0cmljdHx8XCJBQ1wiO3JldHVybiBhYShiKX1mdW5jdGlvbiBPYyhiLGEsYyxkKXtmdW5jdGlvbiBlKGEsYyl7Yz1jP1wiLVwiK2ZiKGMsXCItXCIpOlwiXCI7ZC5yZW1vdmVDbGFzcyhiLChhP3FiOnJiKStjKTtkLmFkZENsYXNzKGIsKGE/cmI6cWIpK2MpfXZhciBnPXRoaXMsZj1iLnBhcmVudCgpLmNvbnRyb2xsZXIoXCJmb3JtXCIpfHxzYixoPTAsbD1nLiRlcnJvcj17fSxrPVtdO2cuJG5hbWU9YS5uYW1lfHxhLm5nRm9ybTtnLiRkaXJ0eT0hMTtnLiRwcmlzdGluZT0hMDtnLiR2YWxpZD0hMDtnLiRpbnZhbGlkPSExO2YuJGFkZENvbnRyb2woZyk7Yi5hZGRDbGFzcyhMYSk7ZSghMCk7Zy4kYWRkQ29udHJvbD1mdW5jdGlvbihhKXtBYShhLiRuYW1lLFwiaW5wdXRcIik7ay5wdXNoKGEpO2EuJG5hbWUmJlxuKGdbYS4kbmFtZV09YSl9O2cuJHJlbW92ZUNvbnRyb2w9ZnVuY3Rpb24oYSl7YS4kbmFtZSYmZ1thLiRuYW1lXT09PWEmJmRlbGV0ZSBnW2EuJG5hbWVdO3EobCxmdW5jdGlvbihiLGMpe2cuJHNldFZhbGlkaXR5KGMsITAsYSl9KTtPYShrLGEpfTtnLiRzZXRWYWxpZGl0eT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9bFthXTtpZihiKWQmJihPYShkLGMpLGQubGVuZ3RofHwoaC0tLGh8fChlKGIpLGcuJHZhbGlkPSEwLGcuJGludmFsaWQ9ITEpLGxbYV09ITEsZSghMCxhKSxmLiRzZXRWYWxpZGl0eShhLCEwLGcpKSk7ZWxzZXtofHxlKGIpO2lmKGQpe2lmKC0xIT1kYihkLGMpKXJldHVybn1lbHNlIGxbYV09ZD1bXSxoKyssZSghMSxhKSxmLiRzZXRWYWxpZGl0eShhLCExLGcpO2QucHVzaChjKTtnLiR2YWxpZD0hMTtnLiRpbnZhbGlkPSEwfX07Zy4kc2V0RGlydHk9ZnVuY3Rpb24oKXtkLnJlbW92ZUNsYXNzKGIsTGEpO2QuYWRkQ2xhc3MoYix0Yik7Zy4kZGlydHk9ITA7Zy4kcHJpc3RpbmU9XG4hMTtmLiRzZXREaXJ0eSgpfTtnLiRzZXRQcmlzdGluZT1mdW5jdGlvbigpe2QucmVtb3ZlQ2xhc3MoYix0Yik7ZC5hZGRDbGFzcyhiLExhKTtnLiRkaXJ0eT0hMTtnLiRwcmlzdGluZT0hMDtxKGssZnVuY3Rpb24oYSl7YS4kc2V0UHJpc3RpbmUoKX0pfX1mdW5jdGlvbiBwYShiLGEsYyxkKXtiLiRzZXRWYWxpZGl0eShhLGMpO3JldHVybiBjP2Q6c31mdW5jdGlvbiBKZShiLGEsYyl7dmFyIGQ9Yy5wcm9wKFwidmFsaWRpdHlcIik7WChkKSYmYi4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKGMpe2lmKGIuJGVycm9yW2FdfHwhKGQuYmFkSW5wdXR8fGQuY3VzdG9tRXJyb3J8fGQudHlwZU1pc21hdGNoKXx8ZC52YWx1ZU1pc3NpbmcpcmV0dXJuIGM7Yi4kc2V0VmFsaWRpdHkoYSwhMSl9KX1mdW5jdGlvbiB1YihiLGEsYyxkLGUsZyl7dmFyIGY9YS5wcm9wKFwidmFsaWRpdHlcIik7aWYoIWUuYW5kcm9pZCl7dmFyIGg9ITE7YS5vbihcImNvbXBvc2l0aW9uc3RhcnRcIixmdW5jdGlvbihhKXtoPSEwfSk7XG5hLm9uKFwiY29tcG9zaXRpb25lbmRcIixmdW5jdGlvbigpe2g9ITE7bCgpfSl9dmFyIGw9ZnVuY3Rpb24oKXtpZighaCl7dmFyIGU9YS52YWwoKTtRYShjLm5nVHJpbXx8XCJUXCIpJiYoZT1jYShlKSk7aWYoZC4kdmlld1ZhbHVlIT09ZXx8ZiYmXCJcIj09PWUmJiFmLnZhbHVlTWlzc2luZyliLiQkcGhhc2U/ZC4kc2V0Vmlld1ZhbHVlKGUpOmIuJGFwcGx5KGZ1bmN0aW9uKCl7ZC4kc2V0Vmlld1ZhbHVlKGUpfSl9fTtpZihlLmhhc0V2ZW50KFwiaW5wdXRcIikpYS5vbihcImlucHV0XCIsbCk7ZWxzZXt2YXIgayxtPWZ1bmN0aW9uKCl7a3x8KGs9Zy5kZWZlcihmdW5jdGlvbigpe2woKTtrPW51bGx9KSl9O2Eub24oXCJrZXlkb3duXCIsZnVuY3Rpb24oYSl7YT1hLmtleUNvZGU7OTE9PT1hfHwoMTU8YSYmMTk+YXx8Mzc8PWEmJjQwPj1hKXx8bSgpfSk7aWYoZS5oYXNFdmVudChcInBhc3RlXCIpKWEub24oXCJwYXN0ZSBjdXRcIixtKX1hLm9uKFwiY2hhbmdlXCIsbCk7ZC4kcmVuZGVyPWZ1bmN0aW9uKCl7YS52YWwoZC4kaXNFbXB0eShkLiR2aWV3VmFsdWUpP1xuXCJcIjpkLiR2aWV3VmFsdWUpfTt2YXIgbj1jLm5nUGF0dGVybjtuJiYoKGU9bi5tYXRjaCgvXlxcLyguKilcXC8oW2dpbV0qKSQvKSk/KG49UmVnRXhwKGVbMV0sZVsyXSksZT1mdW5jdGlvbihhKXtyZXR1cm4gcGEoZCxcInBhdHRlcm5cIixkLiRpc0VtcHR5KGEpfHxuLnRlc3QoYSksYSl9KTplPWZ1bmN0aW9uKGMpe3ZhciBlPWIuJGV2YWwobik7aWYoIWV8fCFlLnRlc3QpdGhyb3cgdChcIm5nUGF0dGVyblwiKShcIm5vcmVnZXhwXCIsbixlLGhhKGEpKTtyZXR1cm4gcGEoZCxcInBhdHRlcm5cIixkLiRpc0VtcHR5KGMpfHxlLnRlc3QoYyksYyl9LGQuJGZvcm1hdHRlcnMucHVzaChlKSxkLiRwYXJzZXJzLnB1c2goZSkpO2lmKGMubmdNaW5sZW5ndGgpe3ZhciBwPVkoYy5uZ01pbmxlbmd0aCk7ZT1mdW5jdGlvbihhKXtyZXR1cm4gcGEoZCxcIm1pbmxlbmd0aFwiLGQuJGlzRW1wdHkoYSl8fGEubGVuZ3RoPj1wLGEpfTtkLiRwYXJzZXJzLnB1c2goZSk7ZC4kZm9ybWF0dGVycy5wdXNoKGUpfWlmKGMubmdNYXhsZW5ndGgpe3ZhciByPVxuWShjLm5nTWF4bGVuZ3RoKTtlPWZ1bmN0aW9uKGEpe3JldHVybiBwYShkLFwibWF4bGVuZ3RoXCIsZC4kaXNFbXB0eShhKXx8YS5sZW5ndGg8PXIsYSl9O2QuJHBhcnNlcnMucHVzaChlKTtkLiRmb3JtYXR0ZXJzLnB1c2goZSl9fWZ1bmN0aW9uIFBiKGIsYSl7Yj1cIm5nQ2xhc3NcIitiO3JldHVybltcIiRhbmltYXRlXCIsZnVuY3Rpb24oYyl7ZnVuY3Rpb24gZChhLGIpe3ZhciBjPVtdLGQ9MDthOmZvcig7ZDxhLmxlbmd0aDtkKyspe2Zvcih2YXIgZT1hW2RdLG09MDttPGIubGVuZ3RoO20rKylpZihlPT1iW21dKWNvbnRpbnVlIGE7Yy5wdXNoKGUpfXJldHVybiBjfWZ1bmN0aW9uIGUoYSl7aWYoIU0oYSkpe2lmKHcoYSkpcmV0dXJuIGEuc3BsaXQoXCIgXCIpO2lmKFgoYSkpe3ZhciBiPVtdO3EoYSxmdW5jdGlvbihhLGMpe2EmJmIucHVzaChjKX0pO3JldHVybiBifX1yZXR1cm4gYX1yZXR1cm57cmVzdHJpY3Q6XCJBQ1wiLGxpbms6ZnVuY3Rpb24oZyxmLGgpe2Z1bmN0aW9uIGwoYSxiKXt2YXIgYz1cbmYuZGF0YShcIiRjbGFzc0NvdW50c1wiKXx8e30sZD1bXTtxKGEsZnVuY3Rpb24oYSl7aWYoMDxifHxjW2FdKWNbYV09KGNbYV18fDApK2IsY1thXT09PSsoMDxiKSYmZC5wdXNoKGEpfSk7Zi5kYXRhKFwiJGNsYXNzQ291bnRzXCIsYyk7cmV0dXJuIGQuam9pbihcIiBcIil9ZnVuY3Rpb24gayhiKXtpZighMD09PWF8fGcuJGluZGV4JTI9PT1hKXt2YXIgaz1lKGJ8fFtdKTtpZighbSl7dmFyIHI9bChrLDEpO2guJGFkZENsYXNzKHIpfWVsc2UgaWYoIXhhKGIsbSkpe3ZhciBxPWUobSkscj1kKGsscSksaz1kKHEsayksaz1sKGssLTEpLHI9bChyLDEpOzA9PT1yLmxlbmd0aD9jLnJlbW92ZUNsYXNzKGYsayk6MD09PWsubGVuZ3RoP2MuYWRkQ2xhc3MoZixyKTpjLnNldENsYXNzKGYscixrKX19bT1iYShiKX12YXIgbTtnLiR3YXRjaChoW2JdLGssITApO2guJG9ic2VydmUoXCJjbGFzc1wiLGZ1bmN0aW9uKGEpe2soZy4kZXZhbChoW2JdKSl9KTtcIm5nQ2xhc3NcIiE9PWImJmcuJHdhdGNoKFwiJGluZGV4XCIsXG5mdW5jdGlvbihjLGQpe3ZhciBmPWMmMTtpZihmIT09ZCYxKXt2YXIgaz1lKGcuJGV2YWwoaFtiXSkpO2Y9PT1hPyhmPWwoaywxKSxoLiRhZGRDbGFzcyhmKSk6KGY9bChrLC0xKSxoLiRyZW1vdmVDbGFzcyhmKSl9fSl9fX1dfXZhciBLPWZ1bmN0aW9uKGIpe3JldHVybiB3KGIpP2IudG9Mb3dlckNhc2UoKTpifSxGYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEZhPWZ1bmN0aW9uKGIpe3JldHVybiB3KGIpP2IudG9VcHBlckNhc2UoKTpifSxTLHksR2EseWE9W10uc2xpY2UsS2U9W10ucHVzaCx3YT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFBhPXQoXCJuZ1wiKSxFYT1PLmFuZ3VsYXJ8fChPLmFuZ3VsYXI9e30pLFNhLEthLGthPVtcIjBcIixcIjBcIixcIjBcIl07Uz1ZKCgvbXNpZSAoXFxkKykvLmV4ZWMoSyhuYXZpZ2F0b3IudXNlckFnZW50KSl8fFtdKVsxXSk7aXNOYU4oUykmJihTPVkoKC90cmlkZW50XFwvLio7IHJ2OihcXGQrKS8uZXhlYyhLKG5hdmlnYXRvci51c2VyQWdlbnQpKXx8XG5bXSlbMV0pKTtDLiRpbmplY3Q9W107RGEuJGluamVjdD1bXTt2YXIgY2E9ZnVuY3Rpb24oKXtyZXR1cm4gU3RyaW5nLnByb3RvdHlwZS50cmltP2Z1bmN0aW9uKGIpe3JldHVybiB3KGIpP2IudHJpbSgpOmJ9OmZ1bmN0aW9uKGIpe3JldHVybiB3KGIpP2IucmVwbGFjZSgvXlxcc1xccyovLFwiXCIpLnJlcGxhY2UoL1xcc1xccyokLyxcIlwiKTpifX0oKTtLYT05PlM/ZnVuY3Rpb24oYil7Yj1iLm5vZGVOYW1lP2I6YlswXTtyZXR1cm4gYi5zY29wZU5hbWUmJlwiSFRNTFwiIT1iLnNjb3BlTmFtZT9GYShiLnNjb3BlTmFtZStcIjpcIitiLm5vZGVOYW1lKTpiLm5vZGVOYW1lfTpmdW5jdGlvbihiKXtyZXR1cm4gYi5ub2RlTmFtZT9iLm5vZGVOYW1lOmJbMF0ubm9kZU5hbWV9O3ZhciBYYz0vW0EtWl0vZywkYz17ZnVsbDpcIjEuMi4xNlwiLG1ham9yOjEsbWlub3I6Mixkb3Q6MTYsY29kZU5hbWU6XCJiYWRnZXItZW51bWVyYXRpb25cIn0sVWE9Ti5jYWNoZT17fSxnYj1OLmV4cGFuZG89XCJuZy1cIisobmV3IERhdGUpLmdldFRpbWUoKSxcbm1lPTEsUGM9Ty5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyP2Z1bmN0aW9uKGIsYSxjKXtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCExKX06ZnVuY3Rpb24oYixhLGMpe2IuYXR0YWNoRXZlbnQoXCJvblwiK2EsYyl9LEZiPU8uZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcj9mdW5jdGlvbihiLGEsYyl7Yi5yZW1vdmVFdmVudExpc3RlbmVyKGEsYywhMSl9OmZ1bmN0aW9uKGIsYSxjKXtiLmRldGFjaEV2ZW50KFwib25cIithLGMpfTtOLl9kYXRhPWZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLmNhY2hlW2JbdGhpcy5leHBhbmRvXV18fHt9fTt2YXIgaGU9LyhbXFw6XFwtXFxfXSsoLikpL2csaWU9L15tb3ooW0EtWl0pLyxCYj10KFwianFMaXRlXCIpLGplPS9ePChcXHcrKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLyxDYj0vPHwmIz9cXHcrOy8sa2U9LzwoW1xcdzpdKykvLGxlPS88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9naSxlYT1cbntvcHRpb246WzEsJzxzZWxlY3QgbXVsdGlwbGU9XCJtdWx0aXBsZVwiPicsXCI8L3NlbGVjdD5cIl0sdGhlYWQ6WzEsXCI8dGFibGU+XCIsXCI8L3RhYmxlPlwiXSxjb2w6WzIsXCI8dGFibGU+PGNvbGdyb3VwPlwiLFwiPC9jb2xncm91cD48L3RhYmxlPlwiXSx0cjpbMixcIjx0YWJsZT48dGJvZHk+XCIsXCI8L3Rib2R5PjwvdGFibGU+XCJdLHRkOlszLFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIl0sX2RlZmF1bHQ6WzAsXCJcIixcIlwiXX07ZWEub3B0Z3JvdXA9ZWEub3B0aW9uO2VhLnRib2R5PWVhLnRmb290PWVhLmNvbGdyb3VwPWVhLmNhcHRpb249ZWEudGhlYWQ7ZWEudGg9ZWEudGQ7dmFyIEphPU4ucHJvdG90eXBlPXtyZWFkeTpmdW5jdGlvbihiKXtmdW5jdGlvbiBhKCl7Y3x8KGM9ITAsYigpKX12YXIgYz0hMTtcImNvbXBsZXRlXCI9PT1VLnJlYWR5U3RhdGU/c2V0VGltZW91dChhKToodGhpcy5vbihcIkRPTUNvbnRlbnRMb2FkZWRcIixhKSxOKE8pLm9uKFwibG9hZFwiLGEpKX0sdG9TdHJpbmc6ZnVuY3Rpb24oKXt2YXIgYj1cbltdO3EodGhpcyxmdW5jdGlvbihhKXtiLnB1c2goXCJcIithKX0pO3JldHVyblwiW1wiK2Iuam9pbihcIiwgXCIpK1wiXVwifSxlcTpmdW5jdGlvbihiKXtyZXR1cm4gMDw9Yj95KHRoaXNbYl0pOnkodGhpc1t0aGlzLmxlbmd0aCtiXSl9LGxlbmd0aDowLHB1c2g6S2Usc29ydDpbXS5zb3J0LHNwbGljZTpbXS5zcGxpY2V9LGtiPXt9O3EoXCJtdWx0aXBsZSBzZWxlY3RlZCBjaGVja2VkIGRpc2FibGVkIHJlYWRPbmx5IHJlcXVpcmVkIG9wZW5cIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oYil7a2JbSyhiKV09Yn0pO3ZhciBuYz17fTtxKFwiaW5wdXQgc2VsZWN0IG9wdGlvbiB0ZXh0YXJlYSBidXR0b24gZm9ybSBkZXRhaWxzXCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGIpe25jW0ZhKGIpXT0hMH0pO3Eoe2RhdGE6amMsaW5oZXJpdGVkRGF0YTpqYixzY29wZTpmdW5jdGlvbihiKXtyZXR1cm4geShiKS5kYXRhKFwiJHNjb3BlXCIpfHxqYihiLnBhcmVudE5vZGV8fGIsW1wiJGlzb2xhdGVTY29wZVwiLFwiJHNjb3BlXCJdKX0sXG5pc29sYXRlU2NvcGU6ZnVuY3Rpb24oYil7cmV0dXJuIHkoYikuZGF0YShcIiRpc29sYXRlU2NvcGVcIil8fHkoYikuZGF0YShcIiRpc29sYXRlU2NvcGVOb1RlbXBsYXRlXCIpfSxjb250cm9sbGVyOmtjLGluamVjdG9yOmZ1bmN0aW9uKGIpe3JldHVybiBqYihiLFwiJGluamVjdG9yXCIpfSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGIsYSl7Yi5yZW1vdmVBdHRyaWJ1dGUoYSl9LGhhc0NsYXNzOkdiLGNzczpmdW5jdGlvbihiLGEsYyl7YT1UYShhKTtpZihCKGMpKWIuc3R5bGVbYV09YztlbHNle3ZhciBkOzg+PVMmJihkPWIuY3VycmVudFN0eWxlJiZiLmN1cnJlbnRTdHlsZVthXSxcIlwiPT09ZCYmKGQ9XCJhdXRvXCIpKTtkPWR8fGIuc3R5bGVbYV07OD49UyYmKGQ9XCJcIj09PWQ/czpkKTtyZXR1cm4gZH19LGF0dHI6ZnVuY3Rpb24oYixhLGMpe3ZhciBkPUsoYSk7aWYoa2JbZF0paWYoQihjKSljPyhiW2FdPSEwLGIuc2V0QXR0cmlidXRlKGEsZCkpOihiW2FdPSExLGIucmVtb3ZlQXR0cmlidXRlKGQpKTtcbmVsc2UgcmV0dXJuIGJbYV18fChiLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKGEpfHxDKS5zcGVjaWZpZWQ/ZDpzO2Vsc2UgaWYoQihjKSliLnNldEF0dHJpYnV0ZShhLGMpO2Vsc2UgaWYoYi5nZXRBdHRyaWJ1dGUpcmV0dXJuIGI9Yi5nZXRBdHRyaWJ1dGUoYSwyKSxudWxsPT09Yj9zOmJ9LHByb3A6ZnVuY3Rpb24oYixhLGMpe2lmKEIoYykpYlthXT1jO2Vsc2UgcmV0dXJuIGJbYV19LHRleHQ6ZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGIsZCl7dmFyIGU9YVtiLm5vZGVUeXBlXTtpZihFKGQpKXJldHVybiBlP2JbZV06XCJcIjtiW2VdPWR9dmFyIGE9W107OT5TPyhhWzFdPVwiaW5uZXJUZXh0XCIsYVszXT1cIm5vZGVWYWx1ZVwiKTphWzFdPWFbM109XCJ0ZXh0Q29udGVudFwiO2IuJGR2PVwiXCI7cmV0dXJuIGJ9KCksdmFsOmZ1bmN0aW9uKGIsYSl7aWYoRShhKSl7aWYoXCJTRUxFQ1RcIj09PUthKGIpJiZiLm11bHRpcGxlKXt2YXIgYz1bXTtxKGIub3B0aW9ucyxmdW5jdGlvbihhKXthLnNlbGVjdGVkJiZcbmMucHVzaChhLnZhbHVlfHxhLnRleHQpfSk7cmV0dXJuIDA9PT1jLmxlbmd0aD9udWxsOmN9cmV0dXJuIGIudmFsdWV9Yi52YWx1ZT1hfSxodG1sOmZ1bmN0aW9uKGIsYSl7aWYoRShhKSlyZXR1cm4gYi5pbm5lckhUTUw7Zm9yKHZhciBjPTAsZD1iLmNoaWxkTm9kZXM7YzxkLmxlbmd0aDtjKyspSGEoZFtjXSk7Yi5pbm5lckhUTUw9YX0sZW1wdHk6bGN9LGZ1bmN0aW9uKGIsYSl7Ti5wcm90b3R5cGVbYV09ZnVuY3Rpb24oYSxkKXt2YXIgZSxnO2lmKGIhPT1sYyYmKDI9PWIubGVuZ3RoJiZiIT09R2ImJmIhPT1rYz9hOmQpPT09cyl7aWYoWChhKSl7Zm9yKGU9MDtlPHRoaXMubGVuZ3RoO2UrKylpZihiPT09amMpYih0aGlzW2VdLGEpO2Vsc2UgZm9yKGcgaW4gYSliKHRoaXNbZV0sZyxhW2ddKTtyZXR1cm4gdGhpc31lPWIuJGR2O2c9ZT09PXM/TWF0aC5taW4odGhpcy5sZW5ndGgsMSk6dGhpcy5sZW5ndGg7Zm9yKHZhciBmPTA7ZjxnO2YrKyl7dmFyIGg9Yih0aGlzW2ZdLGEsZCk7ZT1cbmU/ZStoOmh9cmV0dXJuIGV9Zm9yKGU9MDtlPHRoaXMubGVuZ3RoO2UrKyliKHRoaXNbZV0sYSxkKTtyZXR1cm4gdGhpc319KTtxKHtyZW1vdmVEYXRhOmhjLGRlYWxvYzpIYSxvbjpmdW5jdGlvbiBhKGMsZCxlLGcpe2lmKEIoZykpdGhyb3cgQmIoXCJvbmFyZ3NcIik7dmFyIGY9bGEoYyxcImV2ZW50c1wiKSxoPWxhKGMsXCJoYW5kbGVcIik7Znx8bGEoYyxcImV2ZW50c1wiLGY9e30pO2h8fGxhKGMsXCJoYW5kbGVcIixoPW5lKGMsZikpO3EoZC5zcGxpdChcIiBcIiksZnVuY3Rpb24oZCl7dmFyIGc9ZltkXTtpZighZyl7aWYoXCJtb3VzZWVudGVyXCI9PWR8fFwibW91c2VsZWF2ZVwiPT1kKXt2YXIgbT1VLmJvZHkuY29udGFpbnN8fFUuYm9keS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj9mdW5jdGlvbihhLGMpe3ZhciBkPTk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEsZT1jJiZjLnBhcmVudE5vZGU7cmV0dXJuIGE9PT1lfHwhIShlJiYxPT09ZS5ub2RlVHlwZSYmKGQuY29udGFpbnM/ZC5jb250YWlucyhlKTpcbmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24mJmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZSkmMTYpKX06ZnVuY3Rpb24oYSxjKXtpZihjKWZvcig7Yz1jLnBhcmVudE5vZGU7KWlmKGM9PT1hKXJldHVybiEwO3JldHVybiExfTtmW2RdPVtdO2EoYyx7bW91c2VsZWF2ZTpcIm1vdXNlb3V0XCIsbW91c2VlbnRlcjpcIm1vdXNlb3ZlclwifVtkXSxmdW5jdGlvbihhKXt2YXIgYz1hLnJlbGF0ZWRUYXJnZXQ7YyYmKGM9PT10aGlzfHxtKHRoaXMsYykpfHxoKGEsZCl9KX1lbHNlIFBjKGMsZCxoKSxmW2RdPVtdO2c9ZltkXX1nLnB1c2goZSl9KX0sb2ZmOmljLG9uZTpmdW5jdGlvbihhLGMsZCl7YT15KGEpO2Eub24oYyxmdW5jdGlvbiBnKCl7YS5vZmYoYyxkKTthLm9mZihjLGcpfSk7YS5vbihjLGQpfSxyZXBsYWNlV2l0aDpmdW5jdGlvbihhLGMpe3ZhciBkLGU9YS5wYXJlbnROb2RlO0hhKGEpO3EobmV3IE4oYyksZnVuY3Rpb24oYyl7ZD9lLmluc2VydEJlZm9yZShjLGQubmV4dFNpYmxpbmcpOlxuZS5yZXBsYWNlQ2hpbGQoYyxhKTtkPWN9KX0sY2hpbGRyZW46ZnVuY3Rpb24oYSl7dmFyIGM9W107cShhLmNoaWxkTm9kZXMsZnVuY3Rpb24oYSl7MT09PWEubm9kZVR5cGUmJmMucHVzaChhKX0pO3JldHVybiBjfSxjb250ZW50czpmdW5jdGlvbihhKXtyZXR1cm4gYS5jb250ZW50RG9jdW1lbnR8fGEuY2hpbGROb2Rlc3x8W119LGFwcGVuZDpmdW5jdGlvbihhLGMpe3EobmV3IE4oYyksZnVuY3Rpb24oYyl7MSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZXx8YS5hcHBlbmRDaGlsZChjKX0pfSxwcmVwZW5kOmZ1bmN0aW9uKGEsYyl7aWYoMT09PWEubm9kZVR5cGUpe3ZhciBkPWEuZmlyc3RDaGlsZDtxKG5ldyBOKGMpLGZ1bmN0aW9uKGMpe2EuaW5zZXJ0QmVmb3JlKGMsZCl9KX19LHdyYXA6ZnVuY3Rpb24oYSxjKXtjPXkoYylbMF07dmFyIGQ9YS5wYXJlbnROb2RlO2QmJmQucmVwbGFjZUNoaWxkKGMsYSk7Yy5hcHBlbmRDaGlsZChhKX0scmVtb3ZlOmZ1bmN0aW9uKGEpe0hhKGEpO1xudmFyIGM9YS5wYXJlbnROb2RlO2MmJmMucmVtb3ZlQ2hpbGQoYSl9LGFmdGVyOmZ1bmN0aW9uKGEsYyl7dmFyIGQ9YSxlPWEucGFyZW50Tm9kZTtxKG5ldyBOKGMpLGZ1bmN0aW9uKGEpe2UuaW5zZXJ0QmVmb3JlKGEsZC5uZXh0U2libGluZyk7ZD1hfSl9LGFkZENsYXNzOmliLHJlbW92ZUNsYXNzOmhiLHRvZ2dsZUNsYXNzOmZ1bmN0aW9uKGEsYyxkKXtjJiZxKGMuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGMpe3ZhciBnPWQ7RShnKSYmKGc9IUdiKGEsYykpOyhnP2liOmhiKShhLGMpfSl9LHBhcmVudDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLnBhcmVudE5vZGUpJiYxMSE9PWEubm9kZVR5cGU/YTpudWxsfSxuZXh0OmZ1bmN0aW9uKGEpe2lmKGEubmV4dEVsZW1lbnRTaWJsaW5nKXJldHVybiBhLm5leHRFbGVtZW50U2libGluZztmb3IoYT1hLm5leHRTaWJsaW5nO251bGwhPWEmJjEhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGZpbmQ6ZnVuY3Rpb24oYSxjKXtyZXR1cm4gYS5nZXRFbGVtZW50c0J5VGFnTmFtZT9cbmEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYyk6W119LGNsb25lOkViLHRyaWdnZXJIYW5kbGVyOmZ1bmN0aW9uKGEsYyxkKXtjPShsYShhLFwiZXZlbnRzXCIpfHx7fSlbY107ZD1kfHxbXTt2YXIgZT1be3ByZXZlbnREZWZhdWx0OkMsc3RvcFByb3BhZ2F0aW9uOkN9XTtxKGMsZnVuY3Rpb24oYyl7Yy5hcHBseShhLGUuY29uY2F0KGQpKX0pfX0sZnVuY3Rpb24oYSxjKXtOLnByb3RvdHlwZVtjXT1mdW5jdGlvbihjLGUsZyl7Zm9yKHZhciBmLGg9MDtoPHRoaXMubGVuZ3RoO2grKylFKGYpPyhmPWEodGhpc1toXSxjLGUsZyksQihmKSYmKGY9eShmKSkpOkRiKGYsYSh0aGlzW2hdLGMsZSxnKSk7cmV0dXJuIEIoZik/Zjp0aGlzfTtOLnByb3RvdHlwZS5iaW5kPU4ucHJvdG90eXBlLm9uO04ucHJvdG90eXBlLnVuYmluZD1OLnByb3RvdHlwZS5vZmZ9KTtWYS5wcm90b3R5cGU9e3B1dDpmdW5jdGlvbihhLGMpe3RoaXNbSWEoYSldPWN9LGdldDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpc1tJYShhKV19LFxucmVtb3ZlOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXNbYT1JYShhKV07ZGVsZXRlIHRoaXNbYV07cmV0dXJuIGN9fTt2YXIgcGU9L15mdW5jdGlvblxccypbXlxcKF0qXFwoXFxzKihbXlxcKV0qKVxcKS9tLHFlPS8sLyxyZT0vXlxccyooXz8pKFxcUys/KVxcMVxccyokLyxvZT0vKChcXC9cXC8uKiQpfChcXC9cXCpbXFxzXFxTXSo/XFwqXFwvKSkvbWcsV2E9dChcIiRpbmplY3RvclwiKSxMZT10KFwiJGFuaW1hdGVcIiksTGQ9W1wiJHByb3ZpZGVcIixmdW5jdGlvbihhKXt0aGlzLiQkc2VsZWN0b3JzPXt9O3RoaXMucmVnaXN0ZXI9ZnVuY3Rpb24oYyxkKXt2YXIgZT1jK1wiLWFuaW1hdGlvblwiO2lmKGMmJlwiLlwiIT1jLmNoYXJBdCgwKSl0aHJvdyBMZShcIm5vdGNzZWxcIixjKTt0aGlzLiQkc2VsZWN0b3JzW2Muc3Vic3RyKDEpXT1lO2EuZmFjdG9yeShlLGQpfTt0aGlzLmNsYXNzTmFtZUZpbHRlcj1mdW5jdGlvbihhKXsxPT09YXJndW1lbnRzLmxlbmd0aCYmKHRoaXMuJCRjbGFzc05hbWVGaWx0ZXI9YSBpbnN0YW5jZW9mIFJlZ0V4cD9cbmE6bnVsbCk7cmV0dXJuIHRoaXMuJCRjbGFzc05hbWVGaWx0ZXJ9O3RoaXMuJGdldD1bXCIkdGltZW91dFwiLFwiJCRhc3luY0NhbGxiYWNrXCIsZnVuY3Rpb24oYSxkKXtyZXR1cm57ZW50ZXI6ZnVuY3Rpb24oYSxjLGYsaCl7Zj9mLmFmdGVyKGEpOihjJiZjWzBdfHwoYz1mLnBhcmVudCgpKSxjLmFwcGVuZChhKSk7aCYmZChoKX0sbGVhdmU6ZnVuY3Rpb24oYSxjKXthLnJlbW92ZSgpO2MmJmQoYyl9LG1vdmU6ZnVuY3Rpb24oYSxjLGQsaCl7dGhpcy5lbnRlcihhLGMsZCxoKX0sYWRkQ2xhc3M6ZnVuY3Rpb24oYSxjLGYpe2M9dyhjKT9jOk0oYyk/Yy5qb2luKFwiIFwiKTpcIlwiO3EoYSxmdW5jdGlvbihhKXtpYihhLGMpfSk7ZiYmZChmKX0scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oYSxjLGYpe2M9dyhjKT9jOk0oYyk/Yy5qb2luKFwiIFwiKTpcIlwiO3EoYSxmdW5jdGlvbihhKXtoYihhLGMpfSk7ZiYmZChmKX0sc2V0Q2xhc3M6ZnVuY3Rpb24oYSxjLGYsaCl7cShhLGZ1bmN0aW9uKGEpe2liKGEsYyk7aGIoYSxcbmYpfSk7aCYmZChoKX0sZW5hYmxlZDpDfX1dfV0samE9dChcIiRjb21waWxlXCIpO2NjLiRpbmplY3Q9W1wiJHByb3ZpZGVcIixcIiQkc2FuaXRpemVVcmlQcm92aWRlclwiXTt2YXIgdGU9L14oeFtcXDpcXC1fXXxkYXRhW1xcOlxcLV9dKS9pLHZjPXQoXCIkaW50ZXJwb2xhdGVcIiksTWU9L14oW15cXD8jXSopKFxcPyhbXiNdKikpPygjKC4qKSk/JC8sd2U9e2h0dHA6ODAsaHR0cHM6NDQzLGZ0cDoyMX0sS2I9dChcIiRsb2NhdGlvblwiKTtBYy5wcm90b3R5cGU9TGIucHJvdG90eXBlPXpjLnByb3RvdHlwZT17JCRodG1sNTohMSwkJHJlcGxhY2U6ITEsYWJzVXJsOm5iKFwiJCRhYnNVcmxcIiksdXJsOmZ1bmN0aW9uKGEsYyl7aWYoRShhKSlyZXR1cm4gdGhpcy4kJHVybDt2YXIgZD1NZS5leGVjKGEpO2RbMV0mJnRoaXMucGF0aChkZWNvZGVVUklDb21wb25lbnQoZFsxXSkpOyhkWzJdfHxkWzFdKSYmdGhpcy5zZWFyY2goZFszXXx8XCJcIik7dGhpcy5oYXNoKGRbNV18fFwiXCIsYyk7cmV0dXJuIHRoaXN9LHByb3RvY29sOm5iKFwiJCRwcm90b2NvbFwiKSxcbmhvc3Q6bmIoXCIkJGhvc3RcIikscG9ydDpuYihcIiQkcG9ydFwiKSxwYXRoOkJjKFwiJCRwYXRoXCIsZnVuY3Rpb24oYSl7cmV0dXJuXCIvXCI9PWEuY2hhckF0KDApP2E6XCIvXCIrYX0pLHNlYXJjaDpmdW5jdGlvbihhLGMpe3N3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIHRoaXMuJCRzZWFyY2g7Y2FzZSAxOmlmKHcoYSkpdGhpcy4kJHNlYXJjaD1ZYihhKTtlbHNlIGlmKFgoYSkpdGhpcy4kJHNlYXJjaD1hO2Vsc2UgdGhyb3cgS2IoXCJpc3JjaGFyZ1wiKTticmVhaztkZWZhdWx0OkUoYyl8fG51bGw9PT1jP2RlbGV0ZSB0aGlzLiQkc2VhcmNoW2FdOnRoaXMuJCRzZWFyY2hbYV09Y310aGlzLiQkY29tcG9zZSgpO3JldHVybiB0aGlzfSxoYXNoOkJjKFwiJCRoYXNoXCIsRGEpLHJlcGxhY2U6ZnVuY3Rpb24oKXt0aGlzLiQkcmVwbGFjZT0hMDtyZXR1cm4gdGhpc319O3ZhciBCYT10KFwiJHBhcnNlXCIpLEVjPXt9LHRhLE1hPXtcIm51bGxcIjpmdW5jdGlvbigpe3JldHVybiBudWxsfSxcInRydWVcIjpmdW5jdGlvbigpe3JldHVybiEwfSxcblwiZmFsc2VcIjpmdW5jdGlvbigpe3JldHVybiExfSx1bmRlZmluZWQ6QyxcIitcIjpmdW5jdGlvbihhLGMsZCxlKXtkPWQoYSxjKTtlPWUoYSxjKTtyZXR1cm4gQihkKT9CKGUpP2QrZTpkOkIoZSk/ZTpzfSxcIi1cIjpmdW5jdGlvbihhLGMsZCxlKXtkPWQoYSxjKTtlPWUoYSxjKTtyZXR1cm4oQihkKT9kOjApLShCKGUpP2U6MCl9LFwiKlwiOmZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybiBkKGEsYykqZShhLGMpfSxcIi9cIjpmdW5jdGlvbihhLGMsZCxlKXtyZXR1cm4gZChhLGMpL2UoYSxjKX0sXCIlXCI6ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIGQoYSxjKSVlKGEsYyl9LFwiXlwiOmZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybiBkKGEsYyleZShhLGMpfSxcIj1cIjpDLFwiPT09XCI6ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIGQoYSxjKT09PWUoYSxjKX0sXCIhPT1cIjpmdW5jdGlvbihhLGMsZCxlKXtyZXR1cm4gZChhLGMpIT09ZShhLGMpfSxcIj09XCI6ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIGQoYSxjKT09ZShhLFxuYyl9LFwiIT1cIjpmdW5jdGlvbihhLGMsZCxlKXtyZXR1cm4gZChhLGMpIT1lKGEsYyl9LFwiPFwiOmZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybiBkKGEsYyk8ZShhLGMpfSxcIj5cIjpmdW5jdGlvbihhLGMsZCxlKXtyZXR1cm4gZChhLGMpPmUoYSxjKX0sXCI8PVwiOmZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybiBkKGEsYyk8PWUoYSxjKX0sXCI+PVwiOmZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybiBkKGEsYyk+PWUoYSxjKX0sXCImJlwiOmZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybiBkKGEsYykmJmUoYSxjKX0sXCJ8fFwiOmZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybiBkKGEsYyl8fGUoYSxjKX0sXCImXCI6ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIGQoYSxjKSZlKGEsYyl9LFwifFwiOmZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybiBlKGEsYykoYSxjLGQoYSxjKSl9LFwiIVwiOmZ1bmN0aW9uKGEsYyxkKXtyZXR1cm4hZChhLGMpfX0sTmU9e246XCJcXG5cIixmOlwiXFxmXCIscjpcIlxcclwiLHQ6XCJcXHRcIix2OlwiXFx2XCIsXCInXCI6XCInXCIsJ1wiJzonXCInfSxcbk5iPWZ1bmN0aW9uKGEpe3RoaXMub3B0aW9ucz1hfTtOYi5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOk5iLGxleDpmdW5jdGlvbihhKXt0aGlzLnRleHQ9YTt0aGlzLmluZGV4PTA7dGhpcy5jaD1zO3RoaXMubGFzdENoPVwiOlwiO3RoaXMudG9rZW5zPVtdO3ZhciBjO2ZvcihhPVtdO3RoaXMuaW5kZXg8dGhpcy50ZXh0Lmxlbmd0aDspe3RoaXMuY2g9dGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTtpZih0aGlzLmlzKFwiXFxcIidcIikpdGhpcy5yZWFkU3RyaW5nKHRoaXMuY2gpO2Vsc2UgaWYodGhpcy5pc051bWJlcih0aGlzLmNoKXx8dGhpcy5pcyhcIi5cIikmJnRoaXMuaXNOdW1iZXIodGhpcy5wZWVrKCkpKXRoaXMucmVhZE51bWJlcigpO2Vsc2UgaWYodGhpcy5pc0lkZW50KHRoaXMuY2gpKXRoaXMucmVhZElkZW50KCksdGhpcy53YXMoXCJ7LFwiKSYmKFwie1wiPT09YVswXSYmKGM9dGhpcy50b2tlbnNbdGhpcy50b2tlbnMubGVuZ3RoLTFdKSkmJihjLmpzb249LTE9PT1jLnRleHQuaW5kZXhPZihcIi5cIikpO1xuZWxzZSBpZih0aGlzLmlzKFwiKCl7fVtdLiw7Oj9cIikpdGhpcy50b2tlbnMucHVzaCh7aW5kZXg6dGhpcy5pbmRleCx0ZXh0OnRoaXMuY2gsanNvbjp0aGlzLndhcyhcIjpbLFwiKSYmdGhpcy5pcyhcIntbXCIpfHx0aGlzLmlzKFwifV06LFwiKX0pLHRoaXMuaXMoXCJ7W1wiKSYmYS51bnNoaWZ0KHRoaXMuY2gpLHRoaXMuaXMoXCJ9XVwiKSYmYS5zaGlmdCgpLHRoaXMuaW5kZXgrKztlbHNlIGlmKHRoaXMuaXNXaGl0ZXNwYWNlKHRoaXMuY2gpKXt0aGlzLmluZGV4Kys7Y29udGludWV9ZWxzZXt2YXIgZD10aGlzLmNoK3RoaXMucGVlaygpLGU9ZCt0aGlzLnBlZWsoMiksZz1NYVt0aGlzLmNoXSxmPU1hW2RdLGg9TWFbZV07aD8odGhpcy50b2tlbnMucHVzaCh7aW5kZXg6dGhpcy5pbmRleCx0ZXh0OmUsZm46aH0pLHRoaXMuaW5kZXgrPTMpOmY/KHRoaXMudG9rZW5zLnB1c2goe2luZGV4OnRoaXMuaW5kZXgsdGV4dDpkLGZuOmZ9KSx0aGlzLmluZGV4Kz0yKTpnPyh0aGlzLnRva2Vucy5wdXNoKHtpbmRleDp0aGlzLmluZGV4LFxudGV4dDp0aGlzLmNoLGZuOmcsanNvbjp0aGlzLndhcyhcIlssOlwiKSYmdGhpcy5pcyhcIistXCIpfSksdGhpcy5pbmRleCs9MSk6dGhpcy50aHJvd0Vycm9yKFwiVW5leHBlY3RlZCBuZXh0IGNoYXJhY3RlciBcIix0aGlzLmluZGV4LHRoaXMuaW5kZXgrMSl9dGhpcy5sYXN0Q2g9dGhpcy5jaH1yZXR1cm4gdGhpcy50b2tlbnN9LGlzOmZ1bmN0aW9uKGEpe3JldHVybi0xIT09YS5pbmRleE9mKHRoaXMuY2gpfSx3YXM6ZnVuY3Rpb24oYSl7cmV0dXJuLTEhPT1hLmluZGV4T2YodGhpcy5sYXN0Q2gpfSxwZWVrOmZ1bmN0aW9uKGEpe2E9YXx8MTtyZXR1cm4gdGhpcy5pbmRleCthPHRoaXMudGV4dC5sZW5ndGg/dGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4K2EpOiExfSxpc051bWJlcjpmdW5jdGlvbihhKXtyZXR1cm5cIjBcIjw9YSYmXCI5XCI+PWF9LGlzV2hpdGVzcGFjZTpmdW5jdGlvbihhKXtyZXR1cm5cIiBcIj09PWF8fFwiXFxyXCI9PT1hfHxcIlxcdFwiPT09YXx8XCJcXG5cIj09PWF8fFwiXFx2XCI9PT1hfHxcIlxcdTAwYTBcIj09PVxuYX0saXNJZGVudDpmdW5jdGlvbihhKXtyZXR1cm5cImFcIjw9YSYmXCJ6XCI+PWF8fFwiQVwiPD1hJiZcIlpcIj49YXx8XCJfXCI9PT1hfHxcIiRcIj09PWF9LGlzRXhwT3BlcmF0b3I6ZnVuY3Rpb24oYSl7cmV0dXJuXCItXCI9PT1hfHxcIitcIj09PWF8fHRoaXMuaXNOdW1iZXIoYSl9LHRocm93RXJyb3I6ZnVuY3Rpb24oYSxjLGQpe2Q9ZHx8dGhpcy5pbmRleDtjPUIoYyk/XCJzIFwiK2MrXCItXCIrdGhpcy5pbmRleCtcIiBbXCIrdGhpcy50ZXh0LnN1YnN0cmluZyhjLGQpK1wiXVwiOlwiIFwiK2Q7dGhyb3cgQmEoXCJsZXhlcnJcIixhLGMsdGhpcy50ZXh0KTt9LHJlYWROdW1iZXI6ZnVuY3Rpb24oKXtmb3IodmFyIGE9XCJcIixjPXRoaXMuaW5kZXg7dGhpcy5pbmRleDx0aGlzLnRleHQubGVuZ3RoOyl7dmFyIGQ9Syh0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpKTtpZihcIi5cIj09ZHx8dGhpcy5pc051bWJlcihkKSlhKz1kO2Vsc2V7dmFyIGU9dGhpcy5wZWVrKCk7aWYoXCJlXCI9PWQmJnRoaXMuaXNFeHBPcGVyYXRvcihlKSlhKz1cbmQ7ZWxzZSBpZih0aGlzLmlzRXhwT3BlcmF0b3IoZCkmJmUmJnRoaXMuaXNOdW1iZXIoZSkmJlwiZVwiPT1hLmNoYXJBdChhLmxlbmd0aC0xKSlhKz1kO2Vsc2UgaWYoIXRoaXMuaXNFeHBPcGVyYXRvcihkKXx8ZSYmdGhpcy5pc051bWJlcihlKXx8XCJlXCIhPWEuY2hhckF0KGEubGVuZ3RoLTEpKWJyZWFrO2Vsc2UgdGhpcy50aHJvd0Vycm9yKFwiSW52YWxpZCBleHBvbmVudFwiKX10aGlzLmluZGV4Kyt9YSo9MTt0aGlzLnRva2Vucy5wdXNoKHtpbmRleDpjLHRleHQ6YSxqc29uOiEwLGZuOmZ1bmN0aW9uKCl7cmV0dXJuIGF9fSl9LHJlYWRJZGVudDpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLGM9XCJcIixkPXRoaXMuaW5kZXgsZSxnLGYsaDt0aGlzLmluZGV4PHRoaXMudGV4dC5sZW5ndGg7KXtoPXRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7aWYoXCIuXCI9PT1ofHx0aGlzLmlzSWRlbnQoaCl8fHRoaXMuaXNOdW1iZXIoaCkpXCIuXCI9PT1oJiYoZT10aGlzLmluZGV4KSxjKz1oO2Vsc2UgYnJlYWs7XG50aGlzLmluZGV4Kyt9aWYoZSlmb3IoZz10aGlzLmluZGV4O2c8dGhpcy50ZXh0Lmxlbmd0aDspe2g9dGhpcy50ZXh0LmNoYXJBdChnKTtpZihcIihcIj09PWgpe2Y9Yy5zdWJzdHIoZS1kKzEpO2M9Yy5zdWJzdHIoMCxlLWQpO3RoaXMuaW5kZXg9ZzticmVha31pZih0aGlzLmlzV2hpdGVzcGFjZShoKSlnKys7ZWxzZSBicmVha31kPXtpbmRleDpkLHRleHQ6Y307aWYoTWEuaGFzT3duUHJvcGVydHkoYykpZC5mbj1NYVtjXSxkLmpzb249TWFbY107ZWxzZXt2YXIgbD1EYyhjLHRoaXMub3B0aW9ucyx0aGlzLnRleHQpO2QuZm49RChmdW5jdGlvbihhLGMpe3JldHVybiBsKGEsYyl9LHthc3NpZ246ZnVuY3Rpb24oZCxlKXtyZXR1cm4gb2IoZCxjLGUsYS50ZXh0LGEub3B0aW9ucyl9fSl9dGhpcy50b2tlbnMucHVzaChkKTtmJiYodGhpcy50b2tlbnMucHVzaCh7aW5kZXg6ZSx0ZXh0OlwiLlwiLGpzb246ITF9KSx0aGlzLnRva2Vucy5wdXNoKHtpbmRleDplKzEsdGV4dDpmLGpzb246ITF9KSl9LFxucmVhZFN0cmluZzpmdW5jdGlvbihhKXt2YXIgYz10aGlzLmluZGV4O3RoaXMuaW5kZXgrKztmb3IodmFyIGQ9XCJcIixlPWEsZz0hMTt0aGlzLmluZGV4PHRoaXMudGV4dC5sZW5ndGg7KXt2YXIgZj10aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpLGU9ZStmO2lmKGcpXCJ1XCI9PT1mPyhmPXRoaXMudGV4dC5zdWJzdHJpbmcodGhpcy5pbmRleCsxLHRoaXMuaW5kZXgrNSksZi5tYXRjaCgvW1xcZGEtZl17NH0vaSl8fHRoaXMudGhyb3dFcnJvcihcIkludmFsaWQgdW5pY29kZSBlc2NhcGUgW1xcXFx1XCIrZitcIl1cIiksdGhpcy5pbmRleCs9NCxkKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGYsMTYpKSk6ZD0oZz1OZVtmXSk/ZCtnOmQrZixnPSExO2Vsc2UgaWYoXCJcXFxcXCI9PT1mKWc9ITA7ZWxzZXtpZihmPT09YSl7dGhpcy5pbmRleCsrO3RoaXMudG9rZW5zLnB1c2goe2luZGV4OmMsdGV4dDplLHN0cmluZzpkLGpzb246ITAsZm46ZnVuY3Rpb24oKXtyZXR1cm4gZH19KTtyZXR1cm59ZCs9XG5mfXRoaXMuaW5kZXgrK310aGlzLnRocm93RXJyb3IoXCJVbnRlcm1pbmF0ZWQgcXVvdGVcIixjKX19O3ZhciAkYT1mdW5jdGlvbihhLGMsZCl7dGhpcy5sZXhlcj1hO3RoaXMuJGZpbHRlcj1jO3RoaXMub3B0aW9ucz1kfTskYS5aRVJPPUQoZnVuY3Rpb24oKXtyZXR1cm4gMH0se2NvbnN0YW50OiEwfSk7JGEucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjokYSxwYXJzZTpmdW5jdGlvbihhLGMpe3RoaXMudGV4dD1hO3RoaXMuanNvbj1jO3RoaXMudG9rZW5zPXRoaXMubGV4ZXIubGV4KGEpO2MmJih0aGlzLmFzc2lnbm1lbnQ9dGhpcy5sb2dpY2FsT1IsdGhpcy5mdW5jdGlvbkNhbGw9dGhpcy5maWVsZEFjY2Vzcz10aGlzLm9iamVjdEluZGV4PXRoaXMuZmlsdGVyQ2hhaW49ZnVuY3Rpb24oKXt0aGlzLnRocm93RXJyb3IoXCJpcyBub3QgdmFsaWQganNvblwiLHt0ZXh0OmEsaW5kZXg6MH0pfSk7dmFyIGQ9Yz90aGlzLnByaW1hcnkoKTp0aGlzLnN0YXRlbWVudHMoKTswIT09dGhpcy50b2tlbnMubGVuZ3RoJiZcbnRoaXMudGhyb3dFcnJvcihcImlzIGFuIHVuZXhwZWN0ZWQgdG9rZW5cIix0aGlzLnRva2Vuc1swXSk7ZC5saXRlcmFsPSEhZC5saXRlcmFsO2QuY29uc3RhbnQ9ISFkLmNvbnN0YW50O3JldHVybiBkfSxwcmltYXJ5OmZ1bmN0aW9uKCl7dmFyIGE7aWYodGhpcy5leHBlY3QoXCIoXCIpKWE9dGhpcy5maWx0ZXJDaGFpbigpLHRoaXMuY29uc3VtZShcIilcIik7ZWxzZSBpZih0aGlzLmV4cGVjdChcIltcIikpYT10aGlzLmFycmF5RGVjbGFyYXRpb24oKTtlbHNlIGlmKHRoaXMuZXhwZWN0KFwie1wiKSlhPXRoaXMub2JqZWN0KCk7ZWxzZXt2YXIgYz10aGlzLmV4cGVjdCgpOyhhPWMuZm4pfHx0aGlzLnRocm93RXJyb3IoXCJub3QgYSBwcmltYXJ5IGV4cHJlc3Npb25cIixjKTtjLmpzb24mJihhLmNvbnN0YW50PSEwLGEubGl0ZXJhbD0hMCl9Zm9yKHZhciBkO2M9dGhpcy5leHBlY3QoXCIoXCIsXCJbXCIsXCIuXCIpOylcIihcIj09PWMudGV4dD8oYT10aGlzLmZ1bmN0aW9uQ2FsbChhLGQpLGQ9bnVsbCk6XCJbXCI9PT1jLnRleHQ/XG4oZD1hLGE9dGhpcy5vYmplY3RJbmRleChhKSk6XCIuXCI9PT1jLnRleHQ/KGQ9YSxhPXRoaXMuZmllbGRBY2Nlc3MoYSkpOnRoaXMudGhyb3dFcnJvcihcIklNUE9TU0lCTEVcIik7cmV0dXJuIGF9LHRocm93RXJyb3I6ZnVuY3Rpb24oYSxjKXt0aHJvdyBCYShcInN5bnRheFwiLGMudGV4dCxhLGMuaW5kZXgrMSx0aGlzLnRleHQsdGhpcy50ZXh0LnN1YnN0cmluZyhjLmluZGV4KSk7fSxwZWVrVG9rZW46ZnVuY3Rpb24oKXtpZigwPT09dGhpcy50b2tlbnMubGVuZ3RoKXRocm93IEJhKFwidWVvZVwiLHRoaXMudGV4dCk7cmV0dXJuIHRoaXMudG9rZW5zWzBdfSxwZWVrOmZ1bmN0aW9uKGEsYyxkLGUpe2lmKDA8dGhpcy50b2tlbnMubGVuZ3RoKXt2YXIgZz10aGlzLnRva2Vuc1swXSxmPWcudGV4dDtpZihmPT09YXx8Zj09PWN8fGY9PT1kfHxmPT09ZXx8IShhfHxjfHxkfHxlKSlyZXR1cm4gZ31yZXR1cm4hMX0sZXhwZWN0OmZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybihhPXRoaXMucGVlayhhLGMsZCxcbmUpKT8odGhpcy5qc29uJiYhYS5qc29uJiZ0aGlzLnRocm93RXJyb3IoXCJpcyBub3QgdmFsaWQganNvblwiLGEpLHRoaXMudG9rZW5zLnNoaWZ0KCksYSk6ITF9LGNvbnN1bWU6ZnVuY3Rpb24oYSl7dGhpcy5leHBlY3QoYSl8fHRoaXMudGhyb3dFcnJvcihcImlzIHVuZXhwZWN0ZWQsIGV4cGVjdGluZyBbXCIrYStcIl1cIix0aGlzLnBlZWsoKSl9LHVuYXJ5Rm46ZnVuY3Rpb24oYSxjKXtyZXR1cm4gRChmdW5jdGlvbihkLGUpe3JldHVybiBhKGQsZSxjKX0se2NvbnN0YW50OmMuY29uc3RhbnR9KX0sdGVybmFyeUZuOmZ1bmN0aW9uKGEsYyxkKXtyZXR1cm4gRChmdW5jdGlvbihlLGcpe3JldHVybiBhKGUsZyk/YyhlLGcpOmQoZSxnKX0se2NvbnN0YW50OmEuY29uc3RhbnQmJmMuY29uc3RhbnQmJmQuY29uc3RhbnR9KX0sYmluYXJ5Rm46ZnVuY3Rpb24oYSxjLGQpe3JldHVybiBEKGZ1bmN0aW9uKGUsZyl7cmV0dXJuIGMoZSxnLGEsZCl9LHtjb25zdGFudDphLmNvbnN0YW50JiZkLmNvbnN0YW50fSl9LFxuc3RhdGVtZW50czpmdW5jdGlvbigpe2Zvcih2YXIgYT1bXTs7KWlmKDA8dGhpcy50b2tlbnMubGVuZ3RoJiYhdGhpcy5wZWVrKFwifVwiLFwiKVwiLFwiO1wiLFwiXVwiKSYmYS5wdXNoKHRoaXMuZmlsdGVyQ2hhaW4oKSksIXRoaXMuZXhwZWN0KFwiO1wiKSlyZXR1cm4gMT09PWEubGVuZ3RoP2FbMF06ZnVuY3Rpb24oYyxkKXtmb3IodmFyIGUsZz0wO2c8YS5sZW5ndGg7ZysrKXt2YXIgZj1hW2ddO2YmJihlPWYoYyxkKSl9cmV0dXJuIGV9fSxmaWx0ZXJDaGFpbjpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLmV4cHJlc3Npb24oKSxjOzspaWYoYz10aGlzLmV4cGVjdChcInxcIikpYT10aGlzLmJpbmFyeUZuKGEsYy5mbix0aGlzLmZpbHRlcigpKTtlbHNlIHJldHVybiBhfSxmaWx0ZXI6ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5leHBlY3QoKSxjPXRoaXMuJGZpbHRlcihhLnRleHQpLGQ9W107OylpZihhPXRoaXMuZXhwZWN0KFwiOlwiKSlkLnB1c2godGhpcy5leHByZXNzaW9uKCkpO2Vsc2V7dmFyIGU9XG5mdW5jdGlvbihhLGUsaCl7aD1baF07Zm9yKHZhciBsPTA7bDxkLmxlbmd0aDtsKyspaC5wdXNoKGRbbF0oYSxlKSk7cmV0dXJuIGMuYXBwbHkoYSxoKX07cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGV9fX0sZXhwcmVzc2lvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmFzc2lnbm1lbnQoKX0sYXNzaWdubWVudDpmdW5jdGlvbigpe3ZhciBhPXRoaXMudGVybmFyeSgpLGMsZDtyZXR1cm4oZD10aGlzLmV4cGVjdChcIj1cIikpPyhhLmFzc2lnbnx8dGhpcy50aHJvd0Vycm9yKFwiaW1wbGllcyBhc3NpZ25tZW50IGJ1dCBbXCIrdGhpcy50ZXh0LnN1YnN0cmluZygwLGQuaW5kZXgpK1wiXSBjYW4gbm90IGJlIGFzc2lnbmVkIHRvXCIsZCksYz10aGlzLnRlcm5hcnkoKSxmdW5jdGlvbihkLGcpe3JldHVybiBhLmFzc2lnbihkLGMoZCxnKSxnKX0pOmF9LHRlcm5hcnk6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmxvZ2ljYWxPUigpLGMsZDtpZih0aGlzLmV4cGVjdChcIj9cIikpe2M9dGhpcy50ZXJuYXJ5KCk7XG5pZihkPXRoaXMuZXhwZWN0KFwiOlwiKSlyZXR1cm4gdGhpcy50ZXJuYXJ5Rm4oYSxjLHRoaXMudGVybmFyeSgpKTt0aGlzLnRocm93RXJyb3IoXCJleHBlY3RlZCA6XCIsZCl9ZWxzZSByZXR1cm4gYX0sbG9naWNhbE9SOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMubG9naWNhbEFORCgpLGM7OylpZihjPXRoaXMuZXhwZWN0KFwifHxcIikpYT10aGlzLmJpbmFyeUZuKGEsYy5mbix0aGlzLmxvZ2ljYWxBTkQoKSk7ZWxzZSByZXR1cm4gYX0sbG9naWNhbEFORDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXF1YWxpdHkoKSxjO2lmKGM9dGhpcy5leHBlY3QoXCImJlwiKSlhPXRoaXMuYmluYXJ5Rm4oYSxjLmZuLHRoaXMubG9naWNhbEFORCgpKTtyZXR1cm4gYX0sZXF1YWxpdHk6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnJlbGF0aW9uYWwoKSxjO2lmKGM9dGhpcy5leHBlY3QoXCI9PVwiLFwiIT1cIixcIj09PVwiLFwiIT09XCIpKWE9dGhpcy5iaW5hcnlGbihhLGMuZm4sdGhpcy5lcXVhbGl0eSgpKTtyZXR1cm4gYX0sXG5yZWxhdGlvbmFsOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5hZGRpdGl2ZSgpLGM7aWYoYz10aGlzLmV4cGVjdChcIjxcIixcIj5cIixcIjw9XCIsXCI+PVwiKSlhPXRoaXMuYmluYXJ5Rm4oYSxjLmZuLHRoaXMucmVsYXRpb25hbCgpKTtyZXR1cm4gYX0sYWRkaXRpdmU6ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5tdWx0aXBsaWNhdGl2ZSgpLGM7Yz10aGlzLmV4cGVjdChcIitcIixcIi1cIik7KWE9dGhpcy5iaW5hcnlGbihhLGMuZm4sdGhpcy5tdWx0aXBsaWNhdGl2ZSgpKTtyZXR1cm4gYX0sbXVsdGlwbGljYXRpdmU6ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy51bmFyeSgpLGM7Yz10aGlzLmV4cGVjdChcIipcIixcIi9cIixcIiVcIik7KWE9dGhpcy5iaW5hcnlGbihhLGMuZm4sdGhpcy51bmFyeSgpKTtyZXR1cm4gYX0sdW5hcnk6ZnVuY3Rpb24oKXt2YXIgYTtyZXR1cm4gdGhpcy5leHBlY3QoXCIrXCIpP3RoaXMucHJpbWFyeSgpOihhPXRoaXMuZXhwZWN0KFwiLVwiKSk/dGhpcy5iaW5hcnlGbigkYS5aRVJPLGEuZm4sXG50aGlzLnVuYXJ5KCkpOihhPXRoaXMuZXhwZWN0KFwiIVwiKSk/dGhpcy51bmFyeUZuKGEuZm4sdGhpcy51bmFyeSgpKTp0aGlzLnByaW1hcnkoKX0sZmllbGRBY2Nlc3M6ZnVuY3Rpb24oYSl7dmFyIGM9dGhpcyxkPXRoaXMuZXhwZWN0KCkudGV4dCxlPURjKGQsdGhpcy5vcHRpb25zLHRoaXMudGV4dCk7cmV0dXJuIEQoZnVuY3Rpb24oYyxkLGgpe3JldHVybiBlKGh8fGEoYyxkKSl9LHthc3NpZ246ZnVuY3Rpb24oZSxmLGgpe3JldHVybiBvYihhKGUsaCksZCxmLGMudGV4dCxjLm9wdGlvbnMpfX0pfSxvYmplY3RJbmRleDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLGQ9dGhpcy5leHByZXNzaW9uKCk7dGhpcy5jb25zdW1lKFwiXVwiKTtyZXR1cm4gRChmdW5jdGlvbihlLGcpe3ZhciBmPWEoZSxnKSxoPWQoZSxnKSxsO2lmKCFmKXJldHVybiBzOyhmPVphKGZbaF0sYy50ZXh0KSkmJihmLnRoZW4mJmMub3B0aW9ucy51bndyYXBQcm9taXNlcykmJihsPWYsXCIkJHZcImluIGZ8fChsLiQkdj1zLGwudGhlbihmdW5jdGlvbihhKXtsLiQkdj1cbmF9KSksZj1mLiQkdik7cmV0dXJuIGZ9LHthc3NpZ246ZnVuY3Rpb24oZSxnLGYpe3ZhciBoPWQoZSxmKTtyZXR1cm4gWmEoYShlLGYpLGMudGV4dClbaF09Z319KX0sZnVuY3Rpb25DYWxsOmZ1bmN0aW9uKGEsYyl7dmFyIGQ9W107aWYoXCIpXCIhPT10aGlzLnBlZWtUb2tlbigpLnRleHQpe2RvIGQucHVzaCh0aGlzLmV4cHJlc3Npb24oKSk7d2hpbGUodGhpcy5leHBlY3QoXCIsXCIpKX10aGlzLmNvbnN1bWUoXCIpXCIpO3ZhciBlPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKGcsZil7Zm9yKHZhciBoPVtdLGw9Yz9jKGcsZik6ZyxrPTA7azxkLmxlbmd0aDtrKyspaC5wdXNoKGRba10oZyxmKSk7az1hKGcsZixsKXx8QztaYShsLGUudGV4dCk7WmEoayxlLnRleHQpO2g9ay5hcHBseT9rLmFwcGx5KGwsaCk6ayhoWzBdLGhbMV0saFsyXSxoWzNdLGhbNF0pO3JldHVybiBaYShoLGUudGV4dCl9fSxhcnJheURlY2xhcmF0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9W10sYz0hMDtpZihcIl1cIiE9PXRoaXMucGVla1Rva2VuKCkudGV4dCl7ZG97aWYodGhpcy5wZWVrKFwiXVwiKSlicmVhaztcbnZhciBkPXRoaXMuZXhwcmVzc2lvbigpO2EucHVzaChkKTtkLmNvbnN0YW50fHwoYz0hMSl9d2hpbGUodGhpcy5leHBlY3QoXCIsXCIpKX10aGlzLmNvbnN1bWUoXCJdXCIpO3JldHVybiBEKGZ1bmN0aW9uKGMsZCl7Zm9yKHZhciBmPVtdLGg9MDtoPGEubGVuZ3RoO2grKylmLnB1c2goYVtoXShjLGQpKTtyZXR1cm4gZn0se2xpdGVyYWw6ITAsY29uc3RhbnQ6Y30pfSxvYmplY3Q6ZnVuY3Rpb24oKXt2YXIgYT1bXSxjPSEwO2lmKFwifVwiIT09dGhpcy5wZWVrVG9rZW4oKS50ZXh0KXtkb3tpZih0aGlzLnBlZWsoXCJ9XCIpKWJyZWFrO3ZhciBkPXRoaXMuZXhwZWN0KCksZD1kLnN0cmluZ3x8ZC50ZXh0O3RoaXMuY29uc3VtZShcIjpcIik7dmFyIGU9dGhpcy5leHByZXNzaW9uKCk7YS5wdXNoKHtrZXk6ZCx2YWx1ZTplfSk7ZS5jb25zdGFudHx8KGM9ITEpfXdoaWxlKHRoaXMuZXhwZWN0KFwiLFwiKSl9dGhpcy5jb25zdW1lKFwifVwiKTtyZXR1cm4gRChmdW5jdGlvbihjLGQpe2Zvcih2YXIgZT17fSxsPTA7bDxcbmEubGVuZ3RoO2wrKyl7dmFyIGs9YVtsXTtlW2sua2V5XT1rLnZhbHVlKGMsZCl9cmV0dXJuIGV9LHtsaXRlcmFsOiEwLGNvbnN0YW50OmN9KX19O3ZhciBNYj17fSx1YT10KFwiJHNjZVwiKSxnYT17SFRNTDpcImh0bWxcIixDU1M6XCJjc3NcIixVUkw6XCJ1cmxcIixSRVNPVVJDRV9VUkw6XCJyZXNvdXJjZVVybFwiLEpTOlwianNcIn0sVz1VLmNyZWF0ZUVsZW1lbnQoXCJhXCIpLEhjPXNhKE8ubG9jYXRpb24uaHJlZiwhMCk7Z2MuJGluamVjdD1bXCIkcHJvdmlkZVwiXTtJYy4kaW5qZWN0PVtcIiRsb2NhbGVcIl07S2MuJGluamVjdD1bXCIkbG9jYWxlXCJdO3ZhciBOYz1cIi5cIixJZT17eXl5eTokKFwiRnVsbFllYXJcIiw0KSx5eTokKFwiRnVsbFllYXJcIiwyLDAsITApLHk6JChcIkZ1bGxZZWFyXCIsMSksTU1NTTpwYihcIk1vbnRoXCIpLE1NTTpwYihcIk1vbnRoXCIsITApLE1NOiQoXCJNb250aFwiLDIsMSksTTokKFwiTW9udGhcIiwxLDEpLGRkOiQoXCJEYXRlXCIsMiksZDokKFwiRGF0ZVwiLDEpLEhIOiQoXCJIb3Vyc1wiLDIpLEg6JChcIkhvdXJzXCIsXG4xKSxoaDokKFwiSG91cnNcIiwyLC0xMiksaDokKFwiSG91cnNcIiwxLC0xMiksbW06JChcIk1pbnV0ZXNcIiwyKSxtOiQoXCJNaW51dGVzXCIsMSksc3M6JChcIlNlY29uZHNcIiwyKSxzOiQoXCJTZWNvbmRzXCIsMSksc3NzOiQoXCJNaWxsaXNlY29uZHNcIiwzKSxFRUVFOnBiKFwiRGF5XCIpLEVFRTpwYihcIkRheVwiLCEwKSxhOmZ1bmN0aW9uKGEsYyl7cmV0dXJuIDEyPmEuZ2V0SG91cnMoKT9jLkFNUE1TWzBdOmMuQU1QTVNbMV19LFo6ZnVuY3Rpb24oYSl7YT0tMSphLmdldFRpbWV6b25lT2Zmc2V0KCk7cmV0dXJuIGE9KDA8PWE/XCIrXCI6XCJcIikrKE9iKE1hdGhbMDxhP1wiZmxvb3JcIjpcImNlaWxcIl0oYS82MCksMikrT2IoTWF0aC5hYnMoYSU2MCksMikpfX0sSGU9LygoPzpbXnlNZEhobXNhWkUnXSspfCg/OicoPzpbXiddfCcnKSonKXwoPzpFK3x5K3xNK3xkK3xIK3xoK3xtK3xzK3xhfFopKSguKikvLEdlPS9eXFwtP1xcZCskLztKYy4kaW5qZWN0PVtcIiRsb2NhbGVcIl07dmFyIEVlPWFhKEspLEZlPWFhKEZhKTtMYy4kaW5qZWN0PVxuW1wiJHBhcnNlXCJdO3ZhciBjZD1hYSh7cmVzdHJpY3Q6XCJFXCIsY29tcGlsZTpmdW5jdGlvbihhLGMpezg+PVMmJihjLmhyZWZ8fGMubmFtZXx8Yy4kc2V0KFwiaHJlZlwiLFwiXCIpLGEuYXBwZW5kKFUuY3JlYXRlQ29tbWVudChcIklFIGZpeFwiKSkpO2lmKCFjLmhyZWYmJiFjLnhsaW5rSHJlZiYmIWMubmFtZSlyZXR1cm4gZnVuY3Rpb24oYSxjKXt2YXIgZz1cIltvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddXCI9PT13YS5jYWxsKGMucHJvcChcImhyZWZcIikpP1wieGxpbms6aHJlZlwiOlwiaHJlZlwiO2Mub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2MuYXR0cihnKXx8YS5wcmV2ZW50RGVmYXVsdCgpfSl9fX0pLHpiPXt9O3Eoa2IsZnVuY3Rpb24oYSxjKXtpZihcIm11bHRpcGxlXCIhPWEpe3ZhciBkPW5hKFwibmctXCIrYyk7emJbZF09ZnVuY3Rpb24oKXtyZXR1cm57cHJpb3JpdHk6MTAwLGxpbms6ZnVuY3Rpb24oYSxnLGYpe2EuJHdhdGNoKGZbZF0sZnVuY3Rpb24oYSl7Zi4kc2V0KGMsISFhKX0pfX19fX0pO3EoW1wic3JjXCIsXG5cInNyY3NldFwiLFwiaHJlZlwiXSxmdW5jdGlvbihhKXt2YXIgYz1uYShcIm5nLVwiK2EpO3piW2NdPWZ1bmN0aW9uKCl7cmV0dXJue3ByaW9yaXR5Ojk5LGxpbms6ZnVuY3Rpb24oZCxlLGcpe3ZhciBmPWEsaD1hO1wiaHJlZlwiPT09YSYmXCJbb2JqZWN0IFNWR0FuaW1hdGVkU3RyaW5nXVwiPT09d2EuY2FsbChlLnByb3AoXCJocmVmXCIpKSYmKGg9XCJ4bGlua0hyZWZcIixnLiRhdHRyW2hdPVwieGxpbms6aHJlZlwiLGY9bnVsbCk7Zy4kb2JzZXJ2ZShjLGZ1bmN0aW9uKGEpe2EmJihnLiRzZXQoaCxhKSxTJiZmJiZlLnByb3AoZixnW2hdKSl9KX19fX0pO3ZhciBzYj17JGFkZENvbnRyb2w6QywkcmVtb3ZlQ29udHJvbDpDLCRzZXRWYWxpZGl0eTpDLCRzZXREaXJ0eTpDLCRzZXRQcmlzdGluZTpDfTtPYy4kaW5qZWN0PVtcIiRlbGVtZW50XCIsXCIkYXR0cnNcIixcIiRzY29wZVwiLFwiJGFuaW1hdGVcIl07dmFyIFFjPWZ1bmN0aW9uKGEpe3JldHVybltcIiR0aW1lb3V0XCIsZnVuY3Rpb24oYyl7cmV0dXJue25hbWU6XCJmb3JtXCIsXG5yZXN0cmljdDphP1wiRUFDXCI6XCJFXCIsY29udHJvbGxlcjpPYyxjb21waWxlOmZ1bmN0aW9uKCl7cmV0dXJue3ByZTpmdW5jdGlvbihhLGUsZyxmKXtpZighZy5hY3Rpb24pe3ZhciBoPWZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOmEucmV0dXJuVmFsdWU9ITF9O1BjKGVbMF0sXCJzdWJtaXRcIixoKTtlLm9uKFwiJGRlc3Ryb3lcIixmdW5jdGlvbigpe2MoZnVuY3Rpb24oKXtGYihlWzBdLFwic3VibWl0XCIsaCl9LDAsITEpfSl9dmFyIGw9ZS5wYXJlbnQoKS5jb250cm9sbGVyKFwiZm9ybVwiKSxrPWcubmFtZXx8Zy5uZ0Zvcm07ayYmb2IoYSxrLGYsayk7aWYobCllLm9uKFwiJGRlc3Ryb3lcIixmdW5jdGlvbigpe2wuJHJlbW92ZUNvbnRyb2woZik7ayYmb2IoYSxrLHMsayk7RChmLHNiKX0pfX19fX1dfSxkZD1RYygpLHFkPVFjKCEwKSxPZT0vXihmdHB8aHR0cHxodHRwcyk6XFwvXFwvKFxcdys6ezAsMX1cXHcqQCk/KFxcUyspKDpbMC05XSspPyhcXC98XFwvKFtcXHcjITouPys9JiVAIVxcLVxcL10pKT8kLyxcblBlPS9eW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi4tXStAW2EtejAtOS1dKyhcXC5bYS16MC05LV0rKSokL2ksUWU9L15cXHMqKFxcLXxcXCspPyhcXGQrfChcXGQqKFxcLlxcZCopKSlcXHMqJC8sUmM9e3RleHQ6dWIsbnVtYmVyOmZ1bmN0aW9uKGEsYyxkLGUsZyxmKXt1YihhLGMsZCxlLGcsZik7ZS4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKGEpe3ZhciBjPWUuJGlzRW1wdHkoYSk7aWYoY3x8UWUudGVzdChhKSlyZXR1cm4gZS4kc2V0VmFsaWRpdHkoXCJudW1iZXJcIiwhMCksXCJcIj09PWE/bnVsbDpjP2E6cGFyc2VGbG9hdChhKTtlLiRzZXRWYWxpZGl0eShcIm51bWJlclwiLCExKTtyZXR1cm4gc30pO0plKGUsXCJudW1iZXJcIixjKTtlLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24oYSl7cmV0dXJuIGUuJGlzRW1wdHkoYSk/XCJcIjpcIlwiK2F9KTtkLm1pbiYmKGE9ZnVuY3Rpb24oYSl7dmFyIGM9cGFyc2VGbG9hdChkLm1pbik7cmV0dXJuIHBhKGUsXCJtaW5cIixlLiRpc0VtcHR5KGEpfHxhPj1jLGEpfSxlLiRwYXJzZXJzLnB1c2goYSksXG5lLiRmb3JtYXR0ZXJzLnB1c2goYSkpO2QubWF4JiYoYT1mdW5jdGlvbihhKXt2YXIgYz1wYXJzZUZsb2F0KGQubWF4KTtyZXR1cm4gcGEoZSxcIm1heFwiLGUuJGlzRW1wdHkoYSl8fGE8PWMsYSl9LGUuJHBhcnNlcnMucHVzaChhKSxlLiRmb3JtYXR0ZXJzLnB1c2goYSkpO2UuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbihhKXtyZXR1cm4gcGEoZSxcIm51bWJlclwiLGUuJGlzRW1wdHkoYSl8fHZiKGEpLGEpfSl9LHVybDpmdW5jdGlvbihhLGMsZCxlLGcsZil7dWIoYSxjLGQsZSxnLGYpO2E9ZnVuY3Rpb24oYSl7cmV0dXJuIHBhKGUsXCJ1cmxcIixlLiRpc0VtcHR5KGEpfHxPZS50ZXN0KGEpLGEpfTtlLiRmb3JtYXR0ZXJzLnB1c2goYSk7ZS4kcGFyc2Vycy5wdXNoKGEpfSxlbWFpbDpmdW5jdGlvbihhLGMsZCxlLGcsZil7dWIoYSxjLGQsZSxnLGYpO2E9ZnVuY3Rpb24oYSl7cmV0dXJuIHBhKGUsXCJlbWFpbFwiLGUuJGlzRW1wdHkoYSl8fFBlLnRlc3QoYSksYSl9O2UuJGZvcm1hdHRlcnMucHVzaChhKTtcbmUuJHBhcnNlcnMucHVzaChhKX0scmFkaW86ZnVuY3Rpb24oYSxjLGQsZSl7RShkLm5hbWUpJiZjLmF0dHIoXCJuYW1lXCIsYmIoKSk7Yy5vbihcImNsaWNrXCIsZnVuY3Rpb24oKXtjWzBdLmNoZWNrZWQmJmEuJGFwcGx5KGZ1bmN0aW9uKCl7ZS4kc2V0Vmlld1ZhbHVlKGQudmFsdWUpfSl9KTtlLiRyZW5kZXI9ZnVuY3Rpb24oKXtjWzBdLmNoZWNrZWQ9ZC52YWx1ZT09ZS4kdmlld1ZhbHVlfTtkLiRvYnNlcnZlKFwidmFsdWVcIixlLiRyZW5kZXIpfSxjaGVja2JveDpmdW5jdGlvbihhLGMsZCxlKXt2YXIgZz1kLm5nVHJ1ZVZhbHVlLGY9ZC5uZ0ZhbHNlVmFsdWU7dyhnKXx8KGc9ITApO3coZil8fChmPSExKTtjLm9uKFwiY2xpY2tcIixmdW5jdGlvbigpe2EuJGFwcGx5KGZ1bmN0aW9uKCl7ZS4kc2V0Vmlld1ZhbHVlKGNbMF0uY2hlY2tlZCl9KX0pO2UuJHJlbmRlcj1mdW5jdGlvbigpe2NbMF0uY2hlY2tlZD1lLiR2aWV3VmFsdWV9O2UuJGlzRW1wdHk9ZnVuY3Rpb24oYSl7cmV0dXJuIGEhPT1nfTtcbmUuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbihhKXtyZXR1cm4gYT09PWd9KTtlLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24oYSl7cmV0dXJuIGE/ZzpmfSl9LGhpZGRlbjpDLGJ1dHRvbjpDLHN1Ym1pdDpDLHJlc2V0OkMsZmlsZTpDfSxkYz1bXCIkYnJvd3NlclwiLFwiJHNuaWZmZXJcIixmdW5jdGlvbihhLGMpe3JldHVybntyZXN0cmljdDpcIkVcIixyZXF1aXJlOlwiP25nTW9kZWxcIixsaW5rOmZ1bmN0aW9uKGQsZSxnLGYpe2YmJihSY1tLKGcudHlwZSldfHxSYy50ZXh0KShkLGUsZyxmLGMsYSl9fX1dLHJiPVwibmctdmFsaWRcIixxYj1cIm5nLWludmFsaWRcIixMYT1cIm5nLXByaXN0aW5lXCIsdGI9XCJuZy1kaXJ0eVwiLFJlPVtcIiRzY29wZVwiLFwiJGV4Y2VwdGlvbkhhbmRsZXJcIixcIiRhdHRyc1wiLFwiJGVsZW1lbnRcIixcIiRwYXJzZVwiLFwiJGFuaW1hdGVcIixmdW5jdGlvbihhLGMsZCxlLGcsZil7ZnVuY3Rpb24gaChhLGMpe2M9Yz9cIi1cIitmYihjLFwiLVwiKTpcIlwiO2YucmVtb3ZlQ2xhc3MoZSwoYT9xYjpyYikrYyk7XG5mLmFkZENsYXNzKGUsKGE/cmI6cWIpK2MpfXRoaXMuJG1vZGVsVmFsdWU9dGhpcy4kdmlld1ZhbHVlPU51bWJlci5OYU47dGhpcy4kcGFyc2Vycz1bXTt0aGlzLiRmb3JtYXR0ZXJzPVtdO3RoaXMuJHZpZXdDaGFuZ2VMaXN0ZW5lcnM9W107dGhpcy4kcHJpc3RpbmU9ITA7dGhpcy4kZGlydHk9ITE7dGhpcy4kdmFsaWQ9ITA7dGhpcy4kaW52YWxpZD0hMTt0aGlzLiRuYW1lPWQubmFtZTt2YXIgbD1nKGQubmdNb2RlbCksaz1sLmFzc2lnbjtpZighayl0aHJvdyB0KFwibmdNb2RlbFwiKShcIm5vbmFzc2lnblwiLGQubmdNb2RlbCxoYShlKSk7dGhpcy4kcmVuZGVyPUM7dGhpcy4kaXNFbXB0eT1mdW5jdGlvbihhKXtyZXR1cm4gRShhKXx8XCJcIj09PWF8fG51bGw9PT1hfHxhIT09YX07dmFyIG09ZS5pbmhlcml0ZWREYXRhKFwiJGZvcm1Db250cm9sbGVyXCIpfHxzYixuPTAscD10aGlzLiRlcnJvcj17fTtlLmFkZENsYXNzKExhKTtoKCEwKTt0aGlzLiRzZXRWYWxpZGl0eT1mdW5jdGlvbihhLGMpe3BbYV0hPT1cbiFjJiYoYz8ocFthXSYmbi0tLG58fChoKCEwKSx0aGlzLiR2YWxpZD0hMCx0aGlzLiRpbnZhbGlkPSExKSk6KGgoITEpLHRoaXMuJGludmFsaWQ9ITAsdGhpcy4kdmFsaWQ9ITEsbisrKSxwW2FdPSFjLGgoYyxhKSxtLiRzZXRWYWxpZGl0eShhLGMsdGhpcykpfTt0aGlzLiRzZXRQcmlzdGluZT1mdW5jdGlvbigpe3RoaXMuJGRpcnR5PSExO3RoaXMuJHByaXN0aW5lPSEwO2YucmVtb3ZlQ2xhc3MoZSx0Yik7Zi5hZGRDbGFzcyhlLExhKX07dGhpcy4kc2V0Vmlld1ZhbHVlPWZ1bmN0aW9uKGQpe3RoaXMuJHZpZXdWYWx1ZT1kO3RoaXMuJHByaXN0aW5lJiYodGhpcy4kZGlydHk9ITAsdGhpcy4kcHJpc3RpbmU9ITEsZi5yZW1vdmVDbGFzcyhlLExhKSxmLmFkZENsYXNzKGUsdGIpLG0uJHNldERpcnR5KCkpO3EodGhpcy4kcGFyc2VycyxmdW5jdGlvbihhKXtkPWEoZCl9KTt0aGlzLiRtb2RlbFZhbHVlIT09ZCYmKHRoaXMuJG1vZGVsVmFsdWU9ZCxrKGEsZCkscSh0aGlzLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLFxuZnVuY3Rpb24oYSl7dHJ5e2EoKX1jYXRjaChkKXtjKGQpfX0pKX07dmFyIHI9dGhpczthLiR3YXRjaChmdW5jdGlvbigpe3ZhciBjPWwoYSk7aWYoci4kbW9kZWxWYWx1ZSE9PWMpe3ZhciBkPXIuJGZvcm1hdHRlcnMsZT1kLmxlbmd0aDtmb3Ioci4kbW9kZWxWYWx1ZT1jO2UtLTspYz1kW2VdKGMpO3IuJHZpZXdWYWx1ZSE9PWMmJihyLiR2aWV3VmFsdWU9YyxyLiRyZW5kZXIoKSl9cmV0dXJuIGN9KX1dLEZkPWZ1bmN0aW9uKCl7cmV0dXJue3JlcXVpcmU6W1wibmdNb2RlbFwiLFwiXj9mb3JtXCJdLGNvbnRyb2xsZXI6UmUsbGluazpmdW5jdGlvbihhLGMsZCxlKXt2YXIgZz1lWzBdLGY9ZVsxXXx8c2I7Zi4kYWRkQ29udHJvbChnKTthLiRvbihcIiRkZXN0cm95XCIsZnVuY3Rpb24oKXtmLiRyZW1vdmVDb250cm9sKGcpfSl9fX0sSGQ9YWEoe3JlcXVpcmU6XCJuZ01vZGVsXCIsbGluazpmdW5jdGlvbihhLGMsZCxlKXtlLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLnB1c2goZnVuY3Rpb24oKXthLiRldmFsKGQubmdDaGFuZ2UpfSl9fSksXG5lYz1mdW5jdGlvbigpe3JldHVybntyZXF1aXJlOlwiP25nTW9kZWxcIixsaW5rOmZ1bmN0aW9uKGEsYyxkLGUpe2lmKGUpe2QucmVxdWlyZWQ9ITA7dmFyIGc9ZnVuY3Rpb24oYSl7aWYoZC5yZXF1aXJlZCYmZS4kaXNFbXB0eShhKSllLiRzZXRWYWxpZGl0eShcInJlcXVpcmVkXCIsITEpO2Vsc2UgcmV0dXJuIGUuJHNldFZhbGlkaXR5KFwicmVxdWlyZWRcIiwhMCksYX07ZS4kZm9ybWF0dGVycy5wdXNoKGcpO2UuJHBhcnNlcnMudW5zaGlmdChnKTtkLiRvYnNlcnZlKFwicmVxdWlyZWRcIixmdW5jdGlvbigpe2coZS4kdmlld1ZhbHVlKX0pfX19fSxHZD1mdW5jdGlvbigpe3JldHVybntyZXF1aXJlOlwibmdNb2RlbFwiLGxpbms6ZnVuY3Rpb24oYSxjLGQsZSl7dmFyIGc9KGE9L1xcLyguKilcXC8vLmV4ZWMoZC5uZ0xpc3QpKSYmUmVnRXhwKGFbMV0pfHxkLm5nTGlzdHx8XCIsXCI7ZS4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKGEpe2lmKCFFKGEpKXt2YXIgYz1bXTthJiZxKGEuc3BsaXQoZyksZnVuY3Rpb24oYSl7YSYmXG5jLnB1c2goY2EoYSkpfSk7cmV0dXJuIGN9fSk7ZS4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKGEpe3JldHVybiBNKGEpP2Euam9pbihcIiwgXCIpOnN9KTtlLiRpc0VtcHR5PWZ1bmN0aW9uKGEpe3JldHVybiFhfHwhYS5sZW5ndGh9fX19LFNlPS9eKHRydWV8ZmFsc2V8XFxkKykkLyxJZD1mdW5jdGlvbigpe3JldHVybntwcmlvcml0eToxMDAsY29tcGlsZTpmdW5jdGlvbihhLGMpe3JldHVybiBTZS50ZXN0KGMubmdWYWx1ZSk/ZnVuY3Rpb24oYSxjLGcpe2cuJHNldChcInZhbHVlXCIsYS4kZXZhbChnLm5nVmFsdWUpKX06ZnVuY3Rpb24oYSxjLGcpe2EuJHdhdGNoKGcubmdWYWx1ZSxmdW5jdGlvbihhKXtnLiRzZXQoXCJ2YWx1ZVwiLGEpfSl9fX19LGlkPXZhKGZ1bmN0aW9uKGEsYyxkKXtjLmFkZENsYXNzKFwibmctYmluZGluZ1wiKS5kYXRhKFwiJGJpbmRpbmdcIixkLm5nQmluZCk7YS4kd2F0Y2goZC5uZ0JpbmQsZnVuY3Rpb24oYSl7Yy50ZXh0KGE9PXM/XCJcIjphKX0pfSksa2Q9W1wiJGludGVycG9sYXRlXCIsXG5mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYyxkLGUpe2M9YShkLmF0dHIoZS4kYXR0ci5uZ0JpbmRUZW1wbGF0ZSkpO2QuYWRkQ2xhc3MoXCJuZy1iaW5kaW5nXCIpLmRhdGEoXCIkYmluZGluZ1wiLGMpO2UuJG9ic2VydmUoXCJuZ0JpbmRUZW1wbGF0ZVwiLGZ1bmN0aW9uKGEpe2QudGV4dChhKX0pfX1dLGpkPVtcIiRzY2VcIixcIiRwYXJzZVwiLGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGZ1bmN0aW9uKGQsZSxnKXtlLmFkZENsYXNzKFwibmctYmluZGluZ1wiKS5kYXRhKFwiJGJpbmRpbmdcIixnLm5nQmluZEh0bWwpO3ZhciBmPWMoZy5uZ0JpbmRIdG1sKTtkLiR3YXRjaChmdW5jdGlvbigpe3JldHVybihmKGQpfHxcIlwiKS50b1N0cmluZygpfSxmdW5jdGlvbihjKXtlLmh0bWwoYS5nZXRUcnVzdGVkSHRtbChmKGQpKXx8XCJcIil9KX19XSxsZD1QYihcIlwiLCEwKSxuZD1QYihcIk9kZFwiLDApLG1kPVBiKFwiRXZlblwiLDEpLG9kPXZhKHtjb21waWxlOmZ1bmN0aW9uKGEsYyl7Yy4kc2V0KFwibmdDbG9ha1wiLHMpO2EucmVtb3ZlQ2xhc3MoXCJuZy1jbG9ha1wiKX19KSxcbnBkPVtmdW5jdGlvbigpe3JldHVybntzY29wZTohMCxjb250cm9sbGVyOlwiQFwiLHByaW9yaXR5OjUwMH19XSxmYz17fTtxKFwiY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlbW92ZSBtb3VzZWVudGVyIG1vdXNlbGVhdmUga2V5ZG93biBrZXl1cCBrZXlwcmVzcyBzdWJtaXQgZm9jdXMgYmx1ciBjb3B5IGN1dCBwYXN0ZVwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihhKXt2YXIgYz1uYShcIm5nLVwiK2EpO2ZjW2NdPVtcIiRwYXJzZVwiLGZ1bmN0aW9uKGQpe3JldHVybntjb21waWxlOmZ1bmN0aW9uKGUsZyl7dmFyIGY9ZChnW2NdKTtyZXR1cm4gZnVuY3Rpb24oYyxkLGUpe2Qub24oSyhhKSxmdW5jdGlvbihhKXtjLiRhcHBseShmdW5jdGlvbigpe2YoYyx7JGV2ZW50OmF9KX0pfSl9fX19XX0pO3ZhciBzZD1bXCIkYW5pbWF0ZVwiLGZ1bmN0aW9uKGEpe3JldHVybnt0cmFuc2NsdWRlOlwiZWxlbWVudFwiLHByaW9yaXR5OjYwMCx0ZXJtaW5hbDohMCxyZXN0cmljdDpcIkFcIixcbiQkdGxiOiEwLGxpbms6ZnVuY3Rpb24oYyxkLGUsZyxmKXt2YXIgaCxsLGs7Yy4kd2F0Y2goZS5uZ0lmLGZ1bmN0aW9uKGcpe1FhKGcpP2x8fChsPWMuJG5ldygpLGYobCxmdW5jdGlvbihjKXtjW2MubGVuZ3RoKytdPVUuY3JlYXRlQ29tbWVudChcIiBlbmQgbmdJZjogXCIrZS5uZ0lmK1wiIFwiKTtoPXtjbG9uZTpjfTthLmVudGVyKGMsZC5wYXJlbnQoKSxkKX0pKTooayYmKGsucmVtb3ZlKCksaz1udWxsKSxsJiYobC4kZGVzdHJveSgpLGw9bnVsbCksaCYmKGs9eWIoaC5jbG9uZSksYS5sZWF2ZShrLGZ1bmN0aW9uKCl7az1udWxsfSksaD1udWxsKSl9KX19fV0sdGQ9W1wiJGh0dHBcIixcIiR0ZW1wbGF0ZUNhY2hlXCIsXCIkYW5jaG9yU2Nyb2xsXCIsXCIkYW5pbWF0ZVwiLFwiJHNjZVwiLGZ1bmN0aW9uKGEsYyxkLGUsZyl7cmV0dXJue3Jlc3RyaWN0OlwiRUNBXCIscHJpb3JpdHk6NDAwLHRlcm1pbmFsOiEwLHRyYW5zY2x1ZGU6XCJlbGVtZW50XCIsY29udHJvbGxlcjpFYS5ub29wLGNvbXBpbGU6ZnVuY3Rpb24oZixcbmgpe3ZhciBsPWgubmdJbmNsdWRlfHxoLnNyYyxrPWgub25sb2FkfHxcIlwiLG09aC5hdXRvc2Nyb2xsO3JldHVybiBmdW5jdGlvbihmLGgscSxzLHUpe3ZhciBGPTAsdix5LEEseD1mdW5jdGlvbigpe3kmJih5LnJlbW92ZSgpLHk9bnVsbCk7diYmKHYuJGRlc3Ryb3koKSx2PW51bGwpO0EmJihlLmxlYXZlKEEsZnVuY3Rpb24oKXt5PW51bGx9KSx5PUEsQT1udWxsKX07Zi4kd2F0Y2goZy5wYXJzZUFzUmVzb3VyY2VVcmwobCksZnVuY3Rpb24oZyl7dmFyIGw9ZnVuY3Rpb24oKXshQihtKXx8bSYmIWYuJGV2YWwobSl8fGQoKX0scT0rK0Y7Zz8oYS5nZXQoZyx7Y2FjaGU6Y30pLnN1Y2Nlc3MoZnVuY3Rpb24oYSl7aWYocT09PUYpe3ZhciBjPWYuJG5ldygpO3MudGVtcGxhdGU9YTthPXUoYyxmdW5jdGlvbihhKXt4KCk7ZS5lbnRlcihhLG51bGwsaCxsKX0pO3Y9YztBPWE7di4kZW1pdChcIiRpbmNsdWRlQ29udGVudExvYWRlZFwiKTtmLiRldmFsKGspfX0pLmVycm9yKGZ1bmN0aW9uKCl7cT09PVxuRiYmeCgpfSksZi4kZW1pdChcIiRpbmNsdWRlQ29udGVudFJlcXVlc3RlZFwiKSk6KHgoKSxzLnRlbXBsYXRlPW51bGwpfSl9fX19XSxKZD1bXCIkY29tcGlsZVwiLGZ1bmN0aW9uKGEpe3JldHVybntyZXN0cmljdDpcIkVDQVwiLHByaW9yaXR5Oi00MDAscmVxdWlyZTpcIm5nSW5jbHVkZVwiLGxpbms6ZnVuY3Rpb24oYyxkLGUsZyl7ZC5odG1sKGcudGVtcGxhdGUpO2EoZC5jb250ZW50cygpKShjKX19fV0sdWQ9dmEoe3ByaW9yaXR5OjQ1MCxjb21waWxlOmZ1bmN0aW9uKCl7cmV0dXJue3ByZTpmdW5jdGlvbihhLGMsZCl7YS4kZXZhbChkLm5nSW5pdCl9fX19KSx2ZD12YSh7dGVybWluYWw6ITAscHJpb3JpdHk6MUUzfSksd2Q9W1wiJGxvY2FsZVwiLFwiJGludGVycG9sYXRlXCIsZnVuY3Rpb24oYSxjKXt2YXIgZD0ve30vZztyZXR1cm57cmVzdHJpY3Q6XCJFQVwiLGxpbms6ZnVuY3Rpb24oZSxnLGYpe3ZhciBoPWYuY291bnQsbD1mLiRhdHRyLndoZW4mJmcuYXR0cihmLiRhdHRyLndoZW4pLGs9Zi5vZmZzZXR8fFxuMCxtPWUuJGV2YWwobCl8fHt9LG49e30scD1jLnN0YXJ0U3ltYm9sKCkscj1jLmVuZFN5bWJvbCgpLHM9L153aGVuKE1pbnVzKT8oLispJC87cShmLGZ1bmN0aW9uKGEsYyl7cy50ZXN0KGMpJiYobVtLKGMucmVwbGFjZShcIndoZW5cIixcIlwiKS5yZXBsYWNlKFwiTWludXNcIixcIi1cIikpXT1nLmF0dHIoZi4kYXR0cltjXSkpfSk7cShtLGZ1bmN0aW9uKGEsZSl7bltlXT1jKGEucmVwbGFjZShkLHAraCtcIi1cIitrK3IpKX0pO2UuJHdhdGNoKGZ1bmN0aW9uKCl7dmFyIGM9cGFyc2VGbG9hdChlLiRldmFsKGgpKTtpZihpc05hTihjKSlyZXR1cm5cIlwiO2MgaW4gbXx8KGM9YS5wbHVyYWxDYXQoYy1rKSk7cmV0dXJuIG5bY10oZSxnLCEwKX0sZnVuY3Rpb24oYSl7Zy50ZXh0KGEpfSl9fX1dLHhkPVtcIiRwYXJzZVwiLFwiJGFuaW1hdGVcIixmdW5jdGlvbihhLGMpe3ZhciBkPXQoXCJuZ1JlcGVhdFwiKTtyZXR1cm57dHJhbnNjbHVkZTpcImVsZW1lbnRcIixwcmlvcml0eToxRTMsdGVybWluYWw6ITAsJCR0bGI6ITAsXG5saW5rOmZ1bmN0aW9uKGUsZyxmLGgsbCl7dmFyIGs9Zi5uZ1JlcGVhdCxtPWsubWF0Y2goL15cXHMqKFtcXHNcXFNdKz8pXFxzK2luXFxzKyhbXFxzXFxTXSs/KSg/Olxccyt0cmFja1xccytieVxccysoW1xcc1xcU10rPykpP1xccyokLyksbixwLHIscyx1LEYsdj17JGlkOklhfTtpZighbSl0aHJvdyBkKFwiaWV4cFwiLGspO2Y9bVsxXTtoPW1bMl07KG09bVszXSk/KG49YShtKSxwPWZ1bmN0aW9uKGEsYyxkKXtGJiYodltGXT1hKTt2W3VdPWM7di4kaW5kZXg9ZDtyZXR1cm4gbihlLHYpfSk6KHI9ZnVuY3Rpb24oYSxjKXtyZXR1cm4gSWEoYyl9LHM9ZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTttPWYubWF0Y2goL14oPzooW1xcJFxcd10rKXxcXCgoW1xcJFxcd10rKVxccyosXFxzKihbXFwkXFx3XSspXFwpKSQvKTtpZighbSl0aHJvdyBkKFwiaWlkZXhwXCIsZik7dT1tWzNdfHxtWzFdO0Y9bVsyXTt2YXIgQj17fTtlLiR3YXRjaENvbGxlY3Rpb24oaCxmdW5jdGlvbihhKXt2YXIgZixoLG09Z1swXSxuLHY9e30sSCxSLHcsQyxULHQsXG5FPVtdO2lmKGFiKGEpKVQ9YSxuPXB8fHI7ZWxzZXtuPXB8fHM7VD1bXTtmb3IodyBpbiBhKWEuaGFzT3duUHJvcGVydHkodykmJlwiJFwiIT13LmNoYXJBdCgwKSYmVC5wdXNoKHcpO1Quc29ydCgpfUg9VC5sZW5ndGg7aD1FLmxlbmd0aD1ULmxlbmd0aDtmb3IoZj0wO2Y8aDtmKyspaWYodz1hPT09VD9mOlRbZl0sQz1hW3ddLEM9bih3LEMsZiksQWEoQyxcImB0cmFjayBieWAgaWRcIiksQi5oYXNPd25Qcm9wZXJ0eShDKSl0PUJbQ10sZGVsZXRlIEJbQ10sdltDXT10LEVbZl09dDtlbHNle2lmKHYuaGFzT3duUHJvcGVydHkoQykpdGhyb3cgcShFLGZ1bmN0aW9uKGEpe2EmJmEuc2NvcGUmJihCW2EuaWRdPWEpfSksZChcImR1cGVzXCIsayxDKTtFW2ZdPXtpZDpDfTt2W0NdPSExfWZvcih3IGluIEIpQi5oYXNPd25Qcm9wZXJ0eSh3KSYmKHQ9Qlt3XSxmPXliKHQuY2xvbmUpLGMubGVhdmUoZikscShmLGZ1bmN0aW9uKGEpe2EuJCROR19SRU1PVkVEPSEwfSksdC5zY29wZS4kZGVzdHJveSgpKTtcbmY9MDtmb3IoaD1ULmxlbmd0aDtmPGg7ZisrKXt3PWE9PT1UP2Y6VFtmXTtDPWFbd107dD1FW2ZdO0VbZi0xXSYmKG09RVtmLTFdLmNsb25lW0VbZi0xXS5jbG9uZS5sZW5ndGgtMV0pO2lmKHQuc2NvcGUpe1I9dC5zY29wZTtuPW07ZG8gbj1uLm5leHRTaWJsaW5nO3doaWxlKG4mJm4uJCROR19SRU1PVkVEKTt0LmNsb25lWzBdIT1uJiZjLm1vdmUoeWIodC5jbG9uZSksbnVsbCx5KG0pKTttPXQuY2xvbmVbdC5jbG9uZS5sZW5ndGgtMV19ZWxzZSBSPWUuJG5ldygpO1JbdV09QztGJiYoUltGXT13KTtSLiRpbmRleD1mO1IuJGZpcnN0PTA9PT1mO1IuJGxhc3Q9Zj09PUgtMTtSLiRtaWRkbGU9IShSLiRmaXJzdHx8Ui4kbGFzdCk7Ui4kb2RkPSEoUi4kZXZlbj0wPT09KGYmMSkpO3Quc2NvcGV8fGwoUixmdW5jdGlvbihhKXthW2EubGVuZ3RoKytdPVUuY3JlYXRlQ29tbWVudChcIiBlbmQgbmdSZXBlYXQ6IFwiK2srXCIgXCIpO2MuZW50ZXIoYSxudWxsLHkobSkpO209YTt0LnNjb3BlPVI7dC5jbG9uZT1cbmE7dlt0LmlkXT10fSl9Qj12fSl9fX1dLHlkPVtcIiRhbmltYXRlXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCxlKXtjLiR3YXRjaChlLm5nU2hvdyxmdW5jdGlvbihjKXthW1FhKGMpP1wicmVtb3ZlQ2xhc3NcIjpcImFkZENsYXNzXCJdKGQsXCJuZy1oaWRlXCIpfSl9fV0scmQ9W1wiJGFuaW1hdGVcIixmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYyxkLGUpe2MuJHdhdGNoKGUubmdIaWRlLGZ1bmN0aW9uKGMpe2FbUWEoYyk/XCJhZGRDbGFzc1wiOlwicmVtb3ZlQ2xhc3NcIl0oZCxcIm5nLWhpZGVcIil9KX19XSx6ZD12YShmdW5jdGlvbihhLGMsZCl7YS4kd2F0Y2goZC5uZ1N0eWxlLGZ1bmN0aW9uKGEsZCl7ZCYmYSE9PWQmJnEoZCxmdW5jdGlvbihhLGQpe2MuY3NzKGQsXCJcIil9KTthJiZjLmNzcyhhKX0sITApfSksQWQ9W1wiJGFuaW1hdGVcIixmdW5jdGlvbihhKXtyZXR1cm57cmVzdHJpY3Q6XCJFQVwiLHJlcXVpcmU6XCJuZ1N3aXRjaFwiLGNvbnRyb2xsZXI6W1wiJHNjb3BlXCIsZnVuY3Rpb24oKXt0aGlzLmNhc2VzPVxue319XSxsaW5rOmZ1bmN0aW9uKGMsZCxlLGcpe3ZhciBmLGgsbCxrPVtdO2MuJHdhdGNoKGUubmdTd2l0Y2h8fGUub24sZnVuY3Rpb24oZCl7dmFyIG4scD1rLmxlbmd0aDtpZigwPHApe2lmKGwpe2ZvcihuPTA7bjxwO24rKylsW25dLnJlbW92ZSgpO2w9bnVsbH1sPVtdO2ZvcihuPTA7bjxwO24rKyl7dmFyIHI9aFtuXTtrW25dLiRkZXN0cm95KCk7bFtuXT1yO2EubGVhdmUocixmdW5jdGlvbigpe2wuc3BsaWNlKG4sMSk7MD09PWwubGVuZ3RoJiYobD1udWxsKX0pfX1oPVtdO2s9W107aWYoZj1nLmNhc2VzW1wiIVwiK2RdfHxnLmNhc2VzW1wiP1wiXSljLiRldmFsKGUuY2hhbmdlKSxxKGYsZnVuY3Rpb24oZCl7dmFyIGU9Yy4kbmV3KCk7ay5wdXNoKGUpO2QudHJhbnNjbHVkZShlLGZ1bmN0aW9uKGMpe3ZhciBlPWQuZWxlbWVudDtoLnB1c2goYyk7YS5lbnRlcihjLGUucGFyZW50KCksZSl9KX0pfSl9fX1dLEJkPXZhKHt0cmFuc2NsdWRlOlwiZWxlbWVudFwiLHByaW9yaXR5OjgwMCxyZXF1aXJlOlwiXm5nU3dpdGNoXCIsXG5saW5rOmZ1bmN0aW9uKGEsYyxkLGUsZyl7ZS5jYXNlc1tcIiFcIitkLm5nU3dpdGNoV2hlbl09ZS5jYXNlc1tcIiFcIitkLm5nU3dpdGNoV2hlbl18fFtdO2UuY2FzZXNbXCIhXCIrZC5uZ1N3aXRjaFdoZW5dLnB1c2goe3RyYW5zY2x1ZGU6ZyxlbGVtZW50OmN9KX19KSxDZD12YSh7dHJhbnNjbHVkZTpcImVsZW1lbnRcIixwcmlvcml0eTo4MDAscmVxdWlyZTpcIl5uZ1N3aXRjaFwiLGxpbms6ZnVuY3Rpb24oYSxjLGQsZSxnKXtlLmNhc2VzW1wiP1wiXT1lLmNhc2VzW1wiP1wiXXx8W107ZS5jYXNlc1tcIj9cIl0ucHVzaCh7dHJhbnNjbHVkZTpnLGVsZW1lbnQ6Y30pfX0pLEVkPXZhKHtsaW5rOmZ1bmN0aW9uKGEsYyxkLGUsZyl7aWYoIWcpdGhyb3cgdChcIm5nVHJhbnNjbHVkZVwiKShcIm9ycGhhblwiLGhhKGMpKTtnKGZ1bmN0aW9uKGEpe2MuZW1wdHkoKTtjLmFwcGVuZChhKX0pfX0pLGVkPVtcIiR0ZW1wbGF0ZUNhY2hlXCIsZnVuY3Rpb24oYSl7cmV0dXJue3Jlc3RyaWN0OlwiRVwiLHRlcm1pbmFsOiEwLGNvbXBpbGU6ZnVuY3Rpb24oYyxcbmQpe1widGV4dC9uZy10ZW1wbGF0ZVwiPT1kLnR5cGUmJmEucHV0KGQuaWQsY1swXS50ZXh0KX19fV0sVGU9dChcIm5nT3B0aW9uc1wiKSxEZD1hYSh7dGVybWluYWw6ITB9KSxmZD1bXCIkY29tcGlsZVwiLFwiJHBhcnNlXCIsZnVuY3Rpb24oYSxjKXt2YXIgZD0vXlxccyooW1xcc1xcU10rPykoPzpcXHMrYXNcXHMrKFtcXHNcXFNdKz8pKT8oPzpcXHMrZ3JvdXBcXHMrYnlcXHMrKFtcXHNcXFNdKz8pKT9cXHMrZm9yXFxzKyg/OihbXFwkXFx3XVtcXCRcXHddKil8KD86XFwoXFxzKihbXFwkXFx3XVtcXCRcXHddKilcXHMqLFxccyooW1xcJFxcd11bXFwkXFx3XSopXFxzKlxcKSkpXFxzK2luXFxzKyhbXFxzXFxTXSs/KSg/Olxccyt0cmFja1xccytieVxccysoW1xcc1xcU10rPykpPyQvLGU9eyRzZXRWaWV3VmFsdWU6Q307cmV0dXJue3Jlc3RyaWN0OlwiRVwiLHJlcXVpcmU6W1wic2VsZWN0XCIsXCI/bmdNb2RlbFwiXSxjb250cm9sbGVyOltcIiRlbGVtZW50XCIsXCIkc2NvcGVcIixcIiRhdHRyc1wiLGZ1bmN0aW9uKGEsYyxkKXt2YXIgbD10aGlzLGs9e30sbT1lLG47bC5kYXRhYm91bmQ9XG5kLm5nTW9kZWw7bC5pbml0PWZ1bmN0aW9uKGEsYyxkKXttPWE7bj1kfTtsLmFkZE9wdGlvbj1mdW5jdGlvbihjKXtBYShjLCdcIm9wdGlvbiB2YWx1ZVwiJyk7a1tjXT0hMDttLiR2aWV3VmFsdWU9PWMmJihhLnZhbChjKSxuLnBhcmVudCgpJiZuLnJlbW92ZSgpKX07bC5yZW1vdmVPcHRpb249ZnVuY3Rpb24oYSl7dGhpcy5oYXNPcHRpb24oYSkmJihkZWxldGUga1thXSxtLiR2aWV3VmFsdWU9PWEmJnRoaXMucmVuZGVyVW5rbm93bk9wdGlvbihhKSl9O2wucmVuZGVyVW5rbm93bk9wdGlvbj1mdW5jdGlvbihjKXtjPVwiPyBcIitJYShjKStcIiA/XCI7bi52YWwoYyk7YS5wcmVwZW5kKG4pO2EudmFsKGMpO24ucHJvcChcInNlbGVjdGVkXCIsITApfTtsLmhhc09wdGlvbj1mdW5jdGlvbihhKXtyZXR1cm4gay5oYXNPd25Qcm9wZXJ0eShhKX07Yy4kb24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7bC5yZW5kZXJVbmtub3duT3B0aW9uPUN9KX1dLGxpbms6ZnVuY3Rpb24oZSxmLGgsbCl7ZnVuY3Rpb24gayhhLFxuYyxkLGUpe2QuJHJlbmRlcj1mdW5jdGlvbigpe3ZhciBhPWQuJHZpZXdWYWx1ZTtlLmhhc09wdGlvbihhKT8oQS5wYXJlbnQoKSYmQS5yZW1vdmUoKSxjLnZhbChhKSxcIlwiPT09YSYmdy5wcm9wKFwic2VsZWN0ZWRcIiwhMCkpOkUoYSkmJnc/Yy52YWwoXCJcIik6ZS5yZW5kZXJVbmtub3duT3B0aW9uKGEpfTtjLm9uKFwiY2hhbmdlXCIsZnVuY3Rpb24oKXthLiRhcHBseShmdW5jdGlvbigpe0EucGFyZW50KCkmJkEucmVtb3ZlKCk7ZC4kc2V0Vmlld1ZhbHVlKGMudmFsKCkpfSl9KX1mdW5jdGlvbiBtKGEsYyxkKXt2YXIgZTtkLiRyZW5kZXI9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVmEoZC4kdmlld1ZhbHVlKTtxKGMuZmluZChcIm9wdGlvblwiKSxmdW5jdGlvbihjKXtjLnNlbGVjdGVkPUIoYS5nZXQoYy52YWx1ZSkpfSl9O2EuJHdhdGNoKGZ1bmN0aW9uKCl7eGEoZSxkLiR2aWV3VmFsdWUpfHwoZT1iYShkLiR2aWV3VmFsdWUpLGQuJHJlbmRlcigpKX0pO2Mub24oXCJjaGFuZ2VcIixmdW5jdGlvbigpe2EuJGFwcGx5KGZ1bmN0aW9uKCl7dmFyIGE9XG5bXTtxKGMuZmluZChcIm9wdGlvblwiKSxmdW5jdGlvbihjKXtjLnNlbGVjdGVkJiZhLnB1c2goYy52YWx1ZSl9KTtkLiRzZXRWaWV3VmFsdWUoYSl9KX0pfWZ1bmN0aW9uIG4oZSxmLGcpe2Z1bmN0aW9uIGgoKXt2YXIgYT17XCJcIjpbXX0sYz1bXCJcIl0sZCxrLHMsdCx6O3Q9Zy4kbW9kZWxWYWx1ZTt6PXkoZSl8fFtdO3ZhciBFPW4/UWIoeik6eixGLEksQTtJPXt9O3M9ITE7dmFyIEQsSDtpZihyKWlmKHcmJk0odCkpZm9yKHM9bmV3IFZhKFtdKSxBPTA7QTx0Lmxlbmd0aDtBKyspSVttXT10W0FdLHMucHV0KHcoZSxJKSx0W0FdKTtlbHNlIHM9bmV3IFZhKHQpO2ZvcihBPTA7Rj1FLmxlbmd0aCxBPEY7QSsrKXtrPUE7aWYobil7az1FW0FdO2lmKFwiJFwiPT09ay5jaGFyQXQoMCkpY29udGludWU7SVtuXT1rfUlbbV09eltrXTtkPXAoZSxJKXx8XCJcIjsoaz1hW2RdKXx8KGs9YVtkXT1bXSxjLnB1c2goZCkpO3I/ZD1CKHMucmVtb3ZlKHc/dyhlLEkpOnEoZSxJKSkpOih3PyhkPXt9LGRbbV09dCxkPVxudyhlLGQpPT09dyhlLEkpKTpkPXQ9PT1xKGUsSSkscz1zfHxkKTtEPWwoZSxJKTtEPUIoRCk/RDpcIlwiO2sucHVzaCh7aWQ6dz93KGUsSSk6bj9FW0FdOkEsbGFiZWw6RCxzZWxlY3RlZDpkfSl9cnx8KHV8fG51bGw9PT10P2FbXCJcIl0udW5zaGlmdCh7aWQ6XCJcIixsYWJlbDpcIlwiLHNlbGVjdGVkOiFzfSk6c3x8YVtcIlwiXS51bnNoaWZ0KHtpZDpcIj9cIixsYWJlbDpcIlwiLHNlbGVjdGVkOiEwfSkpO0k9MDtmb3IoRT1jLmxlbmd0aDtJPEU7SSsrKXtkPWNbSV07az1hW2RdO3gubGVuZ3RoPD1JPyh0PXtlbGVtZW50OkMuY2xvbmUoKS5hdHRyKFwibGFiZWxcIixkKSxsYWJlbDprLmxhYmVsfSx6PVt0XSx4LnB1c2goeiksZi5hcHBlbmQodC5lbGVtZW50KSk6KHo9eFtJXSx0PXpbMF0sdC5sYWJlbCE9ZCYmdC5lbGVtZW50LmF0dHIoXCJsYWJlbFwiLHQubGFiZWw9ZCkpO0Q9bnVsbDtBPTA7Zm9yKEY9ay5sZW5ndGg7QTxGO0ErKylzPWtbQV0sKGQ9eltBKzFdKT8oRD1kLmVsZW1lbnQsZC5sYWJlbCE9PXMubGFiZWwmJlxuRC50ZXh0KGQubGFiZWw9cy5sYWJlbCksZC5pZCE9PXMuaWQmJkQudmFsKGQuaWQ9cy5pZCksZC5zZWxlY3RlZCE9PXMuc2VsZWN0ZWQmJkQucHJvcChcInNlbGVjdGVkXCIsZC5zZWxlY3RlZD1zLnNlbGVjdGVkKSk6KFwiXCI9PT1zLmlkJiZ1P0g9dTooSD12LmNsb25lKCkpLnZhbChzLmlkKS5hdHRyKFwic2VsZWN0ZWRcIixzLnNlbGVjdGVkKS50ZXh0KHMubGFiZWwpLHoucHVzaCh7ZWxlbWVudDpILGxhYmVsOnMubGFiZWwsaWQ6cy5pZCxzZWxlY3RlZDpzLnNlbGVjdGVkfSksRD9ELmFmdGVyKEgpOnQuZWxlbWVudC5hcHBlbmQoSCksRD1IKTtmb3IoQSsrO3oubGVuZ3RoPkE7KXoucG9wKCkuZWxlbWVudC5yZW1vdmUoKX1mb3IoO3gubGVuZ3RoPkk7KXgucG9wKClbMF0uZWxlbWVudC5yZW1vdmUoKX12YXIgaztpZighKGs9dC5tYXRjaChkKSkpdGhyb3cgVGUoXCJpZXhwXCIsdCxoYShmKSk7dmFyIGw9YyhrWzJdfHxrWzFdKSxtPWtbNF18fGtbNl0sbj1rWzVdLHA9YyhrWzNdfHxcIlwiKSxxPVxuYyhrWzJdP2tbMV06bSkseT1jKGtbN10pLHc9a1s4XT9jKGtbOF0pOm51bGwseD1bW3tlbGVtZW50OmYsbGFiZWw6XCJcIn1dXTt1JiYoYSh1KShlKSx1LnJlbW92ZUNsYXNzKFwibmctc2NvcGVcIiksdS5yZW1vdmUoKSk7Zi5lbXB0eSgpO2Yub24oXCJjaGFuZ2VcIixmdW5jdGlvbigpe2UuJGFwcGx5KGZ1bmN0aW9uKCl7dmFyIGEsYz15KGUpfHxbXSxkPXt9LGgsayxsLHAsdCx2LHU7aWYocilmb3Ioaz1bXSxwPTAsdj14Lmxlbmd0aDtwPHY7cCsrKWZvcihhPXhbcF0sbD0xLHQ9YS5sZW5ndGg7bDx0O2wrKyl7aWYoKGg9YVtsXS5lbGVtZW50KVswXS5zZWxlY3RlZCl7aD1oLnZhbCgpO24mJihkW25dPWgpO2lmKHcpZm9yKHU9MDt1PGMubGVuZ3RoJiYoZFttXT1jW3VdLHcoZSxkKSE9aCk7dSsrKTtlbHNlIGRbbV09Y1toXTtrLnB1c2gocShlLGQpKX19ZWxzZXtoPWYudmFsKCk7aWYoXCI/XCI9PWgpaz1zO2Vsc2UgaWYoXCJcIj09PWgpaz1udWxsO2Vsc2UgaWYodylmb3IodT0wO3U8Yy5sZW5ndGg7dSsrKXtpZihkW21dPVxuY1t1XSx3KGUsZCk9PWgpe2s9cShlLGQpO2JyZWFrfX1lbHNlIGRbbV09Y1toXSxuJiYoZFtuXT1oKSxrPXEoZSxkKTsxPHhbMF0ubGVuZ3RoJiZ4WzBdWzFdLmlkIT09aCYmKHhbMF1bMV0uc2VsZWN0ZWQ9ITEpfWcuJHNldFZpZXdWYWx1ZShrKX0pfSk7Zy4kcmVuZGVyPWg7ZS4kd2F0Y2goaCl9aWYobFsxXSl7dmFyIHA9bFswXTtsPWxbMV07dmFyIHI9aC5tdWx0aXBsZSx0PWgubmdPcHRpb25zLHU9ITEsdyx2PXkoVS5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpKSxDPXkoVS5jcmVhdGVFbGVtZW50KFwib3B0Z3JvdXBcIikpLEE9di5jbG9uZSgpO2g9MDtmb3IodmFyIHg9Zi5jaGlsZHJlbigpLEQ9eC5sZW5ndGg7aDxEO2grKylpZihcIlwiPT09eFtoXS52YWx1ZSl7dz11PXguZXEoaCk7YnJlYWt9cC5pbml0KGwsdSxBKTtyJiYobC4kaXNFbXB0eT1mdW5jdGlvbihhKXtyZXR1cm4hYXx8MD09PWEubGVuZ3RofSk7dD9uKGUsZixsKTpyP20oZSxmLGwpOmsoZSxmLGwscCl9fX19XSxoZD1bXCIkaW50ZXJwb2xhdGVcIixcbmZ1bmN0aW9uKGEpe3ZhciBjPXthZGRPcHRpb246QyxyZW1vdmVPcHRpb246Q307cmV0dXJue3Jlc3RyaWN0OlwiRVwiLHByaW9yaXR5OjEwMCxjb21waWxlOmZ1bmN0aW9uKGQsZSl7aWYoRShlLnZhbHVlKSl7dmFyIGc9YShkLnRleHQoKSwhMCk7Z3x8ZS4kc2V0KFwidmFsdWVcIixkLnRleHQoKSl9cmV0dXJuIGZ1bmN0aW9uKGEsZCxlKXt2YXIgaz1kLnBhcmVudCgpLG09ay5kYXRhKFwiJHNlbGVjdENvbnRyb2xsZXJcIil8fGsucGFyZW50KCkuZGF0YShcIiRzZWxlY3RDb250cm9sbGVyXCIpO20mJm0uZGF0YWJvdW5kP2QucHJvcChcInNlbGVjdGVkXCIsITEpOm09YztnP2EuJHdhdGNoKGcsZnVuY3Rpb24oYSxjKXtlLiRzZXQoXCJ2YWx1ZVwiLGEpO2EhPT1jJiZtLnJlbW92ZU9wdGlvbihjKTttLmFkZE9wdGlvbihhKX0pOm0uYWRkT3B0aW9uKGUudmFsdWUpO2Qub24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7bS5yZW1vdmVPcHRpb24oZS52YWx1ZSl9KX19fX1dLGdkPWFhKHtyZXN0cmljdDpcIkVcIixcbnRlcm1pbmFsOiEwfSk7Ty5hbmd1bGFyLmJvb3RzdHJhcD9jb25zb2xlLmxvZyhcIldBUk5JTkc6IFRyaWVkIHRvIGxvYWQgYW5ndWxhciBtb3JlIHRoYW4gb25jZS5cIik6KChHYT1PLmpRdWVyeSk/KHk9R2EsRChHYS5mbix7c2NvcGU6SmEuc2NvcGUsaXNvbGF0ZVNjb3BlOkphLmlzb2xhdGVTY29wZSxjb250cm9sbGVyOkphLmNvbnRyb2xsZXIsaW5qZWN0b3I6SmEuaW5qZWN0b3IsaW5oZXJpdGVkRGF0YTpKYS5pbmhlcml0ZWREYXRhfSksQWIoXCJyZW1vdmVcIiwhMCwhMCwhMSksQWIoXCJlbXB0eVwiLCExLCExLCExKSxBYihcImh0bWxcIiwhMSwhMSwhMCkpOnk9TixFYS5lbGVtZW50PXksWmMoRWEpLHkoVSkucmVhZHkoZnVuY3Rpb24oKXtXYyhVLCRiKX0pKX0pKHdpbmRvdyxkb2N1bWVudCk7IWFuZ3VsYXIuJCRjc3AoKSYmYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKFwiaGVhZFwiKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+QGNoYXJzZXQgXCJVVEYtOFwiO1tuZ1xcXFw6Y2xvYWtdLFtuZy1jbG9ha10sW2RhdGEtbmctY2xvYWtdLFt4LW5nLWNsb2FrXSwubmctY2xvYWssLngtbmctY2xvYWssLm5nLWhpZGV7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fW5nXFxcXDpmb3Jte2Rpc3BsYXk6YmxvY2s7fS5uZy1hbmltYXRlLWJsb2NrLXRyYW5zaXRpb25ze3RyYW5zaXRpb246MHMgYWxsIWltcG9ydGFudDstd2Via2l0LXRyYW5zaXRpb246MHMgYWxsIWltcG9ydGFudDt9PC9zdHlsZT4nKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuZ3VsYXIubWluLmpzLm1hcFxuIiwicmVxdWlyZShcIi4vYW5ndWxhci9hbmd1bGFyLm1pbi5qc1wiKTtcbnJlcXVpcmUoXCJhbmd1bGFyLWFuaW1hdGVcIik7XG5yZXF1aXJlKFwiLi9saWJzL3VpLWJvb3RzdHJhcC10cGxzLTAuMTEuMi5taW4uanNcIik7XG5yZXF1aXJlKFwiLi9saWJzL2FuZ3VsYXItdHJhbnNsYXRlLmpzXCIpO1xucmVxdWlyZShcIi4vbGlicy9hbmd1bGFyLXRyYW5zbGF0ZS1sb2FkZXItc3RhdGljLWZpbGVzLmpzXCIpO1xucmVxdWlyZShcIi4vbGlicy9wcm9taXNlLXRyYWNrZXIuanNcIik7XG5yZXF1aXJlKFwiLi9saWJzL3Byb21pc2UtdHJhY2tlci1odHRwLWludGVyY2VwdG9yLmpzXCIpO1xucmVxdWlyZShcIi4vbXVsdGlzZWxlY3QvbXVsdGlzZWxlY3QuanNcIik7XG5yZXF1aXJlKFwiLi9uYXZpZ2F0aW9uLWJsb2NrZXIvbmF2aWdhdGlvbi1ibG9ja2VyLmpzXCIpO1xucmVxdWlyZShcIi4vbGFuZ3VhZ2UtY2hhbmdlci9sYW5ndWFnZS1jaGFuZ2VyLmpzXCIpO1xucmVxdWlyZShcIi4vdGFicy9mb3JtLXRhYnMuanNcIik7XG5yZXF1aXJlKFwiLi91dGlscy91dGlscy5qc1wiKTtcbnJlcXVpcmUoXCIuL2Vycm9yLW1hcHBlci9lcnJvci1tYXBwZXIuanNcIik7XG5yZXF1aXJlKFwiLi9hbmd1bGFyLWVsYXN0aWMvZWxhc3RpYy5qc1wiKTtcbnJlcXVpcmUoXCIuL29yZGVyLW9iamVjdC1ieS9uZy1vcmRlci1vYmplY3QtYnkuanNcIik7XG5yZXF1aXJlKFwiLi9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLmpzXCIpO1xucmVxdWlyZShcIi4vbGlicy91aS1oYW5kc29udGFibGUuanNcIik7XG5yZXF1aXJlKFwiLi9saWJzL251bWVyYWwuZGUtZGUuanNcIik7XG5yZXF1aXJlKFwiLi9hbmd1bGFyLWFwcC5qc1wiKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBhcmdvYWF2YSBvbiAxMy4wNS4xNC5cclxuICovXHJcblxyXG5hbmd1bGFyLm1vZHVsZSgndWkuZXJyb3JNYXBwZXInLCBbXSlcclxuICAgIC5zZXJ2aWNlKCdlcnJvck1hcHBlclNlcnZpY2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmVycm9yTWFwcGluZ3MgPSB7XHJcbiAgICAgICAgICAgIFwicmVxdWlyZWRcIiA6IFwiVGhpcyBpcyBhIHJlcXVpcmVkIGZpZWxkXCIsXHJcbiAgICAgICAgICAgIFwicGF0dGVybl9kZWNpbWFsXCIgOiBcIlBsZWFzZSBwcm92aWRlIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiAwXCIsXHJcbiAgICAgICAgICAgIFwicGF0dGVybl9pbnRlZ2VyXCIgOiBcIlBsZWFzZSBwcm92aWRlIGEgd2hvbGUgbnVtYmVyIGdyZWF0ZXIgdGhhbiAwXCIsXHJcbiAgICAgICAgICAgIFwicGF0dGVybl90ZWxlcGhvbmVcIiA6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgdGVsZXBob25lIG51bWJlciAoYXQgbGVhc3QgNyBkaWdpdHMpXCIsXHJcbiAgICAgICAgICAgIFwicGF0dGVybl9lbWFpbFwiIDogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzXCIsXHJcbiAgICAgICAgICAgIFwicGF0dGVybl91cmxcIiA6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgVVJMXCIsXHJcbiAgICAgICAgICAgIFwicGF0dGVybl9sb25naXR1ZGVcIiA6IFwiUGxlYXNlIGVudGVyIG51bWJlciBiZXR3ZWVuIC0xODAgYW5kIDE4MCBcIixcclxuICAgICAgICAgICAgXCJwYXR0ZXJuX2xhdGl0dWRlXCIgOiBcIlBsZWFzZSBlbnRlciBudW1iZXIgYmV0d2VlbiAtOTAgYW5kIDkwXCJ9O1xyXG5cclxuICAgICAgICB0aGlzLmdldEVycm9yTWFwcGluZ3MgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JNYXBwaW5ncztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYWRkRXJyb3JNYXBwaW5nID0gZnVuY3Rpb24oa2V5LCBtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JNYXBwaW5nc1trZXldID0gbWVzc2FnZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0RXJyb3JNYXBwaW5ncyA9IGZ1bmN0aW9uKGVycm9yTWFwcGluZ3MpIHtcclxuICAgICAgICAgICAgdGhpcy5lcnJvck1hcHBpbmdzID0gZXJyb3JNYXBwaW5ncztcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgLmNvbnRyb2xsZXIoXCJFcnJvckNvbnRyb2xsZXJcIiwgZnVuY3Rpb24gKCRzY29wZSwgZXJyb3JNYXBwZXJTZXJ2aWNlKSB7XHJcblxyXG4gICAgICAgICRzY29wZS5lcnJvck1hcHBpbmdzID0gZXJyb3JNYXBwZXJTZXJ2aWNlLmdldEVycm9yTWFwcGluZ3MoKTtcclxuICAgICAgICAkc2NvcGUuc2hvd0N1cnJlbnRFcnJvciA9IGZhbHNlO1xyXG5cclxuICAgICAgICAkc2NvcGUuZ2V0RXJyb3JNZXNzYWdlID0gZnVuY3Rpb24oZXJyb3JDb2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkc2NvcGUuZXJyb3JNYXBwaW5nc1tlcnJvckNvZGVdO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5nZXRDb250cm9sbGVyID0gZnVuY3Rpb24oYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZXMud2F0Y2hWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdG9rZW5zID0gYXR0cmlidXRlcy53YXRjaFZpZXcuc3BsaXQoXCIuXCIpO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gJHNjb3BlO1xyXG4gICAgICAgICAgICB3aGlsZSh0b2tlbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHRbdG9rZW5zLnNoaWZ0KCldO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5wYXJzZUVycm9ycyA9IGZ1bmN0aW9uKGN0cmwsIGF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgdmFyIGZpZWxkTmFtZUlkZW50aWZpZXIgPSAhYXR0cmlidXRlcy53YXRjaFZpZXc/IGF0dHJpYnV0ZXMuZXJyb3JNYXBwZXIgOiBhdHRyaWJ1dGVzLndhdGNoVmlldztcclxuICAgICAgICAgICAgdmFyIG5hbWVUb2tlbnMgPSBmaWVsZE5hbWVJZGVudGlmaWVyLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gbmFtZVRva2Vuc1sxXTtcclxuXHJcbiAgICAgICAgICAgIHZhciBmaWVsZENvbnRyb2xsZXIgPSAhY3RybFtuYW1lXT8gJHNjb3BlLmdldENvbnRyb2xsZXIoYXR0cmlidXRlcykgOiBjdHJsW25hbWVdO1xyXG4gICAgICAgICAgICBpZiAoIWZpZWxkQ29udHJvbGxlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGVzLnJhZGlvQnV0dG9uVmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJpbnB1dCBmaWVsZCBjb250cm9sbGVyIG5vdCBmb3VuZCBmb3IgXCIgKyBhdHRyaWJ1dGVzLmVycm9yTWFwcGVyKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGlvQnV0dG9uVmFsdWVzID0gSlNPTi5wYXJzZShhdHRyaWJ1dGVzLnJhZGlvQnV0dG9uVmFsdWVzKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0N1cnJlbnRFcnJvciA9ICFyYWRpb0J1dHRvblZhbHVlcy52YWx1ZSAmJiAkc2NvcGUuc3VibWl0dGVkICYmIHJhZGlvQnV0dG9uVmFsdWVzLnJlcXVpcmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXJyZW50RXJyb3JDb2RlID0gJ3JlcXVpcmVkJztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBjb250cm9sbGVyRXJyb3JzID0gZmllbGRDb250cm9sbGVyLiRlcnJvcjtcclxuICAgICAgICAgICAgaWYgKCAhYXR0cmlidXRlcy5lcnJvcnNUb1Nob3cpIHJldHVybjtcclxuICAgICAgICAgICAgdmFyIGVycm9yc1RvU2hvd0FzQXJyYXkgPSBKU09OLnBhcnNlKGF0dHJpYnV0ZXMuZXJyb3JzVG9TaG93KTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXJyb3JzVG9TaG93QXNBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNwbGl0RXJyb3JTdHJpbmcgPSBlcnJvcnNUb1Nob3dBc0FycmF5W2ldLnNwbGl0KCdfJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RyaXBwZWRFcnJvclN0cmluZyA9IHNwbGl0RXJyb3JTdHJpbmdbMF07XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlckVycm9yc1tzdHJpcHBlZEVycm9yU3RyaW5nXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93Q3VycmVudEVycm9yID0gJHNjb3BlLnNob3dFcnJvcihmaWVsZENvbnRyb2xsZXIsIHN0cmlwcGVkRXJyb3JTdHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXJyZW50RXJyb3JDb2RlID0gZXJyb3JzVG9TaG93QXNBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dDdXJyZW50RXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJHNjb3BlLnNob3dFcnJvciA9IGZ1bmN0aW9uKG1vZGVsQ29udHJvbGxlciwgZXJyb3JDb2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoJHNjb3BlLnN1Ym1pdHRlZCB8fCBtb2RlbENvbnRyb2xsZXIuJGRpcnR5KSAmJiBtb2RlbENvbnRyb2xsZXIuJGVycm9yW2Vycm9yQ29kZV0gJiYgbW9kZWxDb250cm9sbGVyLiRpbnZhbGlkO1xyXG4gICAgICAgIH07XHJcbiAgICB9KVxyXG5cclxuICAgIC8vIEVycm9yIG1hcHBlciBkaXJlY3RpdmUgdG8gc2ltcGxpZnkgc2hvd2luZyBlcnJvcnMgZm9yIGlucHV0IGZpZWxkcyBhbmQgZ2V0IHJpZCBvZiBzb21lXHJcbiAgICAvLyBib2lsZXJwbGF0ZSBjb2RlLlxyXG4gICAgLy9cclxuICAgIC8vIFVzYWdlOlxyXG4gICAgLy9cclxuICAgIC8vIDxpbnB1dCBuYW1lPVwiTW9uZXlcIiBuZy1tb2RlbD1cImluc3RhbmNlLk1NUkFydGljbGUxN1F1ZXN0aW9ubmFpcmUuVGFibGUxLk1vbmV5XCIgdHlwZT1cInRleHRcIlxyXG4gICAgLy8gICAgICBuZy1wYXR0ZXJuPVwiZGVjaW1hbE51bWJlclBhdHRlcm5cIiByZXF1aXJlZC8+XHJcbiAgICAvLyA8ZGl2IGNsYXNzPVwiaW52YWxpZC1tc2dcIiB0ZC1lcnJvci1tYXBwZXIgd2F0Y2gtZWxlbWVudHM9J1tcIlRhYmxlMS5PdGhlckRlc2NyaXB0aW9uXCJdJ1xyXG4gICAgLy8gICAgICB3YXRjaC12aWV3PVwiRm9ybS5JbnB1dE5hbWVcIiBlcnJvcnMtdG8tc2hvdz0nW1wicmVxdWlyZWRcIiwgXCJwYXR0ZXJuX2RlY2ltYWxcIl0nPjwvZGl2PlxyXG4gICAgLy8gLi4uXHJcbiAgICAvLyBXaGVyZSA8ZGl2PiB3aXRoICd0ZC1lcnJvci1tYXBwZXInIGF0dHJpYnV0ZSBpcyB1c2VkIGFzIGVycm9yIGRpdiBhbmQgYWxsIGZ1bmN0aW9uYWxpdHkgaXMgYXBwbGllZC5cclxuICAgIC8vXHJcbiAgICAvLyBDb25maWd1cmF0aW9uIHBhcmFtZXRlcnM6XHJcbiAgICAvLyB0ZC1lcnJvci1tYXBwZXIgLSBpZGVudGlmaWVyIGZvciBlcnJvciBtYXBwZXIgYW5kIHNjb3BlIHBhcmFtZXRlciB3YXRjaGVyIGUuZyB0ZC1lcnJvci1tYXBwZXI9XCJ1c2VyTmFtZVwiLiBXaGVuZXZlclxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgJHNjb3BlLnVzZXJOYW1lIGNoYW5nZXMgaXQgaXMgcGlja2VkIHVwIGJ5IG1hcHBlciBhbmQgY29ycmVjdCBlcnJvciBpcyBzaG93biB3aGVuIGlkZW50aWZpZWQuXHJcbiAgICAvLyB3YXRjaC12aWV3ICAgICAgLSBVc2VkIHRvIHdhdGNoIHZpZXcgdmFsdWUgb2YgdGhlIGZpZWxkLiBVc2VmdWwgZm9yIHdhdGNoaW5nIG51bWJlciBmaWVsZHMgZXRjLiB3aGVuIGFjdHVhbCBzY29wZVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgdmFsdWUgZG9lcyBub3QgY2hhbmdlIG9uIGludmFsaWQgZmllbGQgdmFsdWUuXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICBTaG91bGQgYmUgdXNlZCBhcyB7Rm9ybU5hbWV9LntJbnB1dE5hbWV9IHNvIElucHV0TmFtZSBjYW4gYmUgZXh0cmFjdGVkIHRvIGdldCBjb3JyZWN0IGNvbnRyb2xsZXIuXHJcbiAgICAvLyB3YXRjaC1lbGVtZW50cyAgLSBBcnJheSBvZiBzdHJpbmcgdGhhdCBpcyBwYXJzZWQgYW5kIHJlZ2lzdGVyZWQgZm9yIHdhdGNoaW5nLiBXaGVuZXZlciAnVGFibGUxLk90aGVyRGVzY3JpcHRpb24nXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICBjaGFuZ2VzIHRoZW4gcGFyc2UgZnVuY3Rpb24gaXMgY2FsbGVkIGFuZCBjb3JyZWN0IGVycm9ycyBzaG93IGZvciBjdXJyZW50IGlucHV0LlxyXG4gICAgLy8gZXJyb3JzLXRvLXNob3cgIC0gRXJyb3JzIHRvIGJlIHNob3duIGFzIGFycmF5LiBUaGlzIHN0cmluZyBpcyBwYXJzZWQgYW5kIGVycm9ycyBhcmUgc2hvd24gaW4gdGhlIHNhbWUgb3JkZXJcclxuICAgIC8vICAgICAgICAgICAgICAgICAgIGFzIGFycmF5LiBOYW1lcyBjYW4gYmUgdXNlZCBmb3IgZGlmZmVyZW50IGtpbmQgb2YgbWVzc2FnZXMgYXMgZm9sbG93cyBlLmcgXCJwYXR0ZXJuX2RlY2ltYWxcIlxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgbWVhbnMgZXJyb3IgdHlwZSBpcyBwYXR0ZXJuIGFuZCBtZXNzYWdlIHR5cGUgZGVjaW1hbC4gRmlyc3QgcGFydCBpcyBleHRyYWN0ZWQgdXNlZCB0b2dldGhlciB3aXRoXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICBhbmd1bGFyIG5nLXBhdHRlcm4gZGlyZWN0aXZlIHRvIGdldCBjb3JyZWN0IHJlc3VsdC5cclxuICAgIC5kaXJlY3RpdmUoJ2Vycm9yTWFwcGVyJyxmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgICAgICAgcmVxdWlyZTogJz9eZm9ybScsXHJcbiAgICAgICAgICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnRXJyb3JDb250cm9sbGVyJyxcclxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8c3BhbiBuZy1zaG93PVxcXCJzaG93Q3VycmVudEVycm9yXFxcIj57e2dldEVycm9yTWVzc2FnZShjdXJyZW50RXJyb3JDb2RlKX19PC9zcGFuPicsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFhdHRycy53YXRjaFZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goYXR0cnMuZXJyb3JNYXBwZXIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5wYXJzZUVycm9ycyhjdHJsLCBhdHRycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChhdHRycy53YXRjaFZpZXcgKyBcIi4kdmlld1ZhbHVlXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5wYXJzZUVycm9ycyhjdHJsLCBhdHRycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKCdzdWJtaXR0ZWQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBzY29wZS5wYXJzZUVycm9ycyhjdHJsLCBhdHRycyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL0ZvciB3YXRjaGluZyBvdGhlciB2YWx1ZXMgdGhhdCB0aGlzIGVycm9yIGRlcGVuZHMgb25cclxuICAgICAgICAgICAgICAgIGlmIChhdHRycy53YXRjaEVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdhdGNoQXJyYXkgPSBKU09OLnBhcnNlKGF0dHJzLndhdGNoRWxlbWVudHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd2F0Y2hBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2god2F0Y2hBcnJheVtpXSArIFwiLiR2aWV3VmFsdWVcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5wYXJzZUVycm9ycyhjdHJsLCBhdHRycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KSIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGFyZ29hYXZhIG9uIDIyLjA0LjE0LlxyXG4gKi9cclxuXHJcbi8vIE1vZHVsZSB0aGF0IHByb3ZpZGVzIGxhbmd1YWdlIGNoYW5naW5nIGZ1bmN0aW9uYWxpdHkgdG8gd2ViZm9ybS5cclxuLy9cclxuLy8gTW9kdWxlIG5lZWRzIGNvbmZpZ3VyYXRpb24gYW5kIDxkaXYgdGQtbGFuZ3VhZ2UtY2hhbmdlcj48L2Rpdj4gb3IgPHRkLWxhbmd1YWdlLWNoYW5nZXIvPiB0YWdzLlxyXG4vLyB0ZC1sYW5ndWFnZS1jaGFuZ2VyIGNvbXBvbmVudCBpcyByZXBsYWNlZCB3aXRoIGxhbmd1YWdlIHNlbGVjdCBpbnB1dCB0aGF0IGlzIGNvbmZpZ3VyZWQgdG8gdXNlXHJcbi8vIHByZS1jb25maWd1cmVkIHZhbHVlcy5cclxuLy9cclxuLy8gRXhhbXBsZSBjb25maWd1cmF0aW9uIG9mIGxhbmd1YWdlQ2hhbmdlclxyXG4vL1xyXG4vLyBhcHAuY29uZmlnKFtcImxhbmd1YWdlQ2hhbmdlclByb3ZpZGVyXCIsIGZ1bmN0aW9uKGxhbmd1YWdlQ2hhbmdlclByb3ZpZGVyKSB7XHJcbi8vICAgIGxhbmd1YWdlQ2hhbmdlclByb3ZpZGVyLnNldERlZmF1bHRMYW5ndWFnZSgnZW4nKTtcclxuLy8gICAgbGFuZ3VhZ2VDaGFuZ2VyUHJvdmlkZXIuc2V0TGFuZ3VhZ2VGaWxlUHJlZml4KCdlbi1sYWJlbHMtJyk7XHJcbi8vICAgIGxhbmd1YWdlQ2hhbmdlclByb3ZpZGVyLnNldEF2YWlsYWJsZUxhbmd1YWdlcyh7XCJpdGVtXCIgOlt7XHJcbi8vICAgICAgICBcImNvZGVcIjogXCJiZ1wiLFxyXG4vLyAgICAgICAgXCJsYWJlbFwiOiBcItCR0YrQu9Cz0LDRgNGB0LrQuCAoYmcpXCJ9LCB7XHJcbi8vICAgICAgICBcImNvZGVcIjogXCJjc1wiLFxyXG4vLyAgICAgICAgXCJsYWJlbFwiOiBcIsSNZcWhdGluYSAoY3MpXCJ9LCB7XHJcbi8vICAgICAgICBcImNvZGVcIjogXCJoclwiLFxyXG4vLyAgICAgICAgXCJsYWJlbFwiOiBcIkhydmF0c2tpIChocilcIn0sIHtcclxuLy8gICAgICAgIFwiY29kZVwiOiBcImRhXCIsXHJcbi8vICAgICAgICBcImxhYmVsXCI6IFwiRGFuc2sgKGRhKVwifSwge1xyXG4vLyAgICAgICAgXCJjb2RlXCI6IFwibmxcIixcclxuLy8gICAgICAgIFwibGFiZWxcIjogXCJOZWRlcmxhbmRzIChubClcIn0sIHtcclxuLy8gICAgICAgIFwiY29kZVwiOiBcImVsXCIsXHJcbi8vICAgICAgICBcImxhYmVsXCI6IFwizrXOu867zrfOvc65zrrOrCAoZWwpXCJ9LCB7XHJcbi8vICAgICAgICBcImNvZGVcIjogXCJlblwiLFxyXG4vLyAgICAgICAgXCJsYWJlbFwiOiBcIkVuZ2xpc2ggKGVuKVwifSwge1xyXG4vLyAgICAgICAgXCJjb2RlXCI6IFwiZXRcIixcclxuLy8gICAgICAgIFwibGFiZWxcIjogXCJFZXN0aSAoZXQpXCJ9LCB7XHJcbi8vICAgICAgICBcImNvZGVcIjogXCJmaVwiLFxyXG4vLyAgICAgICAgXCJsYWJlbFwiOiBcIlN1b21pIChmaSlcIn0sIHtcclxuLy8gICAgICAgIFwiY29kZVwiOiBcImZyXCIsXHJcbi8vICAgICAgICBcImxhYmVsXCI6IFwiRnJhbsOnYWlzIChmcilcIn0sIHtcclxuLy8gICAgICAgIFwiY29kZVwiOiBcImRlXCIsXHJcbi8vICAgICAgICBcImxhYmVsXCI6IFwiRGV1dHNjaCAoZGUpXCJ9LCB7XHJcbi8vICAgICAgICBcImNvZGVcIjogXCJodVwiLFxyXG4vLyAgICAgICAgXCJsYWJlbFwiOiBcIk1hZ3lhciAoaHUpXCJ9LCB7XHJcbi8vICAgICAgICBcImNvZGVcIjogXCJpc1wiLFxyXG4vLyAgICAgICAgXCJsYWJlbFwiOiBcIsONc2xlbnNrYSAoaXMpXCJ9LCB7XHJcbi8vICAgICAgICBcImNvZGVcIjogXCJpdFwiLFxyXG4vLyAgICAgICAgXCJsYWJlbFwiOiBcIkl0YWxpYW5vIChpdClcIn0sIHtcclxuLy8gICAgICAgIFwiY29kZVwiOiBcImx2XCIsXHJcbi8vICAgICAgICBcImxhYmVsXCI6IFwiTGF0dmllxaF1IChsdilcIn0sIHtcclxuLy8gICAgICAgIFwiY29kZVwiOiBcImx0XCIsXHJcbi8vICAgICAgICBcImxhYmVsXCI6IFwiTGlldHV2acWzIChsdClcIn0sIHtcclxuLy8gICAgICAgIFwiY29kZVwiOiBcIm10XCIsXHJcbi8vICAgICAgICBcImxhYmVsXCI6IFwiTWFsdGkgKG10KVwifSwge1xyXG4vLyAgICAgICAgXCJjb2RlXCI6IFwibm9cIixcclxuLy8gICAgICAgIFwibGFiZWxcIjogXCJOb3JzayAobm8pXCJ9LCB7XHJcbi8vICAgICAgICBcImNvZGVcIjogXCJwbFwiLFxyXG4vLyAgICAgICAgXCJsYWJlbFwiOiBcIlBvbHNraSAocGwpXCJ9LCB7XHJcbi8vICAgICAgICBcImNvZGVcIjogXCJwdFwiLFxyXG4vLyAgICAgICAgXCJsYWJlbFwiOiBcIlBvcnR1Z3XDqnMgKHB0KVwifSwge1xyXG4vLyAgICAgICAgXCJjb2RlXCI6IFwicm9cIixcclxuLy8gICAgICAgIFwibGFiZWxcIjogXCJSb23Dom7EgyAocm8pXCJ9LCB7XHJcbi8vICAgICAgICBcImNvZGVcIjogXCJza1wiLFxyXG4vLyAgICAgICAgXCJsYWJlbFwiOiBcIlNsb3ZlbsSNaW5hIChzaylcIn0sIHtcclxuLy8gICAgICAgIFwiY29kZVwiOiBcInNsXCIsXHJcbi8vICAgICAgICBcImxhYmVsXCI6IFwiU2xvdmVuxaHEjWluYSAoc2wpXCJ9LCB7XHJcbi8vICAgICAgICBcImNvZGVcIjogXCJlc1wiLFxyXG4vLyAgICAgICAgXCJsYWJlbFwiOiBcIkVzcGHDsW9sIChlcylcIn0sIHtcclxuLy8gICAgICAgIFwiY29kZVwiOiBcInN2XCIsXHJcbi8vICAgICAgICBcImxhYmVsXCI6IFwiU3ZlbnNrYSAoc3YpXCJ9LCB7XHJcbi8vICAgICAgICBcImNvZGVcIjogXCJ0clwiLFxyXG4vLyAgICAgICAgXCJsYWJlbFwiOiBcIlTDvHJrw6dlICh0cilcIn1dfSlcclxuLy99XSk7XHJcblxyXG5cclxuYW5ndWxhci5tb2R1bGUoJ3RyYW5zbGF0ZS5sYW5ndWFnZUNoYW5nZXInLCBbJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnXSlcclxuICAgIC5mYWN0b3J5KCdjdXN0b21Mb2FkZXInLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJGh0dHAsICRxLCBsYW5ndWFnZUNoYW5nZXIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghbGFuZ3VhZ2VDaGFuZ2VyLmdldExhbmd1YWdlRmlsZVByZWZpeCgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMYW5ndWFnZSBmaWxlIHByZWZpeCBtdXN0IGJlIGRlZmluZWQgd2hlbiB1c2luZyBsYW5ndWFnZUNoYW5nZXIgY29tcG9uZW50LlwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGxhbmd1YWdlVXJsID0gbGFuZ3VhZ2VDaGFuZ2VyLmdldExhbmd1YWdlRmlsZVByZWZpeCgpICsgb3B0aW9ucy5rZXkgKyAnLnhtbD9mb3JtYXQ9anNvbic7XHJcblxyXG4gICAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6J0dFVCcsXHJcbiAgICAgICAgICAgICAgICB1cmw6IGxhbmd1YWdlVXJsXHJcbiAgICAgICAgICAgIH0sIHt0cmFja2VyIDogJHJvb3RTY29wZS5sb2FkaW5nVHJhY2tlcn0pXHJcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YS5sYWJlbHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoJ2xhYmVsLScgKyBvcHRpb25zLmtleSArICcuanNvbicgKycgc3VjY2VzcycpO1xyXG4gICAgICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChvcHRpb25zLmtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9hbGVydCgnbGFiZWwtJyArIG9wdGlvbnMua2V5ICsgJy5qc29uJyArJyBlcnJvcicpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvL2FsZXJ0KG9wdGlvbnMua2V5KTtcclxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICAucHJvdmlkZXIoJ2xhbmd1YWdlQ2hhbmdlcicsIGZ1bmN0aW9uIGxhbmd1YWdlQ2hhbmdlclByb3ZpZGVyKCkge1xyXG5cclxuICAgICAgICB0aGlzLmN1cnJlbnRMYW5ndWFnZSA9ICdlbic7XHJcbiAgICAgICAgdGhpcy5hdmFpbGFibGVMYW5ndWFnZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmxhbmd1YWdlRmlsZVByZWZpeCA9ICcnO1xyXG5cclxuICAgICAgICB0aGlzLnNldERlZmF1bHRMYW5ndWFnZSA9IGZ1bmN0aW9uKGRlZmF1bHRMYW5ndWFnZSkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRMYW5ndWFnZSA9IGRlZmF1bHRMYW5ndWFnZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnNldExhbmd1YWdlRmlsZVByZWZpeCA9IGZ1bmN0aW9uKHByZWZpeCkge1xyXG4gICAgICAgICAgICB0aGlzLmxhbmd1YWdlRmlsZVByZWZpeCA9IHByZWZpeDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnNldEF2YWlsYWJsZUxhbmd1YWdlcyA9IGZ1bmN0aW9uKGF2YWlsYWJsZUxhbmd1YWdlcykge1xyXG4gICAgICAgICAgICB0aGlzLmF2YWlsYWJsZUxhbmd1YWdlcyA9IGF2YWlsYWJsZUxhbmd1YWdlcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGF2YWlsYWJsZUxhbmd1YWdlcyA9IHRoaXMuYXZhaWxhYmxlTGFuZ3VhZ2VzO1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudExhbmd1YWdlID0gdGhpcy5jdXJyZW50TGFuZ3VhZ2U7XHJcbiAgICAgICAgICAgIHZhciBwcmVmaXggPSB0aGlzLmxhbmd1YWdlRmlsZVByZWZpeDtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGdldExhbmd1YWdlIDogZnVuY3Rpb24oKSB7cmV0dXJuIGN1cnJlbnRMYW5ndWFnZTt9LFxyXG4gICAgICAgICAgICAgICAgc2V0TGFuZ3VhZ2UgOiBmdW5jdGlvbihuZXdMYW5ndWFnZSkge2N1cnJlbnRMYW5ndWFnZSA9IG5ld0xhbmd1YWdlO30sXHJcbiAgICAgICAgICAgICAgICBnZXRBdmFpbGFibGVMYW5ndWFnZXMgOiBmdW5jdGlvbigpIHtyZXR1cm4gYXZhaWxhYmxlTGFuZ3VhZ2VzO30sXHJcbiAgICAgICAgICAgICAgICBnZXRMYW5ndWFnZUZpbGVQcmVmaXggOiBmdW5jdGlvbigpIHtyZXR1cm4gcHJlZml4O31cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9KVxyXG5cclxuICAgIC5jb25maWcoIGZ1bmN0aW9uICgkdHJhbnNsYXRlUHJvdmlkZXIpIHtcclxuICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlTG9hZGVyKCdjdXN0b21Mb2FkZXInLCB7fSk7XHJcbiAgICAgICAgLy8gbG9hZCAnZW4nIHRhYmxlIG9uIHN0YXJ0dXBcclxuICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIucHJlZmVycmVkTGFuZ3VhZ2UoJ2VuJyk7XHJcbiAgICB9KVxyXG5cclxuICAgIC5jb250cm9sbGVyKCdMYW5ndWFnZUN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyR0cmFuc2xhdGUnLCAnbGFuZ3VhZ2VDaGFuZ2VyJywgJ2RhdGFSZXBvc2l0b3J5JywgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJHRyYW5zbGF0ZSwgbGFuZ3VhZ2VDaGFuZ2VyLCBkYXRhUmVwb3NpdG9yeSkge1xyXG5cclxuICAgICAgICAkc2NvcGUuY3VycmVudExhbmd1YWdlID0gbGFuZ3VhZ2VDaGFuZ2VyLmdldExhbmd1YWdlKCk7XHJcbiAgICAgICAgJHNjb3BlLmF2YWlsYWJsZUxhbmd1YWdlcyA9IGxhbmd1YWdlQ2hhbmdlci5nZXRBdmFpbGFibGVMYW5ndWFnZXMoKTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmNoYW5nZUxhbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxhbmd1YWdlQ2hhbmdlci5zZXRMYW5ndWFnZSgkc2NvcGUuY3VycmVudExhbmd1YWdlKVxyXG4gICAgICAgICAgICAkdHJhbnNsYXRlLnVzZShsYW5ndWFnZUNoYW5nZXIuZ2V0TGFuZ3VhZ2UoKSk7XHJcbiAgICAgICAgICAgIGRhdGFSZXBvc2l0b3J5LmxvYWRDb2RlTGlzdChsYW5ndWFnZUNoYW5nZXIuZ2V0TGFuZ3VhZ2UoKSk7XHJcbiAgICAgICAgICAgIGlmIChsYW5ndWFnZUNoYW5nZXIuZ2V0TGFuZ3VhZ2UoKSAhPSAkcm9vdFNjb3BlLmN1cnJlbnRMYW5ndWFnZSkge1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5jdXJyZW50TGFuZ3VhZ2UgPSBsYW5ndWFnZUNoYW5nZXIuZ2V0TGFuZ3VhZ2UoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkcm9vdFNjb3BlLiR3YXRjaCgnY3VycmVudExhbmd1YWdlJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICghbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICghb2xkVmFsdWUgfHwgKGxhbmd1YWdlQ2hhbmdlci5nZXRMYW5ndWFnZSgpICE9ICRyb290U2NvcGUuY3VycmVudExhbmd1YWdlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXJyZW50TGFuZ3VhZ2UgPSAkcm9vdFNjb3BlLmN1cnJlbnRMYW5ndWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hhbmdlTGFuZygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1dKVxyXG5cclxuICAgIC5kaXJlY3RpdmUoXCJsYW5ndWFnZUNoYW5nZXJcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdMYW5ndWFnZUN0cmwnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogXCI8ZGl2IG5nLXNob3c9XFxcImF2YWlsYWJsZUxhbmd1YWdlcy5pdGVtLmxlbmd0aCA+IDBcXFwiIGNsYXNzPVxcXCJzcGFuMlxcXCIgbmctY29udHJvbGxlcj1cXFwiTGFuZ3VhZ2VDdHJsXFxcIiBzdHlsZT1cXFwiZmxvYXQ6IHJpZ2h0O1xcXCI+PHNlbGVjdCBuYW1lPVxcXCJGb3JtTGFuZ3VhZ2VcXFwiIGNsYXNzPVxcXCJpbnB1dC1tZWRpdW1cXFwiIG5nLW1vZGVsPVxcXCJjdXJyZW50TGFuZ3VhZ2VcXFwiIG5nLW9wdGlvbnM9XFxcImxhbmd1YWdlLmNvZGUgYXMgbGFuZ3VhZ2UubGFiZWwgZm9yIGxhbmd1YWdlIGluIGF2YWlsYWJsZUxhbmd1YWdlcy5pdGVtXFxcIiBuZy1jaGFuZ2U9XFxcImNoYW5nZUxhbmcoKVxcXCI+PC9zZWxlY3Q+PC9kaXY+XCJcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4iLCJhbmd1bGFyLm1vZHVsZSgncGFzY2FscHJlY2h0LnRyYW5zbGF0ZScpLmZhY3RvcnkoJyR0cmFuc2xhdGVTdGF0aWNGaWxlc0xvYWRlcicsIFtcbiAgJyRxJyxcbiAgJyRodHRwJyxcbiAgZnVuY3Rpb24gKCRxLCAkaHR0cCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgaWYgKCFvcHRpb25zIHx8ICghYW5ndWxhci5pc1N0cmluZyhvcHRpb25zLnByZWZpeCkgfHwgIWFuZ3VsYXIuaXNTdHJpbmcob3B0aW9ucy5zdWZmaXgpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkblxcJ3QgbG9hZCBzdGF0aWMgZmlsZXMsIG5vIHByZWZpeCBvciBzdWZmaXggc3BlY2lmaWVkIScpO1xuICAgICAgfVxuICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwKHtcbiAgICAgICAgdXJsOiBbXG4gICAgICAgICAgb3B0aW9ucy5wcmVmaXgsXG4gICAgICAgICAgb3B0aW9ucy5rZXksXG4gICAgICAgICAgb3B0aW9ucy5zdWZmaXhcbiAgICAgICAgXS5qb2luKCcnKSxcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgcGFyYW1zOiAnJ1xuICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGRhdGEpO1xuICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgZGVmZXJyZWQucmVqZWN0KG9wdGlvbnMua2V5KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfTtcbiAgfVxuXSk7IiwiYW5ndWxhci5tb2R1bGUoJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnLCBbJ25nJ10pLnJ1bihbXG4gICckdHJhbnNsYXRlJyxcbiAgZnVuY3Rpb24gKCR0cmFuc2xhdGUpIHtcbiAgICB2YXIga2V5ID0gJHRyYW5zbGF0ZS5zdG9yYWdlS2V5KCksIHN0b3JhZ2UgPSAkdHJhbnNsYXRlLnN0b3JhZ2UoKTtcbiAgICBpZiAoc3RvcmFnZSkge1xuICAgICAgaWYgKCFzdG9yYWdlLmdldChrZXkpKSB7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKCR0cmFuc2xhdGUucHJlZmVycmVkTGFuZ3VhZ2UoKSkpIHtcbiAgICAgICAgICAkdHJhbnNsYXRlLnVzZSgkdHJhbnNsYXRlLnByZWZlcnJlZExhbmd1YWdlKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0b3JhZ2Uuc2V0KGtleSwgJHRyYW5zbGF0ZS51c2UoKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICR0cmFuc2xhdGUudXNlKHN0b3JhZ2UuZ2V0KGtleSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc1N0cmluZygkdHJhbnNsYXRlLnByZWZlcnJlZExhbmd1YWdlKCkpKSB7XG4gICAgICAkdHJhbnNsYXRlLnVzZSgkdHJhbnNsYXRlLnByZWZlcnJlZExhbmd1YWdlKCkpO1xuICAgIH1cbiAgfVxuXSk7XG5hbmd1bGFyLm1vZHVsZSgncGFzY2FscHJlY2h0LnRyYW5zbGF0ZScpLnByb3ZpZGVyKCckdHJhbnNsYXRlJywgW1xuICAnJFNUT1JBR0VfS0VZJyxcbiAgZnVuY3Rpb24gKCRTVE9SQUdFX0tFWSkge1xuICAgIHZhciAkdHJhbnNsYXRpb25UYWJsZSA9IHt9LCAkcHJlZmVycmVkTGFuZ3VhZ2UsICRhdmFpbGFibGVMYW5ndWFnZUtleXMgPSBbXSwgJGxhbmd1YWdlS2V5QWxpYXNlcywgJGZhbGxiYWNrTGFuZ3VhZ2UsICRmYWxsYmFja1dhc1N0cmluZywgJHVzZXMsICRuZXh0TGFuZywgJHN0b3JhZ2VGYWN0b3J5LCAkc3RvcmFnZUtleSA9ICRTVE9SQUdFX0tFWSwgJHN0b3JhZ2VQcmVmaXgsICRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSwgJGludGVycG9sYXRpb25GYWN0b3J5LCAkaW50ZXJwb2xhdG9yRmFjdG9yaWVzID0gW10sICRpbnRlcnBvbGF0aW9uU2FuaXRpemF0aW9uU3RyYXRlZ3kgPSBmYWxzZSwgJGxvYWRlckZhY3RvcnksICRjbG9ha0NsYXNzTmFtZSA9ICd0cmFuc2xhdGUtY2xvYWsnLCAkbG9hZGVyT3B0aW9ucywgJG5vdEZvdW5kSW5kaWNhdG9yTGVmdCwgJG5vdEZvdW5kSW5kaWNhdG9yUmlnaHQsICRwb3N0Q29tcGlsaW5nRW5hYmxlZCA9IGZhbHNlLCBORVNURURfT0JKRUNUX0RFTElNSVRFUiA9ICcuJztcbiAgICB2YXIgZ2V0TG9jYWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5hdiA9IHdpbmRvdy5uYXZpZ2F0b3I7XG4gICAgICByZXR1cm4gKG5hdi5sYW5ndWFnZSB8fCBuYXYuYnJvd3Nlckxhbmd1YWdlIHx8IG5hdi5zeXN0ZW1MYW5ndWFnZSB8fCBuYXYudXNlckxhbmd1YWdlIHx8ICcnKS5zcGxpdCgnLScpLmpvaW4oJ18nKTtcbiAgICB9O1xuICAgIHZhciBuZWdvdGlhdGVMb2NhbGUgPSBmdW5jdGlvbiAocHJlZmVycmVkKSB7XG4gICAgICB2YXIgYXZhaWwgPSBbXSwgbG9jYWxlID0gYW5ndWxhci5sb3dlcmNhc2UocHJlZmVycmVkKSwgaSA9IDAsIG4gPSAkYXZhaWxhYmxlTGFuZ3VhZ2VLZXlzLmxlbmd0aDtcbiAgICAgIGZvciAoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGF2YWlsLnB1c2goYW5ndWxhci5sb3dlcmNhc2UoJGF2YWlsYWJsZUxhbmd1YWdlS2V5c1tpXSkpO1xuICAgICAgfVxuICAgICAgaWYgKGF2YWlsLmluZGV4T2YobG9jYWxlKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICB9XG4gICAgICBpZiAoJGxhbmd1YWdlS2V5QWxpYXNlcykge1xuICAgICAgICBpZiAoJGxhbmd1YWdlS2V5QWxpYXNlc1twcmVmZXJyZWRdKSB7XG4gICAgICAgICAgdmFyIGFsaWFzID0gJGxhbmd1YWdlS2V5QWxpYXNlc1twcmVmZXJyZWRdO1xuICAgICAgICAgIGlmIChhdmFpbC5pbmRleE9mKGFuZ3VsYXIubG93ZXJjYXNlKGFsaWFzKSkgPiAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGFsaWFzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHBhcnRzID0gcHJlZmVycmVkLnNwbGl0KCdfJyk7XG4gICAgICBpZiAocGFydHMubGVuZ3RoID4gMSAmJiBhdmFpbC5pbmRleE9mKGFuZ3VsYXIubG93ZXJjYXNlKHBhcnRzWzBdKSkgPiAxKSB7XG4gICAgICAgIHJldHVybiBwYXJ0c1swXTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciB0cmFuc2xhdGlvbnMgPSBmdW5jdGlvbiAobGFuZ0tleSwgdHJhbnNsYXRpb25UYWJsZSkge1xuICAgICAgaWYgKCFsYW5nS2V5ICYmICF0cmFuc2xhdGlvblRhYmxlKSB7XG4gICAgICAgIHJldHVybiAkdHJhbnNsYXRpb25UYWJsZTtcbiAgICAgIH1cbiAgICAgIGlmIChsYW5nS2V5ICYmICF0cmFuc2xhdGlvblRhYmxlKSB7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGxhbmdLZXkpKSB7XG4gICAgICAgICAgcmV0dXJuICR0cmFuc2xhdGlvblRhYmxlW2xhbmdLZXldO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWFuZ3VsYXIuaXNPYmplY3QoJHRyYW5zbGF0aW9uVGFibGVbbGFuZ0tleV0pKSB7XG4gICAgICAgICAgJHRyYW5zbGF0aW9uVGFibGVbbGFuZ0tleV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBhbmd1bGFyLmV4dGVuZCgkdHJhbnNsYXRpb25UYWJsZVtsYW5nS2V5XSwgZmxhdE9iamVjdCh0cmFuc2xhdGlvblRhYmxlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHRoaXMudHJhbnNsYXRpb25zID0gdHJhbnNsYXRpb25zO1xuICAgIHRoaXMuY2xvYWtDbGFzc05hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgIHJldHVybiAkY2xvYWtDbGFzc05hbWU7XG4gICAgICB9XG4gICAgICAkY2xvYWtDbGFzc05hbWUgPSBuYW1lO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICB2YXIgZmxhdE9iamVjdCA9IGZ1bmN0aW9uIChkYXRhLCBwYXRoLCByZXN1bHQsIHByZXZLZXkpIHtcbiAgICAgIHZhciBrZXksIGtleVdpdGhQYXRoLCBrZXlXaXRoU2hvcnRQYXRoLCB2YWw7XG4gICAgICBpZiAoIXBhdGgpIHtcbiAgICAgICAgcGF0aCA9IFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0ID0ge307XG4gICAgICB9XG4gICAgICBmb3IgKGtleSBpbiBkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFsID0gZGF0YVtrZXldO1xuICAgICAgICBpZiAoYW5ndWxhci5pc09iamVjdCh2YWwpKSB7XG4gICAgICAgICAgZmxhdE9iamVjdCh2YWwsIHBhdGguY29uY2F0KGtleSksIHJlc3VsdCwga2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBrZXlXaXRoUGF0aCA9IHBhdGgubGVuZ3RoID8gJycgKyBwYXRoLmpvaW4oTkVTVEVEX09CSkVDVF9ERUxJTUlURVIpICsgTkVTVEVEX09CSkVDVF9ERUxJTUlURVIgKyBrZXkgOiBrZXk7XG4gICAgICAgICAgaWYgKHBhdGgubGVuZ3RoICYmIGtleSA9PT0gcHJldktleSkge1xuICAgICAgICAgICAga2V5V2l0aFNob3J0UGF0aCA9ICcnICsgcGF0aC5qb2luKE5FU1RFRF9PQkpFQ1RfREVMSU1JVEVSKTtcbiAgICAgICAgICAgIHJlc3VsdFtrZXlXaXRoU2hvcnRQYXRoXSA9ICdAOicgKyBrZXlXaXRoUGF0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0W2tleVdpdGhQYXRoXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIHRoaXMuYWRkSW50ZXJwb2xhdGlvbiA9IGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgICAkaW50ZXJwb2xhdG9yRmFjdG9yaWVzLnB1c2goZmFjdG9yeSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHRoaXMudXNlTWVzc2FnZUZvcm1hdEludGVycG9sYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy51c2VJbnRlcnBvbGF0aW9uKCckdHJhbnNsYXRlTWVzc2FnZUZvcm1hdEludGVycG9sYXRpb24nKTtcbiAgICB9O1xuICAgIHRoaXMudXNlSW50ZXJwb2xhdGlvbiA9IGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgICAkaW50ZXJwb2xhdGlvbkZhY3RvcnkgPSBmYWN0b3J5O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICB0aGlzLnVzZVNhbml0aXplVmFsdWVTdHJhdGVneSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgJGludGVycG9sYXRpb25TYW5pdGl6YXRpb25TdHJhdGVneSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICB0aGlzLnByZWZlcnJlZExhbmd1YWdlID0gZnVuY3Rpb24gKGxhbmdLZXkpIHtcbiAgICAgIGlmIChsYW5nS2V5KSB7XG4gICAgICAgICRwcmVmZXJyZWRMYW5ndWFnZSA9IGxhbmdLZXk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuICRwcmVmZXJyZWRMYW5ndWFnZTtcbiAgICB9O1xuICAgIHRoaXMudHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvciA9IGZ1bmN0aW9uIChpbmRpY2F0b3IpIHtcbiAgICAgIHRoaXMudHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvckxlZnQoaW5kaWNhdG9yKTtcbiAgICAgIHRoaXMudHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvclJpZ2h0KGluZGljYXRvcik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHRoaXMudHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvckxlZnQgPSBmdW5jdGlvbiAoaW5kaWNhdG9yKSB7XG4gICAgICBpZiAoIWluZGljYXRvcikge1xuICAgICAgICByZXR1cm4gJG5vdEZvdW5kSW5kaWNhdG9yTGVmdDtcbiAgICAgIH1cbiAgICAgICRub3RGb3VuZEluZGljYXRvckxlZnQgPSBpbmRpY2F0b3I7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHRoaXMudHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvclJpZ2h0ID0gZnVuY3Rpb24gKGluZGljYXRvcikge1xuICAgICAgaWYgKCFpbmRpY2F0b3IpIHtcbiAgICAgICAgcmV0dXJuICRub3RGb3VuZEluZGljYXRvclJpZ2h0O1xuICAgICAgfVxuICAgICAgJG5vdEZvdW5kSW5kaWNhdG9yUmlnaHQgPSBpbmRpY2F0b3I7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHRoaXMuZmFsbGJhY2tMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5nS2V5KSB7XG4gICAgICBmYWxsYmFja1N0YWNrKGxhbmdLZXkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICB2YXIgZmFsbGJhY2tTdGFjayA9IGZ1bmN0aW9uIChsYW5nS2V5KSB7XG4gICAgICBpZiAobGFuZ0tleSkge1xuICAgICAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhsYW5nS2V5KSkge1xuICAgICAgICAgICRmYWxsYmFja1dhc1N0cmluZyA9IHRydWU7XG4gICAgICAgICAgJGZhbGxiYWNrTGFuZ3VhZ2UgPSBbbGFuZ0tleV07XG4gICAgICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc0FycmF5KGxhbmdLZXkpKSB7XG4gICAgICAgICAgJGZhbGxiYWNrV2FzU3RyaW5nID0gZmFsc2U7XG4gICAgICAgICAgJGZhbGxiYWNrTGFuZ3VhZ2UgPSBsYW5nS2V5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKCRwcmVmZXJyZWRMYW5ndWFnZSkpIHtcbiAgICAgICAgICAkZmFsbGJhY2tMYW5ndWFnZS5wdXNoKCRwcmVmZXJyZWRMYW5ndWFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoJGZhbGxiYWNrV2FzU3RyaW5nKSB7XG4gICAgICAgICAgcmV0dXJuICRmYWxsYmFja0xhbmd1YWdlWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZmFsbGJhY2tMYW5ndWFnZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy51c2UgPSBmdW5jdGlvbiAobGFuZ0tleSkge1xuICAgICAgaWYgKGxhbmdLZXkpIHtcbiAgICAgICAgaWYgKCEkdHJhbnNsYXRpb25UYWJsZVtsYW5nS2V5XSAmJiAhJGxvYWRlckZhY3RvcnkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJyR0cmFuc2xhdGVQcm92aWRlciBjb3VsZG5cXCd0IGZpbmQgdHJhbnNsYXRpb25UYWJsZSBmb3IgbGFuZ0tleTogXFwnJyArIGxhbmdLZXkgKyAnXFwnJyk7XG4gICAgICAgIH1cbiAgICAgICAgJHVzZXMgPSBsYW5nS2V5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiAkdXNlcztcbiAgICB9O1xuICAgIHZhciBzdG9yYWdlS2V5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgaWYgKCRzdG9yYWdlUHJlZml4KSB7XG4gICAgICAgICAgcmV0dXJuICRzdG9yYWdlUHJlZml4ICsgJHN0b3JhZ2VLZXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRzdG9yYWdlS2V5O1xuICAgICAgfVxuICAgICAgJHN0b3JhZ2VLZXkgPSBrZXk7XG4gICAgfTtcbiAgICB0aGlzLnN0b3JhZ2VLZXkgPSBzdG9yYWdlS2V5O1xuICAgIHRoaXMudXNlVXJsTG9hZGVyID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgcmV0dXJuIHRoaXMudXNlTG9hZGVyKCckdHJhbnNsYXRlVXJsTG9hZGVyJywgeyB1cmw6IHVybCB9KTtcbiAgICB9O1xuICAgIHRoaXMudXNlU3RhdGljRmlsZXNMb2FkZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMudXNlTG9hZGVyKCckdHJhbnNsYXRlU3RhdGljRmlsZXNMb2FkZXInLCBvcHRpb25zKTtcbiAgICB9O1xuICAgIHRoaXMudXNlTG9hZGVyID0gZnVuY3Rpb24gKGxvYWRlckZhY3RvcnksIG9wdGlvbnMpIHtcbiAgICAgICRsb2FkZXJGYWN0b3J5ID0gbG9hZGVyRmFjdG9yeTtcbiAgICAgICRsb2FkZXJPcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgdGhpcy51c2VMb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy51c2VTdG9yYWdlKCckdHJhbnNsYXRlTG9jYWxTdG9yYWdlJyk7XG4gICAgfTtcbiAgICB0aGlzLnVzZUNvb2tpZVN0b3JhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy51c2VTdG9yYWdlKCckdHJhbnNsYXRlQ29va2llU3RvcmFnZScpO1xuICAgIH07XG4gICAgdGhpcy51c2VTdG9yYWdlID0gZnVuY3Rpb24gKHN0b3JhZ2VGYWN0b3J5KSB7XG4gICAgICAkc3RvcmFnZUZhY3RvcnkgPSBzdG9yYWdlRmFjdG9yeTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgdGhpcy5zdG9yYWdlUHJlZml4ID0gZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgaWYgKCFwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICAgIH1cbiAgICAgICRzdG9yYWdlUHJlZml4ID0gcHJlZml4O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICB0aGlzLnVzZU1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXJMb2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy51c2VNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyKCckdHJhbnNsYXRlTWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlckxvZycpO1xuICAgIH07XG4gICAgdGhpcy51c2VNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyID0gZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgICAgICRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSA9IGZhY3Rvcnk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHRoaXMudXNlUG9zdENvbXBpbGluZyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgJHBvc3RDb21waWxpbmdFbmFibGVkID0gISF2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgdGhpcy5kZXRlcm1pbmVQcmVmZXJyZWRMYW5ndWFnZSA9IGZ1bmN0aW9uIChmbikge1xuICAgICAgdmFyIGxvY2FsZSA9IGZuICYmIGFuZ3VsYXIuaXNGdW5jdGlvbihmbikgPyBmbigpIDogZ2V0TG9jYWxlKCk7XG4gICAgICBpZiAoISRhdmFpbGFibGVMYW5ndWFnZUtleXMubGVuZ3RoKSB7XG4gICAgICAgICRwcmVmZXJyZWRMYW5ndWFnZSA9IGxvY2FsZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkcHJlZmVycmVkTGFuZ3VhZ2UgPSBuZWdvdGlhdGVMb2NhbGUobG9jYWxlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMucmVnaXN0ZXJBdmFpbGFibGVMYW5ndWFnZUtleXMgPSBmdW5jdGlvbiAobGFuZ3VhZ2VLZXlzLCBhbGlhc2VzKSB7XG4gICAgICBpZiAobGFuZ3VhZ2VLZXlzKSB7XG4gICAgICAgICRhdmFpbGFibGVMYW5ndWFnZUtleXMgPSBsYW5ndWFnZUtleXM7XG4gICAgICAgIGlmIChhbGlhc2VzKSB7XG4gICAgICAgICAgJGxhbmd1YWdlS2V5QWxpYXNlcyA9IGFsaWFzZXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gJGF2YWlsYWJsZUxhbmd1YWdlS2V5cztcbiAgICB9O1xuICAgIHRoaXMuJGdldCA9IFtcbiAgICAgICckbG9nJyxcbiAgICAgICckaW5qZWN0b3InLFxuICAgICAgJyRyb290U2NvcGUnLFxuICAgICAgJyRxJyxcbiAgICAgIGZ1bmN0aW9uICgkbG9nLCAkaW5qZWN0b3IsICRyb290U2NvcGUsICRxKSB7XG4gICAgICAgIHZhciBTdG9yYWdlLCBkZWZhdWx0SW50ZXJwb2xhdG9yID0gJGluamVjdG9yLmdldCgkaW50ZXJwb2xhdGlvbkZhY3RvcnkgfHwgJyR0cmFuc2xhdGVEZWZhdWx0SW50ZXJwb2xhdGlvbicpLCBwZW5kaW5nTG9hZGVyID0gZmFsc2UsIGludGVycG9sYXRvckhhc2hNYXAgPSB7fSwgbGFuZ1Byb21pc2VzID0ge30sIGZhbGxiYWNrSW5kZXgsIHN0YXJ0RmFsbGJhY2tJdGVyYXRpb247XG4gICAgICAgIHZhciAkdHJhbnNsYXRlID0gZnVuY3Rpb24gKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBpbnRlcnBvbGF0aW9uSWQpIHtcbiAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgIHRyYW5zbGF0aW9uSWQgPSB0cmFuc2xhdGlvbklkLnRyaW0oKTtcbiAgICAgICAgICB2YXIgcHJvbWlzZVRvV2FpdEZvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSAkcHJlZmVycmVkTGFuZ3VhZ2UgPyBsYW5nUHJvbWlzZXNbJHByZWZlcnJlZExhbmd1YWdlXSA6IGxhbmdQcm9taXNlc1skdXNlc107XG4gICAgICAgICAgICAgIGZhbGxiYWNrSW5kZXggPSAwO1xuICAgICAgICAgICAgICBpZiAoJHN0b3JhZ2VGYWN0b3J5ICYmICFwcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhbmdLZXkgPSBTdG9yYWdlLmdldCgkc3RvcmFnZUtleSk7XG4gICAgICAgICAgICAgICAgcHJvbWlzZSA9IGxhbmdQcm9taXNlc1tsYW5nS2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoJGZhbGxiYWNrTGFuZ3VhZ2UgJiYgJGZhbGxiYWNrTGFuZ3VhZ2UubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBpbmRleE9mKCRmYWxsYmFja0xhbmd1YWdlLCBsYW5nS2V5KTtcbiAgICAgICAgICAgICAgICAgIGZhbGxiYWNrSW5kZXggPSBpbmRleCA+IC0xID8gaW5kZXggKz0gMSA6IDA7XG4gICAgICAgICAgICAgICAgICAkZmFsbGJhY2tMYW5ndWFnZS5wdXNoKCRwcmVmZXJyZWRMYW5ndWFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICAgICAgfSgpO1xuICAgICAgICAgIGlmICghcHJvbWlzZVRvV2FpdEZvcikge1xuICAgICAgICAgICAgZGV0ZXJtaW5lVHJhbnNsYXRpb24odHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIGludGVycG9sYXRpb25JZCkudGhlbihkZWZlcnJlZC5yZXNvbHZlLCBkZWZlcnJlZC5yZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9taXNlVG9XYWl0Rm9yLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBkZXRlcm1pbmVUcmFuc2xhdGlvbih0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgaW50ZXJwb2xhdGlvbklkKS50aGVuKGRlZmVycmVkLnJlc29sdmUsIGRlZmVycmVkLnJlamVjdCk7XG4gICAgICAgICAgICB9LCBkZWZlcnJlZC5yZWplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGluZGV4T2YgPSBmdW5jdGlvbiAoYXJyYXksIHNlYXJjaEVsZW1lbnQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChhcnJheVtpXSA9PT0gc2VhcmNoRWxlbWVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgYXBwbHlOb3RGb3VuZEluZGljYXRvcnMgPSBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCkge1xuICAgICAgICAgIGlmICgkbm90Rm91bmRJbmRpY2F0b3JMZWZ0KSB7XG4gICAgICAgICAgICB0cmFuc2xhdGlvbklkID0gW1xuICAgICAgICAgICAgICAkbm90Rm91bmRJbmRpY2F0b3JMZWZ0LFxuICAgICAgICAgICAgICB0cmFuc2xhdGlvbklkXG4gICAgICAgICAgICBdLmpvaW4oJyAnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRub3RGb3VuZEluZGljYXRvclJpZ2h0KSB7XG4gICAgICAgICAgICB0cmFuc2xhdGlvbklkID0gW1xuICAgICAgICAgICAgICB0cmFuc2xhdGlvbklkLFxuICAgICAgICAgICAgICAkbm90Rm91bmRJbmRpY2F0b3JSaWdodFxuICAgICAgICAgICAgXS5qb2luKCcgJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cmFuc2xhdGlvbklkO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgdXNlTGFuZ3VhZ2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgJHVzZXMgPSBrZXk7XG4gICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnJHRyYW5zbGF0ZUNoYW5nZVN1Y2Nlc3MnKTtcbiAgICAgICAgICBpZiAoJHN0b3JhZ2VGYWN0b3J5KSB7XG4gICAgICAgICAgICBTdG9yYWdlLnNldCgkdHJhbnNsYXRlLnN0b3JhZ2VLZXkoKSwgJHVzZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0SW50ZXJwb2xhdG9yLnNldExvY2FsZSgkdXNlcyk7XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGludGVycG9sYXRvckhhc2hNYXAsIGZ1bmN0aW9uIChpbnRlcnBvbGF0b3IsIGlkKSB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0b3JIYXNoTWFwW2lkXS5zZXRMb2NhbGUoJHVzZXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJyR0cmFuc2xhdGVDaGFuZ2VFbmQnKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGxvYWRBc3luYyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgdGhyb3cgJ05vIGxhbmd1YWdlIGtleSBzcGVjaWZpZWQgZm9yIGxvYWRpbmcuJztcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlTG9hZGluZ1N0YXJ0Jyk7XG4gICAgICAgICAgcGVuZGluZ0xvYWRlciA9IHRydWU7XG4gICAgICAgICAgJGluamVjdG9yLmdldCgkbG9hZGVyRmFjdG9yeSkoYW5ndWxhci5leHRlbmQoJGxvYWRlck9wdGlvbnMsIHsga2V5OiBrZXkgfSkpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGlvblRhYmxlID0ge307XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlTG9hZGluZ1N1Y2Nlc3MnKTtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGRhdGEsIGZ1bmN0aW9uICh0YWJsZSkge1xuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHRyYW5zbGF0aW9uVGFibGUsIGZsYXRPYmplY3QodGFibGUpKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0cmFuc2xhdGlvblRhYmxlLCBmbGF0T2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBlbmRpbmdMb2FkZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoe1xuICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgdGFibGU6IHRyYW5zbGF0aW9uVGFibGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnJHRyYW5zbGF0ZUxvYWRpbmdFbmQnKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlTG9hZGluZ0Vycm9yJyk7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoa2V5KTtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJyR0cmFuc2xhdGVMb2FkaW5nRW5kJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH07XG4gICAgICAgIGlmICgkc3RvcmFnZUZhY3RvcnkpIHtcbiAgICAgICAgICBTdG9yYWdlID0gJGluamVjdG9yLmdldCgkc3RvcmFnZUZhY3RvcnkpO1xuICAgICAgICAgIGlmICghU3RvcmFnZS5nZXQgfHwgIVN0b3JhZ2Uuc2V0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkblxcJ3QgdXNlIHN0b3JhZ2UgXFwnJyArICRzdG9yYWdlRmFjdG9yeSArICdcXCcsIG1pc3NpbmcgZ2V0KCkgb3Igc2V0KCkgbWV0aG9kIScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKGRlZmF1bHRJbnRlcnBvbGF0b3IudXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5KSkge1xuICAgICAgICAgIGRlZmF1bHRJbnRlcnBvbGF0b3IudXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5KCRpbnRlcnBvbGF0aW9uU2FuaXRpemF0aW9uU3RyYXRlZ3kpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkaW50ZXJwb2xhdG9yRmFjdG9yaWVzLmxlbmd0aCkge1xuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkaW50ZXJwb2xhdG9yRmFjdG9yaWVzLCBmdW5jdGlvbiAoaW50ZXJwb2xhdG9yRmFjdG9yeSkge1xuICAgICAgICAgICAgdmFyIGludGVycG9sYXRvciA9ICRpbmplY3Rvci5nZXQoaW50ZXJwb2xhdG9yRmFjdG9yeSk7XG4gICAgICAgICAgICBpbnRlcnBvbGF0b3Iuc2V0TG9jYWxlKCRwcmVmZXJyZWRMYW5ndWFnZSB8fCAkdXNlcyk7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKGludGVycG9sYXRvci51c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3kpKSB7XG4gICAgICAgICAgICAgIGludGVycG9sYXRvci51c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3koJGludGVycG9sYXRpb25TYW5pdGl6YXRpb25TdHJhdGVneSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnRlcnBvbGF0b3JIYXNoTWFwW2ludGVycG9sYXRvci5nZXRJbnRlcnBvbGF0aW9uSWRlbnRpZmllcigpXSA9IGludGVycG9sYXRvcjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZ2V0VHJhbnNsYXRpb25UYWJsZSA9IGZ1bmN0aW9uIChsYW5nS2V5KSB7XG4gICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICBpZiAoJHRyYW5zbGF0aW9uVGFibGUuaGFzT3duUHJvcGVydHkobGFuZ0tleSkpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoJHRyYW5zbGF0aW9uVGFibGVbbGFuZ0tleV0pO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxhbmdQcm9taXNlc1tsYW5nS2V5XS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgIHRyYW5zbGF0aW9ucyhkYXRhLmtleSwgZGF0YS50YWJsZSk7XG4gICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YS50YWJsZSk7XG4gICAgICAgICAgICB9LCBkZWZlcnJlZC5yZWplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGdldEZhbGxiYWNrVHJhbnNsYXRpb24gPSBmdW5jdGlvbiAobGFuZ0tleSwgdHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIEludGVycG9sYXRvcikge1xuICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgZ2V0VHJhbnNsYXRpb25UYWJsZShsYW5nS2V5KS50aGVuKGZ1bmN0aW9uICh0cmFuc2xhdGlvblRhYmxlKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNsYXRpb25UYWJsZS5oYXNPd25Qcm9wZXJ0eSh0cmFuc2xhdGlvbklkKSkge1xuICAgICAgICAgICAgICBJbnRlcnBvbGF0b3Iuc2V0TG9jYWxlKGxhbmdLZXkpO1xuICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKEludGVycG9sYXRvci5pbnRlcnBvbGF0ZSh0cmFuc2xhdGlvblRhYmxlW3RyYW5zbGF0aW9uSWRdLCBpbnRlcnBvbGF0ZVBhcmFtcykpO1xuICAgICAgICAgICAgICBJbnRlcnBvbGF0b3Iuc2V0TG9jYWxlKCR1c2VzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGRlZmVycmVkLnJlamVjdCk7XG4gICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRGYWxsYmFja1RyYW5zbGF0aW9uSW5zdGFudCA9IGZ1bmN0aW9uIChsYW5nS2V5LCB0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCwgdHJhbnNsYXRpb25UYWJsZSA9ICR0cmFuc2xhdGlvblRhYmxlW2xhbmdLZXldO1xuICAgICAgICAgIGlmICh0cmFuc2xhdGlvblRhYmxlLmhhc093blByb3BlcnR5KHRyYW5zbGF0aW9uSWQpKSB7XG4gICAgICAgICAgICBJbnRlcnBvbGF0b3Iuc2V0TG9jYWxlKGxhbmdLZXkpO1xuICAgICAgICAgICAgcmVzdWx0ID0gSW50ZXJwb2xhdG9yLmludGVycG9sYXRlKHRyYW5zbGF0aW9uVGFibGVbdHJhbnNsYXRpb25JZF0sIGludGVycG9sYXRlUGFyYW1zKTtcbiAgICAgICAgICAgIEludGVycG9sYXRvci5zZXRMb2NhbGUoJHVzZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgcmVzb2x2ZUZvckZhbGxiYWNrTGFuZ3VhZ2UgPSBmdW5jdGlvbiAoZmFsbGJhY2tMYW5ndWFnZUluZGV4LCB0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKSB7XG4gICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICBpZiAoZmFsbGJhY2tMYW5ndWFnZUluZGV4IDwgJGZhbGxiYWNrTGFuZ3VhZ2UubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgbGFuZ0tleSA9ICRmYWxsYmFja0xhbmd1YWdlW2ZhbGxiYWNrTGFuZ3VhZ2VJbmRleF07XG4gICAgICAgICAgICBnZXRGYWxsYmFja1RyYW5zbGF0aW9uKGxhbmdLZXksIHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBJbnRlcnBvbGF0b3IpLnRoZW4oZnVuY3Rpb24gKHRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodHJhbnNsYXRpb24pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgbmV4dEZhbGxiYWNrTGFuZ3VhZ2VQcm9taXNlID0gcmVzb2x2ZUZvckZhbGxiYWNrTGFuZ3VhZ2UoZmFsbGJhY2tMYW5ndWFnZUluZGV4ICsgMSwgdHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIEludGVycG9sYXRvcik7XG4gICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUobmV4dEZhbGxiYWNrTGFuZ3VhZ2VQcm9taXNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRyYW5zbGF0aW9uSWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlc29sdmVGb3JGYWxsYmFja0xhbmd1YWdlSW5zdGFudCA9IGZ1bmN0aW9uIChmYWxsYmFja0xhbmd1YWdlSW5kZXgsIHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBJbnRlcnBvbGF0b3IpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgIGlmIChmYWxsYmFja0xhbmd1YWdlSW5kZXggPCAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBsYW5nS2V5ID0gJGZhbGxiYWNrTGFuZ3VhZ2VbZmFsbGJhY2tMYW5ndWFnZUluZGV4XTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGdldEZhbGxiYWNrVHJhbnNsYXRpb25JbnN0YW50KGxhbmdLZXksIHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBJbnRlcnBvbGF0b3IpO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzb2x2ZUZvckZhbGxiYWNrTGFuZ3VhZ2VJbnN0YW50KGZhbGxiYWNrTGFuZ3VhZ2VJbmRleCArIDEsIHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBJbnRlcnBvbGF0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZmFsbGJhY2tUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmVGb3JGYWxsYmFja0xhbmd1YWdlKHN0YXJ0RmFsbGJhY2tJdGVyYXRpb24gPiAwID8gc3RhcnRGYWxsYmFja0l0ZXJhdGlvbiA6IGZhbGxiYWNrSW5kZXgsIHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBJbnRlcnBvbGF0b3IpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZmFsbGJhY2tUcmFuc2xhdGlvbkluc3RhbnQgPSBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIEludGVycG9sYXRvcikge1xuICAgICAgICAgIHJldHVybiByZXNvbHZlRm9yRmFsbGJhY2tMYW5ndWFnZUluc3RhbnQoc3RhcnRGYWxsYmFja0l0ZXJhdGlvbiA+IDAgPyBzdGFydEZhbGxiYWNrSXRlcmF0aW9uIDogZmFsbGJhY2tJbmRleCwgdHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIEludGVycG9sYXRvcik7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBkZXRlcm1pbmVUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgaW50ZXJwb2xhdGlvbklkKSB7XG4gICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICB2YXIgdGFibGUgPSAkdXNlcyA/ICR0cmFuc2xhdGlvblRhYmxlWyR1c2VzXSA6ICR0cmFuc2xhdGlvblRhYmxlLCBJbnRlcnBvbGF0b3IgPSBpbnRlcnBvbGF0aW9uSWQgPyBpbnRlcnBvbGF0b3JIYXNoTWFwW2ludGVycG9sYXRpb25JZF0gOiBkZWZhdWx0SW50ZXJwb2xhdG9yO1xuICAgICAgICAgIGlmICh0YWJsZSAmJiB0YWJsZS5oYXNPd25Qcm9wZXJ0eSh0cmFuc2xhdGlvbklkKSkge1xuICAgICAgICAgICAgdmFyIHRyYW5zbGF0aW9uID0gdGFibGVbdHJhbnNsYXRpb25JZF07XG4gICAgICAgICAgICBpZiAodHJhbnNsYXRpb24uc3Vic3RyKDAsIDIpID09PSAnQDonKSB7XG4gICAgICAgICAgICAgICR0cmFuc2xhdGUodHJhbnNsYXRpb24uc3Vic3RyKDIpLCBpbnRlcnBvbGF0ZVBhcmFtcywgaW50ZXJwb2xhdGlvbklkKS50aGVuKGRlZmVycmVkLnJlc29sdmUsIGRlZmVycmVkLnJlamVjdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKEludGVycG9sYXRvci5pbnRlcnBvbGF0ZSh0cmFuc2xhdGlvbiwgaW50ZXJwb2xhdGVQYXJhbXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSAmJiAhcGVuZGluZ0xvYWRlcikge1xuICAgICAgICAgICAgICAkaW5qZWN0b3IuZ2V0KCRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSkodHJhbnNsYXRpb25JZCwgJHVzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCR1c2VzICYmICRmYWxsYmFja0xhbmd1YWdlICYmICRmYWxsYmFja0xhbmd1YWdlLmxlbmd0aCkge1xuICAgICAgICAgICAgICBmYWxsYmFja1RyYW5zbGF0aW9uKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBJbnRlcnBvbGF0b3IpLnRoZW4oZnVuY3Rpb24gKHRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0cmFuc2xhdGlvbik7XG4gICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChfdHJhbnNsYXRpb25JZCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChhcHBseU5vdEZvdW5kSW5kaWNhdG9ycyhfdHJhbnNsYXRpb25JZCkpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChhcHBseU5vdEZvdW5kSW5kaWNhdG9ycyh0cmFuc2xhdGlvbklkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZGV0ZXJtaW5lVHJhbnNsYXRpb25JbnN0YW50ID0gZnVuY3Rpb24gKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBpbnRlcnBvbGF0aW9uSWQpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0LCB0YWJsZSA9ICR1c2VzID8gJHRyYW5zbGF0aW9uVGFibGVbJHVzZXNdIDogJHRyYW5zbGF0aW9uVGFibGUsIEludGVycG9sYXRvciA9IGludGVycG9sYXRpb25JZCA/IGludGVycG9sYXRvckhhc2hNYXBbaW50ZXJwb2xhdGlvbklkXSA6IGRlZmF1bHRJbnRlcnBvbGF0b3I7XG4gICAgICAgICAgaWYgKHRhYmxlICYmIHRhYmxlLmhhc093blByb3BlcnR5KHRyYW5zbGF0aW9uSWQpKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRpb24gPSB0YWJsZVt0cmFuc2xhdGlvbklkXTtcbiAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbi5zdWJzdHIoMCwgMikgPT09ICdAOicpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gZGV0ZXJtaW5lVHJhbnNsYXRpb25JbnN0YW50KHRyYW5zbGF0aW9uLnN1YnN0cigyKSwgaW50ZXJwb2xhdGVQYXJhbXMsIGludGVycG9sYXRpb25JZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHQgPSBJbnRlcnBvbGF0b3IuaW50ZXJwb2xhdGUodHJhbnNsYXRpb24sIGludGVycG9sYXRlUGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSAmJiAhcGVuZGluZ0xvYWRlcikge1xuICAgICAgICAgICAgICAkaW5qZWN0b3IuZ2V0KCRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSkodHJhbnNsYXRpb25JZCwgJHVzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCR1c2VzICYmICRmYWxsYmFja0xhbmd1YWdlICYmICRmYWxsYmFja0xhbmd1YWdlLmxlbmd0aCkge1xuICAgICAgICAgICAgICBmYWxsYmFja0luZGV4ID0gMDtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gZmFsbGJhY2tUcmFuc2xhdGlvbkluc3RhbnQodHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIEludGVycG9sYXRvcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHQgPSBhcHBseU5vdEZvdW5kSW5kaWNhdG9ycyh0cmFuc2xhdGlvbklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgICAgJHRyYW5zbGF0ZS5wcmVmZXJyZWRMYW5ndWFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gJHByZWZlcnJlZExhbmd1YWdlO1xuICAgICAgICB9O1xuICAgICAgICAkdHJhbnNsYXRlLmNsb2FrQ2xhc3NOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAkY2xvYWtDbGFzc05hbWU7XG4gICAgICAgIH07XG4gICAgICAgICR0cmFuc2xhdGUuZmFsbGJhY2tMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5nS2V5KSB7XG4gICAgICAgICAgaWYgKGxhbmdLZXkgIT09IHVuZGVmaW5lZCAmJiBsYW5nS2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBmYWxsYmFja1N0YWNrKGxhbmdLZXkpO1xuICAgICAgICAgICAgaWYgKCRsb2FkZXJGYWN0b3J5KSB7XG4gICAgICAgICAgICAgIGlmICgkZmFsbGJhY2tMYW5ndWFnZSAmJiAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gJGZhbGxiYWNrTGFuZ3VhZ2UubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIGlmICghbGFuZ1Byb21pc2VzWyRmYWxsYmFja0xhbmd1YWdlW2ldXSkge1xuICAgICAgICAgICAgICAgICAgICBsYW5nUHJvbWlzZXNbJGZhbGxiYWNrTGFuZ3VhZ2VbaV1dID0gbG9hZEFzeW5jKCRmYWxsYmFja0xhbmd1YWdlW2ldKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR0cmFuc2xhdGUudXNlKCR0cmFuc2xhdGUudXNlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJGZhbGxiYWNrV2FzU3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gJGZhbGxiYWNrTGFuZ3VhZ2VbMF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAkZmFsbGJhY2tMYW5ndWFnZTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgICR0cmFuc2xhdGUudXNlRmFsbGJhY2tMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5nS2V5KSB7XG4gICAgICAgICAgaWYgKGxhbmdLZXkgIT09IHVuZGVmaW5lZCAmJiBsYW5nS2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoIWxhbmdLZXkpIHtcbiAgICAgICAgICAgICAgc3RhcnRGYWxsYmFja0l0ZXJhdGlvbiA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgbGFuZ0tleVBvc2l0aW9uID0gaW5kZXhPZigkZmFsbGJhY2tMYW5ndWFnZSwgbGFuZ0tleSk7XG4gICAgICAgICAgICAgIGlmIChsYW5nS2V5UG9zaXRpb24gPiAtMSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0RmFsbGJhY2tJdGVyYXRpb24gPSBsYW5nS2V5UG9zaXRpb247XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gJG5leHRMYW5nO1xuICAgICAgICB9O1xuICAgICAgICAkdHJhbnNsYXRlLnN0b3JhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIFN0b3JhZ2U7XG4gICAgICAgIH07XG4gICAgICAgICR0cmFuc2xhdGUudXNlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gJHVzZXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnJHRyYW5zbGF0ZUNoYW5nZVN0YXJ0Jyk7XG4gICAgICAgICAgaWYgKCEkdHJhbnNsYXRpb25UYWJsZVtrZXldICYmICRsb2FkZXJGYWN0b3J5KSB7XG4gICAgICAgICAgICAkbmV4dExhbmcgPSBrZXk7XG4gICAgICAgICAgICBsYW5nUHJvbWlzZXNba2V5XSA9IGxvYWRBc3luYyhrZXkpLnRoZW4oZnVuY3Rpb24gKHRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgICAgIHRyYW5zbGF0aW9ucyh0cmFuc2xhdGlvbi5rZXksIHRyYW5zbGF0aW9uLnRhYmxlKTtcbiAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0cmFuc2xhdGlvbi5rZXkpO1xuICAgICAgICAgICAgICBpZiAoJG5leHRMYW5nID09PSBrZXkpIHtcbiAgICAgICAgICAgICAgICB1c2VMYW5ndWFnZSh0cmFuc2xhdGlvbi5rZXkpO1xuICAgICAgICAgICAgICAgICRuZXh0TGFuZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAkbmV4dExhbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJyR0cmFuc2xhdGVDaGFuZ2VFcnJvcicpO1xuICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoa2V5KTtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnJHRyYW5zbGF0ZUNoYW5nZUVuZCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoa2V5KTtcbiAgICAgICAgICAgIHVzZUxhbmd1YWdlKGtleSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9O1xuICAgICAgICAkdHJhbnNsYXRlLnN0b3JhZ2VLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0b3JhZ2VLZXkoKTtcbiAgICAgICAgfTtcbiAgICAgICAgJHRyYW5zbGF0ZS5pc1Bvc3RDb21waWxpbmdFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAkcG9zdENvbXBpbGluZ0VuYWJsZWQ7XG4gICAgICAgIH07XG4gICAgICAgICR0cmFuc2xhdGUucmVmcmVzaCA9IGZ1bmN0aW9uIChsYW5nS2V5KSB7XG4gICAgICAgICAgaWYgKCEkbG9hZGVyRmFjdG9yeSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZG5cXCd0IHJlZnJlc2ggdHJhbnNsYXRpb24gdGFibGUsIG5vIGxvYWRlciByZWdpc3RlcmVkIScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlUmVmcmVzaEVuZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoKTtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJyR0cmFuc2xhdGVSZWZyZXNoRW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJyR0cmFuc2xhdGVSZWZyZXNoU3RhcnQnKTtcbiAgICAgICAgICBpZiAoIWxhbmdLZXkpIHtcbiAgICAgICAgICAgIHZhciB0YWJsZXMgPSBbXTtcbiAgICAgICAgICAgIGlmICgkZmFsbGJhY2tMYW5ndWFnZSAmJiAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9ICRmYWxsYmFja0xhbmd1YWdlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGFibGVzLnB1c2gobG9hZEFzeW5jKCRmYWxsYmFja0xhbmd1YWdlW2ldKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkdXNlcykge1xuICAgICAgICAgICAgICB0YWJsZXMucHVzaChsb2FkQXN5bmMoJHVzZXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRxLmFsbCh0YWJsZXMpLnRoZW4oZnVuY3Rpb24gKHRhYmxlRGF0YSkge1xuICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godGFibGVEYXRhLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmICgkdHJhbnNsYXRpb25UYWJsZVtkYXRhLmtleV0pIHtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZSAkdHJhbnNsYXRpb25UYWJsZVtkYXRhLmtleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9ucyhkYXRhLmtleSwgZGF0YS50YWJsZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoJHVzZXMpIHtcbiAgICAgICAgICAgICAgICB1c2VMYW5ndWFnZSgkdXNlcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmICgkdHJhbnNsYXRpb25UYWJsZVtsYW5nS2V5XSkge1xuICAgICAgICAgICAgbG9hZEFzeW5jKGxhbmdLZXkpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgdHJhbnNsYXRpb25zKGRhdGEua2V5LCBkYXRhLnRhYmxlKTtcbiAgICAgICAgICAgICAgaWYgKGxhbmdLZXkgPT09ICR1c2VzKSB7XG4gICAgICAgICAgICAgICAgdXNlTGFuZ3VhZ2UoJHVzZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfTtcbiAgICAgICAgJHRyYW5zbGF0ZS5pbnN0YW50ID0gZnVuY3Rpb24gKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBpbnRlcnBvbGF0aW9uSWQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRyYW5zbGF0aW9uSWQgPT09ICd1bmRlZmluZWQnIHx8IHRyYW5zbGF0aW9uSWQgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25JZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJhbnNsYXRpb25JZCA9IHRyYW5zbGF0aW9uSWQudHJpbSgpO1xuICAgICAgICAgIHZhciByZXN1bHQsIHBvc3NpYmxlTGFuZ0tleXMgPSBbXTtcbiAgICAgICAgICBpZiAoJHByZWZlcnJlZExhbmd1YWdlKSB7XG4gICAgICAgICAgICBwb3NzaWJsZUxhbmdLZXlzLnB1c2goJHByZWZlcnJlZExhbmd1YWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCR1c2VzKSB7XG4gICAgICAgICAgICBwb3NzaWJsZUxhbmdLZXlzLnB1c2goJHVzZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJGZhbGxiYWNrTGFuZ3VhZ2UgJiYgJGZhbGxiYWNrTGFuZ3VhZ2UubGVuZ3RoKSB7XG4gICAgICAgICAgICBwb3NzaWJsZUxhbmdLZXlzID0gcG9zc2libGVMYW5nS2V5cy5jb25jYXQoJGZhbGxiYWNrTGFuZ3VhZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgYyA9IHBvc3NpYmxlTGFuZ0tleXMubGVuZ3RoOyBpIDwgYzsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcG9zc2libGVMYW5nS2V5ID0gcG9zc2libGVMYW5nS2V5c1tpXTtcbiAgICAgICAgICAgIGlmICgkdHJhbnNsYXRpb25UYWJsZVtwb3NzaWJsZUxhbmdLZXldKSB7XG4gICAgICAgICAgICAgIGlmICgkdHJhbnNsYXRpb25UYWJsZVtwb3NzaWJsZUxhbmdLZXldW3RyYW5zbGF0aW9uSWRdKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZGV0ZXJtaW5lVHJhbnNsYXRpb25JbnN0YW50KHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBpbnRlcnBvbGF0aW9uSWQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0cmFuc2xhdGlvbklkO1xuICAgICAgICAgICAgaWYgKCRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSAmJiAhcGVuZGluZ0xvYWRlcikge1xuICAgICAgICAgICAgICAkaW5qZWN0b3IuZ2V0KCRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSkodHJhbnNsYXRpb25JZCwgJHVzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgICBpZiAoJGxvYWRlckZhY3RvcnkpIHtcbiAgICAgICAgICBpZiAoYW5ndWxhci5lcXVhbHMoJHRyYW5zbGF0aW9uVGFibGUsIHt9KSkge1xuICAgICAgICAgICAgJHRyYW5zbGF0ZS51c2UoJHRyYW5zbGF0ZS51c2UoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkZmFsbGJhY2tMYW5ndWFnZSAmJiAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICBsYW5nUHJvbWlzZXNbJGZhbGxiYWNrTGFuZ3VhZ2VbaV1dID0gbG9hZEFzeW5jKCRmYWxsYmFja0xhbmd1YWdlW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICR0cmFuc2xhdGU7XG4gICAgICB9XG4gICAgXTtcbiAgfVxuXSk7XG5hbmd1bGFyLm1vZHVsZSgncGFzY2FscHJlY2h0LnRyYW5zbGF0ZScpLmZhY3RvcnkoJyR0cmFuc2xhdGVEZWZhdWx0SW50ZXJwb2xhdGlvbicsIFtcbiAgJyRpbnRlcnBvbGF0ZScsXG4gIGZ1bmN0aW9uICgkaW50ZXJwb2xhdGUpIHtcbiAgICB2YXIgJHRyYW5zbGF0ZUludGVycG9sYXRvciA9IHt9LCAkbG9jYWxlLCAkaWRlbnRpZmllciA9ICdkZWZhdWx0JywgJHNhbml0aXplVmFsdWVTdHJhdGVneSA9IG51bGwsIHNhbml0aXplVmFsdWVTdHJhdGVnaWVzID0ge1xuICAgICAgICBlc2NhcGVkOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICAgIGZvciAodmFyIGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdj48L2Rpdj4nKS50ZXh0KHBhcmFtc1trZXldKS5odG1sKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgdmFyIHNhbml0aXplUGFyYW1zID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24oc2FuaXRpemVWYWx1ZVN0cmF0ZWdpZXNbJHNhbml0aXplVmFsdWVTdHJhdGVneV0pKSB7XG4gICAgICAgIHJlc3VsdCA9IHNhbml0aXplVmFsdWVTdHJhdGVnaWVzWyRzYW5pdGl6ZVZhbHVlU3RyYXRlZ3ldKHBhcmFtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBwYXJhbXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgJHRyYW5zbGF0ZUludGVycG9sYXRvci5zZXRMb2NhbGUgPSBmdW5jdGlvbiAobG9jYWxlKSB7XG4gICAgICAkbG9jYWxlID0gbG9jYWxlO1xuICAgIH07XG4gICAgJHRyYW5zbGF0ZUludGVycG9sYXRvci5nZXRJbnRlcnBvbGF0aW9uSWRlbnRpZmllciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAkaWRlbnRpZmllcjtcbiAgICB9O1xuICAgICR0cmFuc2xhdGVJbnRlcnBvbGF0b3IudXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAkc2FuaXRpemVWYWx1ZVN0cmF0ZWd5ID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgICR0cmFuc2xhdGVJbnRlcnBvbGF0b3IuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiAoc3RyaW5nLCBpbnRlcnBvbGF0ZVBhcmFtcykge1xuICAgICAgaWYgKCRzYW5pdGl6ZVZhbHVlU3RyYXRlZ3kpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVQYXJhbXMgPSBzYW5pdGl6ZVBhcmFtcyhpbnRlcnBvbGF0ZVBhcmFtcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJGludGVycG9sYXRlKHN0cmluZykoaW50ZXJwb2xhdGVQYXJhbXMpO1xuICAgIH07XG4gICAgcmV0dXJuICR0cmFuc2xhdGVJbnRlcnBvbGF0b3I7XG4gIH1cbl0pO1xuYW5ndWxhci5tb2R1bGUoJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnKS5jb25zdGFudCgnJFNUT1JBR0VfS0VZJywgJ05HX1RSQU5TTEFURV9MQU5HX0tFWScpO1xuYW5ndWxhci5tb2R1bGUoJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnKS5kaXJlY3RpdmUoJ3RyYW5zbGF0ZScsIFtcbiAgJyR0cmFuc2xhdGUnLFxuICAnJHEnLFxuICAnJGludGVycG9sYXRlJyxcbiAgJyRjb21waWxlJyxcbiAgJyRwYXJzZScsXG4gICckcm9vdFNjb3BlJyxcbiAgZnVuY3Rpb24gKCR0cmFuc2xhdGUsICRxLCAkaW50ZXJwb2xhdGUsICRjb21waWxlLCAkcGFyc2UsICRyb290U2NvcGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBRScsXG4gICAgICBzY29wZTogdHJ1ZSxcbiAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uICh0RWxlbWVudCwgdEF0dHIpIHtcbiAgICAgICAgdmFyIHRyYW5zbGF0ZVZhbHVlc0V4aXN0ID0gdEF0dHIudHJhbnNsYXRlVmFsdWVzID8gdEF0dHIudHJhbnNsYXRlVmFsdWVzIDogdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdHJhbnNsYXRlSW50ZXJwb2xhdGlvbiA9IHRBdHRyLnRyYW5zbGF0ZUludGVycG9sYXRpb24gPyB0QXR0ci50cmFuc2xhdGVJbnRlcnBvbGF0aW9uIDogdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdHJhbnNsYXRlVmFsdWVFeGlzdCA9IHRFbGVtZW50WzBdLm91dGVySFRNTC5tYXRjaCgvdHJhbnNsYXRlLXZhbHVlLSsvaSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBsaW5rRm4oc2NvcGUsIGlFbGVtZW50LCBpQXR0cikge1xuICAgICAgICAgIHNjb3BlLmludGVycG9sYXRlUGFyYW1zID0ge307XG4gICAgICAgICAgaUF0dHIuJG9ic2VydmUoJ3RyYW5zbGF0ZScsIGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5lcXVhbHModHJhbnNsYXRpb25JZCwgJycpIHx8ICFhbmd1bGFyLmlzRGVmaW5lZCh0cmFuc2xhdGlvbklkKSkge1xuICAgICAgICAgICAgICBzY29wZS50cmFuc2xhdGlvbklkID0gJGludGVycG9sYXRlKGlFbGVtZW50LnRleHQoKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJykpKHNjb3BlLiRwYXJlbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2NvcGUudHJhbnNsYXRpb25JZCA9IHRyYW5zbGF0aW9uSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHRyYW5zbGF0ZVZhbHVlc0V4aXN0KSB7XG4gICAgICAgICAgICBpQXR0ci4kb2JzZXJ2ZSgndHJhbnNsYXRlVmFsdWVzJywgZnVuY3Rpb24gKGludGVycG9sYXRlUGFyYW1zKSB7XG4gICAgICAgICAgICAgIGlmIChpbnRlcnBvbGF0ZVBhcmFtcykge1xuICAgICAgICAgICAgICAgIHNjb3BlLiRwYXJlbnQuJHdhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHNjb3BlLmludGVycG9sYXRlUGFyYW1zLCAkcGFyc2UoaW50ZXJwb2xhdGVQYXJhbXMpKHNjb3BlLiRwYXJlbnQpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0cmFuc2xhdGVWYWx1ZUV4aXN0KSB7XG4gICAgICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbiAoYXR0ck5hbWUpIHtcbiAgICAgICAgICAgICAgaUF0dHIuJG9ic2VydmUoYXR0ck5hbWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHNjb3BlLmludGVycG9sYXRlUGFyYW1zW2FuZ3VsYXIubG93ZXJjYXNlKGF0dHJOYW1lLnN1YnN0cigxNCkpXSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKHZhciBhdHRyIGluIGlBdHRyKSB7XG4gICAgICAgICAgICAgIGlmIChpQXR0ci5oYXNPd25Qcm9wZXJ0eShhdHRyKSAmJiBhdHRyLnN1YnN0cigwLCAxNCkgPT09ICd0cmFuc2xhdGVWYWx1ZScgJiYgYXR0ciAhPT0gJ3RyYW5zbGF0ZVZhbHVlcycpIHtcbiAgICAgICAgICAgICAgICBmbihhdHRyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgYXBwbHlFbGVtZW50Q29udGVudCA9IGZ1bmN0aW9uICh2YWx1ZSwgc2NvcGUpIHtcbiAgICAgICAgICAgIGlFbGVtZW50Lmh0bWwodmFsdWUpO1xuICAgICAgICAgICAgdmFyIGdsb2JhbGx5RW5hYmxlZCA9ICR0cmFuc2xhdGUuaXNQb3N0Q29tcGlsaW5nRW5hYmxlZCgpO1xuICAgICAgICAgICAgdmFyIGxvY2FsbHlEZWZpbmVkID0gdHlwZW9mIHRBdHRyLnRyYW5zbGF0ZUNvbXBpbGUgIT09ICd1bmRlZmluZWQnO1xuICAgICAgICAgICAgdmFyIGxvY2FsbHlFbmFibGVkID0gbG9jYWxseURlZmluZWQgJiYgdEF0dHIudHJhbnNsYXRlQ29tcGlsZSAhPT0gJ2ZhbHNlJztcbiAgICAgICAgICAgIGlmIChnbG9iYWxseUVuYWJsZWQgJiYgIWxvY2FsbHlEZWZpbmVkIHx8IGxvY2FsbHlFbmFibGVkKSB7XG4gICAgICAgICAgICAgICRjb21waWxlKGlFbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciB1cGRhdGVUcmFuc2xhdGlvbkZuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoIXRyYW5zbGF0ZVZhbHVlc0V4aXN0ICYmICF0cmFuc2xhdGVWYWx1ZUV4aXN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB1bndhdGNoID0gc2NvcGUuJHdhdGNoKCd0cmFuc2xhdGlvbklkJywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3BlLnRyYW5zbGF0aW9uSWQgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0cmFuc2xhdGUodmFsdWUsIHt9LCB0cmFuc2xhdGVJbnRlcnBvbGF0aW9uKS50aGVuKGZ1bmN0aW9uICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBseUVsZW1lbnRDb250ZW50KHRyYW5zbGF0aW9uLCBzY29wZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVud2F0Y2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5RWxlbWVudENvbnRlbnQodHJhbnNsYXRpb25JZCwgc2NvcGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB1bndhdGNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaCgnaW50ZXJwb2xhdGVQYXJhbXMnLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3BlLnRyYW5zbGF0aW9uSWQgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAkdHJhbnNsYXRlKHNjb3BlLnRyYW5zbGF0aW9uSWQsIHZhbHVlLCB0cmFuc2xhdGVJbnRlcnBvbGF0aW9uKS50aGVuKGZ1bmN0aW9uICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBwbHlFbGVtZW50Q29udGVudCh0cmFuc2xhdGlvbiwgc2NvcGUpO1xuICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBseUVsZW1lbnRDb250ZW50KHRyYW5zbGF0aW9uSWQsIHNjb3BlKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSgpO1xuICAgICAgICAgIHZhciB1bmJpbmQgPSAkcm9vdFNjb3BlLiRvbignJHRyYW5zbGF0ZUNoYW5nZVN1Y2Nlc3MnLCB1cGRhdGVUcmFuc2xhdGlvbkZuKTtcbiAgICAgICAgICB1cGRhdGVUcmFuc2xhdGlvbkZuKCk7XG4gICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIHVuYmluZCk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXSk7XG5hbmd1bGFyLm1vZHVsZSgncGFzY2FscHJlY2h0LnRyYW5zbGF0ZScpLmRpcmVjdGl2ZSgndHJhbnNsYXRlQ2xvYWsnLCBbXG4gICckcm9vdFNjb3BlJyxcbiAgJyR0cmFuc2xhdGUnLFxuICBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHRyYW5zbGF0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBjb21waWxlOiBmdW5jdGlvbiAodEVsZW1lbnQpIHtcbiAgICAgICAgJHJvb3RTY29wZS4kb24oJyR0cmFuc2xhdGVMb2FkaW5nU3VjY2VzcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0RWxlbWVudC5yZW1vdmVDbGFzcygkdHJhbnNsYXRlLmNsb2FrQ2xhc3NOYW1lKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdEVsZW1lbnQuYWRkQ2xhc3MoJHRyYW5zbGF0ZS5jbG9ha0NsYXNzTmFtZSgpKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5dKTtcbmFuZ3VsYXIubW9kdWxlKCdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJykuZmlsdGVyKCd0cmFuc2xhdGUnLCBbXG4gICckcGFyc2UnLFxuICAnJHRyYW5zbGF0ZScsXG4gIGZ1bmN0aW9uICgkcGFyc2UsICR0cmFuc2xhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBpbnRlcnBvbGF0aW9uKSB7XG4gICAgICBpZiAoIWFuZ3VsYXIuaXNPYmplY3QoaW50ZXJwb2xhdGVQYXJhbXMpKSB7XG4gICAgICAgIGludGVycG9sYXRlUGFyYW1zID0gJHBhcnNlKGludGVycG9sYXRlUGFyYW1zKSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICR0cmFuc2xhdGUuaW5zdGFudCh0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgaW50ZXJwb2xhdGlvbik7XG4gICAgfTtcbiAgfVxuXSk7IiwiLyohIFxuICogbnVtZXJhbC5qcyBsYW5ndWFnZSBjb25maWd1cmF0aW9uXG4gKiBsYW5ndWFnZSA6IEdlcm1hbiAoZGUpIOKAkyBnZW5lcmFsbHkgdXNlZnVsIGluIEdlcm1hbnksIEF1c3RyaWEsIEx1eGVtYm91cmcsIEJlbGdpdW1cbiAqIGF1dGhvciA6IE1hcmNvIEtyYWdlIDogaHR0cHM6Ly9naXRodWIuY29tL3Npbmt5XG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxhbmd1YWdlID0ge1xuICAgICAgICBkZWxpbWl0ZXJzOiB7XG4gICAgICAgICAgICB0aG91c2FuZHM6ICcgJyxcbiAgICAgICAgICAgIGRlY2ltYWw6ICcsJ1xuICAgICAgICB9LFxuICAgICAgICBhYmJyZXZpYXRpb25zOiB7XG4gICAgICAgICAgICB0aG91c2FuZDogJ2snLFxuICAgICAgICAgICAgbWlsbGlvbjogJ20nLFxuICAgICAgICAgICAgYmlsbGlvbjogJ2InLFxuICAgICAgICAgICAgdHJpbGxpb246ICd0J1xuICAgICAgICB9LFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gJy4nO1xuICAgICAgICB9LFxuICAgICAgICBjdXJyZW5jeToge1xuICAgICAgICAgICAgc3ltYm9sOiAn4oKsJ1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIE5vZGVcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBsYW5ndWFnZTtcbiAgICB9XG4gICAgLy8gQnJvd3NlclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLm51bWVyYWwgJiYgdGhpcy5udW1lcmFsLmxhbmd1YWdlKSB7XG4gICAgICAgIHRoaXMubnVtZXJhbC5sYW5ndWFnZSgnZGUnLCBsYW5ndWFnZSk7XG4gICAgICAgIHRoaXMubnVtZXJhbC5sYW5ndWFnZSgnZGUtZGUnLCBsYW5ndWFnZSk7XG4gICAgfVxufSgpKTsiLCIvKlxuICogcHJvbWlzZS10cmFja2VyIC0gdjIuMC4xIC0gMjAxNC0wNC0xMVxuICogaHR0cDovL2dpdGh1Yi5jb20vYWpvc2xpbi9hbmd1bGFyLXByb21pc2UtdHJhY2tlclxuICogQ3JlYXRlZCBieSBBbmR5IEpvc2xpbjsgTGljZW5zZWQgdW5kZXIgUHVibGljIERvbWFpblxuICovXG5cbihmdW5jdGlvbigpIHtcblxuYW5ndWxhci5tb2R1bGUoJ2Fqb3NsaW4ucHJvbWlzZS10cmFja2VyJylcbi5jb25maWcoWyckaHR0cFByb3ZpZGVyJywgZnVuY3Rpb24oJGh0dHBQcm92aWRlcikge1xuICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKFsnJHEnLCAncHJvbWlzZVRyYWNrZXInLCBmdW5jdGlvbigkcSwgcHJvbWlzZVRyYWNrZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVxdWVzdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcudHJhY2tlcikge1xuICAgICAgICAgIGlmICghYW5ndWxhci5pc0FycmF5KGNvbmZpZy50cmFja2VyKSkge1xuICAgICAgICAgICAgY29uZmlnLnRyYWNrZXIgPSBbY29uZmlnLnRyYWNrZXJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25maWcuJHByb21pc2VUcmFja2VyRGVmZXJyZWQgPSBjb25maWcuJHByb21pc2VUcmFja2VyRGVmZXJyZWQgfHwgW107XG5cbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goY29uZmlnLnRyYWNrZXIsIGZ1bmN0aW9uKHRyYWNrZXIpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9IHRyYWNrZXIuY3JlYXRlUHJvbWlzZSgpO1xuICAgICAgICAgICAgY29uZmlnLiRwcm9taXNlVHJhY2tlckRlZmVycmVkLnB1c2goZGVmZXJyZWQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkcS53aGVuKGNvbmZpZyk7XG4gICAgICB9LFxuICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5jb25maWcgJiYgcmVzcG9uc2UuY29uZmlnLiRwcm9taXNlVHJhY2tlckRlZmVycmVkKSB7XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHJlc3BvbnNlLmNvbmZpZy4kcHJvbWlzZVRyYWNrZXJEZWZlcnJlZCwgZnVuY3Rpb24oZGVmZXJyZWQpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkcS53aGVuKHJlc3BvbnNlKTtcbiAgICAgIH0sXG4gICAgICByZXNwb25zZUVycm9yOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2UuY29uZmlnICYmIHJlc3BvbnNlLmNvbmZpZy4kcHJvbWlzZVRyYWNrZXJEZWZlcnJlZCkge1xuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyZXNwb25zZS5jb25maWcuJHByb21pc2VUcmFja2VyRGVmZXJyZWQsIGZ1bmN0aW9uKGRlZmVycmVkKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgfVxuICAgIH07XG4gIH1dKTtcbn1dKTtcblxufSgpKTsiLCIvKlxuICogcHJvbWlzZS10cmFja2VyIC0gdjIuMC4xIC0gMjAxNC0wNC0xMVxuICogaHR0cDovL2dpdGh1Yi5jb20vYWpvc2xpbi9hbmd1bGFyLXByb21pc2UtdHJhY2tlclxuICogQ3JlYXRlZCBieSBBbmR5IEpvc2xpbjsgTGljZW5zZWQgdW5kZXIgUHVibGljIERvbWFpblxuICovXG5cbihmdW5jdGlvbigpIHtcblxuYW5ndWxhci5tb2R1bGUoJ2Fqb3NsaW4ucHJvbWlzZS10cmFja2VyJywgW10pXG5cbi5wcm92aWRlcigncHJvbWlzZVRyYWNrZXInLCBmdW5jdGlvbigpIHtcbiAgdmFyIHRyYWNrZXJzID0ge307XG5cbiAgdGhpcy4kZ2V0ID0gWyckcScsICckdGltZW91dCcsIGZ1bmN0aW9uKCRxLCAkdGltZW91dCkge1xuICAgIGZ1bmN0aW9uIGNhbmNlbFRpbWVvdXQocHJvbWlzZSkge1xuICAgICAgaWYgKHByb21pc2UpIHtcbiAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHByb21pc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBQcm9taXNlVHJhY2tlcihvcHRpb25zKSB7XG4gICAgICAvL2RvIG5ldyBpZiB1c2VyIGRvZXNuJ3RcbiAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQcm9taXNlVHJhY2tlcikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlVHJhY2tlcihvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgIC8vQXJyYXkgb2YgcHJvbWlzZXMgYmVpbmcgdHJhY2tlZFxuICAgICAgdmFyIHRyYWNrZWQgPSBbXTtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgLy9BbGxvdyBhbiBvcHRpb25hbCBcIm1pbmltdW0gZHVyYXRpb25cIiB0aGF0IHRoZSB0cmFja2VyIGhhcyB0byBzdGF5IGFjdGl2ZSBmb3IuXG4gICAgICB2YXIgbWluRHVyYXRpb24gPSBvcHRpb25zLm1pbkR1cmF0aW9uO1xuICAgICAgLy9BbGxvdyBhIGRlbGF5IHRoYXQgd2lsbCBzdG9wIHRoZSB0cmFja2VyIGZyb20gYWN0aXZhdGluZyB1bnRpbCB0aGF0IHRpbWUgaXMgcmVhY2hlZFxuICAgICAgdmFyIGFjdGl2YXRpb25EZWxheSA9IG9wdGlvbnMuYWN0aXZhdGlvbkRlbGF5O1xuXG4gICAgICB2YXIgbWluRHVyYXRpb25Qcm9taXNlO1xuICAgICAgdmFyIGFjdGl2YXRpb25EZWxheVByb21pc2U7XG5cbiAgICAgIHNlbGYuYWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vRXZlbiBpZiB3ZSBoYXZlIGEgcHJvbWlzZSBpbiBvdXIgdHJhY2tlciwgd2UgYXJlbid0IGFjdGl2ZSB1bnRpbCBkZWxheSBpcyBlbGFwc2VkXG4gICAgICAgIGlmIChhY3RpdmF0aW9uRGVsYXlQcm9taXNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cmFja2VkLmxlbmd0aCA+IDA7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnRyYWNraW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vRXZlbiBpZiB3ZSBhcmVuJ3QgYWN0aXZlLCB3ZSBjb3VsZCBzdGlsbCBoYXZlIGEgcHJvbWlzZSBpbiBvdXIgdHJhY2tlclxuICAgICAgICByZXR1cm4gdHJhY2tlZC5sZW5ndGggPiAwO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5kZXN0cm95ID0gc2VsZi5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgbWluRHVyYXRpb25Qcm9taXNlID0gY2FuY2VsVGltZW91dChtaW5EdXJhdGlvblByb21pc2UpO1xuICAgICAgICBhY3RpdmF0aW9uRGVsYXlQcm9taXNlID0gY2FuY2VsVGltZW91dChhY3RpdmF0aW9uRGVsYXlQcm9taXNlKTtcbiAgICAgICAgZm9yICh2YXIgaT10cmFja2VkLmxlbmd0aC0xOyBpPj0wOyBpLS0pIHtcbiAgICAgICAgICB0cmFja2VkW2ldLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0cmFja2VkLmxlbmd0aCA9IDA7XG4gICAgICB9O1xuXG4gICAgICAvL0NyZWF0ZSBhIHByb21pc2UgdGhhdCB3aWxsIG1ha2Ugb3VyIHRyYWNrZXIgYWN0aXZlIHVudGlsIGl0IGlzIHJlc29sdmVkLlxuICAgICAgLy8gQHJldHVybiBkZWZlcnJlZCAtIG91ciBkZWZlcnJlZCBvYmplY3QgdGhhdCBpcyBiZWluZyB0cmFja2VkXG4gICAgICBzZWxmLmNyZWF0ZVByb21pc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgdHJhY2tlZC5wdXNoKGRlZmVycmVkKTtcblxuICAgICAgICAvL0lmIHRoZSB0cmFja2VyIHdhcyBqdXN0IGluYWN0aXZlIGFuZCB0aGlzIHRoZSBmaXJzdCBpbiB0aGUgbGlzdCBvZlxuICAgICAgICAvL3Byb21pc2VzLCB3ZSByZXNldCBvdXIgZGVsYXkgYW5kIG1pbkR1cmF0aW9uXG4gICAgICAgIC8vYWdhaW4uXG4gICAgICAgIGlmICh0cmFja2VkLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGlmIChhY3RpdmF0aW9uRGVsYXkpIHtcbiAgICAgICAgICAgIGFjdGl2YXRpb25EZWxheVByb21pc2UgPSAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgYWN0aXZhdGlvbkRlbGF5UHJvbWlzZSA9IGNhbmNlbFRpbWVvdXQoYWN0aXZhdGlvbkRlbGF5UHJvbWlzZSk7XG4gICAgICAgICAgICAgIHN0YXJ0TWluRHVyYXRpb24oKTtcbiAgICAgICAgICAgIH0sIGFjdGl2YXRpb25EZWxheSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0TWluRHVyYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkZWZlcnJlZC5wcm9taXNlLnRoZW4ob25Eb25lKGZhbHNlKSwgb25Eb25lKHRydWUpKTtcblxuICAgICAgICByZXR1cm4gZGVmZXJyZWQ7XG5cbiAgICAgICAgZnVuY3Rpb24gc3RhcnRNaW5EdXJhdGlvbigpIHtcbiAgICAgICAgICBpZiAobWluRHVyYXRpb24pIHtcbiAgICAgICAgICAgIG1pbkR1cmF0aW9uUHJvbWlzZSA9ICR0aW1lb3V0KGFuZ3VsYXIubm9vcCwgbWluRHVyYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vQ3JlYXRlIGEgY2FsbGJhY2sgZm9yIHdoZW4gdGhpcyBwcm9taXNlIGlzIGRvbmUuIEl0IHdpbGwgcmVtb3ZlIG91clxuICAgICAgICAvL3RyYWNrZWQgcHJvbWlzZSBmcm9tIHRoZSBhcnJheSBpZiBvbmNlIG1pbkR1cmF0aW9uIGlzIGNvbXBsZXRlXG4gICAgICAgIGZ1bmN0aW9uIG9uRG9uZShpc0Vycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAobWluRHVyYXRpb25Qcm9taXNlIHx8ICRxLndoZW4oKSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdHJhY2tlZC5pbmRleE9mKGRlZmVycmVkKTtcbiAgICAgICAgICAgICAgdHJhY2tlZC5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgICAgICAgIC8vSWYgdGhpcyBpcyB0aGUgbGFzdCBwcm9taXNlLCBjbGVhbnVwIHRoZSB0aW1lb3V0c1xuICAgICAgICAgICAgICAvL2ZvciBhY3RpdmF0aW9uRGVsYXlcbiAgICAgICAgICAgICAgaWYgKHRyYWNrZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZhdGlvbkRlbGF5UHJvbWlzZSA9IGNhbmNlbFRpbWVvdXQoYWN0aXZhdGlvbkRlbGF5UHJvbWlzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNlbGYuYWRkUHJvbWlzZSA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgICAgdmFyIHRoZW4gPSBwcm9taXNlICYmIChwcm9taXNlLnRoZW4gfHwgcHJvbWlzZS4kdGhlbiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwcm9taXNlLiRwcm9taXNlICYmIHByb21pc2UuJHByb21pc2UudGhlbikpO1xuICAgICAgICBpZiAoIXRoZW4pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwcm9taXNlVHJhY2tlciNhZGRQcm9taXNlIGV4cGVjdHMgYSBwcm9taXNlIG9iamVjdCFcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlZmVycmVkID0gc2VsZi5jcmVhdGVQcm9taXNlKCk7XG5cbiAgICAgICAgLy9XaGVuIGdpdmVuIHByb21pc2UgaXMgZG9uZSwgcmVzb2x2ZSBvdXIgY3JlYXRlZCBwcm9taXNlXG4gICAgICAgIC8vQWxsb3cgJHRoZW4gZm9yIGFuZ3VsYXItcmVzb3VyY2Ugb2JqZWN0c1xuICAgICAgICB0aGVuKGZ1bmN0aW9uIHN1Y2Nlc3ModmFsdWUpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGRlZmVycmVkO1xuICAgICAgfTtcbiAgICB9O1xuICB9XTtcbn0pO1xuXG59KCkpO1xuIiwiLypcbiAqIGFuZ3VsYXItdWktYm9vdHN0cmFwXG4gKiBodHRwOi8vYW5ndWxhci11aS5naXRodWIuaW8vYm9vdHN0cmFwL1xuXG4gKiBWZXJzaW9uOiAwLjExLjIgLSAyMDE0LTA5LTI2XG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXBcIixbXCJ1aS5ib290c3RyYXAudHBsc1wiLFwidWkuYm9vdHN0cmFwLnRyYW5zaXRpb25cIixcInVpLmJvb3RzdHJhcC5jb2xsYXBzZVwiLFwidWkuYm9vdHN0cmFwLmFjY29yZGlvblwiLFwidWkuYm9vdHN0cmFwLmFsZXJ0XCIsXCJ1aS5ib290c3RyYXAuYmluZEh0bWxcIixcInVpLmJvb3RzdHJhcC5idXR0b25zXCIsXCJ1aS5ib290c3RyYXAuY2Fyb3VzZWxcIixcInVpLmJvb3RzdHJhcC5kYXRlcGFyc2VyXCIsXCJ1aS5ib290c3RyYXAucG9zaXRpb25cIixcInVpLmJvb3RzdHJhcC5kYXRlcGlja2VyXCIsXCJ1aS5ib290c3RyYXAuZHJvcGRvd25cIixcInVpLmJvb3RzdHJhcC5tb2RhbFwiLFwidWkuYm9vdHN0cmFwLnBhZ2luYXRpb25cIixcInVpLmJvb3RzdHJhcC50b29sdGlwXCIsXCJ1aS5ib290c3RyYXAucG9wb3ZlclwiLFwidWkuYm9vdHN0cmFwLnByb2dyZXNzYmFyXCIsXCJ1aS5ib290c3RyYXAucmF0aW5nXCIsXCJ1aS5ib290c3RyYXAudGFic1wiLFwidWkuYm9vdHN0cmFwLnRpbWVwaWNrZXJcIixcInVpLmJvb3RzdHJhcC50eXBlYWhlYWRcIl0pLGFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLnRwbHNcIixbXCJ0ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLWdyb3VwLmh0bWxcIixcInRlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24uaHRtbFwiLFwidGVtcGxhdGUvYWxlcnQvYWxlcnQuaHRtbFwiLFwidGVtcGxhdGUvY2Fyb3VzZWwvY2Fyb3VzZWwuaHRtbFwiLFwidGVtcGxhdGUvY2Fyb3VzZWwvc2xpZGUuaHRtbFwiLFwidGVtcGxhdGUvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmh0bWxcIixcInRlbXBsYXRlL2RhdGVwaWNrZXIvZGF5Lmh0bWxcIixcInRlbXBsYXRlL2RhdGVwaWNrZXIvbW9udGguaHRtbFwiLFwidGVtcGxhdGUvZGF0ZXBpY2tlci9wb3B1cC5odG1sXCIsXCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL3llYXIuaHRtbFwiLFwidGVtcGxhdGUvbW9kYWwvYmFja2Ryb3AuaHRtbFwiLFwidGVtcGxhdGUvbW9kYWwvd2luZG93Lmh0bWxcIixcInRlbXBsYXRlL3BhZ2luYXRpb24vcGFnZXIuaHRtbFwiLFwidGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmh0bWxcIixcInRlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1odG1sLXVuc2FmZS1wb3B1cC5odG1sXCIsXCJ0ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtcG9wdXAuaHRtbFwiLFwidGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLmh0bWxcIixcInRlbXBsYXRlL3Byb2dyZXNzYmFyL2Jhci5odG1sXCIsXCJ0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzcy5odG1sXCIsXCJ0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci5odG1sXCIsXCJ0ZW1wbGF0ZS9yYXRpbmcvcmF0aW5nLmh0bWxcIixcInRlbXBsYXRlL3RhYnMvdGFiLmh0bWxcIixcInRlbXBsYXRlL3RhYnMvdGFic2V0Lmh0bWxcIixcInRlbXBsYXRlL3RpbWVwaWNrZXIvdGltZXBpY2tlci5odG1sXCIsXCJ0ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLW1hdGNoLmh0bWxcIixcInRlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtcG9wdXAuaHRtbFwiXSksYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXAudHJhbnNpdGlvblwiLFtdKS5mYWN0b3J5KFwiJHRyYW5zaXRpb25cIixbXCIkcVwiLFwiJHRpbWVvdXRcIixcIiRyb290U2NvcGVcIixmdW5jdGlvbihhLGIsYyl7ZnVuY3Rpb24gZChhKXtmb3IodmFyIGIgaW4gYSlpZih2b2lkIDAhPT1mLnN0eWxlW2JdKXJldHVybiBhW2JdfXZhciBlPWZ1bmN0aW9uKGQsZixnKXtnPWd8fHt9O3ZhciBoPWEuZGVmZXIoKSxpPWVbZy5hbmltYXRpb24/XCJhbmltYXRpb25FbmRFdmVudE5hbWVcIjpcInRyYW5zaXRpb25FbmRFdmVudE5hbWVcIl0saj1mdW5jdGlvbigpe2MuJGFwcGx5KGZ1bmN0aW9uKCl7ZC51bmJpbmQoaSxqKSxoLnJlc29sdmUoZCl9KX07cmV0dXJuIGkmJmQuYmluZChpLGopLGIoZnVuY3Rpb24oKXthbmd1bGFyLmlzU3RyaW5nKGYpP2QuYWRkQ2xhc3MoZik6YW5ndWxhci5pc0Z1bmN0aW9uKGYpP2YoZCk6YW5ndWxhci5pc09iamVjdChmKSYmZC5jc3MoZiksaXx8aC5yZXNvbHZlKGQpfSksaC5wcm9taXNlLmNhbmNlbD1mdW5jdGlvbigpe2kmJmQudW5iaW5kKGksaiksaC5yZWplY3QoXCJUcmFuc2l0aW9uIGNhbmNlbGxlZFwiKX0saC5wcm9taXNlfSxmPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0cmFuc1wiKSxnPXtXZWJraXRUcmFuc2l0aW9uOlwid2Via2l0VHJhbnNpdGlvbkVuZFwiLE1velRyYW5zaXRpb246XCJ0cmFuc2l0aW9uZW5kXCIsT1RyYW5zaXRpb246XCJvVHJhbnNpdGlvbkVuZFwiLHRyYW5zaXRpb246XCJ0cmFuc2l0aW9uZW5kXCJ9LGg9e1dlYmtpdFRyYW5zaXRpb246XCJ3ZWJraXRBbmltYXRpb25FbmRcIixNb3pUcmFuc2l0aW9uOlwiYW5pbWF0aW9uZW5kXCIsT1RyYW5zaXRpb246XCJvQW5pbWF0aW9uRW5kXCIsdHJhbnNpdGlvbjpcImFuaW1hdGlvbmVuZFwifTtyZXR1cm4gZS50cmFuc2l0aW9uRW5kRXZlbnROYW1lPWQoZyksZS5hbmltYXRpb25FbmRFdmVudE5hbWU9ZChoKSxlfV0pLGFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLmNvbGxhcHNlXCIsW1widWkuYm9vdHN0cmFwLnRyYW5zaXRpb25cIl0pLmRpcmVjdGl2ZShcImNvbGxhcHNlXCIsW1wiJHRyYW5zaXRpb25cIixmdW5jdGlvbihhKXtyZXR1cm57bGluazpmdW5jdGlvbihiLGMsZCl7ZnVuY3Rpb24gZShiKXtmdW5jdGlvbiBkKCl7aj09PWUmJihqPXZvaWQgMCl9dmFyIGU9YShjLGIpO3JldHVybiBqJiZqLmNhbmNlbCgpLGo9ZSxlLnRoZW4oZCxkKSxlfWZ1bmN0aW9uIGYoKXtrPyhrPSExLGcoKSk6KGMucmVtb3ZlQ2xhc3MoXCJjb2xsYXBzZVwiKS5hZGRDbGFzcyhcImNvbGxhcHNpbmdcIiksZSh7aGVpZ2h0OmNbMF0uc2Nyb2xsSGVpZ2h0K1wicHhcIn0pLnRoZW4oZykpfWZ1bmN0aW9uIGcoKXtjLnJlbW92ZUNsYXNzKFwiY29sbGFwc2luZ1wiKSxjLmFkZENsYXNzKFwiY29sbGFwc2UgaW5cIiksYy5jc3Moe2hlaWdodDpcImF1dG9cIn0pfWZ1bmN0aW9uIGgoKXtpZihrKWs9ITEsaSgpLGMuY3NzKHtoZWlnaHQ6MH0pO2Vsc2V7Yy5jc3Moe2hlaWdodDpjWzBdLnNjcm9sbEhlaWdodCtcInB4XCJ9KTt7Y1swXS5vZmZzZXRXaWR0aH1jLnJlbW92ZUNsYXNzKFwiY29sbGFwc2UgaW5cIikuYWRkQ2xhc3MoXCJjb2xsYXBzaW5nXCIpLGUoe2hlaWdodDowfSkudGhlbihpKX19ZnVuY3Rpb24gaSgpe2MucmVtb3ZlQ2xhc3MoXCJjb2xsYXBzaW5nXCIpLGMuYWRkQ2xhc3MoXCJjb2xsYXBzZVwiKX12YXIgaixrPSEwO2IuJHdhdGNoKGQuY29sbGFwc2UsZnVuY3Rpb24oYSl7YT9oKCk6ZigpfSl9fX1dKSxhbmd1bGFyLm1vZHVsZShcInVpLmJvb3RzdHJhcC5hY2NvcmRpb25cIixbXCJ1aS5ib290c3RyYXAuY29sbGFwc2VcIl0pLmNvbnN0YW50KFwiYWNjb3JkaW9uQ29uZmlnXCIse2Nsb3NlT3RoZXJzOiEwfSkuY29udHJvbGxlcihcIkFjY29yZGlvbkNvbnRyb2xsZXJcIixbXCIkc2NvcGVcIixcIiRhdHRyc1wiLFwiYWNjb3JkaW9uQ29uZmlnXCIsZnVuY3Rpb24oYSxiLGMpe3RoaXMuZ3JvdXBzPVtdLHRoaXMuY2xvc2VPdGhlcnM9ZnVuY3Rpb24oZCl7dmFyIGU9YW5ndWxhci5pc0RlZmluZWQoYi5jbG9zZU90aGVycyk/YS4kZXZhbChiLmNsb3NlT3RoZXJzKTpjLmNsb3NlT3RoZXJzO2UmJmFuZ3VsYXIuZm9yRWFjaCh0aGlzLmdyb3VwcyxmdW5jdGlvbihhKXthIT09ZCYmKGEuaXNPcGVuPSExKX0pfSx0aGlzLmFkZEdyb3VwPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7dGhpcy5ncm91cHMucHVzaChhKSxhLiRvbihcIiRkZXN0cm95XCIsZnVuY3Rpb24oKXtiLnJlbW92ZUdyb3VwKGEpfSl9LHRoaXMucmVtb3ZlR3JvdXA9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5ncm91cHMuaW5kZXhPZihhKTstMSE9PWImJnRoaXMuZ3JvdXBzLnNwbGljZShiLDEpfX1dKS5kaXJlY3RpdmUoXCJhY2NvcmRpb25cIixmdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkVBXCIsY29udHJvbGxlcjpcIkFjY29yZGlvbkNvbnRyb2xsZXJcIix0cmFuc2NsdWRlOiEwLHJlcGxhY2U6ITEsdGVtcGxhdGVVcmw6XCJ0ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLmh0bWxcIn19KS5kaXJlY3RpdmUoXCJhY2NvcmRpb25Hcm91cFwiLGZ1bmN0aW9uKCl7cmV0dXJue3JlcXVpcmU6XCJeYWNjb3JkaW9uXCIscmVzdHJpY3Q6XCJFQVwiLHRyYW5zY2x1ZGU6ITAscmVwbGFjZTohMCx0ZW1wbGF0ZVVybDpcInRlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24tZ3JvdXAuaHRtbFwiLHNjb3BlOntoZWFkaW5nOlwiQFwiLGlzT3BlbjpcIj0/XCIsaXNEaXNhYmxlZDpcIj0/XCJ9LGNvbnRyb2xsZXI6ZnVuY3Rpb24oKXt0aGlzLnNldEhlYWRpbmc9ZnVuY3Rpb24oYSl7dGhpcy5oZWFkaW5nPWF9fSxsaW5rOmZ1bmN0aW9uKGEsYixjLGQpe2QuYWRkR3JvdXAoYSksYS4kd2F0Y2goXCJpc09wZW5cIixmdW5jdGlvbihiKXtiJiZkLmNsb3NlT3RoZXJzKGEpfSksYS50b2dnbGVPcGVuPWZ1bmN0aW9uKCl7YS5pc0Rpc2FibGVkfHwoYS5pc09wZW49IWEuaXNPcGVuKX19fX0pLmRpcmVjdGl2ZShcImFjY29yZGlvbkhlYWRpbmdcIixmdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkVBXCIsdHJhbnNjbHVkZTohMCx0ZW1wbGF0ZTpcIlwiLHJlcGxhY2U6ITAscmVxdWlyZTpcIl5hY2NvcmRpb25Hcm91cFwiLGxpbms6ZnVuY3Rpb24oYSxiLGMsZCxlKXtkLnNldEhlYWRpbmcoZShhLGZ1bmN0aW9uKCl7fSkpfX19KS5kaXJlY3RpdmUoXCJhY2NvcmRpb25UcmFuc2NsdWRlXCIsZnVuY3Rpb24oKXtyZXR1cm57cmVxdWlyZTpcIl5hY2NvcmRpb25Hcm91cFwiLGxpbms6ZnVuY3Rpb24oYSxiLGMsZCl7YS4kd2F0Y2goZnVuY3Rpb24oKXtyZXR1cm4gZFtjLmFjY29yZGlvblRyYW5zY2x1ZGVdfSxmdW5jdGlvbihhKXthJiYoYi5odG1sKFwiXCIpLGIuYXBwZW5kKGEpKX0pfX19KSxhbmd1bGFyLm1vZHVsZShcInVpLmJvb3RzdHJhcC5hbGVydFwiLFtdKS5jb250cm9sbGVyKFwiQWxlcnRDb250cm9sbGVyXCIsW1wiJHNjb3BlXCIsXCIkYXR0cnNcIixmdW5jdGlvbihhLGIpe2EuY2xvc2VhYmxlPVwiY2xvc2VcImluIGJ9XSkuZGlyZWN0aXZlKFwiYWxlcnRcIixmdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkVBXCIsY29udHJvbGxlcjpcIkFsZXJ0Q29udHJvbGxlclwiLHRlbXBsYXRlVXJsOlwidGVtcGxhdGUvYWxlcnQvYWxlcnQuaHRtbFwiLHRyYW5zY2x1ZGU6ITAscmVwbGFjZTohMCxzY29wZTp7dHlwZTpcIkBcIixjbG9zZTpcIiZcIn19fSksYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXAuYmluZEh0bWxcIixbXSkuZGlyZWN0aXZlKFwiYmluZEh0bWxVbnNhZmVcIixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIsYyl7Yi5hZGRDbGFzcyhcIm5nLWJpbmRpbmdcIikuZGF0YShcIiRiaW5kaW5nXCIsYy5iaW5kSHRtbFVuc2FmZSksYS4kd2F0Y2goYy5iaW5kSHRtbFVuc2FmZSxmdW5jdGlvbihhKXtiLmh0bWwoYXx8XCJcIil9KX19KSxhbmd1bGFyLm1vZHVsZShcInVpLmJvb3RzdHJhcC5idXR0b25zXCIsW10pLmNvbnN0YW50KFwiYnV0dG9uQ29uZmlnXCIse2FjdGl2ZUNsYXNzOlwiYWN0aXZlXCIsdG9nZ2xlRXZlbnQ6XCJjbGlja1wifSkuY29udHJvbGxlcihcIkJ1dHRvbnNDb250cm9sbGVyXCIsW1wiYnV0dG9uQ29uZmlnXCIsZnVuY3Rpb24oYSl7dGhpcy5hY3RpdmVDbGFzcz1hLmFjdGl2ZUNsYXNzfHxcImFjdGl2ZVwiLHRoaXMudG9nZ2xlRXZlbnQ9YS50b2dnbGVFdmVudHx8XCJjbGlja1wifV0pLmRpcmVjdGl2ZShcImJ0blJhZGlvXCIsZnVuY3Rpb24oKXtyZXR1cm57cmVxdWlyZTpbXCJidG5SYWRpb1wiLFwibmdNb2RlbFwiXSxjb250cm9sbGVyOlwiQnV0dG9uc0NvbnRyb2xsZXJcIixsaW5rOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWRbMF0sZj1kWzFdO2YuJHJlbmRlcj1mdW5jdGlvbigpe2IudG9nZ2xlQ2xhc3MoZS5hY3RpdmVDbGFzcyxhbmd1bGFyLmVxdWFscyhmLiRtb2RlbFZhbHVlLGEuJGV2YWwoYy5idG5SYWRpbykpKX0sYi5iaW5kKGUudG9nZ2xlRXZlbnQsZnVuY3Rpb24oKXt2YXIgZD1iLmhhc0NsYXNzKGUuYWN0aXZlQ2xhc3MpOyghZHx8YW5ndWxhci5pc0RlZmluZWQoYy51bmNoZWNrYWJsZSkpJiZhLiRhcHBseShmdW5jdGlvbigpe2YuJHNldFZpZXdWYWx1ZShkP251bGw6YS4kZXZhbChjLmJ0blJhZGlvKSksZi4kcmVuZGVyKCl9KX0pfX19KS5kaXJlY3RpdmUoXCJidG5DaGVja2JveFwiLGZ1bmN0aW9uKCl7cmV0dXJue3JlcXVpcmU6W1wiYnRuQ2hlY2tib3hcIixcIm5nTW9kZWxcIl0sY29udHJvbGxlcjpcIkJ1dHRvbnNDb250cm9sbGVyXCIsbGluazpmdW5jdGlvbihhLGIsYyxkKXtmdW5jdGlvbiBlKCl7cmV0dXJuIGcoYy5idG5DaGVja2JveFRydWUsITApfWZ1bmN0aW9uIGYoKXtyZXR1cm4gZyhjLmJ0bkNoZWNrYm94RmFsc2UsITEpfWZ1bmN0aW9uIGcoYixjKXt2YXIgZD1hLiRldmFsKGIpO3JldHVybiBhbmd1bGFyLmlzRGVmaW5lZChkKT9kOmN9dmFyIGg9ZFswXSxpPWRbMV07aS4kcmVuZGVyPWZ1bmN0aW9uKCl7Yi50b2dnbGVDbGFzcyhoLmFjdGl2ZUNsYXNzLGFuZ3VsYXIuZXF1YWxzKGkuJG1vZGVsVmFsdWUsZSgpKSl9LGIuYmluZChoLnRvZ2dsZUV2ZW50LGZ1bmN0aW9uKCl7YS4kYXBwbHkoZnVuY3Rpb24oKXtpLiRzZXRWaWV3VmFsdWUoYi5oYXNDbGFzcyhoLmFjdGl2ZUNsYXNzKT9mKCk6ZSgpKSxpLiRyZW5kZXIoKX0pfSl9fX0pLGFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLmNhcm91c2VsXCIsW1widWkuYm9vdHN0cmFwLnRyYW5zaXRpb25cIl0pLmNvbnRyb2xsZXIoXCJDYXJvdXNlbENvbnRyb2xsZXJcIixbXCIkc2NvcGVcIixcIiR0aW1lb3V0XCIsXCIkdHJhbnNpdGlvblwiLGZ1bmN0aW9uKGEsYixjKXtmdW5jdGlvbiBkKCl7ZSgpO3ZhciBjPSthLmludGVydmFsOyFpc05hTihjKSYmYz49MCYmKGc9YihmLGMpKX1mdW5jdGlvbiBlKCl7ZyYmKGIuY2FuY2VsKGcpLGc9bnVsbCl9ZnVuY3Rpb24gZigpe2g/KGEubmV4dCgpLGQoKSk6YS5wYXVzZSgpfXZhciBnLGgsaT10aGlzLGo9aS5zbGlkZXM9YS5zbGlkZXM9W10saz0tMTtpLmN1cnJlbnRTbGlkZT1udWxsO3ZhciBsPSExO2kuc2VsZWN0PWEuc2VsZWN0PWZ1bmN0aW9uKGUsZil7ZnVuY3Rpb24gZygpe2lmKCFsKXtpZihpLmN1cnJlbnRTbGlkZSYmYW5ndWxhci5pc1N0cmluZyhmKSYmIWEubm9UcmFuc2l0aW9uJiZlLiRlbGVtZW50KXtlLiRlbGVtZW50LmFkZENsYXNzKGYpO3tlLiRlbGVtZW50WzBdLm9mZnNldFdpZHRofWFuZ3VsYXIuZm9yRWFjaChqLGZ1bmN0aW9uKGEpe2FuZ3VsYXIuZXh0ZW5kKGEse2RpcmVjdGlvbjpcIlwiLGVudGVyaW5nOiExLGxlYXZpbmc6ITEsYWN0aXZlOiExfSl9KSxhbmd1bGFyLmV4dGVuZChlLHtkaXJlY3Rpb246ZixhY3RpdmU6ITAsZW50ZXJpbmc6ITB9KSxhbmd1bGFyLmV4dGVuZChpLmN1cnJlbnRTbGlkZXx8e30se2RpcmVjdGlvbjpmLGxlYXZpbmc6ITB9KSxhLiRjdXJyZW50VHJhbnNpdGlvbj1jKGUuJGVsZW1lbnQse30pLGZ1bmN0aW9uKGIsYyl7YS4kY3VycmVudFRyYW5zaXRpb24udGhlbihmdW5jdGlvbigpe2goYixjKX0sZnVuY3Rpb24oKXtoKGIsYyl9KX0oZSxpLmN1cnJlbnRTbGlkZSl9ZWxzZSBoKGUsaS5jdXJyZW50U2xpZGUpO2kuY3VycmVudFNsaWRlPWUsaz1tLGQoKX19ZnVuY3Rpb24gaChiLGMpe2FuZ3VsYXIuZXh0ZW5kKGIse2RpcmVjdGlvbjpcIlwiLGFjdGl2ZTohMCxsZWF2aW5nOiExLGVudGVyaW5nOiExfSksYW5ndWxhci5leHRlbmQoY3x8e30se2RpcmVjdGlvbjpcIlwiLGFjdGl2ZTohMSxsZWF2aW5nOiExLGVudGVyaW5nOiExfSksYS4kY3VycmVudFRyYW5zaXRpb249bnVsbH12YXIgbT1qLmluZGV4T2YoZSk7dm9pZCAwPT09ZiYmKGY9bT5rP1wibmV4dFwiOlwicHJldlwiKSxlJiZlIT09aS5jdXJyZW50U2xpZGUmJihhLiRjdXJyZW50VHJhbnNpdGlvbj8oYS4kY3VycmVudFRyYW5zaXRpb24uY2FuY2VsKCksYihnKSk6ZygpKX0sYS4kb24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7bD0hMH0pLGkuaW5kZXhPZlNsaWRlPWZ1bmN0aW9uKGEpe3JldHVybiBqLmluZGV4T2YoYSl9LGEubmV4dD1mdW5jdGlvbigpe3ZhciBiPShrKzEpJWoubGVuZ3RoO3JldHVybiBhLiRjdXJyZW50VHJhbnNpdGlvbj92b2lkIDA6aS5zZWxlY3QoaltiXSxcIm5leHRcIil9LGEucHJldj1mdW5jdGlvbigpe3ZhciBiPTA+ay0xP2oubGVuZ3RoLTE6ay0xO3JldHVybiBhLiRjdXJyZW50VHJhbnNpdGlvbj92b2lkIDA6aS5zZWxlY3QoaltiXSxcInByZXZcIil9LGEuaXNBY3RpdmU9ZnVuY3Rpb24oYSl7cmV0dXJuIGkuY3VycmVudFNsaWRlPT09YX0sYS4kd2F0Y2goXCJpbnRlcnZhbFwiLGQpLGEuJG9uKFwiJGRlc3Ryb3lcIixlKSxhLnBsYXk9ZnVuY3Rpb24oKXtofHwoaD0hMCxkKCkpfSxhLnBhdXNlPWZ1bmN0aW9uKCl7YS5ub1BhdXNlfHwoaD0hMSxlKCkpfSxpLmFkZFNsaWRlPWZ1bmN0aW9uKGIsYyl7Yi4kZWxlbWVudD1jLGoucHVzaChiKSwxPT09ai5sZW5ndGh8fGIuYWN0aXZlPyhpLnNlbGVjdChqW2oubGVuZ3RoLTFdKSwxPT1qLmxlbmd0aCYmYS5wbGF5KCkpOmIuYWN0aXZlPSExfSxpLnJlbW92ZVNsaWRlPWZ1bmN0aW9uKGEpe3ZhciBiPWouaW5kZXhPZihhKTtqLnNwbGljZShiLDEpLGoubGVuZ3RoPjAmJmEuYWN0aXZlP2kuc2VsZWN0KGI+PWoubGVuZ3RoP2pbYi0xXTpqW2JdKTprPmImJmstLX19XSkuZGlyZWN0aXZlKFwiY2Fyb3VzZWxcIixbZnVuY3Rpb24oKXtyZXR1cm57cmVzdHJpY3Q6XCJFQVwiLHRyYW5zY2x1ZGU6ITAscmVwbGFjZTohMCxjb250cm9sbGVyOlwiQ2Fyb3VzZWxDb250cm9sbGVyXCIscmVxdWlyZTpcImNhcm91c2VsXCIsdGVtcGxhdGVVcmw6XCJ0ZW1wbGF0ZS9jYXJvdXNlbC9jYXJvdXNlbC5odG1sXCIsc2NvcGU6e2ludGVydmFsOlwiPVwiLG5vVHJhbnNpdGlvbjpcIj1cIixub1BhdXNlOlwiPVwifX19XSkuZGlyZWN0aXZlKFwic2xpZGVcIixmdW5jdGlvbigpe3JldHVybntyZXF1aXJlOlwiXmNhcm91c2VsXCIscmVzdHJpY3Q6XCJFQVwiLHRyYW5zY2x1ZGU6ITAscmVwbGFjZTohMCx0ZW1wbGF0ZVVybDpcInRlbXBsYXRlL2Nhcm91c2VsL3NsaWRlLmh0bWxcIixzY29wZTp7YWN0aXZlOlwiPT9cIn0sbGluazpmdW5jdGlvbihhLGIsYyxkKXtkLmFkZFNsaWRlKGEsYiksYS4kb24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7ZC5yZW1vdmVTbGlkZShhKX0pLGEuJHdhdGNoKFwiYWN0aXZlXCIsZnVuY3Rpb24oYil7YiYmZC5zZWxlY3QoYSl9KX19fSksYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXAuZGF0ZXBhcnNlclwiLFtdKS5zZXJ2aWNlKFwiZGF0ZVBhcnNlclwiLFtcIiRsb2NhbGVcIixcIm9yZGVyQnlGaWx0ZXJcIixmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSl7dmFyIGM9W10sZD1hLnNwbGl0KFwiXCIpO3JldHVybiBhbmd1bGFyLmZvckVhY2goZSxmdW5jdGlvbihiLGUpe3ZhciBmPWEuaW5kZXhPZihlKTtpZihmPi0xKXthPWEuc3BsaXQoXCJcIiksZFtmXT1cIihcIitiLnJlZ2V4K1wiKVwiLGFbZl09XCIkXCI7Zm9yKHZhciBnPWYrMSxoPWYrZS5sZW5ndGg7aD5nO2crKylkW2ddPVwiXCIsYVtnXT1cIiRcIjthPWEuam9pbihcIlwiKSxjLnB1c2goe2luZGV4OmYsYXBwbHk6Yi5hcHBseX0pfX0pLHtyZWdleDpuZXcgUmVnRXhwKFwiXlwiK2Quam9pbihcIlwiKStcIiRcIiksbWFwOmIoYyxcImluZGV4XCIpfX1mdW5jdGlvbiBkKGEsYixjKXtyZXR1cm4gMT09PWImJmM+Mjg/Mjk9PT1jJiYoYSU0PT09MCYmYSUxMDAhPT0wfHxhJTQwMD09PTApOjM9PT1ifHw1PT09Ynx8OD09PWJ8fDEwPT09Yj8zMT5jOiEwfXRoaXMucGFyc2Vycz17fTt2YXIgZT17eXl5eTp7cmVnZXg6XCJcXFxcZHs0fVwiLGFwcGx5OmZ1bmN0aW9uKGEpe3RoaXMueWVhcj0rYX19LHl5OntyZWdleDpcIlxcXFxkezJ9XCIsYXBwbHk6ZnVuY3Rpb24oYSl7dGhpcy55ZWFyPSthKzJlM319LHk6e3JlZ2V4OlwiXFxcXGR7MSw0fVwiLGFwcGx5OmZ1bmN0aW9uKGEpe3RoaXMueWVhcj0rYX19LE1NTU06e3JlZ2V4OmEuREFURVRJTUVfRk9STUFUUy5NT05USC5qb2luKFwifFwiKSxhcHBseTpmdW5jdGlvbihiKXt0aGlzLm1vbnRoPWEuREFURVRJTUVfRk9STUFUUy5NT05USC5pbmRleE9mKGIpfX0sTU1NOntyZWdleDphLkRBVEVUSU1FX0ZPUk1BVFMuU0hPUlRNT05USC5qb2luKFwifFwiKSxhcHBseTpmdW5jdGlvbihiKXt0aGlzLm1vbnRoPWEuREFURVRJTUVfRk9STUFUUy5TSE9SVE1PTlRILmluZGV4T2YoYil9fSxNTTp7cmVnZXg6XCIwWzEtOV18MVswLTJdXCIsYXBwbHk6ZnVuY3Rpb24oYSl7dGhpcy5tb250aD1hLTF9fSxNOntyZWdleDpcIlsxLTldfDFbMC0yXVwiLGFwcGx5OmZ1bmN0aW9uKGEpe3RoaXMubW9udGg9YS0xfX0sZGQ6e3JlZ2V4OlwiWzAtMl1bMC05XXsxfXwzWzAtMV17MX1cIixhcHBseTpmdW5jdGlvbihhKXt0aGlzLmRhdGU9K2F9fSxkOntyZWdleDpcIlsxLTJdP1swLTldezF9fDNbMC0xXXsxfVwiLGFwcGx5OmZ1bmN0aW9uKGEpe3RoaXMuZGF0ZT0rYX19LEVFRUU6e3JlZ2V4OmEuREFURVRJTUVfRk9STUFUUy5EQVkuam9pbihcInxcIil9LEVFRTp7cmVnZXg6YS5EQVRFVElNRV9GT1JNQVRTLlNIT1JUREFZLmpvaW4oXCJ8XCIpfX07dGhpcy5wYXJzZT1mdW5jdGlvbihiLGUpe2lmKCFhbmd1bGFyLmlzU3RyaW5nKGIpfHwhZSlyZXR1cm4gYjtlPWEuREFURVRJTUVfRk9STUFUU1tlXXx8ZSx0aGlzLnBhcnNlcnNbZV18fCh0aGlzLnBhcnNlcnNbZV09YyhlKSk7dmFyIGY9dGhpcy5wYXJzZXJzW2VdLGc9Zi5yZWdleCxoPWYubWFwLGk9Yi5tYXRjaChnKTtpZihpJiZpLmxlbmd0aCl7Zm9yKHZhciBqLGs9e3llYXI6MTkwMCxtb250aDowLGRhdGU6MSxob3VyczowfSxsPTEsbT1pLmxlbmd0aDttPmw7bCsrKXt2YXIgbj1oW2wtMV07bi5hcHBseSYmbi5hcHBseS5jYWxsKGssaVtsXSl9cmV0dXJuIGQoay55ZWFyLGsubW9udGgsay5kYXRlKSYmKGo9bmV3IERhdGUoay55ZWFyLGsubW9udGgsay5kYXRlLGsuaG91cnMpKSxqfX19XSksYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXAucG9zaXRpb25cIixbXSkuZmFjdG9yeShcIiRwb3NpdGlvblwiLFtcIiRkb2N1bWVudFwiLFwiJHdpbmRvd1wiLGZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhLGMpe3JldHVybiBhLmN1cnJlbnRTdHlsZT9hLmN1cnJlbnRTdHlsZVtjXTpiLmdldENvbXB1dGVkU3R5bGU/Yi5nZXRDb21wdXRlZFN0eWxlKGEpW2NdOmEuc3R5bGVbY119ZnVuY3Rpb24gZChhKXtyZXR1cm5cInN0YXRpY1wiPT09KGMoYSxcInBvc2l0aW9uXCIpfHxcInN0YXRpY1wiKX12YXIgZT1mdW5jdGlvbihiKXtmb3IodmFyIGM9YVswXSxlPWIub2Zmc2V0UGFyZW50fHxjO2UmJmUhPT1jJiZkKGUpOyllPWUub2Zmc2V0UGFyZW50O3JldHVybiBlfHxjfTtyZXR1cm57cG9zaXRpb246ZnVuY3Rpb24oYil7dmFyIGM9dGhpcy5vZmZzZXQoYiksZD17dG9wOjAsbGVmdDowfSxmPWUoYlswXSk7ZiE9YVswXSYmKGQ9dGhpcy5vZmZzZXQoYW5ndWxhci5lbGVtZW50KGYpKSxkLnRvcCs9Zi5jbGllbnRUb3AtZi5zY3JvbGxUb3AsZC5sZWZ0Kz1mLmNsaWVudExlZnQtZi5zY3JvbGxMZWZ0KTt2YXIgZz1iWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO3JldHVybnt3aWR0aDpnLndpZHRofHxiLnByb3AoXCJvZmZzZXRXaWR0aFwiKSxoZWlnaHQ6Zy5oZWlnaHR8fGIucHJvcChcIm9mZnNldEhlaWdodFwiKSx0b3A6Yy50b3AtZC50b3AsbGVmdDpjLmxlZnQtZC5sZWZ0fX0sb2Zmc2V0OmZ1bmN0aW9uKGMpe3ZhciBkPWNbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7cmV0dXJue3dpZHRoOmQud2lkdGh8fGMucHJvcChcIm9mZnNldFdpZHRoXCIpLGhlaWdodDpkLmhlaWdodHx8Yy5wcm9wKFwib2Zmc2V0SGVpZ2h0XCIpLHRvcDpkLnRvcCsoYi5wYWdlWU9mZnNldHx8YVswXS5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSxsZWZ0OmQubGVmdCsoYi5wYWdlWE9mZnNldHx8YVswXS5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCl9fSxwb3NpdGlvbkVsZW1lbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlLGYsZyxoLGk9Yy5zcGxpdChcIi1cIiksaj1pWzBdLGs9aVsxXXx8XCJjZW50ZXJcIjtlPWQ/dGhpcy5vZmZzZXQoYSk6dGhpcy5wb3NpdGlvbihhKSxmPWIucHJvcChcIm9mZnNldFdpZHRoXCIpLGc9Yi5wcm9wKFwib2Zmc2V0SGVpZ2h0XCIpO3ZhciBsPXtjZW50ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gZS5sZWZ0K2Uud2lkdGgvMi1mLzJ9LGxlZnQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5sZWZ0fSxyaWdodDpmdW5jdGlvbigpe3JldHVybiBlLmxlZnQrZS53aWR0aH19LG09e2NlbnRlcjpmdW5jdGlvbigpe3JldHVybiBlLnRvcCtlLmhlaWdodC8yLWcvMn0sdG9wOmZ1bmN0aW9uKCl7cmV0dXJuIGUudG9wfSxib3R0b206ZnVuY3Rpb24oKXtyZXR1cm4gZS50b3ArZS5oZWlnaHR9fTtzd2l0Y2goail7Y2FzZVwicmlnaHRcIjpoPXt0b3A6bVtrXSgpLGxlZnQ6bFtqXSgpfTticmVhaztjYXNlXCJsZWZ0XCI6aD17dG9wOm1ba10oKSxsZWZ0OmUubGVmdC1mfTticmVhaztjYXNlXCJib3R0b21cIjpoPXt0b3A6bVtqXSgpLGxlZnQ6bFtrXSgpfTticmVhaztkZWZhdWx0Omg9e3RvcDplLnRvcC1nLGxlZnQ6bFtrXSgpfX1yZXR1cm4gaH19fV0pLGFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLmRhdGVwaWNrZXJcIixbXCJ1aS5ib290c3RyYXAuZGF0ZXBhcnNlclwiLFwidWkuYm9vdHN0cmFwLnBvc2l0aW9uXCJdKS5jb25zdGFudChcImRhdGVwaWNrZXJDb25maWdcIix7Zm9ybWF0RGF5OlwiZGRcIixmb3JtYXRNb250aDpcIk1NTU1cIixmb3JtYXRZZWFyOlwieXl5eVwiLGZvcm1hdERheUhlYWRlcjpcIkVFRVwiLGZvcm1hdERheVRpdGxlOlwiTU1NTSB5eXl5XCIsZm9ybWF0TW9udGhUaXRsZTpcInl5eXlcIixkYXRlcGlja2VyTW9kZTpcImRheVwiLG1pbk1vZGU6XCJkYXlcIixtYXhNb2RlOlwieWVhclwiLHNob3dXZWVrczohMCxzdGFydGluZ0RheTowLHllYXJSYW5nZToyMCxtaW5EYXRlOm51bGwsbWF4RGF0ZTpudWxsfSkuY29udHJvbGxlcihcIkRhdGVwaWNrZXJDb250cm9sbGVyXCIsW1wiJHNjb3BlXCIsXCIkYXR0cnNcIixcIiRwYXJzZVwiLFwiJGludGVycG9sYXRlXCIsXCIkdGltZW91dFwiLFwiJGxvZ1wiLFwiZGF0ZUZpbHRlclwiLFwiZGF0ZXBpY2tlckNvbmZpZ1wiLGZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCl7dmFyIGk9dGhpcyxqPXskc2V0Vmlld1ZhbHVlOmFuZ3VsYXIubm9vcH07dGhpcy5tb2Rlcz1bXCJkYXlcIixcIm1vbnRoXCIsXCJ5ZWFyXCJdLGFuZ3VsYXIuZm9yRWFjaChbXCJmb3JtYXREYXlcIixcImZvcm1hdE1vbnRoXCIsXCJmb3JtYXRZZWFyXCIsXCJmb3JtYXREYXlIZWFkZXJcIixcImZvcm1hdERheVRpdGxlXCIsXCJmb3JtYXRNb250aFRpdGxlXCIsXCJtaW5Nb2RlXCIsXCJtYXhNb2RlXCIsXCJzaG93V2Vla3NcIixcInN0YXJ0aW5nRGF5XCIsXCJ5ZWFyUmFuZ2VcIl0sZnVuY3Rpb24oYyxlKXtpW2NdPWFuZ3VsYXIuaXNEZWZpbmVkKGJbY10pPzg+ZT9kKGJbY10pKGEuJHBhcmVudCk6YS4kcGFyZW50LiRldmFsKGJbY10pOmhbY119KSxhbmd1bGFyLmZvckVhY2goW1wibWluRGF0ZVwiLFwibWF4RGF0ZVwiXSxmdW5jdGlvbihkKXtiW2RdP2EuJHBhcmVudC4kd2F0Y2goYyhiW2RdKSxmdW5jdGlvbihhKXtpW2RdPWE/bmV3IERhdGUoYSk6bnVsbCxpLnJlZnJlc2hWaWV3KCl9KTppW2RdPWhbZF0/bmV3IERhdGUoaFtkXSk6bnVsbH0pLGEuZGF0ZXBpY2tlck1vZGU9YS5kYXRlcGlja2VyTW9kZXx8aC5kYXRlcGlja2VyTW9kZSxhLnVuaXF1ZUlkPVwiZGF0ZXBpY2tlci1cIithLiRpZCtcIi1cIitNYXRoLmZsb29yKDFlNCpNYXRoLnJhbmRvbSgpKSx0aGlzLmFjdGl2ZURhdGU9YW5ndWxhci5pc0RlZmluZWQoYi5pbml0RGF0ZSk/YS4kcGFyZW50LiRldmFsKGIuaW5pdERhdGUpOm5ldyBEYXRlLGEuaXNBY3RpdmU9ZnVuY3Rpb24oYil7cmV0dXJuIDA9PT1pLmNvbXBhcmUoYi5kYXRlLGkuYWN0aXZlRGF0ZSk/KGEuYWN0aXZlRGF0ZUlkPWIudWlkLCEwKTohMX0sdGhpcy5pbml0PWZ1bmN0aW9uKGEpe2o9YSxqLiRyZW5kZXI9ZnVuY3Rpb24oKXtpLnJlbmRlcigpfX0sdGhpcy5yZW5kZXI9ZnVuY3Rpb24oKXtpZihqLiRtb2RlbFZhbHVlKXt2YXIgYT1uZXcgRGF0ZShqLiRtb2RlbFZhbHVlKSxiPSFpc05hTihhKTtiP3RoaXMuYWN0aXZlRGF0ZT1hOmYuZXJyb3IoJ0RhdGVwaWNrZXIgZGlyZWN0aXZlOiBcIm5nLW1vZGVsXCIgdmFsdWUgbXVzdCBiZSBhIERhdGUgb2JqZWN0LCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgMDEuMDEuMTk3MCBvciBhIHN0cmluZyByZXByZXNlbnRpbmcgYW4gUkZDMjgyMiBvciBJU08gODYwMSBkYXRlLicpLGouJHNldFZhbGlkaXR5KFwiZGF0ZVwiLGIpfXRoaXMucmVmcmVzaFZpZXcoKX0sdGhpcy5yZWZyZXNoVmlldz1mdW5jdGlvbigpe2lmKHRoaXMuZWxlbWVudCl7dGhpcy5fcmVmcmVzaFZpZXcoKTt2YXIgYT1qLiRtb2RlbFZhbHVlP25ldyBEYXRlKGouJG1vZGVsVmFsdWUpOm51bGw7ai4kc2V0VmFsaWRpdHkoXCJkYXRlLWRpc2FibGVkXCIsIWF8fHRoaXMuZWxlbWVudCYmIXRoaXMuaXNEaXNhYmxlZChhKSl9fSx0aGlzLmNyZWF0ZURhdGVPYmplY3Q9ZnVuY3Rpb24oYSxiKXt2YXIgYz1qLiRtb2RlbFZhbHVlP25ldyBEYXRlKGouJG1vZGVsVmFsdWUpOm51bGw7cmV0dXJue2RhdGU6YSxsYWJlbDpnKGEsYiksc2VsZWN0ZWQ6YyYmMD09PXRoaXMuY29tcGFyZShhLGMpLGRpc2FibGVkOnRoaXMuaXNEaXNhYmxlZChhKSxjdXJyZW50OjA9PT10aGlzLmNvbXBhcmUoYSxuZXcgRGF0ZSl9fSx0aGlzLmlzRGlzYWJsZWQ9ZnVuY3Rpb24oYyl7cmV0dXJuIHRoaXMubWluRGF0ZSYmdGhpcy5jb21wYXJlKGMsdGhpcy5taW5EYXRlKTwwfHx0aGlzLm1heERhdGUmJnRoaXMuY29tcGFyZShjLHRoaXMubWF4RGF0ZSk+MHx8Yi5kYXRlRGlzYWJsZWQmJmEuZGF0ZURpc2FibGVkKHtkYXRlOmMsbW9kZTphLmRhdGVwaWNrZXJNb2RlfSl9LHRoaXMuc3BsaXQ9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9W107YS5sZW5ndGg+MDspYy5wdXNoKGEuc3BsaWNlKDAsYikpO3JldHVybiBjfSxhLnNlbGVjdD1mdW5jdGlvbihiKXtpZihhLmRhdGVwaWNrZXJNb2RlPT09aS5taW5Nb2RlKXt2YXIgYz1qLiRtb2RlbFZhbHVlP25ldyBEYXRlKGouJG1vZGVsVmFsdWUpOm5ldyBEYXRlKDAsMCwwLDAsMCwwLDApO2Muc2V0RnVsbFllYXIoYi5nZXRGdWxsWWVhcigpLGIuZ2V0TW9udGgoKSxiLmdldERhdGUoKSksai4kc2V0Vmlld1ZhbHVlKGMpLGouJHJlbmRlcigpfWVsc2UgaS5hY3RpdmVEYXRlPWIsYS5kYXRlcGlja2VyTW9kZT1pLm1vZGVzW2kubW9kZXMuaW5kZXhPZihhLmRhdGVwaWNrZXJNb2RlKS0xXX0sYS5tb3ZlPWZ1bmN0aW9uKGEpe3ZhciBiPWkuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpK2EqKGkuc3RlcC55ZWFyc3x8MCksYz1pLmFjdGl2ZURhdGUuZ2V0TW9udGgoKSthKihpLnN0ZXAubW9udGhzfHwwKTtpLmFjdGl2ZURhdGUuc2V0RnVsbFllYXIoYixjLDEpLGkucmVmcmVzaFZpZXcoKX0sYS50b2dnbGVNb2RlPWZ1bmN0aW9uKGIpe2I9Ynx8MSxhLmRhdGVwaWNrZXJNb2RlPT09aS5tYXhNb2RlJiYxPT09Ynx8YS5kYXRlcGlja2VyTW9kZT09PWkubWluTW9kZSYmLTE9PT1ifHwoYS5kYXRlcGlja2VyTW9kZT1pLm1vZGVzW2kubW9kZXMuaW5kZXhPZihhLmRhdGVwaWNrZXJNb2RlKStiXSl9LGEua2V5cz17MTM6XCJlbnRlclwiLDMyOlwic3BhY2VcIiwzMzpcInBhZ2V1cFwiLDM0OlwicGFnZWRvd25cIiwzNTpcImVuZFwiLDM2OlwiaG9tZVwiLDM3OlwibGVmdFwiLDM4OlwidXBcIiwzOTpcInJpZ2h0XCIsNDA6XCJkb3duXCJ9O3ZhciBrPWZ1bmN0aW9uKCl7ZShmdW5jdGlvbigpe2kuZWxlbWVudFswXS5mb2N1cygpfSwwLCExKX07YS4kb24oXCJkYXRlcGlja2VyLmZvY3VzXCIsayksYS5rZXlkb3duPWZ1bmN0aW9uKGIpe3ZhciBjPWEua2V5c1tiLndoaWNoXTtpZihjJiYhYi5zaGlmdEtleSYmIWIuYWx0S2V5KWlmKGIucHJldmVudERlZmF1bHQoKSxiLnN0b3BQcm9wYWdhdGlvbigpLFwiZW50ZXJcIj09PWN8fFwic3BhY2VcIj09PWMpe2lmKGkuaXNEaXNhYmxlZChpLmFjdGl2ZURhdGUpKXJldHVybjthLnNlbGVjdChpLmFjdGl2ZURhdGUpLGsoKX1lbHNlIWIuY3RybEtleXx8XCJ1cFwiIT09YyYmXCJkb3duXCIhPT1jPyhpLmhhbmRsZUtleURvd24oYyxiKSxpLnJlZnJlc2hWaWV3KCkpOihhLnRvZ2dsZU1vZGUoXCJ1cFwiPT09Yz8xOi0xKSxrKCkpfX1dKS5kaXJlY3RpdmUoXCJkYXRlcGlja2VyXCIsZnVuY3Rpb24oKXtyZXR1cm57cmVzdHJpY3Q6XCJFQVwiLHJlcGxhY2U6ITAsdGVtcGxhdGVVcmw6XCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbFwiLHNjb3BlOntkYXRlcGlja2VyTW9kZTpcIj0/XCIsZGF0ZURpc2FibGVkOlwiJlwifSxyZXF1aXJlOltcImRhdGVwaWNrZXJcIixcIj9ebmdNb2RlbFwiXSxjb250cm9sbGVyOlwiRGF0ZXBpY2tlckNvbnRyb2xsZXJcIixsaW5rOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWRbMF0sZj1kWzFdO2YmJmUuaW5pdChmKX19fSkuZGlyZWN0aXZlKFwiZGF5cGlja2VyXCIsW1wiZGF0ZUZpbHRlclwiLGZ1bmN0aW9uKGEpe3JldHVybntyZXN0cmljdDpcIkVBXCIscmVwbGFjZTohMCx0ZW1wbGF0ZVVybDpcInRlbXBsYXRlL2RhdGVwaWNrZXIvZGF5Lmh0bWxcIixyZXF1aXJlOlwiXmRhdGVwaWNrZXJcIixsaW5rOmZ1bmN0aW9uKGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSxiKXtyZXR1cm4gMSE9PWJ8fGElNCE9PTB8fGElMTAwPT09MCYmYSU0MDAhPT0wP2lbYl06Mjl9ZnVuY3Rpb24gZyhhLGIpe3ZhciBjPW5ldyBBcnJheShiKSxkPW5ldyBEYXRlKGEpLGU9MDtmb3IoZC5zZXRIb3VycygxMik7Yj5lOyljW2UrK109bmV3IERhdGUoZCksZC5zZXREYXRlKGQuZ2V0RGF0ZSgpKzEpO3JldHVybiBjfWZ1bmN0aW9uIGgoYSl7dmFyIGI9bmV3IERhdGUoYSk7Yi5zZXREYXRlKGIuZ2V0RGF0ZSgpKzQtKGIuZ2V0RGF5KCl8fDcpKTt2YXIgYz1iLmdldFRpbWUoKTtyZXR1cm4gYi5zZXRNb250aCgwKSxiLnNldERhdGUoMSksTWF0aC5mbG9vcihNYXRoLnJvdW5kKChjLWIpLzg2NGU1KS83KSsxfWIuc2hvd1dlZWtzPWUuc2hvd1dlZWtzLGUuc3RlcD17bW9udGhzOjF9LGUuZWxlbWVudD1jO3ZhciBpPVszMSwyOCwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV07ZS5fcmVmcmVzaFZpZXc9ZnVuY3Rpb24oKXt2YXIgYz1lLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSxkPWUuYWN0aXZlRGF0ZS5nZXRNb250aCgpLGY9bmV3IERhdGUoYyxkLDEpLGk9ZS5zdGFydGluZ0RheS1mLmdldERheSgpLGo9aT4wPzctaTotaSxrPW5ldyBEYXRlKGYpO2o+MCYmay5zZXREYXRlKC1qKzEpO2Zvcih2YXIgbD1nKGssNDIpLG09MDs0Mj5tO20rKylsW21dPWFuZ3VsYXIuZXh0ZW5kKGUuY3JlYXRlRGF0ZU9iamVjdChsW21dLGUuZm9ybWF0RGF5KSx7c2Vjb25kYXJ5OmxbbV0uZ2V0TW9udGgoKSE9PWQsdWlkOmIudW5pcXVlSWQrXCItXCIrbX0pO2IubGFiZWxzPW5ldyBBcnJheSg3KTtmb3IodmFyIG49MDs3Pm47bisrKWIubGFiZWxzW25dPXthYmJyOmEobFtuXS5kYXRlLGUuZm9ybWF0RGF5SGVhZGVyKSxmdWxsOmEobFtuXS5kYXRlLFwiRUVFRVwiKX07aWYoYi50aXRsZT1hKGUuYWN0aXZlRGF0ZSxlLmZvcm1hdERheVRpdGxlKSxiLnJvd3M9ZS5zcGxpdChsLDcpLGIuc2hvd1dlZWtzKXtiLndlZWtOdW1iZXJzPVtdO2Zvcih2YXIgbz1oKGIucm93c1swXVswXS5kYXRlKSxwPWIucm93cy5sZW5ndGg7Yi53ZWVrTnVtYmVycy5wdXNoKG8rKyk8cDspO319LGUuY29tcGFyZT1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgRGF0ZShhLmdldEZ1bGxZZWFyKCksYS5nZXRNb250aCgpLGEuZ2V0RGF0ZSgpKS1uZXcgRGF0ZShiLmdldEZ1bGxZZWFyKCksYi5nZXRNb250aCgpLGIuZ2V0RGF0ZSgpKX0sZS5oYW5kbGVLZXlEb3duPWZ1bmN0aW9uKGEpe3ZhciBiPWUuYWN0aXZlRGF0ZS5nZXREYXRlKCk7aWYoXCJsZWZ0XCI9PT1hKWItPTE7ZWxzZSBpZihcInVwXCI9PT1hKWItPTc7ZWxzZSBpZihcInJpZ2h0XCI9PT1hKWIrPTE7ZWxzZSBpZihcImRvd25cIj09PWEpYis9NztlbHNlIGlmKFwicGFnZXVwXCI9PT1hfHxcInBhZ2Vkb3duXCI9PT1hKXt2YXIgYz1lLmFjdGl2ZURhdGUuZ2V0TW9udGgoKSsoXCJwYWdldXBcIj09PWE/LTE6MSk7ZS5hY3RpdmVEYXRlLnNldE1vbnRoKGMsMSksYj1NYXRoLm1pbihmKGUuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpLGUuYWN0aXZlRGF0ZS5nZXRNb250aCgpKSxiKX1lbHNlXCJob21lXCI9PT1hP2I9MTpcImVuZFwiPT09YSYmKGI9ZihlLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSxlLmFjdGl2ZURhdGUuZ2V0TW9udGgoKSkpO2UuYWN0aXZlRGF0ZS5zZXREYXRlKGIpfSxlLnJlZnJlc2hWaWV3KCl9fX1dKS5kaXJlY3RpdmUoXCJtb250aHBpY2tlclwiLFtcImRhdGVGaWx0ZXJcIixmdW5jdGlvbihhKXtyZXR1cm57cmVzdHJpY3Q6XCJFQVwiLHJlcGxhY2U6ITAsdGVtcGxhdGVVcmw6XCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL21vbnRoLmh0bWxcIixyZXF1aXJlOlwiXmRhdGVwaWNrZXJcIixsaW5rOmZ1bmN0aW9uKGIsYyxkLGUpe2Uuc3RlcD17eWVhcnM6MX0sZS5lbGVtZW50PWMsZS5fcmVmcmVzaFZpZXc9ZnVuY3Rpb24oKXtmb3IodmFyIGM9bmV3IEFycmF5KDEyKSxkPWUuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpLGY9MDsxMj5mO2YrKyljW2ZdPWFuZ3VsYXIuZXh0ZW5kKGUuY3JlYXRlRGF0ZU9iamVjdChuZXcgRGF0ZShkLGYsMSksZS5mb3JtYXRNb250aCkse3VpZDpiLnVuaXF1ZUlkK1wiLVwiK2Z9KTtiLnRpdGxlPWEoZS5hY3RpdmVEYXRlLGUuZm9ybWF0TW9udGhUaXRsZSksYi5yb3dzPWUuc3BsaXQoYywzKX0sZS5jb21wYXJlPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSxhLmdldE1vbnRoKCkpLW5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSxiLmdldE1vbnRoKCkpfSxlLmhhbmRsZUtleURvd249ZnVuY3Rpb24oYSl7dmFyIGI9ZS5hY3RpdmVEYXRlLmdldE1vbnRoKCk7aWYoXCJsZWZ0XCI9PT1hKWItPTE7ZWxzZSBpZihcInVwXCI9PT1hKWItPTM7ZWxzZSBpZihcInJpZ2h0XCI9PT1hKWIrPTE7ZWxzZSBpZihcImRvd25cIj09PWEpYis9MztlbHNlIGlmKFwicGFnZXVwXCI9PT1hfHxcInBhZ2Vkb3duXCI9PT1hKXt2YXIgYz1lLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSsoXCJwYWdldXBcIj09PWE/LTE6MSk7ZS5hY3RpdmVEYXRlLnNldEZ1bGxZZWFyKGMpfWVsc2VcImhvbWVcIj09PWE/Yj0wOlwiZW5kXCI9PT1hJiYoYj0xMSk7ZS5hY3RpdmVEYXRlLnNldE1vbnRoKGIpfSxlLnJlZnJlc2hWaWV3KCl9fX1dKS5kaXJlY3RpdmUoXCJ5ZWFycGlja2VyXCIsW1wiZGF0ZUZpbHRlclwiLGZ1bmN0aW9uKCl7cmV0dXJue3Jlc3RyaWN0OlwiRUFcIixyZXBsYWNlOiEwLHRlbXBsYXRlVXJsOlwidGVtcGxhdGUvZGF0ZXBpY2tlci95ZWFyLmh0bWxcIixyZXF1aXJlOlwiXmRhdGVwaWNrZXJcIixsaW5rOmZ1bmN0aW9uKGEsYixjLGQpe2Z1bmN0aW9uIGUoYSl7cmV0dXJuIHBhcnNlSW50KChhLTEpL2YsMTApKmYrMX12YXIgZj1kLnllYXJSYW5nZTtkLnN0ZXA9e3llYXJzOmZ9LGQuZWxlbWVudD1iLGQuX3JlZnJlc2hWaWV3PWZ1bmN0aW9uKCl7Zm9yKHZhciBiPW5ldyBBcnJheShmKSxjPTAsZz1lKGQuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpKTtmPmM7YysrKWJbY109YW5ndWxhci5leHRlbmQoZC5jcmVhdGVEYXRlT2JqZWN0KG5ldyBEYXRlKGcrYywwLDEpLGQuZm9ybWF0WWVhcikse3VpZDphLnVuaXF1ZUlkK1wiLVwiK2N9KTthLnRpdGxlPVtiWzBdLmxhYmVsLGJbZi0xXS5sYWJlbF0uam9pbihcIiAtIFwiKSxhLnJvd3M9ZC5zcGxpdChiLDUpfSxkLmNvbXBhcmU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5nZXRGdWxsWWVhcigpLWIuZ2V0RnVsbFllYXIoKX0sZC5oYW5kbGVLZXlEb3duPWZ1bmN0aW9uKGEpe3ZhciBiPWQuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpO1wibGVmdFwiPT09YT9iLT0xOlwidXBcIj09PWE/Yi09NTpcInJpZ2h0XCI9PT1hP2IrPTE6XCJkb3duXCI9PT1hP2IrPTU6XCJwYWdldXBcIj09PWF8fFwicGFnZWRvd25cIj09PWE/Yis9KFwicGFnZXVwXCI9PT1hPy0xOjEpKmQuc3RlcC55ZWFyczpcImhvbWVcIj09PWE/Yj1lKGQuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpKTpcImVuZFwiPT09YSYmKGI9ZShkLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSkrZi0xKSxkLmFjdGl2ZURhdGUuc2V0RnVsbFllYXIoYil9LGQucmVmcmVzaFZpZXcoKX19fV0pLmNvbnN0YW50KFwiZGF0ZXBpY2tlclBvcHVwQ29uZmlnXCIse2RhdGVwaWNrZXJQb3B1cDpcInl5eXktTU0tZGRcIixjdXJyZW50VGV4dDpcIlRvZGF5XCIsY2xlYXJUZXh0OlwiQ2xlYXJcIixjbG9zZVRleHQ6XCJEb25lXCIsY2xvc2VPbkRhdGVTZWxlY3Rpb246ITAsYXBwZW5kVG9Cb2R5OiExLHNob3dCdXR0b25CYXI6ITB9KS5kaXJlY3RpdmUoXCJkYXRlcGlja2VyUG9wdXBcIixbXCIkY29tcGlsZVwiLFwiJHBhcnNlXCIsXCIkZG9jdW1lbnRcIixcIiRwb3NpdGlvblwiLFwiZGF0ZUZpbHRlclwiLFwiZGF0ZVBhcnNlclwiLFwiZGF0ZXBpY2tlclBvcHVwQ29uZmlnXCIsZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyl7cmV0dXJue3Jlc3RyaWN0OlwiRUFcIixyZXF1aXJlOlwibmdNb2RlbFwiLHNjb3BlOntpc09wZW46XCI9P1wiLGN1cnJlbnRUZXh0OlwiQFwiLGNsZWFyVGV4dDpcIkBcIixjbG9zZVRleHQ6XCJAXCIsZGF0ZURpc2FibGVkOlwiJlwifSxsaW5rOmZ1bmN0aW9uKGgsaSxqLGspe2Z1bmN0aW9uIGwoYSl7cmV0dXJuIGEucmVwbGFjZSgvKFtBLVpdKS9nLGZ1bmN0aW9uKGEpe3JldHVyblwiLVwiK2EudG9Mb3dlckNhc2UoKX0pfWZ1bmN0aW9uIG0oYSl7aWYoYSl7aWYoYW5ndWxhci5pc0RhdGUoYSkmJiFpc05hTihhKSlyZXR1cm4gay4kc2V0VmFsaWRpdHkoXCJkYXRlXCIsITApLGE7aWYoYW5ndWxhci5pc1N0cmluZyhhKSl7dmFyIGI9Zi5wYXJzZShhLG4pfHxuZXcgRGF0ZShhKTtyZXR1cm4gaXNOYU4oYik/dm9pZCBrLiRzZXRWYWxpZGl0eShcImRhdGVcIiwhMSk6KGsuJHNldFZhbGlkaXR5KFwiZGF0ZVwiLCEwKSxiKX1yZXR1cm4gdm9pZCBrLiRzZXRWYWxpZGl0eShcImRhdGVcIiwhMSl9cmV0dXJuIGsuJHNldFZhbGlkaXR5KFwiZGF0ZVwiLCEwKSxudWxsfXZhciBuLG89YW5ndWxhci5pc0RlZmluZWQoai5jbG9zZU9uRGF0ZVNlbGVjdGlvbik/aC4kcGFyZW50LiRldmFsKGouY2xvc2VPbkRhdGVTZWxlY3Rpb24pOmcuY2xvc2VPbkRhdGVTZWxlY3Rpb24scD1hbmd1bGFyLmlzRGVmaW5lZChqLmRhdGVwaWNrZXJBcHBlbmRUb0JvZHkpP2guJHBhcmVudC4kZXZhbChqLmRhdGVwaWNrZXJBcHBlbmRUb0JvZHkpOmcuYXBwZW5kVG9Cb2R5O2guc2hvd0J1dHRvbkJhcj1hbmd1bGFyLmlzRGVmaW5lZChqLnNob3dCdXR0b25CYXIpP2guJHBhcmVudC4kZXZhbChqLnNob3dCdXR0b25CYXIpOmcuc2hvd0J1dHRvbkJhcixoLmdldFRleHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGhbYStcIlRleHRcIl18fGdbYStcIlRleHRcIl19LGouJG9ic2VydmUoXCJkYXRlcGlja2VyUG9wdXBcIixmdW5jdGlvbihhKXtuPWF8fGcuZGF0ZXBpY2tlclBvcHVwLGsuJHJlbmRlcigpfSk7dmFyIHE9YW5ndWxhci5lbGVtZW50KFwiPGRpdiBkYXRlcGlja2VyLXBvcHVwLXdyYXA+PGRpdiBkYXRlcGlja2VyPjwvZGl2PjwvZGl2PlwiKTtxLmF0dHIoe1wibmctbW9kZWxcIjpcImRhdGVcIixcIm5nLWNoYW5nZVwiOlwiZGF0ZVNlbGVjdGlvbigpXCJ9KTt2YXIgcj1hbmd1bGFyLmVsZW1lbnQocS5jaGlsZHJlbigpWzBdKTtqLmRhdGVwaWNrZXJPcHRpb25zJiZhbmd1bGFyLmZvckVhY2goaC4kcGFyZW50LiRldmFsKGouZGF0ZXBpY2tlck9wdGlvbnMpLGZ1bmN0aW9uKGEsYil7ci5hdHRyKGwoYiksYSl9KSxoLndhdGNoRGF0YT17fSxhbmd1bGFyLmZvckVhY2goW1wibWluRGF0ZVwiLFwibWF4RGF0ZVwiLFwiZGF0ZXBpY2tlck1vZGVcIl0sZnVuY3Rpb24oYSl7aWYoalthXSl7dmFyIGM9YihqW2FdKTtpZihoLiRwYXJlbnQuJHdhdGNoKGMsZnVuY3Rpb24oYil7aC53YXRjaERhdGFbYV09Yn0pLHIuYXR0cihsKGEpLFwid2F0Y2hEYXRhLlwiK2EpLFwiZGF0ZXBpY2tlck1vZGVcIj09PWEpe3ZhciBkPWMuYXNzaWduO2guJHdhdGNoKFwid2F0Y2hEYXRhLlwiK2EsZnVuY3Rpb24oYSxiKXthIT09YiYmZChoLiRwYXJlbnQsYSl9KX19fSksai5kYXRlRGlzYWJsZWQmJnIuYXR0cihcImRhdGUtZGlzYWJsZWRcIixcImRhdGVEaXNhYmxlZCh7IGRhdGU6IGRhdGUsIG1vZGU6IG1vZGUgfSlcIiksay4kcGFyc2Vycy51bnNoaWZ0KG0pLGguZGF0ZVNlbGVjdGlvbj1mdW5jdGlvbihhKXthbmd1bGFyLmlzRGVmaW5lZChhKSYmKGguZGF0ZT1hKSxrLiRzZXRWaWV3VmFsdWUoaC5kYXRlKSxrLiRyZW5kZXIoKSxvJiYoaC5pc09wZW49ITEsaVswXS5mb2N1cygpKX0saS5iaW5kKFwiaW5wdXQgY2hhbmdlIGtleXVwXCIsZnVuY3Rpb24oKXtoLiRhcHBseShmdW5jdGlvbigpe2guZGF0ZT1rLiRtb2RlbFZhbHVlfSl9KSxrLiRyZW5kZXI9ZnVuY3Rpb24oKXt2YXIgYT1rLiR2aWV3VmFsdWU/ZShrLiR2aWV3VmFsdWUsbik6XCJcIjtpLnZhbChhKSxoLmRhdGU9bShrLiRtb2RlbFZhbHVlKX07dmFyIHM9ZnVuY3Rpb24oYSl7aC5pc09wZW4mJmEudGFyZ2V0IT09aVswXSYmaC4kYXBwbHkoZnVuY3Rpb24oKXtoLmlzT3Blbj0hMX0pfSx0PWZ1bmN0aW9uKGEpe2gua2V5ZG93bihhKX07aS5iaW5kKFwia2V5ZG93blwiLHQpLGgua2V5ZG93bj1mdW5jdGlvbihhKXsyNz09PWEud2hpY2g/KGEucHJldmVudERlZmF1bHQoKSxhLnN0b3BQcm9wYWdhdGlvbigpLGguY2xvc2UoKSk6NDAhPT1hLndoaWNofHxoLmlzT3Blbnx8KGguaXNPcGVuPSEwKX0saC4kd2F0Y2goXCJpc09wZW5cIixmdW5jdGlvbihhKXthPyhoLiRicm9hZGNhc3QoXCJkYXRlcGlja2VyLmZvY3VzXCIpLGgucG9zaXRpb249cD9kLm9mZnNldChpKTpkLnBvc2l0aW9uKGkpLGgucG9zaXRpb24udG9wPWgucG9zaXRpb24udG9wK2kucHJvcChcIm9mZnNldEhlaWdodFwiKSxjLmJpbmQoXCJjbGlja1wiLHMpKTpjLnVuYmluZChcImNsaWNrXCIscyl9KSxoLnNlbGVjdD1mdW5jdGlvbihhKXtpZihcInRvZGF5XCI9PT1hKXt2YXIgYj1uZXcgRGF0ZTthbmd1bGFyLmlzRGF0ZShrLiRtb2RlbFZhbHVlKT8oYT1uZXcgRGF0ZShrLiRtb2RlbFZhbHVlKSxhLnNldEZ1bGxZZWFyKGIuZ2V0RnVsbFllYXIoKSxiLmdldE1vbnRoKCksYi5nZXREYXRlKCkpKTphPW5ldyBEYXRlKGIuc2V0SG91cnMoMCwwLDAsMCkpfWguZGF0ZVNlbGVjdGlvbihhKX0saC5jbG9zZT1mdW5jdGlvbigpe2guaXNPcGVuPSExLGlbMF0uZm9jdXMoKX07dmFyIHU9YShxKShoKTtxLnJlbW92ZSgpLHA/Yy5maW5kKFwiYm9keVwiKS5hcHBlbmQodSk6aS5hZnRlcih1KSxoLiRvbihcIiRkZXN0cm95XCIsZnVuY3Rpb24oKXt1LnJlbW92ZSgpLGkudW5iaW5kKFwia2V5ZG93blwiLHQpLGMudW5iaW5kKFwiY2xpY2tcIixzKX0pfX19XSkuZGlyZWN0aXZlKFwiZGF0ZXBpY2tlclBvcHVwV3JhcFwiLGZ1bmN0aW9uKCl7cmV0dXJue3Jlc3RyaWN0OlwiRUFcIixyZXBsYWNlOiEwLHRyYW5zY2x1ZGU6ITAsdGVtcGxhdGVVcmw6XCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL3BvcHVwLmh0bWxcIixsaW5rOmZ1bmN0aW9uKGEsYil7Yi5iaW5kKFwiY2xpY2tcIixmdW5jdGlvbihhKXthLnByZXZlbnREZWZhdWx0KCksYS5zdG9wUHJvcGFnYXRpb24oKX0pfX19KSxhbmd1bGFyLm1vZHVsZShcInVpLmJvb3RzdHJhcC5kcm9wZG93blwiLFtdKS5jb25zdGFudChcImRyb3Bkb3duQ29uZmlnXCIse29wZW5DbGFzczpcIm9wZW5cIn0pLnNlcnZpY2UoXCJkcm9wZG93blNlcnZpY2VcIixbXCIkZG9jdW1lbnRcIixmdW5jdGlvbihhKXt2YXIgYj1udWxsO3RoaXMub3Blbj1mdW5jdGlvbihlKXtifHwoYS5iaW5kKFwiY2xpY2tcIixjKSxhLmJpbmQoXCJrZXlkb3duXCIsZCkpLGImJmIhPT1lJiYoYi5pc09wZW49ITEpLGI9ZX0sdGhpcy5jbG9zZT1mdW5jdGlvbihlKXtiPT09ZSYmKGI9bnVsbCxhLnVuYmluZChcImNsaWNrXCIsYyksYS51bmJpbmQoXCJrZXlkb3duXCIsZCkpfTt2YXIgYz1mdW5jdGlvbihhKXt2YXIgYz1iLmdldFRvZ2dsZUVsZW1lbnQoKTthJiZjJiZjWzBdLmNvbnRhaW5zKGEudGFyZ2V0KXx8Yi4kYXBwbHkoZnVuY3Rpb24oKXtiLmlzT3Blbj0hMX0pfSxkPWZ1bmN0aW9uKGEpezI3PT09YS53aGljaCYmKGIuZm9jdXNUb2dnbGVFbGVtZW50KCksYygpKX19XSkuY29udHJvbGxlcihcIkRyb3Bkb3duQ29udHJvbGxlclwiLFtcIiRzY29wZVwiLFwiJGF0dHJzXCIsXCIkcGFyc2VcIixcImRyb3Bkb3duQ29uZmlnXCIsXCJkcm9wZG93blNlcnZpY2VcIixcIiRhbmltYXRlXCIsZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3ZhciBnLGg9dGhpcyxpPWEuJG5ldygpLGo9ZC5vcGVuQ2xhc3Msaz1hbmd1bGFyLm5vb3AsbD1iLm9uVG9nZ2xlP2MoYi5vblRvZ2dsZSk6YW5ndWxhci5ub29wO3RoaXMuaW5pdD1mdW5jdGlvbihkKXtoLiRlbGVtZW50PWQsYi5pc09wZW4mJihnPWMoYi5pc09wZW4pLGs9Zy5hc3NpZ24sYS4kd2F0Y2goZyxmdW5jdGlvbihhKXtpLmlzT3Blbj0hIWF9KSl9LHRoaXMudG9nZ2xlPWZ1bmN0aW9uKGEpe3JldHVybiBpLmlzT3Blbj1hcmd1bWVudHMubGVuZ3RoPyEhYTohaS5pc09wZW59LHRoaXMuaXNPcGVuPWZ1bmN0aW9uKCl7cmV0dXJuIGkuaXNPcGVufSxpLmdldFRvZ2dsZUVsZW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gaC50b2dnbGVFbGVtZW50fSxpLmZvY3VzVG9nZ2xlRWxlbWVudD1mdW5jdGlvbigpe2gudG9nZ2xlRWxlbWVudCYmaC50b2dnbGVFbGVtZW50WzBdLmZvY3VzKCl9LGkuJHdhdGNoKFwiaXNPcGVuXCIsZnVuY3Rpb24oYixjKXtmW2I/XCJhZGRDbGFzc1wiOlwicmVtb3ZlQ2xhc3NcIl0oaC4kZWxlbWVudCxqKSxiPyhpLmZvY3VzVG9nZ2xlRWxlbWVudCgpLGUub3BlbihpKSk6ZS5jbG9zZShpKSxrKGEsYiksYW5ndWxhci5pc0RlZmluZWQoYikmJmIhPT1jJiZsKGEse29wZW46ISFifSl9KSxhLiRvbihcIiRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3NcIixmdW5jdGlvbigpe2kuaXNPcGVuPSExfSksYS4kb24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7aS4kZGVzdHJveSgpfSl9XSkuZGlyZWN0aXZlKFwiZHJvcGRvd25cIixmdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkNBXCIsY29udHJvbGxlcjpcIkRyb3Bkb3duQ29udHJvbGxlclwiLGxpbms6ZnVuY3Rpb24oYSxiLGMsZCl7ZC5pbml0KGIpfX19KS5kaXJlY3RpdmUoXCJkcm9wZG93blRvZ2dsZVwiLGZ1bmN0aW9uKCl7cmV0dXJue3Jlc3RyaWN0OlwiQ0FcIixyZXF1aXJlOlwiP15kcm9wZG93blwiLGxpbms6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoZCl7ZC50b2dnbGVFbGVtZW50PWI7dmFyIGU9ZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpLGIuaGFzQ2xhc3MoXCJkaXNhYmxlZFwiKXx8Yy5kaXNhYmxlZHx8YS4kYXBwbHkoZnVuY3Rpb24oKXtkLnRvZ2dsZSgpfSl9O2IuYmluZChcImNsaWNrXCIsZSksYi5hdHRyKHtcImFyaWEtaGFzcG9wdXBcIjohMCxcImFyaWEtZXhwYW5kZWRcIjohMX0pLGEuJHdhdGNoKGQuaXNPcGVuLGZ1bmN0aW9uKGEpe2IuYXR0cihcImFyaWEtZXhwYW5kZWRcIiwhIWEpfSksYS4kb24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7Yi51bmJpbmQoXCJjbGlja1wiLGUpfSl9fX19KSxhbmd1bGFyLm1vZHVsZShcInVpLmJvb3RzdHJhcC5tb2RhbFwiLFtcInVpLmJvb3RzdHJhcC50cmFuc2l0aW9uXCJdKS5mYWN0b3J5KFwiJCRzdGFja2VkTWFwXCIsZnVuY3Rpb24oKXtyZXR1cm57Y3JlYXRlTmV3OmZ1bmN0aW9uKCl7dmFyIGE9W107cmV0dXJue2FkZDpmdW5jdGlvbihiLGMpe2EucHVzaCh7a2V5OmIsdmFsdWU6Y30pfSxnZXQ6ZnVuY3Rpb24oYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspaWYoYj09YVtjXS5rZXkpcmV0dXJuIGFbY119LGtleXM6ZnVuY3Rpb24oKXtmb3IodmFyIGI9W10sYz0wO2M8YS5sZW5ndGg7YysrKWIucHVzaChhW2NdLmtleSk7cmV0dXJuIGJ9LHRvcDpmdW5jdGlvbigpe3JldHVybiBhW2EubGVuZ3RoLTFdfSxyZW1vdmU6ZnVuY3Rpb24oYil7Zm9yKHZhciBjPS0xLGQ9MDtkPGEubGVuZ3RoO2QrKylpZihiPT1hW2RdLmtleSl7Yz1kO2JyZWFrfXJldHVybiBhLnNwbGljZShjLDEpWzBdfSxyZW1vdmVUb3A6ZnVuY3Rpb24oKXtyZXR1cm4gYS5zcGxpY2UoYS5sZW5ndGgtMSwxKVswXX0sbGVuZ3RoOmZ1bmN0aW9uKCl7cmV0dXJuIGEubGVuZ3RofX19fX0pLmRpcmVjdGl2ZShcIm1vZGFsQmFja2Ryb3BcIixbXCIkdGltZW91dFwiLGZ1bmN0aW9uKGEpe3JldHVybntyZXN0cmljdDpcIkVBXCIscmVwbGFjZTohMCx0ZW1wbGF0ZVVybDpcInRlbXBsYXRlL21vZGFsL2JhY2tkcm9wLmh0bWxcIixsaW5rOmZ1bmN0aW9uKGIsYyxkKXtiLmJhY2tkcm9wQ2xhc3M9ZC5iYWNrZHJvcENsYXNzfHxcIlwiLGIuYW5pbWF0ZT0hMSxhKGZ1bmN0aW9uKCl7Yi5hbmltYXRlPSEwfSl9fX1dKS5kaXJlY3RpdmUoXCJtb2RhbFdpbmRvd1wiLFtcIiRtb2RhbFN0YWNrXCIsXCIkdGltZW91dFwiLGZ1bmN0aW9uKGEsYil7cmV0dXJue3Jlc3RyaWN0OlwiRUFcIixzY29wZTp7aW5kZXg6XCJAXCIsYW5pbWF0ZTpcIj1cIn0scmVwbGFjZTohMCx0cmFuc2NsdWRlOiEwLHRlbXBsYXRlVXJsOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGIudGVtcGxhdGVVcmx8fFwidGVtcGxhdGUvbW9kYWwvd2luZG93Lmh0bWxcIn0sbGluazpmdW5jdGlvbihjLGQsZSl7ZC5hZGRDbGFzcyhlLndpbmRvd0NsYXNzfHxcIlwiKSxjLnNpemU9ZS5zaXplLGIoZnVuY3Rpb24oKXtjLmFuaW1hdGU9ITAsZFswXS5xdWVyeVNlbGVjdG9yQWxsKFwiW2F1dG9mb2N1c11cIikubGVuZ3RofHxkWzBdLmZvY3VzKCl9KSxjLmNsb3NlPWZ1bmN0aW9uKGIpe3ZhciBjPWEuZ2V0VG9wKCk7YyYmYy52YWx1ZS5iYWNrZHJvcCYmXCJzdGF0aWNcIiE9Yy52YWx1ZS5iYWNrZHJvcCYmYi50YXJnZXQ9PT1iLmN1cnJlbnRUYXJnZXQmJihiLnByZXZlbnREZWZhdWx0KCksYi5zdG9wUHJvcGFnYXRpb24oKSxhLmRpc21pc3MoYy5rZXksXCJiYWNrZHJvcCBjbGlja1wiKSl9fX19XSkuZGlyZWN0aXZlKFwibW9kYWxUcmFuc2NsdWRlXCIsZnVuY3Rpb24oKXtyZXR1cm57bGluazpmdW5jdGlvbihhLGIsYyxkLGUpe2UoYS4kcGFyZW50LGZ1bmN0aW9uKGEpe2IuZW1wdHkoKSxiLmFwcGVuZChhKX0pfX19KS5mYWN0b3J5KFwiJG1vZGFsU3RhY2tcIixbXCIkdHJhbnNpdGlvblwiLFwiJHRpbWVvdXRcIixcIiRkb2N1bWVudFwiLFwiJGNvbXBpbGVcIixcIiRyb290U2NvcGVcIixcIiQkc3RhY2tlZE1hcFwiLGZ1bmN0aW9uKGEsYixjLGQsZSxmKXtmdW5jdGlvbiBnKCl7Zm9yKHZhciBhPS0xLGI9bi5rZXlzKCksYz0wO2M8Yi5sZW5ndGg7YysrKW4uZ2V0KGJbY10pLnZhbHVlLmJhY2tkcm9wJiYoYT1jKTtyZXR1cm4gYX1mdW5jdGlvbiBoKGEpe3ZhciBiPWMuZmluZChcImJvZHlcIikuZXEoMCksZD1uLmdldChhKS52YWx1ZTtuLnJlbW92ZShhKSxqKGQubW9kYWxEb21FbCxkLm1vZGFsU2NvcGUsMzAwLGZ1bmN0aW9uKCl7ZC5tb2RhbFNjb3BlLiRkZXN0cm95KCksYi50b2dnbGVDbGFzcyhtLG4ubGVuZ3RoKCk+MCksaSgpfSl9ZnVuY3Rpb24gaSgpe2lmKGsmJi0xPT1nKCkpe3ZhciBhPWw7aihrLGwsMTUwLGZ1bmN0aW9uKCl7YS4kZGVzdHJveSgpLGE9bnVsbH0pLGs9dm9pZCAwLGw9dm9pZCAwfX1mdW5jdGlvbiBqKGMsZCxlLGYpe2Z1bmN0aW9uIGcoKXtnLmRvbmV8fChnLmRvbmU9ITAsYy5yZW1vdmUoKSxmJiZmKCkpfWQuYW5pbWF0ZT0hMTt2YXIgaD1hLnRyYW5zaXRpb25FbmRFdmVudE5hbWU7aWYoaCl7dmFyIGk9YihnLGUpO2MuYmluZChoLGZ1bmN0aW9uKCl7Yi5jYW5jZWwoaSksZygpLGQuJGFwcGx5KCl9KX1lbHNlIGIoZyl9dmFyIGssbCxtPVwibW9kYWwtb3BlblwiLG49Zi5jcmVhdGVOZXcoKSxvPXt9O3JldHVybiBlLiR3YXRjaChnLGZ1bmN0aW9uKGEpe2wmJihsLmluZGV4PWEpfSksYy5iaW5kKFwia2V5ZG93blwiLGZ1bmN0aW9uKGEpe3ZhciBiOzI3PT09YS53aGljaCYmKGI9bi50b3AoKSxiJiZiLnZhbHVlLmtleWJvYXJkJiYoYS5wcmV2ZW50RGVmYXVsdCgpLGUuJGFwcGx5KGZ1bmN0aW9uKCl7by5kaXNtaXNzKGIua2V5LFwiZXNjYXBlIGtleSBwcmVzc1wiKX0pKSl9KSxvLm9wZW49ZnVuY3Rpb24oYSxiKXtuLmFkZChhLHtkZWZlcnJlZDpiLmRlZmVycmVkLG1vZGFsU2NvcGU6Yi5zY29wZSxiYWNrZHJvcDpiLmJhY2tkcm9wLGtleWJvYXJkOmIua2V5Ym9hcmR9KTt2YXIgZj1jLmZpbmQoXCJib2R5XCIpLmVxKDApLGg9ZygpO2lmKGg+PTAmJiFrKXtsPWUuJG5ldyghMCksbC5pbmRleD1oO3ZhciBpPWFuZ3VsYXIuZWxlbWVudChcIjxkaXYgbW9kYWwtYmFja2Ryb3A+PC9kaXY+XCIpO2kuYXR0cihcImJhY2tkcm9wLWNsYXNzXCIsYi5iYWNrZHJvcENsYXNzKSxrPWQoaSkobCksZi5hcHBlbmQoayl9dmFyIGo9YW5ndWxhci5lbGVtZW50KFwiPGRpdiBtb2RhbC13aW5kb3c+PC9kaXY+XCIpO2ouYXR0cih7XCJ0ZW1wbGF0ZS11cmxcIjpiLndpbmRvd1RlbXBsYXRlVXJsLFwid2luZG93LWNsYXNzXCI6Yi53aW5kb3dDbGFzcyxzaXplOmIuc2l6ZSxpbmRleDpuLmxlbmd0aCgpLTEsYW5pbWF0ZTpcImFuaW1hdGVcIn0pLmh0bWwoYi5jb250ZW50KTt2YXIgbz1kKGopKGIuc2NvcGUpO24udG9wKCkudmFsdWUubW9kYWxEb21FbD1vLGYuYXBwZW5kKG8pLGYuYWRkQ2xhc3MobSl9LG8uY2xvc2U9ZnVuY3Rpb24oYSxiKXt2YXIgYz1uLmdldChhKTtjJiYoYy52YWx1ZS5kZWZlcnJlZC5yZXNvbHZlKGIpLGgoYSkpfSxvLmRpc21pc3M9ZnVuY3Rpb24oYSxiKXt2YXIgYz1uLmdldChhKTtjJiYoYy52YWx1ZS5kZWZlcnJlZC5yZWplY3QoYiksaChhKSl9LG8uZGlzbWlzc0FsbD1mdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5nZXRUb3AoKTtiOyl0aGlzLmRpc21pc3MoYi5rZXksYSksYj10aGlzLmdldFRvcCgpfSxvLmdldFRvcD1mdW5jdGlvbigpe3JldHVybiBuLnRvcCgpfSxvfV0pLnByb3ZpZGVyKFwiJG1vZGFsXCIsZnVuY3Rpb24oKXt2YXIgYT17b3B0aW9uczp7YmFja2Ryb3A6ITAsa2V5Ym9hcmQ6ITB9LCRnZXQ6W1wiJGluamVjdG9yXCIsXCIkcm9vdFNjb3BlXCIsXCIkcVwiLFwiJGh0dHBcIixcIiR0ZW1wbGF0ZUNhY2hlXCIsXCIkY29udHJvbGxlclwiLFwiJG1vZGFsU3RhY2tcIixmdW5jdGlvbihiLGMsZCxlLGYsZyxoKXtmdW5jdGlvbiBpKGEpe3JldHVybiBhLnRlbXBsYXRlP2Qud2hlbihhLnRlbXBsYXRlKTplLmdldChhbmd1bGFyLmlzRnVuY3Rpb24oYS50ZW1wbGF0ZVVybCk/YS50ZW1wbGF0ZVVybCgpOmEudGVtcGxhdGVVcmwse2NhY2hlOmZ9KS50aGVuKGZ1bmN0aW9uKGEpe3JldHVybiBhLmRhdGF9KX1mdW5jdGlvbiBqKGEpe3ZhciBjPVtdO3JldHVybiBhbmd1bGFyLmZvckVhY2goYSxmdW5jdGlvbihhKXsoYW5ndWxhci5pc0Z1bmN0aW9uKGEpfHxhbmd1bGFyLmlzQXJyYXkoYSkpJiZjLnB1c2goZC53aGVuKGIuaW52b2tlKGEpKSl9KSxjfXZhciBrPXt9O3JldHVybiBrLm9wZW49ZnVuY3Rpb24oYil7dmFyIGU9ZC5kZWZlcigpLGY9ZC5kZWZlcigpLGs9e3Jlc3VsdDplLnByb21pc2Usb3BlbmVkOmYucHJvbWlzZSxjbG9zZTpmdW5jdGlvbihhKXtoLmNsb3NlKGssYSl9LGRpc21pc3M6ZnVuY3Rpb24oYSl7aC5kaXNtaXNzKGssYSl9fTtpZihiPWFuZ3VsYXIuZXh0ZW5kKHt9LGEub3B0aW9ucyxiKSxiLnJlc29sdmU9Yi5yZXNvbHZlfHx7fSwhYi50ZW1wbGF0ZSYmIWIudGVtcGxhdGVVcmwpdGhyb3cgbmV3IEVycm9yKFwiT25lIG9mIHRlbXBsYXRlIG9yIHRlbXBsYXRlVXJsIG9wdGlvbnMgaXMgcmVxdWlyZWQuXCIpO3ZhciBsPWQuYWxsKFtpKGIpXS5jb25jYXQoaihiLnJlc29sdmUpKSk7cmV0dXJuIGwudGhlbihmdW5jdGlvbihhKXt2YXIgZD0oYi5zY29wZXx8YykuJG5ldygpO2QuJGNsb3NlPWsuY2xvc2UsZC4kZGlzbWlzcz1rLmRpc21pc3M7dmFyIGYsaT17fSxqPTE7Yi5jb250cm9sbGVyJiYoaS4kc2NvcGU9ZCxpLiRtb2RhbEluc3RhbmNlPWssYW5ndWxhci5mb3JFYWNoKGIucmVzb2x2ZSxmdW5jdGlvbihiLGMpe2lbY109YVtqKytdfSksZj1nKGIuY29udHJvbGxlcixpKSxiLmNvbnRyb2xsZXJBcyYmKGRbYi5jb250cm9sbGVyQXNdPWYpKSxoLm9wZW4oayx7c2NvcGU6ZCxkZWZlcnJlZDplLGNvbnRlbnQ6YVswXSxiYWNrZHJvcDpiLmJhY2tkcm9wLGtleWJvYXJkOmIua2V5Ym9hcmQsYmFja2Ryb3BDbGFzczpiLmJhY2tkcm9wQ2xhc3Msd2luZG93Q2xhc3M6Yi53aW5kb3dDbGFzcyx3aW5kb3dUZW1wbGF0ZVVybDpiLndpbmRvd1RlbXBsYXRlVXJsLHNpemU6Yi5zaXplfSl9LGZ1bmN0aW9uKGEpe2UucmVqZWN0KGEpfSksbC50aGVuKGZ1bmN0aW9uKCl7Zi5yZXNvbHZlKCEwKX0sZnVuY3Rpb24oKXtmLnJlamVjdCghMSl9KSxrfSxrfV19O3JldHVybiBhfSksYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXAucGFnaW5hdGlvblwiLFtdKS5jb250cm9sbGVyKFwiUGFnaW5hdGlvbkNvbnRyb2xsZXJcIixbXCIkc2NvcGVcIixcIiRhdHRyc1wiLFwiJHBhcnNlXCIsZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMsZT17JHNldFZpZXdWYWx1ZTphbmd1bGFyLm5vb3B9LGY9Yi5udW1QYWdlcz9jKGIubnVtUGFnZXMpLmFzc2lnbjphbmd1bGFyLm5vb3A7dGhpcy5pbml0PWZ1bmN0aW9uKGYsZyl7ZT1mLHRoaXMuY29uZmlnPWcsZS4kcmVuZGVyPWZ1bmN0aW9uKCl7ZC5yZW5kZXIoKX0sYi5pdGVtc1BlclBhZ2U/YS4kcGFyZW50LiR3YXRjaChjKGIuaXRlbXNQZXJQYWdlKSxmdW5jdGlvbihiKXtkLml0ZW1zUGVyUGFnZT1wYXJzZUludChiLDEwKSxhLnRvdGFsUGFnZXM9ZC5jYWxjdWxhdGVUb3RhbFBhZ2VzKCl9KTp0aGlzLml0ZW1zUGVyUGFnZT1nLml0ZW1zUGVyUGFnZX0sdGhpcy5jYWxjdWxhdGVUb3RhbFBhZ2VzPWZ1bmN0aW9uKCl7dmFyIGI9dGhpcy5pdGVtc1BlclBhZ2U8MT8xOk1hdGguY2VpbChhLnRvdGFsSXRlbXMvdGhpcy5pdGVtc1BlclBhZ2UpO3JldHVybiBNYXRoLm1heChifHwwLDEpfSx0aGlzLnJlbmRlcj1mdW5jdGlvbigpe2EucGFnZT1wYXJzZUludChlLiR2aWV3VmFsdWUsMTApfHwxfSxhLnNlbGVjdFBhZ2U9ZnVuY3Rpb24oYil7YS5wYWdlIT09YiYmYj4wJiZiPD1hLnRvdGFsUGFnZXMmJihlLiRzZXRWaWV3VmFsdWUoYiksZS4kcmVuZGVyKCkpfSxhLmdldFRleHQ9ZnVuY3Rpb24oYil7cmV0dXJuIGFbYitcIlRleHRcIl18fGQuY29uZmlnW2IrXCJUZXh0XCJdfSxhLm5vUHJldmlvdXM9ZnVuY3Rpb24oKXtyZXR1cm4gMT09PWEucGFnZX0sYS5ub05leHQ9ZnVuY3Rpb24oKXtyZXR1cm4gYS5wYWdlPT09YS50b3RhbFBhZ2VzfSxhLiR3YXRjaChcInRvdGFsSXRlbXNcIixmdW5jdGlvbigpe2EudG90YWxQYWdlcz1kLmNhbGN1bGF0ZVRvdGFsUGFnZXMoKX0pLGEuJHdhdGNoKFwidG90YWxQYWdlc1wiLGZ1bmN0aW9uKGIpe2YoYS4kcGFyZW50LGIpLGEucGFnZT5iP2Euc2VsZWN0UGFnZShiKTplLiRyZW5kZXIoKX0pfV0pLmNvbnN0YW50KFwicGFnaW5hdGlvbkNvbmZpZ1wiLHtpdGVtc1BlclBhZ2U6MTAsYm91bmRhcnlMaW5rczohMSxkaXJlY3Rpb25MaW5rczohMCxmaXJzdFRleHQ6XCJGaXJzdFwiLHByZXZpb3VzVGV4dDpcIlByZXZpb3VzXCIsbmV4dFRleHQ6XCJOZXh0XCIsbGFzdFRleHQ6XCJMYXN0XCIscm90YXRlOiEwfSkuZGlyZWN0aXZlKFwicGFnaW5hdGlvblwiLFtcIiRwYXJzZVwiLFwicGFnaW5hdGlvbkNvbmZpZ1wiLGZ1bmN0aW9uKGEsYil7cmV0dXJue3Jlc3RyaWN0OlwiRUFcIixzY29wZTp7dG90YWxJdGVtczpcIj1cIixmaXJzdFRleHQ6XCJAXCIscHJldmlvdXNUZXh0OlwiQFwiLG5leHRUZXh0OlwiQFwiLGxhc3RUZXh0OlwiQFwifSxyZXF1aXJlOltcInBhZ2luYXRpb25cIixcIj9uZ01vZGVsXCJdLGNvbnRyb2xsZXI6XCJQYWdpbmF0aW9uQ29udHJvbGxlclwiLHRlbXBsYXRlVXJsOlwidGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmh0bWxcIixyZXBsYWNlOiEwLGxpbms6ZnVuY3Rpb24oYyxkLGUsZil7ZnVuY3Rpb24gZyhhLGIsYyl7cmV0dXJue251bWJlcjphLHRleHQ6YixhY3RpdmU6Y319ZnVuY3Rpb24gaChhLGIpe3ZhciBjPVtdLGQ9MSxlPWIsZj1hbmd1bGFyLmlzRGVmaW5lZChrKSYmYj5rO2YmJihsPyhkPU1hdGgubWF4KGEtTWF0aC5mbG9vcihrLzIpLDEpLGU9ZCtrLTEsZT5iJiYoZT1iLGQ9ZS1rKzEpKTooZD0oTWF0aC5jZWlsKGEvayktMSkqaysxLGU9TWF0aC5taW4oZCtrLTEsYikpKTtmb3IodmFyIGg9ZDtlPj1oO2grKyl7dmFyIGk9ZyhoLGgsaD09PWEpO2MucHVzaChpKX1pZihmJiYhbCl7aWYoZD4xKXt2YXIgaj1nKGQtMSxcIi4uLlwiLCExKTtjLnVuc2hpZnQoail9aWYoYj5lKXt2YXIgbT1nKGUrMSxcIi4uLlwiLCExKTtjLnB1c2gobSl9fXJldHVybiBjfXZhciBpPWZbMF0saj1mWzFdO2lmKGope3ZhciBrPWFuZ3VsYXIuaXNEZWZpbmVkKGUubWF4U2l6ZSk/Yy4kcGFyZW50LiRldmFsKGUubWF4U2l6ZSk6Yi5tYXhTaXplLGw9YW5ndWxhci5pc0RlZmluZWQoZS5yb3RhdGUpP2MuJHBhcmVudC4kZXZhbChlLnJvdGF0ZSk6Yi5yb3RhdGU7Yy5ib3VuZGFyeUxpbmtzPWFuZ3VsYXIuaXNEZWZpbmVkKGUuYm91bmRhcnlMaW5rcyk/Yy4kcGFyZW50LiRldmFsKGUuYm91bmRhcnlMaW5rcyk6Yi5ib3VuZGFyeUxpbmtzLGMuZGlyZWN0aW9uTGlua3M9YW5ndWxhci5pc0RlZmluZWQoZS5kaXJlY3Rpb25MaW5rcyk/Yy4kcGFyZW50LiRldmFsKGUuZGlyZWN0aW9uTGlua3MpOmIuZGlyZWN0aW9uTGlua3MsaS5pbml0KGosYiksZS5tYXhTaXplJiZjLiRwYXJlbnQuJHdhdGNoKGEoZS5tYXhTaXplKSxmdW5jdGlvbihhKXtrPXBhcnNlSW50KGEsMTApLGkucmVuZGVyKClcbn0pO3ZhciBtPWkucmVuZGVyO2kucmVuZGVyPWZ1bmN0aW9uKCl7bSgpLGMucGFnZT4wJiZjLnBhZ2U8PWMudG90YWxQYWdlcyYmKGMucGFnZXM9aChjLnBhZ2UsYy50b3RhbFBhZ2VzKSl9fX19fV0pLmNvbnN0YW50KFwicGFnZXJDb25maWdcIix7aXRlbXNQZXJQYWdlOjEwLHByZXZpb3VzVGV4dDpcIsKrIFByZXZpb3VzXCIsbmV4dFRleHQ6XCJOZXh0IMK7XCIsYWxpZ246ITB9KS5kaXJlY3RpdmUoXCJwYWdlclwiLFtcInBhZ2VyQ29uZmlnXCIsZnVuY3Rpb24oYSl7cmV0dXJue3Jlc3RyaWN0OlwiRUFcIixzY29wZTp7dG90YWxJdGVtczpcIj1cIixwcmV2aW91c1RleHQ6XCJAXCIsbmV4dFRleHQ6XCJAXCJ9LHJlcXVpcmU6W1wicGFnZXJcIixcIj9uZ01vZGVsXCJdLGNvbnRyb2xsZXI6XCJQYWdpbmF0aW9uQ29udHJvbGxlclwiLHRlbXBsYXRlVXJsOlwidGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdlci5odG1sXCIscmVwbGFjZTohMCxsaW5rOmZ1bmN0aW9uKGIsYyxkLGUpe3ZhciBmPWVbMF0sZz1lWzFdO2cmJihiLmFsaWduPWFuZ3VsYXIuaXNEZWZpbmVkKGQuYWxpZ24pP2IuJHBhcmVudC4kZXZhbChkLmFsaWduKTphLmFsaWduLGYuaW5pdChnLGEpKX19fV0pLGFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLnRvb2x0aXBcIixbXCJ1aS5ib290c3RyYXAucG9zaXRpb25cIixcInVpLmJvb3RzdHJhcC5iaW5kSHRtbFwiXSkucHJvdmlkZXIoXCIkdG9vbHRpcFwiLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhKXt2YXIgYj0vW0EtWl0vZyxjPVwiLVwiO3JldHVybiBhLnJlcGxhY2UoYixmdW5jdGlvbihhLGIpe3JldHVybihiP2M6XCJcIikrYS50b0xvd2VyQ2FzZSgpfSl9dmFyIGI9e3BsYWNlbWVudDpcInRvcFwiLGFuaW1hdGlvbjohMCxwb3B1cERlbGF5OjB9LGM9e21vdXNlZW50ZXI6XCJtb3VzZWxlYXZlXCIsY2xpY2s6XCJjbGlja1wiLGZvY3VzOlwiYmx1clwifSxkPXt9O3RoaXMub3B0aW9ucz1mdW5jdGlvbihhKXthbmd1bGFyLmV4dGVuZChkLGEpfSx0aGlzLnNldFRyaWdnZXJzPWZ1bmN0aW9uKGEpe2FuZ3VsYXIuZXh0ZW5kKGMsYSl9LHRoaXMuJGdldD1bXCIkd2luZG93XCIsXCIkY29tcGlsZVwiLFwiJHRpbWVvdXRcIixcIiRwYXJzZVwiLFwiJGRvY3VtZW50XCIsXCIkcG9zaXRpb25cIixcIiRpbnRlcnBvbGF0ZVwiLGZ1bmN0aW9uKGUsZixnLGgsaSxqLGspe3JldHVybiBmdW5jdGlvbihlLGwsbSl7ZnVuY3Rpb24gbihhKXt2YXIgYj1hfHxvLnRyaWdnZXJ8fG0sZD1jW2JdfHxiO3JldHVybntzaG93OmIsaGlkZTpkfX12YXIgbz1hbmd1bGFyLmV4dGVuZCh7fSxiLGQpLHA9YShlKSxxPWsuc3RhcnRTeW1ib2woKSxyPWsuZW5kU3ltYm9sKCkscz1cIjxkaXYgXCIrcCsnLXBvcHVwIHRpdGxlPVwiJytxK1widHRfdGl0bGVcIityKydcIiBjb250ZW50PVwiJytxK1widHRfY29udGVudFwiK3IrJ1wiIHBsYWNlbWVudD1cIicrcStcInR0X3BsYWNlbWVudFwiK3IrJ1wiIGFuaW1hdGlvbj1cInR0X2FuaW1hdGlvblwiIGlzLW9wZW49XCJ0dF9pc09wZW5cIj48L2Rpdj4nO3JldHVybntyZXN0cmljdDpcIkVBXCIsc2NvcGU6ITAsY29tcGlsZTpmdW5jdGlvbigpe3ZhciBhPWYocyk7cmV0dXJuIGZ1bmN0aW9uKGIsYyxkKXtmdW5jdGlvbiBmKCl7Yi50dF9pc09wZW4/bSgpOmsoKX1mdW5jdGlvbiBrKCl7KCF5fHxiLiRldmFsKGRbbCtcIkVuYWJsZVwiXSkpJiYoYi50dF9wb3B1cERlbGF5P3Z8fCh2PWcocCxiLnR0X3BvcHVwRGVsYXksITEpLHYudGhlbihmdW5jdGlvbihhKXthKCl9KSk6cCgpKCkpfWZ1bmN0aW9uIG0oKXtiLiRhcHBseShmdW5jdGlvbigpe3EoKX0pfWZ1bmN0aW9uIHAoKXtyZXR1cm4gdj1udWxsLHUmJihnLmNhbmNlbCh1KSx1PW51bGwpLGIudHRfY29udGVudD8ocigpLHQuY3NzKHt0b3A6MCxsZWZ0OjAsZGlzcGxheTpcImJsb2NrXCJ9KSx3P2kuZmluZChcImJvZHlcIikuYXBwZW5kKHQpOmMuYWZ0ZXIodCkseigpLGIudHRfaXNPcGVuPSEwLGIuJGRpZ2VzdCgpLHopOmFuZ3VsYXIubm9vcH1mdW5jdGlvbiBxKCl7Yi50dF9pc09wZW49ITEsZy5jYW5jZWwodiksdj1udWxsLGIudHRfYW5pbWF0aW9uP3V8fCh1PWcocyw1MDApKTpzKCl9ZnVuY3Rpb24gcigpe3QmJnMoKSx0PWEoYixmdW5jdGlvbigpe30pLGIuJGRpZ2VzdCgpfWZ1bmN0aW9uIHMoKXt1PW51bGwsdCYmKHQucmVtb3ZlKCksdD1udWxsKX12YXIgdCx1LHYsdz1hbmd1bGFyLmlzRGVmaW5lZChvLmFwcGVuZFRvQm9keSk/by5hcHBlbmRUb0JvZHk6ITEseD1uKHZvaWQgMCkseT1hbmd1bGFyLmlzRGVmaW5lZChkW2wrXCJFbmFibGVcIl0pLHo9ZnVuY3Rpb24oKXt2YXIgYT1qLnBvc2l0aW9uRWxlbWVudHMoYyx0LGIudHRfcGxhY2VtZW50LHcpO2EudG9wKz1cInB4XCIsYS5sZWZ0Kz1cInB4XCIsdC5jc3MoYSl9O2IudHRfaXNPcGVuPSExLGQuJG9ic2VydmUoZSxmdW5jdGlvbihhKXtiLnR0X2NvbnRlbnQ9YSwhYSYmYi50dF9pc09wZW4mJnEoKX0pLGQuJG9ic2VydmUobCtcIlRpdGxlXCIsZnVuY3Rpb24oYSl7Yi50dF90aXRsZT1hfSksZC4kb2JzZXJ2ZShsK1wiUGxhY2VtZW50XCIsZnVuY3Rpb24oYSl7Yi50dF9wbGFjZW1lbnQ9YW5ndWxhci5pc0RlZmluZWQoYSk/YTpvLnBsYWNlbWVudH0pLGQuJG9ic2VydmUobCtcIlBvcHVwRGVsYXlcIixmdW5jdGlvbihhKXt2YXIgYz1wYXJzZUludChhLDEwKTtiLnR0X3BvcHVwRGVsYXk9aXNOYU4oYyk/by5wb3B1cERlbGF5OmN9KTt2YXIgQT1mdW5jdGlvbigpe2MudW5iaW5kKHguc2hvdyxrKSxjLnVuYmluZCh4LmhpZGUsbSl9O2QuJG9ic2VydmUobCtcIlRyaWdnZXJcIixmdW5jdGlvbihhKXtBKCkseD1uKGEpLHguc2hvdz09PXguaGlkZT9jLmJpbmQoeC5zaG93LGYpOihjLmJpbmQoeC5zaG93LGspLGMuYmluZCh4LmhpZGUsbSkpfSk7dmFyIEI9Yi4kZXZhbChkW2wrXCJBbmltYXRpb25cIl0pO2IudHRfYW5pbWF0aW9uPWFuZ3VsYXIuaXNEZWZpbmVkKEIpPyEhQjpvLmFuaW1hdGlvbixkLiRvYnNlcnZlKGwrXCJBcHBlbmRUb0JvZHlcIixmdW5jdGlvbihhKXt3PWFuZ3VsYXIuaXNEZWZpbmVkKGEpP2goYSkoYik6d30pLHcmJmIuJG9uKFwiJGxvY2F0aW9uQ2hhbmdlU3VjY2Vzc1wiLGZ1bmN0aW9uKCl7Yi50dF9pc09wZW4mJnEoKX0pLGIuJG9uKFwiJGRlc3Ryb3lcIixmdW5jdGlvbigpe2cuY2FuY2VsKHUpLGcuY2FuY2VsKHYpLEEoKSxzKCl9KX19fX19XX0pLmRpcmVjdGl2ZShcInRvb2x0aXBQb3B1cFwiLGZ1bmN0aW9uKCl7cmV0dXJue3Jlc3RyaWN0OlwiRUFcIixyZXBsYWNlOiEwLHNjb3BlOntjb250ZW50OlwiQFwiLHBsYWNlbWVudDpcIkBcIixhbmltYXRpb246XCImXCIsaXNPcGVuOlwiJlwifSx0ZW1wbGF0ZVVybDpcInRlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1wb3B1cC5odG1sXCJ9fSkuZGlyZWN0aXZlKFwidG9vbHRpcFwiLFtcIiR0b29sdGlwXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGEoXCJ0b29sdGlwXCIsXCJ0b29sdGlwXCIsXCJtb3VzZWVudGVyXCIpfV0pLmRpcmVjdGl2ZShcInRvb2x0aXBIdG1sVW5zYWZlUG9wdXBcIixmdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkVBXCIscmVwbGFjZTohMCxzY29wZTp7Y29udGVudDpcIkBcIixwbGFjZW1lbnQ6XCJAXCIsYW5pbWF0aW9uOlwiJlwiLGlzT3BlbjpcIiZcIn0sdGVtcGxhdGVVcmw6XCJ0ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtaHRtbC11bnNhZmUtcG9wdXAuaHRtbFwifX0pLmRpcmVjdGl2ZShcInRvb2x0aXBIdG1sVW5zYWZlXCIsW1wiJHRvb2x0aXBcIixmdW5jdGlvbihhKXtyZXR1cm4gYShcInRvb2x0aXBIdG1sVW5zYWZlXCIsXCJ0b29sdGlwXCIsXCJtb3VzZWVudGVyXCIpfV0pLGFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLnBvcG92ZXJcIixbXCJ1aS5ib290c3RyYXAudG9vbHRpcFwiXSkuZGlyZWN0aXZlKFwicG9wb3ZlclBvcHVwXCIsZnVuY3Rpb24oKXtyZXR1cm57cmVzdHJpY3Q6XCJFQVwiLHJlcGxhY2U6ITAsc2NvcGU6e3RpdGxlOlwiQFwiLGNvbnRlbnQ6XCJAXCIscGxhY2VtZW50OlwiQFwiLGFuaW1hdGlvbjpcIiZcIixpc09wZW46XCImXCJ9LHRlbXBsYXRlVXJsOlwidGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLmh0bWxcIn19KS5kaXJlY3RpdmUoXCJwb3BvdmVyXCIsW1wiJHRvb2x0aXBcIixmdW5jdGlvbihhKXtyZXR1cm4gYShcInBvcG92ZXJcIixcInBvcG92ZXJcIixcImNsaWNrXCIpfV0pLGFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLnByb2dyZXNzYmFyXCIsW10pLmNvbnN0YW50KFwicHJvZ3Jlc3NDb25maWdcIix7YW5pbWF0ZTohMCxtYXg6MTAwfSkuY29udHJvbGxlcihcIlByb2dyZXNzQ29udHJvbGxlclwiLFtcIiRzY29wZVwiLFwiJGF0dHJzXCIsXCJwcm9ncmVzc0NvbmZpZ1wiLGZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLGU9YW5ndWxhci5pc0RlZmluZWQoYi5hbmltYXRlKT9hLiRwYXJlbnQuJGV2YWwoYi5hbmltYXRlKTpjLmFuaW1hdGU7dGhpcy5iYXJzPVtdLGEubWF4PWFuZ3VsYXIuaXNEZWZpbmVkKGIubWF4KT9hLiRwYXJlbnQuJGV2YWwoYi5tYXgpOmMubWF4LHRoaXMuYWRkQmFyPWZ1bmN0aW9uKGIsYyl7ZXx8Yy5jc3Moe3RyYW5zaXRpb246XCJub25lXCJ9KSx0aGlzLmJhcnMucHVzaChiKSxiLiR3YXRjaChcInZhbHVlXCIsZnVuY3Rpb24oYyl7Yi5wZXJjZW50PSsoMTAwKmMvYS5tYXgpLnRvRml4ZWQoMil9KSxiLiRvbihcIiRkZXN0cm95XCIsZnVuY3Rpb24oKXtjPW51bGwsZC5yZW1vdmVCYXIoYil9KX0sdGhpcy5yZW1vdmVCYXI9ZnVuY3Rpb24oYSl7dGhpcy5iYXJzLnNwbGljZSh0aGlzLmJhcnMuaW5kZXhPZihhKSwxKX19XSkuZGlyZWN0aXZlKFwicHJvZ3Jlc3NcIixmdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkVBXCIscmVwbGFjZTohMCx0cmFuc2NsdWRlOiEwLGNvbnRyb2xsZXI6XCJQcm9ncmVzc0NvbnRyb2xsZXJcIixyZXF1aXJlOlwicHJvZ3Jlc3NcIixzY29wZTp7fSx0ZW1wbGF0ZVVybDpcInRlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWxcIn19KS5kaXJlY3RpdmUoXCJiYXJcIixmdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkVBXCIscmVwbGFjZTohMCx0cmFuc2NsdWRlOiEwLHJlcXVpcmU6XCJecHJvZ3Jlc3NcIixzY29wZTp7dmFsdWU6XCI9XCIsdHlwZTpcIkBcIn0sdGVtcGxhdGVVcmw6XCJ0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9iYXIuaHRtbFwiLGxpbms6ZnVuY3Rpb24oYSxiLGMsZCl7ZC5hZGRCYXIoYSxiKX19fSkuZGlyZWN0aXZlKFwicHJvZ3Jlc3NiYXJcIixmdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkVBXCIscmVwbGFjZTohMCx0cmFuc2NsdWRlOiEwLGNvbnRyb2xsZXI6XCJQcm9ncmVzc0NvbnRyb2xsZXJcIixzY29wZTp7dmFsdWU6XCI9XCIsdHlwZTpcIkBcIn0sdGVtcGxhdGVVcmw6XCJ0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci5odG1sXCIsbGluazpmdW5jdGlvbihhLGIsYyxkKXtkLmFkZEJhcihhLGFuZ3VsYXIuZWxlbWVudChiLmNoaWxkcmVuKClbMF0pKX19fSksYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXAucmF0aW5nXCIsW10pLmNvbnN0YW50KFwicmF0aW5nQ29uZmlnXCIse21heDo1LHN0YXRlT246bnVsbCxzdGF0ZU9mZjpudWxsfSkuY29udHJvbGxlcihcIlJhdGluZ0NvbnRyb2xsZXJcIixbXCIkc2NvcGVcIixcIiRhdHRyc1wiLFwicmF0aW5nQ29uZmlnXCIsZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXskc2V0Vmlld1ZhbHVlOmFuZ3VsYXIubm9vcH07dGhpcy5pbml0PWZ1bmN0aW9uKGUpe2Q9ZSxkLiRyZW5kZXI9dGhpcy5yZW5kZXIsdGhpcy5zdGF0ZU9uPWFuZ3VsYXIuaXNEZWZpbmVkKGIuc3RhdGVPbik/YS4kcGFyZW50LiRldmFsKGIuc3RhdGVPbik6Yy5zdGF0ZU9uLHRoaXMuc3RhdGVPZmY9YW5ndWxhci5pc0RlZmluZWQoYi5zdGF0ZU9mZik/YS4kcGFyZW50LiRldmFsKGIuc3RhdGVPZmYpOmMuc3RhdGVPZmY7dmFyIGY9YW5ndWxhci5pc0RlZmluZWQoYi5yYXRpbmdTdGF0ZXMpP2EuJHBhcmVudC4kZXZhbChiLnJhdGluZ1N0YXRlcyk6bmV3IEFycmF5KGFuZ3VsYXIuaXNEZWZpbmVkKGIubWF4KT9hLiRwYXJlbnQuJGV2YWwoYi5tYXgpOmMubWF4KTthLnJhbmdlPXRoaXMuYnVpbGRUZW1wbGF0ZU9iamVjdHMoZil9LHRoaXMuYnVpbGRUZW1wbGF0ZU9iamVjdHM9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPTAsYz1hLmxlbmd0aDtjPmI7YisrKWFbYl09YW5ndWxhci5leHRlbmQoe2luZGV4OmJ9LHtzdGF0ZU9uOnRoaXMuc3RhdGVPbixzdGF0ZU9mZjp0aGlzLnN0YXRlT2ZmfSxhW2JdKTtyZXR1cm4gYX0sYS5yYXRlPWZ1bmN0aW9uKGIpeyFhLnJlYWRvbmx5JiZiPj0wJiZiPD1hLnJhbmdlLmxlbmd0aCYmKGQuJHNldFZpZXdWYWx1ZShiKSxkLiRyZW5kZXIoKSl9LGEuZW50ZXI9ZnVuY3Rpb24oYil7YS5yZWFkb25seXx8KGEudmFsdWU9YiksYS5vbkhvdmVyKHt2YWx1ZTpifSl9LGEucmVzZXQ9ZnVuY3Rpb24oKXthLnZhbHVlPWQuJHZpZXdWYWx1ZSxhLm9uTGVhdmUoKX0sYS5vbktleWRvd249ZnVuY3Rpb24oYil7LygzN3wzOHwzOXw0MCkvLnRlc3QoYi53aGljaCkmJihiLnByZXZlbnREZWZhdWx0KCksYi5zdG9wUHJvcGFnYXRpb24oKSxhLnJhdGUoYS52YWx1ZSsoMzg9PT1iLndoaWNofHwzOT09PWIud2hpY2g/MTotMSkpKX0sdGhpcy5yZW5kZXI9ZnVuY3Rpb24oKXthLnZhbHVlPWQuJHZpZXdWYWx1ZX19XSkuZGlyZWN0aXZlKFwicmF0aW5nXCIsZnVuY3Rpb24oKXtyZXR1cm57cmVzdHJpY3Q6XCJFQVwiLHJlcXVpcmU6W1wicmF0aW5nXCIsXCJuZ01vZGVsXCJdLHNjb3BlOntyZWFkb25seTpcIj0/XCIsb25Ib3ZlcjpcIiZcIixvbkxlYXZlOlwiJlwifSxjb250cm9sbGVyOlwiUmF0aW5nQ29udHJvbGxlclwiLHRlbXBsYXRlVXJsOlwidGVtcGxhdGUvcmF0aW5nL3JhdGluZy5odG1sXCIscmVwbGFjZTohMCxsaW5rOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWRbMF0sZj1kWzFdO2YmJmUuaW5pdChmKX19fSksYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXAudGFic1wiLFtdKS5jb250cm9sbGVyKFwiVGFic2V0Q29udHJvbGxlclwiLFtcIiRzY29wZVwiLGZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz1iLnRhYnM9YS50YWJzPVtdO2Iuc2VsZWN0PWZ1bmN0aW9uKGEpe2FuZ3VsYXIuZm9yRWFjaChjLGZ1bmN0aW9uKGIpe2IuYWN0aXZlJiZiIT09YSYmKGIuYWN0aXZlPSExLGIub25EZXNlbGVjdCgpKX0pLGEuYWN0aXZlPSEwLGEub25TZWxlY3QoKX0sYi5hZGRUYWI9ZnVuY3Rpb24oYSl7Yy5wdXNoKGEpLDE9PT1jLmxlbmd0aD9hLmFjdGl2ZT0hMDphLmFjdGl2ZSYmYi5zZWxlY3QoYSl9LGIucmVtb3ZlVGFiPWZ1bmN0aW9uKGEpe3ZhciBkPWMuaW5kZXhPZihhKTtpZihhLmFjdGl2ZSYmYy5sZW5ndGg+MSl7dmFyIGU9ZD09Yy5sZW5ndGgtMT9kLTE6ZCsxO2Iuc2VsZWN0KGNbZV0pfWMuc3BsaWNlKGQsMSl9fV0pLmRpcmVjdGl2ZShcInRhYnNldFwiLGZ1bmN0aW9uKCl7cmV0dXJue3Jlc3RyaWN0OlwiRUFcIix0cmFuc2NsdWRlOiEwLHJlcGxhY2U6ITAsc2NvcGU6e3R5cGU6XCJAXCJ9LGNvbnRyb2xsZXI6XCJUYWJzZXRDb250cm9sbGVyXCIsdGVtcGxhdGVVcmw6XCJ0ZW1wbGF0ZS90YWJzL3RhYnNldC5odG1sXCIsbGluazpmdW5jdGlvbihhLGIsYyl7YS52ZXJ0aWNhbD1hbmd1bGFyLmlzRGVmaW5lZChjLnZlcnRpY2FsKT9hLiRwYXJlbnQuJGV2YWwoYy52ZXJ0aWNhbCk6ITEsYS5qdXN0aWZpZWQ9YW5ndWxhci5pc0RlZmluZWQoYy5qdXN0aWZpZWQpP2EuJHBhcmVudC4kZXZhbChjLmp1c3RpZmllZCk6ITF9fX0pLmRpcmVjdGl2ZShcInRhYlwiLFtcIiRwYXJzZVwiLGZ1bmN0aW9uKGEpe3JldHVybntyZXF1aXJlOlwiXnRhYnNldFwiLHJlc3RyaWN0OlwiRUFcIixyZXBsYWNlOiEwLHRlbXBsYXRlVXJsOlwidGVtcGxhdGUvdGFicy90YWIuaHRtbFwiLHRyYW5zY2x1ZGU6ITAsc2NvcGU6e2FjdGl2ZTpcIj0/XCIsaGVhZGluZzpcIkBcIixvblNlbGVjdDpcIiZzZWxlY3RcIixvbkRlc2VsZWN0OlwiJmRlc2VsZWN0XCJ9LGNvbnRyb2xsZXI6ZnVuY3Rpb24oKXt9LGNvbXBpbGU6ZnVuY3Rpb24oYixjLGQpe3JldHVybiBmdW5jdGlvbihiLGMsZSxmKXtiLiR3YXRjaChcImFjdGl2ZVwiLGZ1bmN0aW9uKGEpe2EmJmYuc2VsZWN0KGIpfSksYi5kaXNhYmxlZD0hMSxlLmRpc2FibGVkJiZiLiRwYXJlbnQuJHdhdGNoKGEoZS5kaXNhYmxlZCksZnVuY3Rpb24oYSl7Yi5kaXNhYmxlZD0hIWF9KSxiLnNlbGVjdD1mdW5jdGlvbigpe2IuZGlzYWJsZWR8fChiLmFjdGl2ZT0hMCl9LGYuYWRkVGFiKGIpLGIuJG9uKFwiJGRlc3Ryb3lcIixmdW5jdGlvbigpe2YucmVtb3ZlVGFiKGIpfSksYi4kdHJhbnNjbHVkZUZuPWR9fX19XSkuZGlyZWN0aXZlKFwidGFiSGVhZGluZ1RyYW5zY2x1ZGVcIixbZnVuY3Rpb24oKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIscmVxdWlyZTpcIl50YWJcIixsaW5rOmZ1bmN0aW9uKGEsYil7YS4kd2F0Y2goXCJoZWFkaW5nRWxlbWVudFwiLGZ1bmN0aW9uKGEpe2EmJihiLmh0bWwoXCJcIiksYi5hcHBlbmQoYSkpfSl9fX1dKS5kaXJlY3RpdmUoXCJ0YWJDb250ZW50VHJhbnNjbHVkZVwiLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhKXtyZXR1cm4gYS50YWdOYW1lJiYoYS5oYXNBdHRyaWJ1dGUoXCJ0YWItaGVhZGluZ1wiKXx8YS5oYXNBdHRyaWJ1dGUoXCJkYXRhLXRhYi1oZWFkaW5nXCIpfHxcInRhYi1oZWFkaW5nXCI9PT1hLnRhZ05hbWUudG9Mb3dlckNhc2UoKXx8XCJkYXRhLXRhYi1oZWFkaW5nXCI9PT1hLnRhZ05hbWUudG9Mb3dlckNhc2UoKSl9cmV0dXJue3Jlc3RyaWN0OlwiQVwiLHJlcXVpcmU6XCJedGFic2V0XCIsbGluazpmdW5jdGlvbihiLGMsZCl7dmFyIGU9Yi4kZXZhbChkLnRhYkNvbnRlbnRUcmFuc2NsdWRlKTtlLiR0cmFuc2NsdWRlRm4oZS4kcGFyZW50LGZ1bmN0aW9uKGIpe2FuZ3VsYXIuZm9yRWFjaChiLGZ1bmN0aW9uKGIpe2EoYik/ZS5oZWFkaW5nRWxlbWVudD1iOmMuYXBwZW5kKGIpfSl9KX19fSksYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXAudGltZXBpY2tlclwiLFtdKS5jb25zdGFudChcInRpbWVwaWNrZXJDb25maWdcIix7aG91clN0ZXA6MSxtaW51dGVTdGVwOjEsc2hvd01lcmlkaWFuOiEwLG1lcmlkaWFuczpudWxsLHJlYWRvbmx5SW5wdXQ6ITEsbW91c2V3aGVlbDohMH0pLmNvbnRyb2xsZXIoXCJUaW1lcGlja2VyQ29udHJvbGxlclwiLFtcIiRzY29wZVwiLFwiJGF0dHJzXCIsXCIkcGFyc2VcIixcIiRsb2dcIixcIiRsb2NhbGVcIixcInRpbWVwaWNrZXJDb25maWdcIixmdW5jdGlvbihhLGIsYyxkLGUsZil7ZnVuY3Rpb24gZygpe3ZhciBiPXBhcnNlSW50KGEuaG91cnMsMTApLGM9YS5zaG93TWVyaWRpYW4/Yj4wJiYxMz5iOmI+PTAmJjI0PmI7cmV0dXJuIGM/KGEuc2hvd01lcmlkaWFuJiYoMTI9PT1iJiYoYj0wKSxhLm1lcmlkaWFuPT09cFsxXSYmKGIrPTEyKSksYik6dm9pZCAwfWZ1bmN0aW9uIGgoKXt2YXIgYj1wYXJzZUludChhLm1pbnV0ZXMsMTApO3JldHVybiBiPj0wJiY2MD5iP2I6dm9pZCAwfWZ1bmN0aW9uIGkoYSl7cmV0dXJuIGFuZ3VsYXIuaXNEZWZpbmVkKGEpJiZhLnRvU3RyaW5nKCkubGVuZ3RoPDI/XCIwXCIrYTphfWZ1bmN0aW9uIGooYSl7aygpLG8uJHNldFZpZXdWYWx1ZShuZXcgRGF0ZShuKSksbChhKX1mdW5jdGlvbiBrKCl7by4kc2V0VmFsaWRpdHkoXCJ0aW1lXCIsITApLGEuaW52YWxpZEhvdXJzPSExLGEuaW52YWxpZE1pbnV0ZXM9ITF9ZnVuY3Rpb24gbChiKXt2YXIgYz1uLmdldEhvdXJzKCksZD1uLmdldE1pbnV0ZXMoKTthLnNob3dNZXJpZGlhbiYmKGM9MD09PWN8fDEyPT09Yz8xMjpjJTEyKSxhLmhvdXJzPVwiaFwiPT09Yj9jOmkoYyksYS5taW51dGVzPVwibVwiPT09Yj9kOmkoZCksYS5tZXJpZGlhbj1uLmdldEhvdXJzKCk8MTI/cFswXTpwWzFdfWZ1bmN0aW9uIG0oYSl7dmFyIGI9bmV3IERhdGUobi5nZXRUaW1lKCkrNmU0KmEpO24uc2V0SG91cnMoYi5nZXRIb3VycygpLGIuZ2V0TWludXRlcygpKSxqKCl9dmFyIG49bmV3IERhdGUsbz17JHNldFZpZXdWYWx1ZTphbmd1bGFyLm5vb3B9LHA9YW5ndWxhci5pc0RlZmluZWQoYi5tZXJpZGlhbnMpP2EuJHBhcmVudC4kZXZhbChiLm1lcmlkaWFucyk6Zi5tZXJpZGlhbnN8fGUuREFURVRJTUVfRk9STUFUUy5BTVBNUzt0aGlzLmluaXQ9ZnVuY3Rpb24oYyxkKXtvPWMsby4kcmVuZGVyPXRoaXMucmVuZGVyO3ZhciBlPWQuZXEoMCksZz1kLmVxKDEpLGg9YW5ndWxhci5pc0RlZmluZWQoYi5tb3VzZXdoZWVsKT9hLiRwYXJlbnQuJGV2YWwoYi5tb3VzZXdoZWVsKTpmLm1vdXNld2hlZWw7aCYmdGhpcy5zZXR1cE1vdXNld2hlZWxFdmVudHMoZSxnKSxhLnJlYWRvbmx5SW5wdXQ9YW5ndWxhci5pc0RlZmluZWQoYi5yZWFkb25seUlucHV0KT9hLiRwYXJlbnQuJGV2YWwoYi5yZWFkb25seUlucHV0KTpmLnJlYWRvbmx5SW5wdXQsdGhpcy5zZXR1cElucHV0RXZlbnRzKGUsZyl9O3ZhciBxPWYuaG91clN0ZXA7Yi5ob3VyU3RlcCYmYS4kcGFyZW50LiR3YXRjaChjKGIuaG91clN0ZXApLGZ1bmN0aW9uKGEpe3E9cGFyc2VJbnQoYSwxMCl9KTt2YXIgcj1mLm1pbnV0ZVN0ZXA7Yi5taW51dGVTdGVwJiZhLiRwYXJlbnQuJHdhdGNoKGMoYi5taW51dGVTdGVwKSxmdW5jdGlvbihhKXtyPXBhcnNlSW50KGEsMTApfSksYS5zaG93TWVyaWRpYW49Zi5zaG93TWVyaWRpYW4sYi5zaG93TWVyaWRpYW4mJmEuJHBhcmVudC4kd2F0Y2goYyhiLnNob3dNZXJpZGlhbiksZnVuY3Rpb24oYil7aWYoYS5zaG93TWVyaWRpYW49ISFiLG8uJGVycm9yLnRpbWUpe3ZhciBjPWcoKSxkPWgoKTthbmd1bGFyLmlzRGVmaW5lZChjKSYmYW5ndWxhci5pc0RlZmluZWQoZCkmJihuLnNldEhvdXJzKGMpLGooKSl9ZWxzZSBsKCl9KSx0aGlzLnNldHVwTW91c2V3aGVlbEV2ZW50cz1mdW5jdGlvbihiLGMpe3ZhciBkPWZ1bmN0aW9uKGEpe2Eub3JpZ2luYWxFdmVudCYmKGE9YS5vcmlnaW5hbEV2ZW50KTt2YXIgYj1hLndoZWVsRGVsdGE/YS53aGVlbERlbHRhOi1hLmRlbHRhWTtyZXR1cm4gYS5kZXRhaWx8fGI+MH07Yi5iaW5kKFwibW91c2V3aGVlbCB3aGVlbFwiLGZ1bmN0aW9uKGIpe2EuJGFwcGx5KGQoYik/YS5pbmNyZW1lbnRIb3VycygpOmEuZGVjcmVtZW50SG91cnMoKSksYi5wcmV2ZW50RGVmYXVsdCgpfSksYy5iaW5kKFwibW91c2V3aGVlbCB3aGVlbFwiLGZ1bmN0aW9uKGIpe2EuJGFwcGx5KGQoYik/YS5pbmNyZW1lbnRNaW51dGVzKCk6YS5kZWNyZW1lbnRNaW51dGVzKCkpLGIucHJldmVudERlZmF1bHQoKX0pfSx0aGlzLnNldHVwSW5wdXRFdmVudHM9ZnVuY3Rpb24oYixjKXtpZihhLnJlYWRvbmx5SW5wdXQpcmV0dXJuIGEudXBkYXRlSG91cnM9YW5ndWxhci5ub29wLHZvaWQoYS51cGRhdGVNaW51dGVzPWFuZ3VsYXIubm9vcCk7dmFyIGQ9ZnVuY3Rpb24oYixjKXtvLiRzZXRWaWV3VmFsdWUobnVsbCksby4kc2V0VmFsaWRpdHkoXCJ0aW1lXCIsITEpLGFuZ3VsYXIuaXNEZWZpbmVkKGIpJiYoYS5pbnZhbGlkSG91cnM9YiksYW5ndWxhci5pc0RlZmluZWQoYykmJihhLmludmFsaWRNaW51dGVzPWMpfTthLnVwZGF0ZUhvdXJzPWZ1bmN0aW9uKCl7dmFyIGE9ZygpO2FuZ3VsYXIuaXNEZWZpbmVkKGEpPyhuLnNldEhvdXJzKGEpLGooXCJoXCIpKTpkKCEwKX0sYi5iaW5kKFwiYmx1clwiLGZ1bmN0aW9uKCl7IWEuaW52YWxpZEhvdXJzJiZhLmhvdXJzPDEwJiZhLiRhcHBseShmdW5jdGlvbigpe2EuaG91cnM9aShhLmhvdXJzKX0pfSksYS51cGRhdGVNaW51dGVzPWZ1bmN0aW9uKCl7dmFyIGE9aCgpO2FuZ3VsYXIuaXNEZWZpbmVkKGEpPyhuLnNldE1pbnV0ZXMoYSksaihcIm1cIikpOmQodm9pZCAwLCEwKX0sYy5iaW5kKFwiYmx1clwiLGZ1bmN0aW9uKCl7IWEuaW52YWxpZE1pbnV0ZXMmJmEubWludXRlczwxMCYmYS4kYXBwbHkoZnVuY3Rpb24oKXthLm1pbnV0ZXM9aShhLm1pbnV0ZXMpfSl9KX0sdGhpcy5yZW5kZXI9ZnVuY3Rpb24oKXt2YXIgYT1vLiRtb2RlbFZhbHVlP25ldyBEYXRlKG8uJG1vZGVsVmFsdWUpOm51bGw7aXNOYU4oYSk/KG8uJHNldFZhbGlkaXR5KFwidGltZVwiLCExKSxkLmVycm9yKCdUaW1lcGlja2VyIGRpcmVjdGl2ZTogXCJuZy1tb2RlbFwiIHZhbHVlIG11c3QgYmUgYSBEYXRlIG9iamVjdCwgYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIDAxLjAxLjE5NzAgb3IgYSBzdHJpbmcgcmVwcmVzZW50aW5nIGFuIFJGQzI4MjIgb3IgSVNPIDg2MDEgZGF0ZS4nKSk6KGEmJihuPWEpLGsoKSxsKCkpfSxhLmluY3JlbWVudEhvdXJzPWZ1bmN0aW9uKCl7bSg2MCpxKX0sYS5kZWNyZW1lbnRIb3Vycz1mdW5jdGlvbigpe20oNjAqLXEpfSxhLmluY3JlbWVudE1pbnV0ZXM9ZnVuY3Rpb24oKXttKHIpfSxhLmRlY3JlbWVudE1pbnV0ZXM9ZnVuY3Rpb24oKXttKC1yKX0sYS50b2dnbGVNZXJpZGlhbj1mdW5jdGlvbigpe20oNzIwKihuLmdldEhvdXJzKCk8MTI/MTotMSkpfX1dKS5kaXJlY3RpdmUoXCJ0aW1lcGlja2VyXCIsZnVuY3Rpb24oKXtyZXR1cm57cmVzdHJpY3Q6XCJFQVwiLHJlcXVpcmU6W1widGltZXBpY2tlclwiLFwiP15uZ01vZGVsXCJdLGNvbnRyb2xsZXI6XCJUaW1lcGlja2VyQ29udHJvbGxlclwiLHJlcGxhY2U6ITAsc2NvcGU6e30sdGVtcGxhdGVVcmw6XCJ0ZW1wbGF0ZS90aW1lcGlja2VyL3RpbWVwaWNrZXIuaHRtbFwiLGxpbms6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZFswXSxmPWRbMV07ZiYmZS5pbml0KGYsYi5maW5kKFwiaW5wdXRcIikpfX19KSxhbmd1bGFyLm1vZHVsZShcInVpLmJvb3RzdHJhcC50eXBlYWhlYWRcIixbXCJ1aS5ib290c3RyYXAucG9zaXRpb25cIixcInVpLmJvb3RzdHJhcC5iaW5kSHRtbFwiXSkuZmFjdG9yeShcInR5cGVhaGVhZFBhcnNlclwiLFtcIiRwYXJzZVwiLGZ1bmN0aW9uKGEpe3ZhciBiPS9eXFxzKihbXFxzXFxTXSs/KSg/Olxccythc1xccysoW1xcc1xcU10rPykpP1xccytmb3JcXHMrKD86KFtcXCRcXHddW1xcJFxcd1xcZF0qKSlcXHMraW5cXHMrKFtcXHNcXFNdKz8pJC87cmV0dXJue3BhcnNlOmZ1bmN0aW9uKGMpe3ZhciBkPWMubWF0Y2goYik7aWYoIWQpdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0eXBlYWhlYWQgc3BlY2lmaWNhdGlvbiBpbiBmb3JtIG9mIFwiX21vZGVsVmFsdWVfIChhcyBfbGFiZWxfKT8gZm9yIF9pdGVtXyBpbiBfY29sbGVjdGlvbl9cIiBidXQgZ290IFwiJytjKydcIi4nKTtyZXR1cm57aXRlbU5hbWU6ZFszXSxzb3VyY2U6YShkWzRdKSx2aWV3TWFwcGVyOmEoZFsyXXx8ZFsxXSksbW9kZWxNYXBwZXI6YShkWzFdKX19fX1dKS5kaXJlY3RpdmUoXCJ0eXBlYWhlYWRcIixbXCIkY29tcGlsZVwiLFwiJHBhcnNlXCIsXCIkcVwiLFwiJHRpbWVvdXRcIixcIiRkb2N1bWVudFwiLFwiJHBvc2l0aW9uXCIsXCJ0eXBlYWhlYWRQYXJzZXJcIixmdW5jdGlvbihhLGIsYyxkLGUsZixnKXt2YXIgaD1bOSwxMywyNywzOCw0MF07cmV0dXJue3JlcXVpcmU6XCJuZ01vZGVsXCIsbGluazpmdW5jdGlvbihpLGosayxsKXt2YXIgbSxuPWkuJGV2YWwoay50eXBlYWhlYWRNaW5MZW5ndGgpfHwxLG89aS4kZXZhbChrLnR5cGVhaGVhZFdhaXRNcyl8fDAscD1pLiRldmFsKGsudHlwZWFoZWFkRWRpdGFibGUpIT09ITEscT1iKGsudHlwZWFoZWFkTG9hZGluZykuYXNzaWdufHxhbmd1bGFyLm5vb3Ascj1iKGsudHlwZWFoZWFkT25TZWxlY3QpLHM9ay50eXBlYWhlYWRJbnB1dEZvcm1hdHRlcj9iKGsudHlwZWFoZWFkSW5wdXRGb3JtYXR0ZXIpOnZvaWQgMCx0PWsudHlwZWFoZWFkQXBwZW5kVG9Cb2R5P2kuJGV2YWwoay50eXBlYWhlYWRBcHBlbmRUb0JvZHkpOiExLHU9YihrLm5nTW9kZWwpLmFzc2lnbix2PWcucGFyc2Uoay50eXBlYWhlYWQpLHc9aS4kbmV3KCk7aS4kb24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7dy4kZGVzdHJveSgpfSk7dmFyIHg9XCJ0eXBlYWhlYWQtXCIrdy4kaWQrXCItXCIrTWF0aC5mbG9vcigxZTQqTWF0aC5yYW5kb20oKSk7ai5hdHRyKHtcImFyaWEtYXV0b2NvbXBsZXRlXCI6XCJsaXN0XCIsXCJhcmlhLWV4cGFuZGVkXCI6ITEsXCJhcmlhLW93bnNcIjp4fSk7dmFyIHk9YW5ndWxhci5lbGVtZW50KFwiPGRpdiB0eXBlYWhlYWQtcG9wdXA+PC9kaXY+XCIpO3kuYXR0cih7aWQ6eCxtYXRjaGVzOlwibWF0Y2hlc1wiLGFjdGl2ZTpcImFjdGl2ZUlkeFwiLHNlbGVjdDpcInNlbGVjdChhY3RpdmVJZHgpXCIscXVlcnk6XCJxdWVyeVwiLHBvc2l0aW9uOlwicG9zaXRpb25cIn0pLGFuZ3VsYXIuaXNEZWZpbmVkKGsudHlwZWFoZWFkVGVtcGxhdGVVcmwpJiZ5LmF0dHIoXCJ0ZW1wbGF0ZS11cmxcIixrLnR5cGVhaGVhZFRlbXBsYXRlVXJsKTt2YXIgej1mdW5jdGlvbigpe3cubWF0Y2hlcz1bXSx3LmFjdGl2ZUlkeD0tMSxqLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsITEpfSxBPWZ1bmN0aW9uKGEpe3JldHVybiB4K1wiLW9wdGlvbi1cIithfTt3LiR3YXRjaChcImFjdGl2ZUlkeFwiLGZ1bmN0aW9uKGEpezA+YT9qLnJlbW92ZUF0dHIoXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIik6ai5hdHRyKFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCIsQShhKSl9KTt2YXIgQj1mdW5jdGlvbihhKXt2YXIgYj17JHZpZXdWYWx1ZTphfTtxKGksITApLGMud2hlbih2LnNvdXJjZShpLGIpKS50aGVuKGZ1bmN0aW9uKGMpe3ZhciBkPWE9PT1sLiR2aWV3VmFsdWU7aWYoZCYmbSlpZihjLmxlbmd0aD4wKXt3LmFjdGl2ZUlkeD0wLHcubWF0Y2hlcy5sZW5ndGg9MDtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW3YuaXRlbU5hbWVdPWNbZV0sdy5tYXRjaGVzLnB1c2goe2lkOkEoZSksbGFiZWw6di52aWV3TWFwcGVyKHcsYiksbW9kZWw6Y1tlXX0pO3cucXVlcnk9YSx3LnBvc2l0aW9uPXQ/Zi5vZmZzZXQoaik6Zi5wb3NpdGlvbihqKSx3LnBvc2l0aW9uLnRvcD13LnBvc2l0aW9uLnRvcCtqLnByb3AoXCJvZmZzZXRIZWlnaHRcIiksai5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLCEwKX1lbHNlIHooKTtkJiZxKGksITEpfSxmdW5jdGlvbigpe3ooKSxxKGksITEpfSl9O3ooKSx3LnF1ZXJ5PXZvaWQgMDt2YXIgQyxEPWZ1bmN0aW9uKGEpe0M9ZChmdW5jdGlvbigpe0IoYSl9LG8pfSxFPWZ1bmN0aW9uKCl7QyYmZC5jYW5jZWwoQyl9O2wuJHBhcnNlcnMudW5zaGlmdChmdW5jdGlvbihhKXtyZXR1cm4gbT0hMCxhJiZhLmxlbmd0aD49bj9vPjA/KEUoKSxEKGEpKTpCKGEpOihxKGksITEpLEUoKSx6KCkpLHA/YTphP3ZvaWQgbC4kc2V0VmFsaWRpdHkoXCJlZGl0YWJsZVwiLCExKToobC4kc2V0VmFsaWRpdHkoXCJlZGl0YWJsZVwiLCEwKSxhKX0pLGwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbihhKXt2YXIgYixjLGQ9e307cmV0dXJuIHM/KGQuJG1vZGVsPWEscyhpLGQpKTooZFt2Lml0ZW1OYW1lXT1hLGI9di52aWV3TWFwcGVyKGksZCksZFt2Lml0ZW1OYW1lXT12b2lkIDAsYz12LnZpZXdNYXBwZXIoaSxkKSxiIT09Yz9iOmEpfSksdy5zZWxlY3Q9ZnVuY3Rpb24oYSl7dmFyIGIsYyxlPXt9O2Vbdi5pdGVtTmFtZV09Yz13Lm1hdGNoZXNbYV0ubW9kZWwsYj12Lm1vZGVsTWFwcGVyKGksZSksdShpLGIpLGwuJHNldFZhbGlkaXR5KFwiZWRpdGFibGVcIiwhMCkscihpLHskaXRlbTpjLCRtb2RlbDpiLCRsYWJlbDp2LnZpZXdNYXBwZXIoaSxlKX0pLHooKSxkKGZ1bmN0aW9uKCl7alswXS5mb2N1cygpfSwwLCExKX0sai5iaW5kKFwia2V5ZG93blwiLGZ1bmN0aW9uKGEpezAhPT13Lm1hdGNoZXMubGVuZ3RoJiYtMSE9PWguaW5kZXhPZihhLndoaWNoKSYmKGEucHJldmVudERlZmF1bHQoKSw0MD09PWEud2hpY2g/KHcuYWN0aXZlSWR4PSh3LmFjdGl2ZUlkeCsxKSV3Lm1hdGNoZXMubGVuZ3RoLHcuJGRpZ2VzdCgpKTozOD09PWEud2hpY2g/KHcuYWN0aXZlSWR4PSh3LmFjdGl2ZUlkeD93LmFjdGl2ZUlkeDp3Lm1hdGNoZXMubGVuZ3RoKS0xLHcuJGRpZ2VzdCgpKToxMz09PWEud2hpY2h8fDk9PT1hLndoaWNoP3cuJGFwcGx5KGZ1bmN0aW9uKCl7dy5zZWxlY3Qody5hY3RpdmVJZHgpfSk6Mjc9PT1hLndoaWNoJiYoYS5zdG9wUHJvcGFnYXRpb24oKSx6KCksdy4kZGlnZXN0KCkpKX0pLGouYmluZChcImJsdXJcIixmdW5jdGlvbigpe209ITF9KTt2YXIgRj1mdW5jdGlvbihhKXtqWzBdIT09YS50YXJnZXQmJih6KCksdy4kZGlnZXN0KCkpfTtlLmJpbmQoXCJjbGlja1wiLEYpLGkuJG9uKFwiJGRlc3Ryb3lcIixmdW5jdGlvbigpe2UudW5iaW5kKFwiY2xpY2tcIixGKX0pO3ZhciBHPWEoeSkodyk7dD9lLmZpbmQoXCJib2R5XCIpLmFwcGVuZChHKTpqLmFmdGVyKEcpfX19XSkuZGlyZWN0aXZlKFwidHlwZWFoZWFkUG9wdXBcIixmdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkVBXCIsc2NvcGU6e21hdGNoZXM6XCI9XCIscXVlcnk6XCI9XCIsYWN0aXZlOlwiPVwiLHBvc2l0aW9uOlwiPVwiLHNlbGVjdDpcIiZcIn0scmVwbGFjZTohMCx0ZW1wbGF0ZVVybDpcInRlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtcG9wdXAuaHRtbFwiLGxpbms6ZnVuY3Rpb24oYSxiLGMpe2EudGVtcGxhdGVVcmw9Yy50ZW1wbGF0ZVVybCxhLmlzT3Blbj1mdW5jdGlvbigpe3JldHVybiBhLm1hdGNoZXMubGVuZ3RoPjB9LGEuaXNBY3RpdmU9ZnVuY3Rpb24oYil7cmV0dXJuIGEuYWN0aXZlPT1ifSxhLnNlbGVjdEFjdGl2ZT1mdW5jdGlvbihiKXthLmFjdGl2ZT1ifSxhLnNlbGVjdE1hdGNoPWZ1bmN0aW9uKGIpe2Euc2VsZWN0KHthY3RpdmVJZHg6Yn0pfX19fSkuZGlyZWN0aXZlKFwidHlwZWFoZWFkTWF0Y2hcIixbXCIkaHR0cFwiLFwiJHRlbXBsYXRlQ2FjaGVcIixcIiRjb21waWxlXCIsXCIkcGFyc2VcIixmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm57cmVzdHJpY3Q6XCJFQVwiLHNjb3BlOntpbmRleDpcIj1cIixtYXRjaDpcIj1cIixxdWVyeTpcIj1cIn0sbGluazpmdW5jdGlvbihlLGYsZyl7dmFyIGg9ZChnLnRlbXBsYXRlVXJsKShlLiRwYXJlbnQpfHxcInRlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtbWF0Y2guaHRtbFwiO2EuZ2V0KGgse2NhY2hlOmJ9KS5zdWNjZXNzKGZ1bmN0aW9uKGEpe2YucmVwbGFjZVdpdGgoYyhhLnRyaW0oKSkoZSkpfSl9fX1dKS5maWx0ZXIoXCJ0eXBlYWhlYWRIaWdobGlnaHRcIixmdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSl7cmV0dXJuIGEucmVwbGFjZSgvKFsuPyorXiRbXFxdXFxcXCgpe318LV0pL2csXCJcXFxcJDFcIil9cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuIGM/KFwiXCIrYikucmVwbGFjZShuZXcgUmVnRXhwKGEoYyksXCJnaVwiKSxcIjxzdHJvbmc+JCY8L3N0cm9uZz5cIik6Yn19KSxhbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24tZ3JvdXAuaHRtbFwiLFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIixmdW5jdGlvbihhKXthLnB1dChcInRlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24tZ3JvdXAuaHRtbFwiLCc8ZGl2IGNsYXNzPVwicGFuZWwgcGFuZWwtZGVmYXVsdFwiPlxcbiAgPGRpdiBjbGFzcz1cInBhbmVsLWhlYWRpbmdcIj5cXG4gICAgPGg0IGNsYXNzPVwicGFuZWwtdGl0bGVcIj5cXG4gICAgICA8YSBjbGFzcz1cImFjY29yZGlvbi10b2dnbGVcIiBuZy1jbGljaz1cInRvZ2dsZU9wZW4oKVwiIGFjY29yZGlvbi10cmFuc2NsdWRlPVwiaGVhZGluZ1wiPjxzcGFuIG5nLWNsYXNzPVwie1xcJ3RleHQtbXV0ZWRcXCc6IGlzRGlzYWJsZWR9XCI+e3toZWFkaW5nfX08L3NwYW4+PC9hPlxcbiAgICA8L2g0PlxcbiAgPC9kaXY+XFxuICA8ZGl2IGNsYXNzPVwicGFuZWwtY29sbGFwc2VcIiBjb2xsYXBzZT1cIiFpc09wZW5cIj5cXG5cdCAgPGRpdiBjbGFzcz1cInBhbmVsLWJvZHlcIiBuZy10cmFuc2NsdWRlPjwvZGl2PlxcbiAgPC9kaXY+XFxuPC9kaXY+Jyl9XSksYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLmh0bWxcIixbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsZnVuY3Rpb24oYSl7YS5wdXQoXCJ0ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLmh0bWxcIiwnPGRpdiBjbGFzcz1cInBhbmVsLWdyb3VwXCIgbmctdHJhbnNjbHVkZT48L2Rpdj4nKX1dKSxhbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL2FsZXJ0L2FsZXJ0Lmh0bWxcIixbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsZnVuY3Rpb24oYSl7YS5wdXQoXCJ0ZW1wbGF0ZS9hbGVydC9hbGVydC5odG1sXCIsJzxkaXYgY2xhc3M9XCJhbGVydFwiIG5nLWNsYXNzPVwiW1xcJ2FsZXJ0LVxcJyArICh0eXBlIHx8IFxcJ3dhcm5pbmdcXCcpLCBjbG9zZWFibGUgPyBcXCdhbGVydC1kaXNtaXNzYWJsZVxcJyA6IG51bGxdXCIgcm9sZT1cImFsZXJ0XCI+XFxuICAgIDxidXR0b24gbmctc2hvdz1cImNsb3NlYWJsZVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImNsb3NlXCIgbmctY2xpY2s9XCJjbG9zZSgpXCI+XFxuICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mdGltZXM7PC9zcGFuPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+Q2xvc2U8L3NwYW4+XFxuICAgIDwvYnV0dG9uPlxcbiAgICA8ZGl2IG5nLXRyYW5zY2x1ZGU+PC9kaXY+XFxuPC9kaXY+XFxuJyl9XSksYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9jYXJvdXNlbC9jYXJvdXNlbC5odG1sXCIsW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGEpe2EucHV0KFwidGVtcGxhdGUvY2Fyb3VzZWwvY2Fyb3VzZWwuaHRtbFwiLCc8ZGl2IG5nLW1vdXNlZW50ZXI9XCJwYXVzZSgpXCIgbmctbW91c2VsZWF2ZT1cInBsYXkoKVwiIGNsYXNzPVwiY2Fyb3VzZWxcIiBuZy1zd2lwZS1yaWdodD1cInByZXYoKVwiIG5nLXN3aXBlLWxlZnQ9XCJuZXh0KClcIj5cXG4gICAgPG9sIGNsYXNzPVwiY2Fyb3VzZWwtaW5kaWNhdG9yc1wiIG5nLXNob3c9XCJzbGlkZXMubGVuZ3RoID4gMVwiPlxcbiAgICAgICAgPGxpIG5nLXJlcGVhdD1cInNsaWRlIGluIHNsaWRlcyB0cmFjayBieSAkaW5kZXhcIiBuZy1jbGFzcz1cInthY3RpdmU6IGlzQWN0aXZlKHNsaWRlKX1cIiBuZy1jbGljaz1cInNlbGVjdChzbGlkZSlcIj48L2xpPlxcbiAgICA8L29sPlxcbiAgICA8ZGl2IGNsYXNzPVwiY2Fyb3VzZWwtaW5uZXJcIiBuZy10cmFuc2NsdWRlPjwvZGl2PlxcbiAgICA8YSBjbGFzcz1cImxlZnQgY2Fyb3VzZWwtY29udHJvbFwiIG5nLWNsaWNrPVwicHJldigpXCIgbmctc2hvdz1cInNsaWRlcy5sZW5ndGggPiAxXCI+PHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdFwiPjwvc3Bhbj48L2E+XFxuICAgIDxhIGNsYXNzPVwicmlnaHQgY2Fyb3VzZWwtY29udHJvbFwiIG5nLWNsaWNrPVwibmV4dCgpXCIgbmctc2hvdz1cInNsaWRlcy5sZW5ndGggPiAxXCI+PHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcIj48L3NwYW4+PC9hPlxcbjwvZGl2PlxcbicpfV0pLGFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvY2Fyb3VzZWwvc2xpZGUuaHRtbFwiLFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIixmdW5jdGlvbihhKXthLnB1dChcInRlbXBsYXRlL2Nhcm91c2VsL3NsaWRlLmh0bWxcIixcIjxkaXYgbmctY2xhc3M9XFxcIntcXG4gICAgJ2FjdGl2ZSc6IGxlYXZpbmcgfHwgKGFjdGl2ZSAmJiAhZW50ZXJpbmcpLFxcbiAgICAncHJldic6IChuZXh0IHx8IGFjdGl2ZSkgJiYgZGlyZWN0aW9uPT0ncHJldicsXFxuICAgICduZXh0JzogKG5leHQgfHwgYWN0aXZlKSAmJiBkaXJlY3Rpb249PSduZXh0JyxcXG4gICAgJ3JpZ2h0JzogZGlyZWN0aW9uPT0ncHJldicsXFxuICAgICdsZWZ0JzogZGlyZWN0aW9uPT0nbmV4dCdcXG4gIH1cXFwiIGNsYXNzPVxcXCJpdGVtIHRleHQtY2VudGVyXFxcIiBuZy10cmFuc2NsdWRlPjwvZGl2PlxcblwiKX1dKSxhbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5odG1sXCIsW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGEpe2EucHV0KFwidGVtcGxhdGUvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmh0bWxcIiwnPGRpdiBuZy1zd2l0Y2g9XCJkYXRlcGlja2VyTW9kZVwiIHJvbGU9XCJhcHBsaWNhdGlvblwiIG5nLWtleWRvd249XCJrZXlkb3duKCRldmVudClcIj5cXG4gIDxkYXlwaWNrZXIgbmctc3dpdGNoLXdoZW49XCJkYXlcIiB0YWJpbmRleD1cIjBcIj48L2RheXBpY2tlcj5cXG4gIDxtb250aHBpY2tlciBuZy1zd2l0Y2gtd2hlbj1cIm1vbnRoXCIgdGFiaW5kZXg9XCIwXCI+PC9tb250aHBpY2tlcj5cXG4gIDx5ZWFycGlja2VyIG5nLXN3aXRjaC13aGVuPVwieWVhclwiIHRhYmluZGV4PVwiMFwiPjwveWVhcnBpY2tlcj5cXG48L2Rpdj4nKX1dKSxhbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL2RhdGVwaWNrZXIvZGF5Lmh0bWxcIixbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsZnVuY3Rpb24oYSl7YS5wdXQoXCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL2RheS5odG1sXCIsJzx0YWJsZSByb2xlPVwiZ3JpZFwiIGFyaWEtbGFiZWxsZWRieT1cInt7dW5pcXVlSWR9fS10aXRsZVwiIGFyaWEtYWN0aXZlZGVzY2VuZGFudD1cInt7YWN0aXZlRGF0ZUlkfX1cIj5cXG4gIDx0aGVhZD5cXG4gICAgPHRyPlxcbiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1sZWZ0XCIgbmctY2xpY2s9XCJtb3ZlKC0xKVwiIHRhYmluZGV4PVwiLTFcIj48aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1sZWZ0XCI+PC9pPjwvYnV0dG9uPjwvdGg+XFxuICAgICAgPHRoIGNvbHNwYW49XCJ7ezUgKyBzaG93V2Vla3N9fVwiPjxidXR0b24gaWQ9XCJ7e3VuaXF1ZUlkfX0tdGl0bGVcIiByb2xlPVwiaGVhZGluZ1wiIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiIGFyaWEtYXRvbWljPVwidHJ1ZVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4tc21cIiBuZy1jbGljaz1cInRvZ2dsZU1vZGUoKVwiIHRhYmluZGV4PVwiLTFcIiBzdHlsZT1cIndpZHRoOjEwMCU7XCI+PHN0cm9uZz57e3RpdGxlfX08L3N0cm9uZz48L2J1dHRvbj48L3RoPlxcbiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1yaWdodFwiIG5nLWNsaWNrPVwibW92ZSgxKVwiIHRhYmluZGV4PVwiLTFcIj48aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodFwiPjwvaT48L2J1dHRvbj48L3RoPlxcbiAgICA8L3RyPlxcbiAgICA8dHI+XFxuICAgICAgPHRoIG5nLXNob3c9XCJzaG93V2Vla3NcIiBjbGFzcz1cInRleHQtY2VudGVyXCI+PC90aD5cXG4gICAgICA8dGggbmctcmVwZWF0PVwibGFiZWwgaW4gbGFiZWxzIHRyYWNrIGJ5ICRpbmRleFwiIGNsYXNzPVwidGV4dC1jZW50ZXJcIj48c21hbGwgYXJpYS1sYWJlbD1cInt7bGFiZWwuZnVsbH19XCI+e3tsYWJlbC5hYmJyfX08L3NtYWxsPjwvdGg+XFxuICAgIDwvdHI+XFxuICA8L3RoZWFkPlxcbiAgPHRib2R5PlxcbiAgICA8dHIgbmctcmVwZWF0PVwicm93IGluIHJvd3MgdHJhY2sgYnkgJGluZGV4XCI+XFxuICAgICAgPHRkIG5nLXNob3c9XCJzaG93V2Vla3NcIiBjbGFzcz1cInRleHQtY2VudGVyIGg2XCI+PGVtPnt7IHdlZWtOdW1iZXJzWyRpbmRleF0gfX08L2VtPjwvdGQ+XFxuICAgICAgPHRkIG5nLXJlcGVhdD1cImR0IGluIHJvdyB0cmFjayBieSBkdC5kYXRlXCIgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiIHJvbGU9XCJncmlkY2VsbFwiIGlkPVwie3tkdC51aWR9fVwiIGFyaWEtZGlzYWJsZWQ9XCJ7eyEhZHQuZGlzYWJsZWR9fVwiPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO1wiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbVwiIG5nLWNsYXNzPVwie1xcJ2J0bi1pbmZvXFwnOiBkdC5zZWxlY3RlZCwgYWN0aXZlOiBpc0FjdGl2ZShkdCl9XCIgbmctY2xpY2s9XCJzZWxlY3QoZHQuZGF0ZSlcIiBuZy1kaXNhYmxlZD1cImR0LmRpc2FibGVkXCIgdGFiaW5kZXg9XCItMVwiPjxzcGFuIG5nLWNsYXNzPVwie1xcJ3RleHQtbXV0ZWRcXCc6IGR0LnNlY29uZGFyeSwgXFwndGV4dC1pbmZvXFwnOiBkdC5jdXJyZW50fVwiPnt7ZHQubGFiZWx9fTwvc3Bhbj48L2J1dHRvbj5cXG4gICAgICA8L3RkPlxcbiAgICA8L3RyPlxcbiAgPC90Ym9keT5cXG48L3RhYmxlPlxcbicpfV0pLGFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvZGF0ZXBpY2tlci9tb250aC5odG1sXCIsW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGEpe2EucHV0KFwidGVtcGxhdGUvZGF0ZXBpY2tlci9tb250aC5odG1sXCIsJzx0YWJsZSByb2xlPVwiZ3JpZFwiIGFyaWEtbGFiZWxsZWRieT1cInt7dW5pcXVlSWR9fS10aXRsZVwiIGFyaWEtYWN0aXZlZGVzY2VuZGFudD1cInt7YWN0aXZlRGF0ZUlkfX1cIj5cXG4gIDx0aGVhZD5cXG4gICAgPHRyPlxcbiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1sZWZ0XCIgbmctY2xpY2s9XCJtb3ZlKC0xKVwiIHRhYmluZGV4PVwiLTFcIj48aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1sZWZ0XCI+PC9pPjwvYnV0dG9uPjwvdGg+XFxuICAgICAgPHRoPjxidXR0b24gaWQ9XCJ7e3VuaXF1ZUlkfX0tdGl0bGVcIiByb2xlPVwiaGVhZGluZ1wiIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiIGFyaWEtYXRvbWljPVwidHJ1ZVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4tc21cIiBuZy1jbGljaz1cInRvZ2dsZU1vZGUoKVwiIHRhYmluZGV4PVwiLTFcIiBzdHlsZT1cIndpZHRoOjEwMCU7XCI+PHN0cm9uZz57e3RpdGxlfX08L3N0cm9uZz48L2J1dHRvbj48L3RoPlxcbiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1yaWdodFwiIG5nLWNsaWNrPVwibW92ZSgxKVwiIHRhYmluZGV4PVwiLTFcIj48aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodFwiPjwvaT48L2J1dHRvbj48L3RoPlxcbiAgICA8L3RyPlxcbiAgPC90aGVhZD5cXG4gIDx0Ym9keT5cXG4gICAgPHRyIG5nLXJlcGVhdD1cInJvdyBpbiByb3dzIHRyYWNrIGJ5ICRpbmRleFwiPlxcbiAgICAgIDx0ZCBuZy1yZXBlYXQ9XCJkdCBpbiByb3cgdHJhY2sgYnkgZHQuZGF0ZVwiIGNsYXNzPVwidGV4dC1jZW50ZXJcIiByb2xlPVwiZ3JpZGNlbGxcIiBpZD1cInt7ZHQudWlkfX1cIiBhcmlhLWRpc2FibGVkPVwie3shIWR0LmRpc2FibGVkfX1cIj5cXG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIHN0eWxlPVwid2lkdGg6MTAwJTtcIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIG5nLWNsYXNzPVwie1xcJ2J0bi1pbmZvXFwnOiBkdC5zZWxlY3RlZCwgYWN0aXZlOiBpc0FjdGl2ZShkdCl9XCIgbmctY2xpY2s9XCJzZWxlY3QoZHQuZGF0ZSlcIiBuZy1kaXNhYmxlZD1cImR0LmRpc2FibGVkXCIgdGFiaW5kZXg9XCItMVwiPjxzcGFuIG5nLWNsYXNzPVwie1xcJ3RleHQtaW5mb1xcJzogZHQuY3VycmVudH1cIj57e2R0LmxhYmVsfX08L3NwYW4+PC9idXR0b24+XFxuICAgICAgPC90ZD5cXG4gICAgPC90cj5cXG4gIDwvdGJvZHk+XFxuPC90YWJsZT5cXG4nKX1dKSxhbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL2RhdGVwaWNrZXIvcG9wdXAuaHRtbFwiLFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIixmdW5jdGlvbihhKXthLnB1dChcInRlbXBsYXRlL2RhdGVwaWNrZXIvcG9wdXAuaHRtbFwiLCc8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCIgbmctc3R5bGU9XCJ7ZGlzcGxheTogKGlzT3BlbiAmJiBcXCdibG9ja1xcJykgfHwgXFwnbm9uZVxcJywgdG9wOiBwb3NpdGlvbi50b3ArXFwncHhcXCcsIGxlZnQ6IHBvc2l0aW9uLmxlZnQrXFwncHhcXCd9XCIgbmcta2V5ZG93bj1cImtleWRvd24oJGV2ZW50KVwiPlxcblx0PGxpIG5nLXRyYW5zY2x1ZGU+PC9saT5cXG5cdDxsaSBuZy1pZj1cInNob3dCdXR0b25CYXJcIiBzdHlsZT1cInBhZGRpbmc6MTBweCA5cHggMnB4XCI+XFxuXHRcdDxzcGFuIGNsYXNzPVwiYnRuLWdyb3VwXCI+XFxuXHRcdFx0PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1pbmZvXCIgbmctY2xpY2s9XCJzZWxlY3QoXFwndG9kYXlcXCcpXCI+e3sgZ2V0VGV4dChcXCdjdXJyZW50XFwnKSB9fTwvYnV0dG9uPlxcblx0XHRcdDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tZGFuZ2VyXCIgbmctY2xpY2s9XCJzZWxlY3QobnVsbClcIj57eyBnZXRUZXh0KFxcJ2NsZWFyXFwnKSB9fTwvYnV0dG9uPlxcblx0XHQ8L3NwYW4+XFxuXHRcdDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc3VjY2VzcyBwdWxsLXJpZ2h0XCIgbmctY2xpY2s9XCJjbG9zZSgpXCI+e3sgZ2V0VGV4dChcXCdjbG9zZVxcJykgfX08L2J1dHRvbj5cXG5cdDwvbGk+XFxuPC91bD5cXG4nKX1dKSxhbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL2RhdGVwaWNrZXIveWVhci5odG1sXCIsW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGEpe2EucHV0KFwidGVtcGxhdGUvZGF0ZXBpY2tlci95ZWFyLmh0bWxcIiwnPHRhYmxlIHJvbGU9XCJncmlkXCIgYXJpYS1sYWJlbGxlZGJ5PVwie3t1bmlxdWVJZH19LXRpdGxlXCIgYXJpYS1hY3RpdmVkZXNjZW5kYW50PVwie3thY3RpdmVEYXRlSWR9fVwiPlxcbiAgPHRoZWFkPlxcbiAgICA8dHI+XFxuICAgICAgPHRoPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBwdWxsLWxlZnRcIiBuZy1jbGljaz1cIm1vdmUoLTEpXCIgdGFiaW5kZXg9XCItMVwiPjxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnRcIj48L2k+PC9idXR0b24+PC90aD5cXG4gICAgICA8dGggY29sc3Bhbj1cIjNcIj48YnV0dG9uIGlkPVwie3t1bmlxdWVJZH19LXRpdGxlXCIgcm9sZT1cImhlYWRpbmdcIiBhcmlhLWxpdmU9XCJhc3NlcnRpdmVcIiBhcmlhLWF0b21pYz1cInRydWVcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtXCIgbmctY2xpY2s9XCJ0b2dnbGVNb2RlKClcIiB0YWJpbmRleD1cIi0xXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO1wiPjxzdHJvbmc+e3t0aXRsZX19PC9zdHJvbmc+PC9idXR0b24+PC90aD5cXG4gICAgICA8dGg+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtcmlnaHRcIiBuZy1jbGljaz1cIm1vdmUoMSlcIiB0YWJpbmRleD1cIi0xXCI+PGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcIj48L2k+PC9idXR0b24+PC90aD5cXG4gICAgPC90cj5cXG4gIDwvdGhlYWQ+XFxuICA8dGJvZHk+XFxuICAgIDx0ciBuZy1yZXBlYXQ9XCJyb3cgaW4gcm93cyB0cmFjayBieSAkaW5kZXhcIj5cXG4gICAgICA8dGQgbmctcmVwZWF0PVwiZHQgaW4gcm93IHRyYWNrIGJ5IGR0LmRhdGVcIiBjbGFzcz1cInRleHQtY2VudGVyXCIgcm9sZT1cImdyaWRjZWxsXCIgaWQ9XCJ7e2R0LnVpZH19XCIgYXJpYS1kaXNhYmxlZD1cInt7ISFkdC5kaXNhYmxlZH19XCI+XFxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBzdHlsZT1cIndpZHRoOjEwMCU7XCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBuZy1jbGFzcz1cIntcXCdidG4taW5mb1xcJzogZHQuc2VsZWN0ZWQsIGFjdGl2ZTogaXNBY3RpdmUoZHQpfVwiIG5nLWNsaWNrPVwic2VsZWN0KGR0LmRhdGUpXCIgbmctZGlzYWJsZWQ9XCJkdC5kaXNhYmxlZFwiIHRhYmluZGV4PVwiLTFcIj48c3BhbiBuZy1jbGFzcz1cIntcXCd0ZXh0LWluZm9cXCc6IGR0LmN1cnJlbnR9XCI+e3tkdC5sYWJlbH19PC9zcGFuPjwvYnV0dG9uPlxcbiAgICAgIDwvdGQ+XFxuICAgIDwvdHI+XFxuICA8L3Rib2R5PlxcbjwvdGFibGU+XFxuJyl9XSksYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9tb2RhbC9iYWNrZHJvcC5odG1sXCIsW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGEpe2EucHV0KFwidGVtcGxhdGUvbW9kYWwvYmFja2Ryb3AuaHRtbFwiLCc8ZGl2IGNsYXNzPVwibW9kYWwtYmFja2Ryb3AgZmFkZSB7eyBiYWNrZHJvcENsYXNzIH19XCJcXG4gICAgIG5nLWNsYXNzPVwie2luOiBhbmltYXRlfVwiXFxuICAgICBuZy1zdHlsZT1cIntcXCd6LWluZGV4XFwnOiAxMDQwICsgKGluZGV4ICYmIDEgfHwgMCkgKyBpbmRleCoxMH1cIlxcbj48L2Rpdj5cXG4nKX1dKSxhbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL21vZGFsL3dpbmRvdy5odG1sXCIsW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGEpe2EucHV0KFwidGVtcGxhdGUvbW9kYWwvd2luZG93Lmh0bWxcIiwnPGRpdiB0YWJpbmRleD1cIi0xXCIgcm9sZT1cImRpYWxvZ1wiIGNsYXNzPVwibW9kYWwgZmFkZVwiIG5nLWNsYXNzPVwie2luOiBhbmltYXRlfVwiIG5nLXN0eWxlPVwie1xcJ3otaW5kZXhcXCc6IDEwNTAgKyBpbmRleCoxMCwgZGlzcGxheTogXFwnYmxvY2tcXCd9XCIgbmctY2xpY2s9XCJjbG9zZSgkZXZlbnQpXCI+XFxuICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1kaWFsb2dcIiBuZy1jbGFzcz1cIntcXCdtb2RhbC1zbVxcJzogc2l6ZSA9PSBcXCdzbVxcJywgXFwnbW9kYWwtbGdcXCc6IHNpemUgPT0gXFwnbGdcXCd9XCI+PGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIiBtb2RhbC10cmFuc2NsdWRlPjwvZGl2PjwvZGl2PlxcbjwvZGl2PicpfV0pLGFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdlci5odG1sXCIsW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGEpe2EucHV0KFwidGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdlci5odG1sXCIsJzx1bCBjbGFzcz1cInBhZ2VyXCI+XFxuICA8bGkgbmctY2xhc3M9XCJ7ZGlzYWJsZWQ6IG5vUHJldmlvdXMoKSwgcHJldmlvdXM6IGFsaWdufVwiPjxhIGhyZWYgbmctY2xpY2s9XCJzZWxlY3RQYWdlKHBhZ2UgLSAxKVwiPnt7Z2V0VGV4dChcXCdwcmV2aW91c1xcJyl9fTwvYT48L2xpPlxcbiAgPGxpIG5nLWNsYXNzPVwie2Rpc2FibGVkOiBub05leHQoKSwgbmV4dDogYWxpZ259XCI+PGEgaHJlZiBuZy1jbGljaz1cInNlbGVjdFBhZ2UocGFnZSArIDEpXCI+e3tnZXRUZXh0KFxcJ25leHRcXCcpfX08L2E+PC9saT5cXG48L3VsPicpfV0pLGFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmh0bWxcIixbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsZnVuY3Rpb24oYSl7YS5wdXQoXCJ0ZW1wbGF0ZS9wYWdpbmF0aW9uL3BhZ2luYXRpb24uaHRtbFwiLCc8dWwgY2xhc3M9XCJwYWdpbmF0aW9uXCI+XFxuICA8bGkgbmctaWY9XCJib3VuZGFyeUxpbmtzXCIgbmctY2xhc3M9XCJ7ZGlzYWJsZWQ6IG5vUHJldmlvdXMoKX1cIj48YSBocmVmIG5nLWNsaWNrPVwic2VsZWN0UGFnZSgxKVwiPnt7Z2V0VGV4dChcXCdmaXJzdFxcJyl9fTwvYT48L2xpPlxcbiAgPGxpIG5nLWlmPVwiZGlyZWN0aW9uTGlua3NcIiBuZy1jbGFzcz1cIntkaXNhYmxlZDogbm9QcmV2aW91cygpfVwiPjxhIGhyZWYgbmctY2xpY2s9XCJzZWxlY3RQYWdlKHBhZ2UgLSAxKVwiPnt7Z2V0VGV4dChcXCdwcmV2aW91c1xcJyl9fTwvYT48L2xpPlxcbiAgPGxpIG5nLXJlcGVhdD1cInBhZ2UgaW4gcGFnZXMgdHJhY2sgYnkgJGluZGV4XCIgbmctY2xhc3M9XCJ7YWN0aXZlOiBwYWdlLmFjdGl2ZX1cIj48YSBocmVmIG5nLWNsaWNrPVwic2VsZWN0UGFnZShwYWdlLm51bWJlcilcIj57e3BhZ2UudGV4dH19PC9hPjwvbGk+XFxuICA8bGkgbmctaWY9XCJkaXJlY3Rpb25MaW5rc1wiIG5nLWNsYXNzPVwie2Rpc2FibGVkOiBub05leHQoKX1cIj48YSBocmVmIG5nLWNsaWNrPVwic2VsZWN0UGFnZShwYWdlICsgMSlcIj57e2dldFRleHQoXFwnbmV4dFxcJyl9fTwvYT48L2xpPlxcbiAgPGxpIG5nLWlmPVwiYm91bmRhcnlMaW5rc1wiIG5nLWNsYXNzPVwie2Rpc2FibGVkOiBub05leHQoKX1cIj48YSBocmVmIG5nLWNsaWNrPVwic2VsZWN0UGFnZSh0b3RhbFBhZ2VzKVwiPnt7Z2V0VGV4dChcXCdsYXN0XFwnKX19PC9hPjwvbGk+XFxuPC91bD4nKX1dKSxhbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1odG1sLXVuc2FmZS1wb3B1cC5odG1sXCIsW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGEpe2EucHV0KFwidGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLWh0bWwtdW5zYWZlLXBvcHVwLmh0bWxcIiwnPGRpdiBjbGFzcz1cInRvb2x0aXAge3twbGFjZW1lbnR9fVwiIG5nLWNsYXNzPVwieyBpbjogaXNPcGVuKCksIGZhZGU6IGFuaW1hdGlvbigpIH1cIj5cXG4gIDxkaXYgY2xhc3M9XCJ0b29sdGlwLWFycm93XCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiIGJpbmQtaHRtbC11bnNhZmU9XCJjb250ZW50XCI+PC9kaXY+XFxuPC9kaXY+XFxuJyl9XSksYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtcG9wdXAuaHRtbFwiLFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIixmdW5jdGlvbihhKXthLnB1dChcInRlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1wb3B1cC5odG1sXCIsJzxkaXYgY2xhc3M9XCJ0b29sdGlwIHt7cGxhY2VtZW50fX1cIiBuZy1jbGFzcz1cInsgaW46IGlzT3BlbigpLCBmYWRlOiBhbmltYXRpb24oKSB9XCI+XFxuICA8ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cInRvb2x0aXAtaW5uZXJcIiBuZy1iaW5kPVwiY29udGVudFwiPjwvZGl2PlxcbjwvZGl2PlxcbicpfV0pLGFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLmh0bWxcIixbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsZnVuY3Rpb24oYSl7YS5wdXQoXCJ0ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXIuaHRtbFwiLCc8ZGl2IGNsYXNzPVwicG9wb3ZlciB7e3BsYWNlbWVudH19XCIgbmctY2xhc3M9XCJ7IGluOiBpc09wZW4oKSwgZmFkZTogYW5pbWF0aW9uKCkgfVwiPlxcbiAgPGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+XFxuXFxuICA8ZGl2IGNsYXNzPVwicG9wb3Zlci1pbm5lclwiPlxcbiAgICAgIDxoMyBjbGFzcz1cInBvcG92ZXItdGl0bGVcIiBuZy1iaW5kPVwidGl0bGVcIiBuZy1zaG93PVwidGl0bGVcIj48L2gzPlxcbiAgICAgIDxkaXYgY2xhc3M9XCJwb3BvdmVyLWNvbnRlbnRcIiBuZy1iaW5kPVwiY29udGVudFwiPjwvZGl2PlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuJyl9XSksYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9iYXIuaHRtbFwiLFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIixmdW5jdGlvbihhKXthLnB1dChcInRlbXBsYXRlL3Byb2dyZXNzYmFyL2Jhci5odG1sXCIsJzxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXJcIiBuZy1jbGFzcz1cInR5cGUgJiYgXFwncHJvZ3Jlc3MtYmFyLVxcJyArIHR5cGVcIiByb2xlPVwicHJvZ3Jlc3NiYXJcIiBhcmlhLXZhbHVlbm93PVwie3t2YWx1ZX19XCIgYXJpYS12YWx1ZW1pbj1cIjBcIiBhcmlhLXZhbHVlbWF4PVwie3ttYXh9fVwiIG5nLXN0eWxlPVwie3dpZHRoOiBwZXJjZW50ICsgXFwnJVxcJ31cIiBhcmlhLXZhbHVldGV4dD1cInt7cGVyY2VudCB8IG51bWJlcjowfX0lXCIgbmctdHJhbnNjbHVkZT48L2Rpdj4nKX1dKSxhbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWxcIixbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsZnVuY3Rpb24oYSl7YS5wdXQoXCJ0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzcy5odG1sXCIsJzxkaXYgY2xhc3M9XCJwcm9ncmVzc1wiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+Jyl9XSksYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci5odG1sXCIsW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGEpe2EucHV0KFwidGVtcGxhdGUvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3NiYXIuaHRtbFwiLCc8ZGl2IGNsYXNzPVwicHJvZ3Jlc3NcIj5cXG4gIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXJcIiBuZy1jbGFzcz1cInR5cGUgJiYgXFwncHJvZ3Jlc3MtYmFyLVxcJyArIHR5cGVcIiByb2xlPVwicHJvZ3Jlc3NiYXJcIiBhcmlhLXZhbHVlbm93PVwie3t2YWx1ZX19XCIgYXJpYS12YWx1ZW1pbj1cIjBcIiBhcmlhLXZhbHVlbWF4PVwie3ttYXh9fVwiIG5nLXN0eWxlPVwie3dpZHRoOiBwZXJjZW50ICsgXFwnJVxcJ31cIiBhcmlhLXZhbHVldGV4dD1cInt7cGVyY2VudCB8IG51bWJlcjowfX0lXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG48L2Rpdj4nKX1dKSxhbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3JhdGluZy9yYXRpbmcuaHRtbFwiLFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIixmdW5jdGlvbihhKXthLnB1dChcInRlbXBsYXRlL3JhdGluZy9yYXRpbmcuaHRtbFwiLCc8c3BhbiBuZy1tb3VzZWxlYXZlPVwicmVzZXQoKVwiIG5nLWtleWRvd249XCJvbktleWRvd24oJGV2ZW50KVwiIHRhYmluZGV4PVwiMFwiIHJvbGU9XCJzbGlkZXJcIiBhcmlhLXZhbHVlbWluPVwiMFwiIGFyaWEtdmFsdWVtYXg9XCJ7e3JhbmdlLmxlbmd0aH19XCIgYXJpYS12YWx1ZW5vdz1cInt7dmFsdWV9fVwiPlxcbiAgICA8aSBuZy1yZXBlYXQ9XCJyIGluIHJhbmdlIHRyYWNrIGJ5ICRpbmRleFwiIG5nLW1vdXNlZW50ZXI9XCJlbnRlcigkaW5kZXggKyAxKVwiIG5nLWNsaWNrPVwicmF0ZSgkaW5kZXggKyAxKVwiIGNsYXNzPVwiZ2x5cGhpY29uXCIgbmctY2xhc3M9XCIkaW5kZXggPCB2YWx1ZSAmJiAoci5zdGF0ZU9uIHx8IFxcJ2dseXBoaWNvbi1zdGFyXFwnKSB8fCAoci5zdGF0ZU9mZiB8fCBcXCdnbHlwaGljb24tc3Rhci1lbXB0eVxcJylcIj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seVwiPih7eyAkaW5kZXggPCB2YWx1ZSA/IFxcJypcXCcgOiBcXCcgXFwnIH19KTwvc3Bhbj5cXG4gICAgPC9pPlxcbjwvc3Bhbj4nKX1dKSxhbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3RhYnMvdGFiLmh0bWxcIixbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsZnVuY3Rpb24oYSl7YS5wdXQoXCJ0ZW1wbGF0ZS90YWJzL3RhYi5odG1sXCIsJzxsaSBuZy1jbGFzcz1cInthY3RpdmU6IGFjdGl2ZSwgZGlzYWJsZWQ6IGRpc2FibGVkfVwiPlxcbiAgPGEgbmctY2xpY2s9XCJzZWxlY3QoKVwiIHRhYi1oZWFkaW5nLXRyYW5zY2x1ZGU+e3toZWFkaW5nfX08L2E+XFxuPC9saT5cXG4nKX1dKSxhbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3RhYnMvdGFic2V0Lmh0bWxcIixbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsZnVuY3Rpb24oYSl7YS5wdXQoXCJ0ZW1wbGF0ZS90YWJzL3RhYnNldC5odG1sXCIsJzxkaXY+XFxuICA8dWwgY2xhc3M9XCJuYXYgbmF2LXt7dHlwZSB8fCBcXCd0YWJzXFwnfX1cIiBuZy1jbGFzcz1cIntcXCduYXYtc3RhY2tlZFxcJzogdmVydGljYWwsIFxcJ25hdi1qdXN0aWZpZWRcXCc6IGp1c3RpZmllZH1cIiBuZy10cmFuc2NsdWRlPjwvdWw+XFxuICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIj5cXG4gICAgPGRpdiBjbGFzcz1cInRhYi1wYW5lXCIgXFxuICAgICAgICAgbmctcmVwZWF0PVwidGFiIGluIHRhYnNcIiBcXG4gICAgICAgICBuZy1jbGFzcz1cInthY3RpdmU6IHRhYi5hY3RpdmV9XCJcXG4gICAgICAgICB0YWItY29udGVudC10cmFuc2NsdWRlPVwidGFiXCI+XFxuICAgIDwvZGl2PlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuJyl9XSksYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS90aW1lcGlja2VyL3RpbWVwaWNrZXIuaHRtbFwiLFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIixmdW5jdGlvbihhKXthLnB1dChcInRlbXBsYXRlL3RpbWVwaWNrZXIvdGltZXBpY2tlci5odG1sXCIsJzx0YWJsZT5cXG5cdDx0Ym9keT5cXG5cdFx0PHRyIGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cXG5cdFx0XHQ8dGQ+PGEgbmctY2xpY2s9XCJpbmNyZW1lbnRIb3VycygpXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIj48c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cFwiPjwvc3Bhbj48L2E+PC90ZD5cXG5cdFx0XHQ8dGQ+Jm5ic3A7PC90ZD5cXG5cdFx0XHQ8dGQ+PGEgbmctY2xpY2s9XCJpbmNyZW1lbnRNaW51dGVzKClcIiBjbGFzcz1cImJ0biBidG4tbGlua1wiPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwXCI+PC9zcGFuPjwvYT48L3RkPlxcblx0XHRcdDx0ZCBuZy1zaG93PVwic2hvd01lcmlkaWFuXCI+PC90ZD5cXG5cdFx0PC90cj5cXG5cdFx0PHRyPlxcblx0XHRcdDx0ZCBzdHlsZT1cIndpZHRoOjUwcHg7XCIgY2xhc3M9XCJmb3JtLWdyb3VwXCIgbmctY2xhc3M9XCJ7XFwnaGFzLWVycm9yXFwnOiBpbnZhbGlkSG91cnN9XCI+XFxuXHRcdFx0XHQ8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cImhvdXJzXCIgbmctY2hhbmdlPVwidXBkYXRlSG91cnMoKVwiIGNsYXNzPVwiZm9ybS1jb250cm9sIHRleHQtY2VudGVyXCIgbmctbW91c2V3aGVlbD1cImluY3JlbWVudEhvdXJzKClcIiBuZy1yZWFkb25seT1cInJlYWRvbmx5SW5wdXRcIiBtYXhsZW5ndGg9XCIyXCI+XFxuXHRcdFx0PC90ZD5cXG5cdFx0XHQ8dGQ+OjwvdGQ+XFxuXHRcdFx0PHRkIHN0eWxlPVwid2lkdGg6NTBweDtcIiBjbGFzcz1cImZvcm0tZ3JvdXBcIiBuZy1jbGFzcz1cIntcXCdoYXMtZXJyb3JcXCc6IGludmFsaWRNaW51dGVzfVwiPlxcblx0XHRcdFx0PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJtaW51dGVzXCIgbmctY2hhbmdlPVwidXBkYXRlTWludXRlcygpXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgdGV4dC1jZW50ZXJcIiBuZy1yZWFkb25seT1cInJlYWRvbmx5SW5wdXRcIiBtYXhsZW5ndGg9XCIyXCI+XFxuXHRcdFx0PC90ZD5cXG5cdFx0XHQ8dGQgbmctc2hvdz1cInNob3dNZXJpZGlhblwiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IHRleHQtY2VudGVyXCIgbmctY2xpY2s9XCJ0b2dnbGVNZXJpZGlhbigpXCI+e3ttZXJpZGlhbn19PC9idXR0b24+PC90ZD5cXG5cdFx0PC90cj5cXG5cdFx0PHRyIGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cXG5cdFx0XHQ8dGQ+PGEgbmctY2xpY2s9XCJkZWNyZW1lbnRIb3VycygpXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIj48c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duXCI+PC9zcGFuPjwvYT48L3RkPlxcblx0XHRcdDx0ZD4mbmJzcDs8L3RkPlxcblx0XHRcdDx0ZD48YSBuZy1jbGljaz1cImRlY3JlbWVudE1pbnV0ZXMoKVwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCI+PHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93blwiPjwvc3Bhbj48L2E+PC90ZD5cXG5cdFx0XHQ8dGQgbmctc2hvdz1cInNob3dNZXJpZGlhblwiPjwvdGQ+XFxuXHRcdDwvdHI+XFxuXHQ8L3Rib2R5PlxcbjwvdGFibGU+XFxuJyl9XSksYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLW1hdGNoLmh0bWxcIixbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsZnVuY3Rpb24oYSl7YS5wdXQoXCJ0ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLW1hdGNoLmh0bWxcIiwnPGEgdGFiaW5kZXg9XCItMVwiIGJpbmQtaHRtbC11bnNhZmU9XCJtYXRjaC5sYWJlbCB8IHR5cGVhaGVhZEhpZ2hsaWdodDpxdWVyeVwiPjwvYT4nKVxufV0pLGFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1wb3B1cC5odG1sXCIsW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGEpe2EucHV0KFwidGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1wb3B1cC5odG1sXCIsJzx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIiBuZy1zaG93PVwiaXNPcGVuKClcIiBuZy1zdHlsZT1cInt0b3A6IHBvc2l0aW9uLnRvcCtcXCdweFxcJywgbGVmdDogcG9zaXRpb24ubGVmdCtcXCdweFxcJ31cIiBzdHlsZT1cImRpc3BsYXk6IGJsb2NrO1wiIHJvbGU9XCJsaXN0Ym94XCIgYXJpYS1oaWRkZW49XCJ7eyFpc09wZW4oKX19XCI+XFxuICAgIDxsaSBuZy1yZXBlYXQ9XCJtYXRjaCBpbiBtYXRjaGVzIHRyYWNrIGJ5ICRpbmRleFwiIG5nLWNsYXNzPVwie2FjdGl2ZTogaXNBY3RpdmUoJGluZGV4KSB9XCIgbmctbW91c2VlbnRlcj1cInNlbGVjdEFjdGl2ZSgkaW5kZXgpXCIgbmctY2xpY2s9XCJzZWxlY3RNYXRjaCgkaW5kZXgpXCIgcm9sZT1cIm9wdGlvblwiIGlkPVwie3ttYXRjaC5pZH19XCI+XFxuICAgICAgICA8ZGl2IHR5cGVhaGVhZC1tYXRjaCBpbmRleD1cIiRpbmRleFwiIG1hdGNoPVwibWF0Y2hcIiBxdWVyeT1cInF1ZXJ5XCIgdGVtcGxhdGUtdXJsPVwidGVtcGxhdGVVcmxcIj48L2Rpdj5cXG4gICAgPC9saT5cXG48L3VsPlxcbicpfV0pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGthc3BlcmVuIG9uIDE4LjA5LjE0LlxyXG4gKi9cclxuYW5ndWxhci5tb2R1bGUoJ3VpLmhhbmRzb250YWJsZScsIFtdKVxyXG4gICAgLnNlcnZpY2UoJ2hhbmRzb250YWJsZVNydmMnLCBmdW5jdGlvbigpIHtcclxuICAgIH0pXHJcbiAgICAuY29udHJvbGxlcihcIkhhbmRzb25Db250cm9sbGVyXCIsIGZ1bmN0aW9uICgkc2NvcGUpIHtcclxuXHRcdC8qXHJcblx0XHQkc2NvcGUuZGF0YSA9IGluc3RhbmNlLkxDUFF1ZXN0aW9ubmFpcmUubGlzdE9mUGxhbnRzO1xyXG5cdFx0JHNjb3BlLmRhdGEgPSBbXHJcblx0XHRcdHtcclxuXHRcdFx0XHRcImRlbGV0ZVwiOiBmYWxzZSxcclxuXHRcdFx0XHRcInBsYW50TmFtZVwiOiBcIjFcIixcclxuXHRcdFx0XHRcInBsYW50SWRcIjogXCJcIixcclxuXHRcdFx0XHRcImVwcnRyTmF0aW9uYWxJZFwiOiBcIlwiLFxyXG5cdFx0XHRcdFwiYWRkcmVzczFcIjogXCJcIixcclxuXHRcdFx0XHRcImFkZHJlc3MyXCI6IFwiXCIsXHJcblx0XHRcdFx0XCJjaXR5XCI6IFwiXCIsXHJcblx0XHRcdFx0XCJyZWdpb25cIjogXCJcIixcclxuXHRcdFx0XHRcInBvc3RhbENvZGVcIjogXCJcIixcclxuXHRcdFx0XHRcImxvbmdpdHVkZVwiOiBcIlwiLFxyXG5cdFx0XHRcdFwibGF0aXR1ZGVcIjogXCJcIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0XCJkZWxldGVcIjogZmFsc2UsXHJcblx0XHRcdFx0XCJwbGFudE5hbWVcIjogXCIyXCIsXHJcblx0XHRcdFx0XCJwbGFudElkXCI6IG51bGwsXHJcblx0XHRcdFx0XCJlcHJ0ck5hdGlvbmFsSWRcIjogbnVsbCxcclxuXHRcdFx0XHRcImFkZHJlc3MxXCI6IG51bGwsXHJcblx0XHRcdFx0XCJhZGRyZXNzMlwiOiBudWxsLFxyXG5cdFx0XHRcdFwiY2l0eVwiOiBudWxsLFxyXG5cdFx0XHRcdFwicmVnaW9uXCI6IG51bGwsXHJcblx0XHRcdFx0XCJwb3N0YWxDb2RlXCI6IG51bGwsXHJcblx0XHRcdFx0XCJsb25naXR1ZGVcIjogbnVsbCxcclxuXHRcdFx0XHRcImxhdGl0dWRlXCI6IG51bGxcclxuXHRcdFx0fVxyXG5cdFx0XTtcclxuXHRcdCovXHJcblx0fSlcclxuXHQuZGlyZWN0aXZlKCd1aUhhbmRzb250YWJsZScsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHJlc3RyaWN0OiAnQScsXHJcblx0XHRcdHNjb3BlOiB7XHJcblx0XHRcdFx0ZGF0YTogJz0nXHJcblx0XHRcdH0sXHJcblx0XHRcdHJlcGxhY2U6IHRydWUsXHJcblx0XHRcdGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbSwgYXR0cnMpIHtcclxuXHRcdFx0XHRlbGVtLmhhbmRzb250YWJsZSh7XHJcblx0XHRcdFx0ZGF0YTogc2NvcGUuZGF0YSxcclxuICAgICAgICAgICAgICAgIGNvbnRleHRNZW51OiB0cnVlLFxyXG5cdFx0XHRcdHJvd0hlYWRlcnM6IHRydWUsXHJcblx0XHRcdFx0bWluU3BhcmVSb3dzOiAxLFxyXG4gICAgICAgICAgICAgICAgY29sSGVhZGVyczogW1wiRGVsZXRlXCIsIFwiUGxhbnQgTmFtZVwiLCBcIlBsYW50IElkXCIsIFwiRS1QUlRSIG5hdGlvbmFsIElEXCIsIFwiQWRkcmVzcyAxXCIsIFwiQWRkcmVzcyAyXCIsIFwiQ2l0eVwiLCBcIlJlZ2lvblwiLCBcIlBvc3RhbCBjb2RlXCIsIFwiTG9uZ2l0dWRlXCIsIFwiTGF0aXR1ZGVcIl0sXHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBcImRlbGV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImNoZWNrYm94XCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogXCJwbGFudE5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBcInBsYW50SWRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ251bWVyaWMnXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IFwiZXBydHJOYXRpb25hbElkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdudW1lcmljJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBcImFkZHJlc3MxXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogXCJhZGRyZXNzMlwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IFwiY2l0eVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IFwicmVnaW9uXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogXCJwb3N0YWxDb2RlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdudW1lcmljJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBcImxvbmdpdHVkZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbnVtZXJpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogJzAwMC4wMDAnXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IFwibGF0aXR1ZGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ251bWVyaWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6ICcwMDAuMDAwJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblx0fSkiLCIvLyBNb2R1bGUgdGhhdCBwcm92aWRlcyBtdWx0aXNlbGVjdCBib3ggdG8gd2ViZm9ybSBmcm9tIGpzb24tbGQgZm9ybWF0LlxyXG4vL1xyXG4vLyBVc2FnZSBFeGFtcGxlOlxyXG4vLyA8ZGl2IG11bHRpc2VsZWN0IGNsYXNzPVwibXVsdGlzZWxlY3RcIiBuYW1lPVwiVHlwZU9mVXNlXCIgbXVsdGlwbGU9XCJ0cnVlXCJcclxuLy8gICAgICBuZy1tb2RlbD1cInJvdy5UeXBlT2ZVc2VcIlxyXG4vLyAgICAgIG9wdGlvbnM9XCJhbm5leDFDb25jZXB0WydAaWQnXSBhcyBhbm5leDFDb25jZXB0LnByZWZMYWJlbFswXVsnQHZhbHVlJ10gZm9yIGFubmV4MUNvbmNlcHQgaW4gY29kZUxpc3QuTENQQ29kZWxpc3RzLkFubmV4MUFjdGl2aXRpZXMuY29uY2VwdHNcIlxyXG4vLyAgICAgIGNoYW5nZT1cInNlbGVjdGVkKClcIiByZXF1aXJlZD48L2Rpdj5cclxuLy9cclxuLy8gTm90ZSEgb3B0aW9ucyBpbnN0ZWFkIG9mIG5nLW9wdGlvbnMgaXMgdXNlZC5cclxuYW5ndWxhci5tb2R1bGUoJ3VpLm11bHRpc2VsZWN0JywgW1xyXG4gICAgICAgICdtdWx0aXNlbGVjdC50cGwuaHRtbCdcclxuICAgIF0pXHJcblxyXG4gICAgLy9mcm9tIGJvb3RzdHJhcC11aSB0eXBlYWhlYWQgcGFyc2VyXHJcbiAgICAuZmFjdG9yeSgnb3B0aW9uUGFyc2VyJywgWyckcGFyc2UnLCBmdW5jdGlvbiAoJHBhcnNlKSB7XHJcblxyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIDAwMDAwMTExMDAwMDAwMDAwMDAwMDIyMjAwMDAwMDAwMDAwMDAwMDAzMzMzMzMzMzMzMzMzMzMwMDAwMDAwMDAwMDQ0MDAwXHJcbiAgICAgICAgdmFyIFRZUEVBSEVBRF9SRUdFWFAgPSAvXlxccyooLio/KSg/Olxccythc1xccysoLio/KSk/XFxzK2ZvclxccysoPzooW1xcJFxcd11bXFwkXFx3XFxkXSopKVxccytpblxccysoLiopJC87XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoaW5wdXQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBpbnB1dC5tYXRjaChUWVBFQUhFQURfUkVHRVhQKSwgbW9kZWxNYXBwZXIsIHZpZXdNYXBwZXIsIHNvdXJjZTtcclxuICAgICAgICAgICAgICAgIGlmICghbWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRXhwZWN0ZWQgdHlwZWFoZWFkIHNwZWNpZmljYXRpb24gaW4gZm9ybSBvZiAnX21vZGVsVmFsdWVfIChhcyBfbGFiZWxfKT8gZm9yIF9pdGVtXyBpbiBfY29sbGVjdGlvbl8nXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgYnV0IGdvdCAnXCIgKyBpbnB1dCArIFwiJy5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtTmFtZTogbWF0Y2hbM10sXHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiAkcGFyc2UobWF0Y2hbNF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdNYXBwZXI6ICRwYXJzZShtYXRjaFsyXSB8fCBtYXRjaFsxXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxNYXBwZXI6ICRwYXJzZShtYXRjaFsxXSlcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pXHJcblxyXG4gICAgLmRpcmVjdGl2ZSgnbXVsdGlzZWxlY3QnLCBbJyRwYXJzZScsICckZG9jdW1lbnQnLCAnJGNvbXBpbGUnLCAnJGludGVycG9sYXRlJywgJ29wdGlvblBhcnNlcicsXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uICgkcGFyc2UsICRkb2N1bWVudCwgJGNvbXBpbGUsICRpbnRlcnBvbGF0ZSwgb3B0aW9uUGFyc2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICByZXN0cmljdDogJ0FFJyxcclxuICAgICAgICAgICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuICAgICAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChvcmlnaW5hbFNjb3BlLCBlbGVtZW50LCBhdHRycywgbW9kZWxDdHJsKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBleHAgPSBhdHRycy5vcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWRSZXN1bHQgPSBvcHRpb25QYXJzZXIucGFyc2UoZXhwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNNdWx0aXBsZSA9IChhdHRycy5tdWx0aXBsZSA9PT0gXCJ0cnVlXCIpID8gdHJ1ZSA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93Q2hlY2tBbGwgPSAoYXR0cnMuc2hvd2NoZWNrYWxsID09PSBcInRydWVcIikgPyB0cnVlIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dGaWx0ZXIgPSAoYXR0cnMuc2hvd2ZpbHRlciA9PT0gXCJ0cnVlXCIpID8gdHJ1ZSA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZSA9IG9yaWdpbmFsU2NvcGUuJG5ldygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VIYW5kbGVyID0gYXR0cnMuY2hhbmdlIHx8IGFuZ3VsYXIubm9vcDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuZ3JvdXBzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuaGVhZGVyID0gJ1NlbGVjdCc7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUubXVsdGlwbGUgPSBpc011bHRpcGxlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuc2hvd0NoZWNrQWxsID0gc2hvd0NoZWNrQWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLnNob3dGaWx0ZXIgPSBzaG93RmlsdGVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLiRkZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3BVcEVsID0gYW5ndWxhci5lbGVtZW50KCc8bXVsdGlzZWxlY3QtcG9wdXA+PC9tdWx0aXNlbGVjdC1wb3B1cD4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9yZXF1aXJlZCB2YWxpZGF0b3JcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cnMucmVxdWlyZWQgfHwgYXR0cnMubmdSZXF1aXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKCdyZXF1aXJlZCcsIGZ1bmN0aW9uKG5ld1ZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZCA9IG5ld1ZhbDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy93YXRjaCBkaXNhYmxlZCBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcGFyc2UoYXR0cnMuZGlzYWJsZWQpKG9yaWdpbmFsU2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChuZXdWYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuZGlzYWJsZWQgPSBuZXdWYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vd2F0Y2ggc2luZ2xlL211bHRpcGxlIHN0YXRlIGZvciBkeW5hbWljYWxseSBjaGFuZ2Ugc2luZ2xlIHRvIG11bHRpcGxlXHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRwYXJzZShhdHRycy5tdWx0aXBsZSkob3JpZ2luYWxTY29wZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKG5ld1ZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc011bHRpcGxlID0gbmV3VmFsIHx8IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3dhdGNoIG9wdGlvbiBjaGFuZ2VzIGZvciBvcHRpb25zIHRoYXQgYXJlIHBvcHVsYXRlZCBkeW5hbWljYWxseVxyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWRSZXN1bHQuc291cmNlKG9yaWdpbmFsU2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChuZXdWYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKG5ld1ZhbCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZU1vZGVsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vd2F0Y2ggbW9kZWwgY2hhbmdlXHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsQ3RybC4kbW9kZWxWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAobmV3VmFsLCBvbGRWYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy93aGVuIGRpcmVjdGl2ZSBpbml0aWFsaXplLCBuZXdWYWwgdXN1YWxseSB1bmRlZmluZWQuIEFsc28sIGlmIG1vZGVsIHZhbHVlIGFscmVhZHkgc2V0IGluIHRoZSBjb250cm9sbGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9yIHByZXNlbGVjdGVkIGxpc3QgdGhlbiB3ZSBuZWVkIHRvIG1hcmsgY2hlY2tlZCBpbiBvdXIgc2NvcGUgaXRlbS4gQnV0IHdlIGRvbid0IHdhbnQgdG8gZG8gdGhpcyBldmVyeSB0aW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbW9kZWwgY2hhbmdlcy4gV2UgbmVlZCB0byBkbyB0aGlzIG9ubHkgaWYgaXQgaXMgZG9uZSBvdXRzaWRlIGRpcmVjdGl2ZSBzY29wZSwgZnJvbSBjb250cm9sbGVyLCBmb3IgZXhhbXBsZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKG5ld1ZhbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtDaGVja2VkKG5ld1ZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHNjb3BlLiRldmFsKGNoYW5nZUhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldEhlYWRlclRleHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgncmVxdWlyZWQnLCBzY29wZS52YWxpZCgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VNb2RlbCgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuZ3JvdXBzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9IHBhcnNlZFJlc3VsdC5zb3VyY2Uob3JpZ2luYWxTY29wZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cEluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdyb3VwSWRJbmRleE1hcCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdEdyb3VwID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRHcm91cC5pdGVtcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighYW5ndWxhci5pc0RlZmluZWQobW9kZWwpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1vZGVsLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQobW9kZWxbaV0ubmFycm93ZXIpICYmIG1vZGVsW2ldLm5hcnJvd2VyLmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbm93IHdlIGhhdmUgZ3JvdXBzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuZ3JvdXBzW2dyb3VwSW5kZXhdID0geyBcIm5hbWVcIiA6IG1vZGVsW2ldLnByZWZMYWJlbFswXVsnQHZhbHVlJ10sIFwiaXRlbXNcIiA6IFtdfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cElkSW5kZXhNYXBbbW9kZWxbaV1bJ0BpZCddXSA9IGdyb3VwSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cCA9IGRlZmF1bHRHcm91cDsgLy9pZiB0aGVyZSBpcyBubyBncm91cCBvciBncm91cCBjYW5ub3QgYmUgZm91bmQsIHRoZW4gYWRkIGl0IHRvIGRlZmF1bHQgZ3JvdXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChtb2RlbFtpXS5icm9hZGVyKSAmJiBtb2RlbFtpXS5icm9hZGVyLmxlbmd0aCA9PSAxICYmIGFuZ3VsYXIuaXNEZWZpbmVkKGdyb3VwSWRJbmRleE1hcFttb2RlbFtpXS5icm9hZGVyWzBdWydAaWQnXV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgd2UgaGF2ZSBhIHN1YiBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAgPSBzY29wZS5ncm91cHNbZ3JvdXBJZEluZGV4TWFwW21vZGVsW2ldLmJyb2FkZXJbMF1bJ0BpZCddXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2FsID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFtwYXJzZWRSZXN1bHQuaXRlbU5hbWVdID0gbW9kZWxbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGVsQ3RybC4kbW9kZWxWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vVE9ETyB3aGF0IGlzIHRoaXMgbW9kZWxDdHJsIGFuZCBtb2RlbFZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIShtb2RlbEN0cmwuJG1vZGVsVmFsdWUgaW5zdGFuY2VvZiBBcnJheSkgJiYgbW9kZWxbaV1bJ0BpZCddID09PSBtb2RlbEN0cmwuJG1vZGVsVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKChtb2RlbEN0cmwuJG1vZGVsVmFsdWUgaW5zdGFuY2VvZiBBcnJheSkgJiYgY29udGFpbnMobW9kZWxDdHJsLiRtb2RlbFZhbHVlLCBtb2RlbFtpXVsnQGlkJ10pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cC5pdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogcGFyc2VkUmVzdWx0LnZpZXdNYXBwZXIobG9jYWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiBtb2RlbFtpXVsnQGlkJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogY2hlY2tlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vdyBhZGQgZGVmYXVsdCBncm91cFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5ncm91cHNbZ3JvdXBJbmRleF0gPSBkZWZhdWx0R3JvdXA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSAvL2VuZCBvZiBmdW5jdGlvbiBwYXJzZU1vZGVsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvbnRhaW5zKGFycmF5LCBuZWVkbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyYXlbaV0gPT0gbmVlZGxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VNb2RlbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZCgkY29tcGlsZShwb3BVcEVsKShzY29wZSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRIZWFkZXJUZXh0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdEhlYWRlciA9ICdTZWxlY3QnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2RlbEN0cmwuJG1vZGVsVmFsdWUpIHJldHVybiBzY29wZS5oZWFkZXIgPSBhdHRycy5tc0hlYWRlciB8fCBkZWZhdWx0SGVhZGVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGVsQ3RybC4kbW9kZWxWYWx1ZSAmJiBtb2RlbEN0cmwuJG1vZGVsVmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJzLm1zU2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5oZWFkZXIgPSAkaW50ZXJwb2xhdGUoYXR0cnMubXNTZWxlY3RlZCkoc2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5oZWFkZXIgPSBtb2RlbEN0cmwuJG1vZGVsVmFsdWVbMF0gIT0gJyc/IG1vZGVsQ3RybC4kbW9kZWxWYWx1ZS5sZW5ndGggKyAnICcgKyAnc2VsZWN0ZWQnIDogZGVmYXVsdEhlYWRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZihtb2RlbEN0cmwuJG1vZGVsVmFsdWUgJiYgdHlwZW9mIDApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuaGVhZGVyID0gJzEgc2VsZWN0ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2FsID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFtwYXJzZWRSZXN1bHQuaXRlbU5hbWVdID0gbW9kZWxDdHJsLiRtb2RlbFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuaGVhZGVyID0gcGFyc2VkUmVzdWx0LnZpZXdNYXBwZXIobG9jYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc19lbXB0eShvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmopIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmxlbmd0aCAmJiBvYmoubGVuZ3RoID4gMCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iaikgaWYgKG9ialtwcm9wXSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzY29wZS52YWxpZCA9IGZ1bmN0aW9uIHZhbGlkTW9kZWwoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFyZXF1aXJlZCkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG1vZGVsQ3RybC4kbW9kZWxWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChhbmd1bGFyLmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA+IDApIHx8ICghYW5ndWxhci5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZSAhPSBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZWxlY3RTaW5nbGUoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS51bmNoZWNrQWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS51bmNoZWNrQWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNoZWNrZWQgPSAhaXRlbS5jaGVja2VkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldE1vZGVsVmFsdWUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2VsZWN0TXVsdGlwbGUoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNoZWNrZWQgPSAhaXRlbS5jaGVja2VkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRNb2RlbFZhbHVlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0TW9kZWxWYWx1ZShpc011bHRpcGxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc011bHRpcGxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNjb3BlLmdyb3VwcywgZnVuY3Rpb24gKGdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGdyb3VwLml0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5jaGVja2VkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnB1c2goaXRlbS5tb2RlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzY29wZS5ncm91cHMsIGZ1bmN0aW9uIChncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChncm91cC5pdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBpdGVtLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbWFya0NoZWNrZWQobmV3VmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0FycmF5KG5ld1ZhbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIW5ld1ZhbCAmJiB0eXBlb2YgbmV3VmFsICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsID0gbmV3VmFsLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc2NvcGUuZ3JvdXBzLCBmdW5jdGlvbiAoZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZ3JvdXAuaXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVxdWFscyhpdGVtLm1vZGVsLCBuZXdWYWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNjb3BlLmdyb3VwcywgZnVuY3Rpb24gKGdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGdyb3VwLml0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG5ld1ZhbCwgZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIWkgJiYgdHlwZW9mIGkgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gaS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZXF1YWxzKGl0ZW0ubW9kZWwsIGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzY29wZS5jaGVja0FsbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc011bHRpcGxlKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzY29wZS5ncm91cHMsIGZ1bmN0aW9uIChncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGdyb3VwLml0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TW9kZWxWYWx1ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzY29wZS51bmNoZWNrQWxsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc2NvcGUuZ3JvdXBzLCBmdW5jdGlvbiAoZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChncm91cC5pdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRNb2RlbFZhbHVlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLnNlbGVjdCA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc011bHRpcGxlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0U2luZ2xlKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUudG9nZ2xlU2VsZWN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RNdWx0aXBsZShpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XSlcclxuXHJcbiAgICAuZGlyZWN0aXZlKCdtdWx0aXNlbGVjdFBvcHVwJywgWyckZG9jdW1lbnQnLCBmdW5jdGlvbiAoJGRvY3VtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBRScsXHJcbiAgICAgICAgICAgIHNjb3BlOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtdWx0aXNlbGVjdC50cGwuaHRtbCcsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBzY29wZS5pc1Zpc2libGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBzY29wZS50b2dnbGVTZWxlY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQ2xhc3MoJ29wZW4nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdvcGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRkb2N1bWVudC51bmJpbmQoJ2NsaWNrJywgY2xpY2tIYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdvcGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRkb2N1bWVudC5iaW5kKCdjbGljaycsIGNsaWNrSGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2NvcGUuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNsaWNrSGFuZGxlcihldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50TWF0Y2hlc0FueUluQXJyYXkoZXZlbnQudGFyZ2V0LCBlbGVtZW50LmZpbmQoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcclxuICAgICAgICAgICAgICAgICAgICAkZG9jdW1lbnQudW5iaW5kKCdjbGljaycsIGNsaWNrSGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgICAgICAgICBzY29wZS5mb2N1cyA9IGZ1bmN0aW9uIGZvY3VzKCl7XHJcbi8vICAgICAgICAgICAgICAgICAgICB2YXIgc2VhcmNoQm94ID0gZWxlbWVudC5maW5kKCdpbnB1dCcpWzBdO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgc2VhcmNoQm94LmZvY3VzKCk7XHJcbi8vICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudE1hdGNoZXNBbnlJbkFycmF5ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGVsZW1lbnRBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudEFycmF5Lmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCA9PSBlbGVtZW50QXJyYXlbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XSk7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnbXVsdGlzZWxlY3QudHBsLmh0bWwnLCBbXSlcclxuXHJcbiAgICAucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xyXG4gICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCgnbXVsdGlzZWxlY3QudHBsLmh0bWwnLFxyXG5cclxuICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPVxcXCJkcm9wZG93blxcXCI+XFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgXCIgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBuZy1jbGljaz1cXFwidG9nZ2xlU2VsZWN0KClcXFwiIG5nLWRpc2FibGVkPVxcXCJkaXNhYmxlZFxcXCIgbmctY2xhc3M9XFxcInsnZXJyb3InOiAhdmFsaWQoKX1cXFwiPlxcblwiICtcclxuICAgICAgICAgICAgICAgIFwiICAgIHt7aGVhZGVyfX0gPHNwYW4gY2xhc3M9XFxcImNhcmV0XFxcIj48L3NwYW4+XFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgXCIgIDwvYnV0dG9uPlxcblwiICtcclxuICAgICAgICAgICAgICAgIFwiICA8dWwgY2xhc3M9XFxcImRyb3Bkb3duLW1lbnVcXFwiPlxcblwiICtcclxuICAgICAgICAgICAgICAgIFwiICAgIDxsaSBuZy1zaG93PVxcXCJzaG93RmlsdGVyXFxcIj5cXG5cIiArXHJcbiAgICAgICAgICAgICAgICBcIiAgICAgIDxpbnB1dCBjbGFzcz1cXFwiZm9ybS1jb250cm9sIGlucHV0LXNtXFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBuZy1tb2RlbD1cXFwic2VhcmNoVGV4dC5sYWJlbFxcXCIgYXV0b2ZvY3VzPVxcXCJhdXRvZm9jdXNcXFwiIHBsYWNlaG9sZGVyPVxcXCJGaWx0ZXJcXFwiIC8+XFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgXCIgICAgPC9saT5cXG5cIiArXHJcbiAgICAgICAgICAgICAgICBcIiAgICA8bGkgbmctc2hvdz1cXFwibXVsdGlwbGUgJiYgc2hvd0NoZWNrQWxsXFxcIiByb2xlPVxcXCJwcmVzZW50YXRpb25cXFwiIGNsYXNzPVxcXCJcXFwiPlxcblwiICtcclxuICAgICAgICAgICAgICAgIFwiICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1saW5rIGJ0bi14c1xcXCIgbmctY2xpY2s9XFxcImNoZWNrQWxsKClcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCI+PGkgY2xhc3M9XFxcImljb24tb2tcXFwiPjwvaT4gQ2hlY2sgYWxsPC9idXR0b24+XFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgXCIgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWxpbmsgYnRuLXhzXFxcIiBuZy1jbGljaz1cXFwidW5jaGVja0FsbCgpXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiPjxpIGNsYXNzPVxcXCJpY29uLXJlbW92ZVxcXCI+PC9pPiBVbmNoZWNrIGFsbDwvYnV0dG9uPlxcblwiICtcclxuICAgICAgICAgICAgICAgIFwiICAgIDwvbGk+XFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgXCIgICAgPGRpdiBuZy1yZXBlYXQ9XFxcImkgaW4gZ3JvdXBzXFxcIj5cXG5cIiArXHJcbiAgICAgICAgICAgICAgICBcIiAgICAgICA8ZGl2PlxcblwiICtcclxuICAgICAgICAgICAgICAgIFwiICAgICAgICAgICA8aDU+e3tpLm5hbWV9fTwvaDU+XCIrXHJcbiAgICAgICAgICAgICAgICBcIiAgICAgICA8L2Rpdj5cXG5cIiArXHJcbiAgICAgICAgICAgICAgICBcIiAgICAgICA8ZGl2IGNsYXNzPVxcXCJkcm9wZG93bi1jb250YWluZXJcXFwiIG5nLXJlcGVhdD1cXFwiaiBpbiBpLml0ZW1zIHwgZmlsdGVyOnNlYXJjaFRleHRcXFwiPlxcblwiICtcclxuICAgICAgICAgICAgICAgIFwiICAgICAgICAgICA8YSBuZy1jbGljaz1cXFwic2VsZWN0KGopOyBmb2N1cygpXFxcIj5cXG5cIiArXHJcbiAgICAgICAgICAgICAgICBcIiAgICAgICAgICAgICAgIDxpIG5nLWNsYXNzPVxcXCJ7J2ljb24tb2snOiBqLmNoZWNrZWQsICdpY29uLWVtcHR5JzogIWouY2hlY2tlZH1cXFwiPjwvaT4ge3tqLmxhYmVsfX08L2E+XFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgXCIgICAgICAgPC9kaXY+XFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgXCIgICAgPC9kaXY+XFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgXCIgIDwvdWw+XFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgXCI8L2Rpdj5cIik7XHJcbiAgICB9XSk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGFyZ29hYXZhIG9uIDIyLjA0LjE0LlxyXG4gKi9cclxuXHJcbi8vIE1vZHVsZSB0aGF0IHByb3ZpZGVzIGZ1bmN0aW9uYWxpdHkgdG8gYXNrIGNvbmZpcm1hdGlvbiBmcm9tIHVzZXIgd2hlblxyXG4vLyBmb3JtIGhhcyBjaGFuZ2VkIGFuZCB1c2VyIHRyaWVzIHRvIGxlYXZlIHBhZ2Ugd2l0aG91dCBzYXZpbmcuXHJcbi8vXHJcbi8vIFVzYWdlIGV4YW1wbGU6XHJcbi8vXHJcbi8vIDxkaXYgbmctZm9ybT1cImFwcEZvcm1cIiBub3ZhbGlkYXRlIGNsYXNzPVwiY3NzLWZvcm1cIiBuZy1jbGFzcz1cInsgJ3N1Ym1pdHRlZCcgOiBzdWJtaXR0ZWQgfVwiIHRkLW5hdmlnYXRpb24tYmxvY2tlci1mb3JtPlxyXG4vL1xyXG4vLyAndGQtbmF2aWdhdGlvbi1ibG9ja2VyLWZvcm0nIG11c3QgYmUgc3BlY2lmaWVkIGFzIGF0dHJpYnV0ZSBmb3IgdGhlIGZvcm0gdGhhdCBjb25maXJtYXRpb24gZnVuY3Rpb25hbGl0eVxyXG4vLyBtdXN0IGFwcGx5IHRvLlxyXG5cclxuLy9GSVhNRSBzaG91bGQgYmUgYWJsZSB0byBtYWtlIGl0IHNvIHRoYXQgcm9vdFNjb3BlIGlzIG5vdCB1c2VkLlxyXG5hbmd1bGFyLm1vZHVsZSgnbmF2aWdhdGlvbi5uYXZpZ2F0aW9uQmxvY2tlcicsIFtdKVxyXG4gICAgLnJ1bihbJyRyb290U2NvcGUnLCAnJGxvY2F0aW9uJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICRsb2NhdGlvbikge1xyXG4gICAgICAgIHZhciBfcHJldmVudE5hdmlnYXRpb24gPSBmYWxzZTtcclxuICAgICAgICB2YXIgX3ByZXZlbnROYXZpZ2F0aW9uVXJsID0gbnVsbDtcclxuXHJcbiAgICAgICAgJHJvb3RTY29wZS5hbGxvd05hdmlnYXRpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgX3ByZXZlbnROYXZpZ2F0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHJvb3RTY29wZS5wcmV2ZW50TmF2aWdhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBfcHJldmVudE5hdmlnYXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICBfcHJldmVudE5hdmlnYXRpb25VcmwgPSAkbG9jYXRpb24uYWJzVXJsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkcm9vdFNjb3BlLiRvbignJGxvY2F0aW9uQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbiAoZXZlbnQsIG5ld1VybCwgb2xkVXJsKSB7XHJcbiAgICAgICAgICAgIC8vIEFsbG93IG5hdmlnYXRpb24gaWYgb3VyIG9sZCB1cmwgd2Fzbid0IHdoZXJlIHdlIHByZXZlbnRlZCBuYXZpZ2F0aW9uIGZyb21cclxuICAgICAgICAgICAgaWYgKF9wcmV2ZW50TmF2aWdhdGlvblVybCAhPSBvbGRVcmwgfHwgX3ByZXZlbnROYXZpZ2F0aW9uVXJsID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuYWxsb3dOYXZpZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChfcHJldmVudE5hdmlnYXRpb24gJiYgIWNvbmZpcm0oXCJZb3UgaGF2ZSB1bnNhdmVkIGNoYW5nZXMsIGRvIHlvdSB3YW50IHRvIGNvbnRpbnVlP1wiKSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuYWxsb3dOYXZpZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gVGFrZSBjYXJlIG9mIHByZXZlbnRpbmcgbmF2aWdhdGlvbiBvdXQgb2Ygb3VyIGFuZ3VsYXIgYXBwXHJcbiAgICAgICAgd2luZG93Lm9uYmVmb3JldW5sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgc2FtZSBkYXRhIHRoYXQgd2UndmUgc2V0IGluIG91ciBhbmd1bGFyIGFwcFxyXG4gICAgICAgICAgICBpZiAoX3ByZXZlbnROYXZpZ2F0aW9uICYmICRsb2NhdGlvbi5hYnNVcmwoKSA9PSBfcHJldmVudE5hdmlnYXRpb25VcmwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIllvdSBoYXZlIHVuc2F2ZWQgY2hhbmdlcywgZG8geW91IHdhbnQgdG8gY29udGludWU/XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XSlcclxuXHJcbiAgICAuZGlyZWN0aXZlKFwiYmxvY2tGb3JtTmF2aWdhdGlvblwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgICAgICAgcmVxdWlyZTogWydeZm9ybSddLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBmb3JtQ29udHJvbGxlcikge1xyXG4gICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJzLm5nRm9ybSArICcuJGRpcnR5JywgZnVuY3Rpb24gKGRpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLiRyb290LnByZXZlbnROYXZpZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHJvb3QuYWxsb3dOYXZpZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG5cclxuXHJcbiIsIid1c2Ugc3RyaWN0Jztcbi8vICBTZXJ2aWNlIGZvciBjcmVhdGluZyBub3RpZmljYXRpb25zLlxuLy8gIE9yaWdpbjogaHR0cHM6Ly9naXRodWIuY29tL0RlcmVrUmllcy9Bbmd1bGFyLU5vdGlmaWNhdGlvbnNcbi8vXG4vLyAgRGVwZW5kZW5jaWVzOlxuLy8gICAgICBJdCB1c2UgQm9vdHN0cmFiIGNvbXBvbmVudDogIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2NvbXBvbmVudHMvXG5cbi8vICBJbnN0YWxsYXRpb246XG4vLyAgICAgIDEuIEFkZCBzY3JpcHQgZmlsZTpcbi8vICAgICAgICAgIDxzY3JpcHQgc3JjPVwibm90aWZpY2F0aW9uLmpzXCI+PC9zY3JpcHQ+XG4vL1xuLy8gICAgICAyLiBBZGQgY3NzIHRvIHlvdXIgd2ViZm9ybTpcbi8vICAgICAgICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwibm90aWZpY2F0aW9uLmNzc1wiLz5cbi8vXG4vLyAgICAgIDMuIEFkZCBub3RpZmljYXRpb25zIG1vZHVsZSBhcyBhIGRlcGVuZGVuY3kgb2YgeW91ciBhcHAgbW9kdWxlOlxuLy8gICAgICAgICAgZS5nIGFuZ3VsYXIubW9kdWxlKCduZ2NvbXBvbmVudHNBcHAnLCBbJ25vdGlmaWNhdGlvbnMnXSlcbi8vXG4vLyAgICAgIDQuIEFkZCBhIGRpdiB0byB5b3VyIGJvZHkgdGFnIHNvbWV3aGVyZSBhbmQgZ2l2ZSBpdCBhXG4vLyAgICAgICAgICBub3RpZmljYXRpb25zIGRpcmVjdGl2ZSBzcGVjaWZ5aW5nIGl0cyBwb3NpdGlvbiBsaWtlIHNvOlxuLy8gICAgICAgICAgICAgIDxkaXYgbm90aWZpY2F0aW9ucz1cImJvdHRvbSByaWdodFwiPjwvZGl2PlxuLy9cbi8vIFVzYWdlIEV4YW1wbGU6XG4vLyAgICAgIFlvdSBjYW4gdXNlIHRoZXNlIG1ldGhvZHMgd2l0aCB0aGUgZm9sbG93aW5nXG4vLyAgICAgIGxpbmUgb2YgY29kZSAodXNlckRhdGEgcGFyYW1ldGVyIGlzIG9wdGlvbmFsLCBjdXJyZW50bHkgdGl0bGUgaXMgbm90IHVzZWQpOlxuLy9cbi8vICAgICRub3RpZmljYXRpb24uaW5mbyh0aXRsZSwgY29udGVudCwgdXNlckRhdGEpO1xuLy8gICAgJG5vdGlmaWNhdGlvbi53YXJuaW5nKHRpdGxlLCBjb250ZW50LCB1c2VyRGF0YSk7XG4vLyAgICAkbm90aWZpY2F0aW9uLmVycm9yKFwiU2F2ZVwiLCBcIkRhdGEgaXMgbm90IHNhdmVkICFcIik7XG4vLyAgICAkbm90aWZpY2F0aW9uLnN1Y2Nlc3MoXCJTYXZlXCIsIFwiRGF0YSBpcyBzYXZlZCBzdWNjZXNzZnVsbHkuXCIpO1xuLy9cbmFuZ3VsYXIubW9kdWxlKCdub3RpZmljYXRpb25zJywgW10pLlxuICAgIGZhY3RvcnkoJyRub3RpZmljYXRpb24nLCBbJyR0aW1lb3V0JyxmdW5jdGlvbigkdGltZW91dCl7XG5cbiAgICAgICAgLy9jb25zb2xlLmxvZygnbm90aWZpY2F0aW9uIHNlcnZpY2Ugb25saW5lJyk7XG4gICAgICAgIHZhciBub3RpZmljYXRpb25zID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnJG5vdGlmaWNhdGlvbnMnKSkgfHwgW10sXG4gICAgICAgICAgICBxdWV1ZSA9IFtdO1xuXG4gICAgICAgIHZhciBzZXR0aW5ncyA9IHtcbiAgICAgICAgICAgIGluZm86IHsgZHVyYXRpb246IDUwMDAsIGVuYWJsZWQ6IHRydWUgfSxcbiAgICAgICAgICAgIHdhcm5pbmc6IHsgZHVyYXRpb246IDUwMDAsIGVuYWJsZWQ6IHRydWUgfSxcbiAgICAgICAgICAgIGVycm9yOiB7IGR1cmF0aW9uOiA1MDAwLCBlbmFibGVkOiB0cnVlIH0sXG4gICAgICAgICAgICBzdWNjZXNzOiB7IGR1cmF0aW9uOiA1MDAwLCBlbmFibGVkOiB0cnVlIH0sXG4gICAgICAgICAgICBwcm9ncmVzczogeyBkdXJhdGlvbjogMCwgZW5hYmxlZDogdHJ1ZSB9LFxuICAgICAgICAgICAgY3VzdG9tOiB7IGR1cmF0aW9uOiAzNTAwMCwgZW5hYmxlZDogdHJ1ZSB9LFxuICAgICAgICAgICAgZGV0YWlsczogdHJ1ZSxcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZTogZmFsc2UsXG4gICAgICAgICAgICBodG1sNU1vZGU6IGZhbHNlLFxuICAgICAgICAgICAgaHRtbDVEZWZhdWx0SWNvbjogJ2ljb24ucG5nJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGh0bWw1Tm90aWZ5KGljb24sIHRpdGxlLCBjb250ZW50LCBvbmRpc3BsYXksIG9uY2xvc2Upe1xuICAgICAgICAgICAgaWYod2luZG93LndlYmtpdE5vdGlmaWNhdGlvbnMuY2hlY2tQZXJtaXNzaW9uKCkgPT09IDApe1xuICAgICAgICAgICAgICAgIGlmKCFpY29uKXtcbiAgICAgICAgICAgICAgICAgICAgaWNvbiA9ICdmYXZpY29uLmljbyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBub3RpID0gd2luZG93LndlYmtpdE5vdGlmaWNhdGlvbnMuY3JlYXRlTm90aWZpY2F0aW9uKGljb24sIHRpdGxlLCBjb250ZW50KTtcbiAgICAgICAgICAgICAgICBpZih0eXBlb2Ygb25kaXNwbGF5ID09PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgICAgICAgICAgICAgbm90aS5vbmRpc3BsYXkgPSBvbmRpc3BsYXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBvbmNsb3NlID09PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgICAgICAgICAgICAgbm90aS5vbmNsb3NlID0gb25jbG9zZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbm90aS5zaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5odG1sNU1vZGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgcmV0dXJuIHtcblxuICAgICAgICAgICAgLyogPT09PT09PT09PSBTRVRUSU5HUyBSRUxBVEVEIE1FVEhPRFMgPT09PT09PT09PT09PSovXG5cbiAgICAgICAgICAgIGRpc2FibGVIdG1sNU1vZGU6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuaHRtbDVNb2RlID0gZmFsc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkaXNhYmxlVHlwZTogZnVuY3Rpb24obm90aWZpY2F0aW9uVHlwZSl7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3Nbbm90aWZpY2F0aW9uVHlwZV0uZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZW5hYmxlSHRtbDVNb2RlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIC8vIHNldHRpbmdzLmh0bWw1TW9kZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuaHRtbDVNb2RlID0gdGhpcy5yZXF1ZXN0SHRtbDVNb2RlUGVybWlzc2lvbnMoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGVuYWJsZVR5cGU6IGZ1bmN0aW9uKG5vdGlmaWNhdGlvblR5cGUpe1xuICAgICAgICAgICAgICAgIHNldHRpbmdzW25vdGlmaWNhdGlvblR5cGVdLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0U2V0dGluZ3M6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdG9nZ2xlVHlwZTogZnVuY3Rpb24obm90aWZpY2F0aW9uVHlwZSl7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3Nbbm90aWZpY2F0aW9uVHlwZV0uZW5hYmxlZCA9ICFzZXR0aW5nc1tub3RpZmljYXRpb25UeXBlXS5lbmFibGVkO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdG9nZ2xlSHRtbDVNb2RlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHNldHRpbmdzLmh0bWw1TW9kZSA9ICFzZXR0aW5ncy5odG1sNU1vZGU7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZXF1ZXN0SHRtbDVNb2RlUGVybWlzc2lvbnM6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy53ZWJraXROb3RpZmljYXRpb25zKXtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnbm90aWZpY2F0aW9ucyBhcmUgYXZhaWxhYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cud2Via2l0Tm90aWZpY2F0aW9ucy5jaGVja1Blcm1pc3Npb24oKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy53ZWJraXROb3RpZmljYXRpb25zLnJlcXVlc3RQZXJtaXNzaW9uKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYod2luZG93LndlYmtpdE5vdGlmaWNhdGlvbnMuY2hlY2tQZXJtaXNzaW9uKCkgPT09IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5odG1sNU1vZGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5odG1sNU1vZGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdub3RpZmljYXRpb25zIGFyZSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG5cbiAgICAgICAgICAgIC8qID09PT09PT09PT09PSBRVUVSWUlORyBSRUxBVEVEIE1FVEhPRFMgPT09PT09PT09PT09Ki9cblxuICAgICAgICAgICAgZ2V0QWxsOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIC8vIFJldHVybnMgYWxsIG5vdGlmaWNhdGlvbnMgdGhhdCBhcmUgY3VycmVudGx5IHN0b3JlZFxuICAgICAgICAgICAgICAgIHJldHVybiBub3RpZmljYXRpb25zO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0UXVldWU6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXVlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyogPT09PT09PT09PT09PT0gTk9USUZJQ0FUSU9OIE1FVEhPRFMgPT09PT09PT09PT09PT0qL1xuXG4gICAgICAgICAgICBpbmZvOiBmdW5jdGlvbih0aXRsZSwgY29udGVudCwgdXNlckRhdGEpe1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2codGl0bGUsIGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmF3ZXNvbWVOb3RpZnkoJ2luZm8nLCdpbmZvLXNpZ24nLCB0aXRsZSwgY29udGVudCwgdXNlckRhdGEpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHRpdGxlLCBjb250ZW50LCB1c2VyRGF0YSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXdlc29tZU5vdGlmeSgnZXJyb3InLCAncmVtb3ZlLXNpZ24nLCB0aXRsZSwgY29udGVudCwgdXNlckRhdGEpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24odGl0bGUsIGNvbnRlbnQsIHVzZXJEYXRhKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hd2Vzb21lTm90aWZ5KCdzdWNjZXNzJywgJ29rLXNpZ24nLCB0aXRsZSwgY29udGVudCwgdXNlckRhdGEpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd2FybmluZzogZnVuY3Rpb24odGl0bGUsIGNvbnRlbnQsIHVzZXJEYXRhKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hd2Vzb21lTm90aWZ5KCd3YXJuaW5nJywgJ2V4Y2xhbWF0aW9uLXNpZ24nLCB0aXRsZSwgY29udGVudCwgdXNlckRhdGEpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgYXdlc29tZU5vdGlmeTogZnVuY3Rpb24odHlwZSwgaWNvbiwgdGl0bGUsIGNvbnRlbnQsIHVzZXJEYXRhKXtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBTdXBwb3NlZCB0byB3cmFwIHRoZSBtYWtlTm90aWZpY2F0aW9uIG1ldGhvZCBmb3IgZHJhd2luZyBpY29ucyB1c2luZyBmb250LWF3ZXNvbWVcbiAgICAgICAgICAgICAgICAgKiByYXRoZXIgdGhhbiBhbiBpbWFnZS5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIE5lZWQgdG8gZmluZCBvdXQgaG93IEknbSBnb2luZyB0byBtYWtlIHRoZSBBUEkgdGFrZSBlaXRoZXIgYW4gaW1hZ2VcbiAgICAgICAgICAgICAgICAgKiByZXNvdXJjZSwgb3IgYSBmb250LWF3ZXNvbWUgaWNvbiBhbmQgdGhlbiBkaXNwbGF5IGVpdGhlciBvZiB0aGVtLlxuICAgICAgICAgICAgICAgICAqIEFsc28gc2hvdWxkIHByb2JhYmx5IHByb3ZpZGUgc29tZSBiaXRzIG9mIGNvbG9yLCBjb3VsZCBkbyB0aGUgY29sb3JpbmdcbiAgICAgICAgICAgICAgICAgKiB0aHJvdWdoIGNsYXNzZXMuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgLy8gaW1hZ2UgPSAnPGkgY2xhc3M9XCJpY29uLScgKyBpbWFnZSArICdcIj48L2k+JztcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYWtlTm90aWZpY2F0aW9uKHR5cGUsIGZhbHNlLCBpY29uLCB0aXRsZSwgY29udGVudCwgdXNlckRhdGEpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbm90aWZ5OiBmdW5jdGlvbihpbWFnZSwgdGl0bGUsIGNvbnRlbnQsIHVzZXJEYXRhKXtcbiAgICAgICAgICAgICAgICAvLyBXcmFwcyB0aGUgbWFrZU5vdGlmaWNhdGlvbiBtZXRob2QgZm9yIGRpc3BsYXlpbmcgbm90aWZpY2F0aW9ucyB3aXRoIGltYWdlc1xuICAgICAgICAgICAgICAgIC8vIHJhdGhlciB0aGFuIGljb25zXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZU5vdGlmaWNhdGlvbignY3VzdG9tJywgaW1hZ2UsIHRydWUsIHRpdGxlLCBjb250ZW50LCB1c2VyRGF0YSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBtYWtlTm90aWZpY2F0aW9uOiBmdW5jdGlvbih0eXBlLCBpbWFnZSwgaWNvbiwgdGl0bGUsIGNvbnRlbnQsIHVzZXJEYXRhKXtcbiAgICAgICAgICAgICAgICB2YXIgbm90aWZpY2F0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICAndHlwZSc6IHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICdpbWFnZSc6IGltYWdlLFxuICAgICAgICAgICAgICAgICAgICAnaWNvbic6IGljb24sXG4gICAgICAgICAgICAgICAgICAgICd0aXRsZSc6IHRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAnY29udGVudCc6IGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICd0aW1lc3RhbXAnOiArbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgJ3VzZXJEYXRhJzogdXNlckRhdGFcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbnMucHVzaChub3RpZmljYXRpb24pO1xuXG4gICAgICAgICAgICAgICAgaWYoc2V0dGluZ3MuaHRtbDVNb2RlKXtcbiAgICAgICAgICAgICAgICAgICAgaHRtbDVOb3RpZnkoaW1hZ2UsIHRpdGxlLCBjb250ZW50LCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImlubmVyIG9uIGRpc3BsYXkgZnVuY3Rpb25cIik7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiaW5uZXIgb24gY2xvc2UgZnVuY3Rpb25cIik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKG5vdGlmaWNhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uIHJlbW92ZUZyb21RdWV1ZVRpbWVvdXQoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlLnNwbGljZShxdWV1ZS5pbmRleE9mKG5vdGlmaWNhdGlvbiksIDEpO1xuICAgICAgICAgICAgICAgICAgICB9LCBzZXR0aW5nc1t0eXBlXS5kdXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm90aWZpY2F0aW9uO1xuICAgICAgICAgICAgfSxcblxuXG4gICAgICAgICAgICAvKiA9PT09PT09PT09PT0gUEVSU0lTVEVOQ0UgTUVUSE9EUyA9PT09PT09PT09PT0gKi9cblxuICAgICAgICAgICAgc2F2ZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvLyBTYXZlIGFsbCB0aGUgbm90aWZpY2F0aW9ucyBpbnRvIGxvY2FsU3RvcmFnZVxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKEpTT04pO1xuICAgICAgICAgICAgICAgIGlmKHNldHRpbmdzLmxvY2FsU3RvcmFnZSl7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCckbm90aWZpY2F0aW9ucycsIEpTT04uc3RyaW5naWZ5KG5vdGlmaWNhdGlvbnMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobG9jYWxTdG9yYWdlLmdldEl0ZW0oJyRub3RpZmljYXRpb25zJykpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcmVzdG9yZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvLyBMb2FkIGFsbCBub3RpZmljYXRpb25zIGZyb20gbG9jYWxTdG9yYWdlXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjbGVhcjogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25zID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcbiAgICB9XSkuXG4gICAgZGlyZWN0aXZlKCdub3RpZmljYXRpb25zJywgWyckbm90aWZpY2F0aW9uJywgJyRjb21waWxlJywgZnVuY3Rpb24oJG5vdGlmaWNhdGlvbiwgJGNvbXBpbGUpe1xuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogSXQgc2hvdWxkIGFsc28gcGFyc2UgdGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gaXQgdGhhdCBzcGVjaWZ5XG4gICAgICAgICAqIGl0cyBwb3NpdGlvbiBvbiB0aGUgc2NyZWVuIGxpa2UgXCJib3R0b20gcmlnaHRcIiBhbmQgYXBwbHkgdGhvc2VcbiAgICAgICAgICogcG9zaXRpb25zIGFzIGEgY2xhc3MgdG8gdGhlIGNvbnRhaW5lciBlbGVtZW50XG4gICAgICAgICAqXG4gICAgICAgICAqIEZpbmFsbHksIHRoZSBkaXJlY3RpdmUgc2hvdWxkIGhhdmUgaXRzIG93biBjb250cm9sbGVyIGZvclxuICAgICAgICAgKiBoYW5kbGluZyBhbGwgb2YgdGhlIG5vdGlmaWNhdGlvbnMgZnJvbSB0aGUgbm90aWZpY2F0aW9uIHNlcnZpY2VcbiAgICAgICAgICovXG4gICAgICAgIC8vY29uc29sZS5sb2coJ3RoaXMgaXMgYSBuZXcgZGlyZWN0aXZlJyk7XG4gICAgICAgIHZhciBodG1sID1cbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZHItbm90aWZpY2F0aW9uLXdyYXBwZXJcIiBuZy1yZXBlYXQ9XCJub3RpIGluIHF1ZXVlXCI+JyArXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJkci1ub3RpZmljYXRpb24tY2xvc2UtYnRuXCIgbmctY2xpY2s9XCJyZW1vdmVOb3RpZmljYXRpb24obm90aSlcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmVcIj48L2k+JyArXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZHItbm90aWZpY2F0aW9uIG5vdGktYmFjay1ncm91bmQte3tub3RpLnR5cGV9fVwiPicgK1xuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImRyLW5vdGlmaWNhdGlvbi1pbWFnZSBkci1ub3RpZmljYXRpb24tdHlwZS17e25vdGkudHlwZX19XCIgbmctc3dpdGNoIG9uPVwibm90aS5pbWFnZVwiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi17e25vdGkuaWNvbn19XCIgbmctc3dpdGNoLXdoZW49XCJmYWxzZVwiPjwvaT4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8aW1nIG5nLXNyYz1cInt7bm90aS5pbWFnZX19XCIgbmctc3dpdGNoLWRlZmF1bHQgLz4nICtcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImRyLW5vdGlmaWNhdGlvbi1jb250ZW50XCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAvKic8aDMgY2xhc3M9XCJkci1ub3RpZmljYXRpb24tdGl0bGVcIj57e25vdGkudGl0bGV9fTwvaDM+JyArICovXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHAgY2xhc3M9XCJkci1ub3RpZmljYXRpb24tdGV4dFwiPnt7bm90aS5jb250ZW50fX08L3A+JyArXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAnPC9kaXY+JztcblxuXG4gICAgICAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKXtcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IGF0dHJzLm5vdGlmaWNhdGlvbnM7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdkci1ub3RpZmljYXRpb24tY29udGFpbmVyJyk7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgcG9zaXRpb24ubGVuZ3RoIDsgaSsrKXtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKHBvc2l0aW9uW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgICAgICBzY29wZToge30sXG4gICAgICAgICAgICB0ZW1wbGF0ZTogaHRtbCxcbiAgICAgICAgICAgIGxpbms6IGxpbmssXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsIGZ1bmN0aW9uIE5vdGlmaWNhdGlvbnNDdHJsKCAkc2NvcGUgKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUucXVldWUgPSAkbm90aWZpY2F0aW9uLmdldFF1ZXVlKCk7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlTm90aWZpY2F0aW9uID0gZnVuY3Rpb24obm90aSl7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5xdWV1ZS5zcGxpY2UoJHNjb3BlLnF1ZXVlLmluZGV4T2Yobm90aSksIDEpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG5cbiAgICAgICAgfTtcbiAgICB9XSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4oXG4gICAgZnVuY3Rpb24oYW5ndWxhcikge1xuICAgICAgICByZXR1cm4gYW5ndWxhclxuICAgICAgICAgICAgLm1vZHVsZSgnbmdPcmRlck9iamVjdEJ5JywgW10pXG4gICAgICAgICAgICAuZmlsdGVyKCdvcmRlck9iamVjdEJ5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVtcywgZmllbGQsIHJldmVyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkID0gW107XG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtcywgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluZGV4KG9iaiwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9ialtpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tcGFyYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWR1Y2VkQSA9IGZpZWxkLnNwbGl0KCcuJykucmVkdWNlKGluZGV4LCBhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWR1Y2VkQiA9IGZpZWxkLnNwbGl0KCcuJykucmVkdWNlKGluZGV4LCBiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWR1Y2VkQSA9PT0gcmVkdWNlZEIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJhdG9yID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyYXRvciA9IChyZWR1Y2VkQSA+IHJlZHVjZWRCID8gMSA6IC0xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wYXJhdG9yO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyZWQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICApKGFuZ3VsYXIpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGFyZ29hYXZhIG9uIDEzLjA1LjE0LlxyXG4gKi9cclxuXHJcblxyXG4vLyBNb2R1bGUgdGhhdCBjb250YWlucyBmdW5jdGlvbmFsaXR5IGZvciB0YWIgbmF2aWdhdGlvbi4gVXNlciBtdXN0IGZpbGwgJ3RhYlNlcnZpY2UnIHdpdGhcclxuLy8gYXZhaWxhYmxlIHRhYnMgYXMgZm9sbG93czpcclxuLy9cclxuLy8gYXBwLnJ1bihmdW5jdGlvbigkcm9vdFNjb3BlLCBwcm9taXNlVHJhY2tlciwgJGxvY2F0aW9uLCB0YWJTZXJ2aWNlKSB7XHJcbi8vICAgICAgdGFiU2VydmljZS5zZXRUYWJzKFtcclxuLy8gICAgICAgICAge1wiaWRcIjpcIlRhYmxlMVwiLFwiYWN0aXZlXCIgOiB0cnVlfSxcclxuLy8gICAgICAgICAge1wiaWRcIjpcIlRhYmxlMlwiLFwiYWN0aXZlXCIgOiBmYWxzZX0sXHJcbi8vICAgICAgICAgIHtcImlkXCI6XCJUYWJsZTNcIixcImFjdGl2ZVwiIDogZmFsc2V9LFxyXG4vLyAgICAgICAgICB7XCJpZFwiOlwiVGFibGU0XCIsXCJhY3RpdmVcIiA6IGZhbHNlfSxcclxuLy8gICAgICAgICAge1wiaWRcIjpcIlRhYmxlNVwiLFwiYWN0aXZlXCIgOiBmYWxzZX1dKTtcclxuLy8gfSk7XHJcbi8vXHJcbi8vIHRoZW4gJ1RhYkNvbnRyb2xsZXInIG11c3QgYmUgc2V0IHRvIGVsZW1lbnRzIHRoYXQgd2FudCB0byBpbnRlcmFjdCB3aXRoXHJcbi8vIHRhYlNlcnZpY2UuXHJcbi8vXHJcbi8vIDx1bCB0YWJzZXQgbmctY2xvYWsgbmctY29udHJvbGxlcj1cIlRhYkNvbnRyb2xsZXJcIj5cclxuLy8gICAgICA8ZGl2IG5nLWNsYXNzPVwieydpbnZhbGlkVGFiJyA6IGlzSW52YWxpZFRhYignVGFibGUxJyl9XCI+XHJcbi8vICAgICAgICAgIDxsaSB0YWIgaGVhZGluZz1cIlRhYmxlIDFcIiBhY3RpdmU9XCJ0YWJzW2dldFRhYkluZGV4KCdUYWJsZTEnKV0uYWN0aXZlXCI+XHJcbi8vICAgICAgICAgIDwvbGk+XHJcbi8vICAgICAgPC9kaXY+XHJcbi8vIDwvdWw+XHJcbi8vXHJcbi8vIG9yXHJcbi8vXHJcbi8vIDxkaXYgY2xhc3M9XCJhbmltYXRlLXNob3dcIiBuZy1zaG93PVwic2hvd01lbnVcIiBzdHlsZT1cImZsb2F0OnJpZ2h0XCIgbmctY29udHJvbGxlcj1cIlRhYkNvbnRyb2xsZXJcIj5cclxuLy8gICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5nLWNsaWNrPVwicHJldmlvdXNUYWIoKVwiIHZhbHVlPVwiUHJldlwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1wcmltYXJ5XCIgbmctZGlzYWJsZWQ9XCJnZXRBY3RpdmVUYWJJbmRleCgpID09IDBcIj5cclxuLy8gICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5nLWNsaWNrPVwibmV4dFRhYigpXCIgdmFsdWU9XCJOZXh0XCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXByaW1hcnlcIiBuZy1kaXNhYmxlZD1cImdldEFjdGl2ZVRhYkluZGV4KCkgPT0gKHRhYnMubGVuZ3RoIC0gMSlcIi8+XHJcbi8vIDwvZGl2PlxyXG4vL1xyXG5hbmd1bGFyLm1vZHVsZSgndGFicy5mb3JtVGFicycsIFtdKVxyXG4gICAgLnNlcnZpY2UoJ3RhYlNlcnZpY2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLnRhYnMgPSBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5nZXRUYWJzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRhYnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNldFRhYnMgPSBmdW5jdGlvbih0YWJzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFicyA9IHRhYnM7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIC5jb250cm9sbGVyKFwiVGFiQ29udHJvbGxlclwiLCBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24sICR0aW1lb3V0LCAkYW5jaG9yU2Nyb2xsLCB0YWJTZXJ2aWNlKSB7XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIGlmICh0YWJTZXJ2aWNlLmdldFRhYnMoKS5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIllvdSBtdXN0IGNvbmZpZ3VyZSB0YWJTZXJ2aWNlXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJHNjb3BlLnRhYnMgPSB0YWJTZXJ2aWNlLnRhYnM7XHJcblxyXG4gICAgICAgICRzY29wZS5nb3RvID0gZnVuY3Rpb24gKHRhYiwgaWQpe1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS50YWJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnRhYnNbaV0uaWQgPT0gdGFiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhYnNbaV0uYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhYnNbaV0uYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBvbGQgPSAkbG9jYXRpb24uaGFzaCgpO1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKGlkKTtcclxuICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKG9sZCk7XHJcbiAgICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmdldEFjdGl2ZVRhYkluZGV4ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLnRhYnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUudGFic1tpXS5hY3RpdmUgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5nZXRUYWJJbmRleCA9IGZ1bmN0aW9uKHRhYklkKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLnRhYnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUudGFic1tpXS5pZCA9PSB0YWJJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUubmV4dFRhYiA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZhciBhY3RpdmVUYWJJbmRleCA9ICRzY29wZS5nZXRBY3RpdmVUYWJJbmRleCgpO1xyXG4gICAgICAgICAgICB2YXIgbmV4dFRhYiA9IChhY3RpdmVUYWJJbmRleCArIDEgPD0gJHNjb3BlLnRhYnMubGVuZ3RoKT8gYWN0aXZlVGFiSW5kZXgrMSA6IGFjdGl2ZVRhYkluZGV4O1xyXG4gICAgICAgICAgICAkc2NvcGUuZ290bygkc2NvcGUudGFic1tuZXh0VGFiXS5pZCwgJ2JlZ2lubmluZycpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5wcmV2aW91c1RhYiA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZhciBhY3RpdmVUYWJJbmRleCA9ICRzY29wZS5nZXRBY3RpdmVUYWJJbmRleCgpO1xyXG4gICAgICAgICAgICB2YXIgcHJldmlvdXNUYWIgPSAoYWN0aXZlVGFiSW5kZXggLSAxID49IDApPyBhY3RpdmVUYWJJbmRleCAtIDEgOiBhY3RpdmVUYWJJbmRleDtcclxuICAgICAgICAgICAgJHNjb3BlLmdvdG8oJHNjb3BlLnRhYnNbcHJldmlvdXNUYWJdLmlkLCAnYmVnaW5uaW5nJyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmlzSW52YWxpZFRhYiA9IGZ1bmN0aW9uKHRhYklkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkc2NvcGUuc3VibWl0dGVkICYmICRzY29wZS5hcHBGb3JtW3RhYklkXS4kaW52YWxpZDtcclxuICAgICAgICB9O1xyXG4gICAgfSkiLCIvKipcclxuICogQ3JlYXRlZCBieSBhcmdvYWF2YSBvbiAxMy4wNS4xNC5cclxuICovXHJcblxyXG4vL0NoZWNrcyBpZiBhcnJheSBpcyBlbXB0eS5cclxud2luZG93LmlzRW1wdHlBcnJheSA9IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgICBpZiAoIShhcnJheSBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgIHRocm93IEVycm9yKFwiRWxlbWVudCBub3QgYXJyYXlcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmICghYXJyYXlbaV0pIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vLyBDb3VudHMgYWxsIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IG9yIGFycmF5LlxyXG4vLyBSZWR1Y2VzIHRoZSBjb3VudCBieSBvbmUgd2hlbiBvYmplY3QgaXMgY29uc2lkZXJlZCBmaXhlZCBxdWVzdGlvblxyXG4vLyBpbiB0aGlzIGNhc2UgZmlyc3QgZWxlbWVudCBvZiBvYmplY3QgaXMgcHJlZmlsbGVkIGFuZCBtdXN0IG5vdCBiZSBjb3VudGVkLlxyXG53aW5kb3cuY291bnROb25FbXB0eVByb3BlcnRpZXMgPSBmdW5jdGlvbihvYmplY3RPckFycmF5LCBpc0ZpeGVkUXVlc3Rpb24pIHtcclxuICAgIHZhciBjb3VudCA9IDA7XHJcblxyXG4gICAgaWYgKCEob2JqZWN0T3JBcnJheSBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgIGNvdW50ID0gY291bnRPYmplY3RQcm9wZXJ0aWVzKG9iamVjdE9yQXJyYXkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdE9yQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIG9iamVjdENvdW50ID0gY291bnRPYmplY3RQcm9wZXJ0aWVzKG9iamVjdE9yQXJyYXlbaV0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlzRml4ZWRRdWVzdGlvbikge1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0Q291bnQgLT0gMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY291bnQgKz0gb2JqZWN0Q291bnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvdW50O1xyXG59O1xyXG5cclxuLy8gQ291bnRzIG9ubHlcclxud2luZG93LmNvdW50T2JqZWN0UHJvcGVydGllcyA9IGZ1bmN0aW9uKG9iamVjdCkge1xyXG4gICAgdmFyIGNvdW50ID0gMDtcclxuXHJcbiAgICAvL0ZvciBwcmltaXRpdmVzXHJcbiAgICBpZiAoISh0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JykgJiZcclxuICAgICAgICAhKHR5cGVvZiBvYmplY3QgPT09ICdhcnJheScpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIGkgaW4gb2JqZWN0KSB7XHJcbiAgICAgICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShpKVxyXG4gICAgICAgICAgICAmJiAhIW9iamVjdFtpXVxyXG4gICAgICAgICAgICAmJiAoaSAhPSAnJCRoYXNoS2V5JykpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0W2ldID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdEVsZW1lbnRDb3VudCA9IGNvdW50Tm9uRW1wdHlQcm9wZXJ0aWVzKG9iamVjdFtpXSk7XHJcbiAgICAgICAgICAgICAgICBjb3VudCArPSBvYmplY3RFbGVtZW50Q291bnQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvdW50O1xyXG59O1xyXG5cclxuLy8gQ2xlYXJzIG9iamVjdCBvciBhcnJheSBkYXRhLiBXaGVuIG9iamVjdCBpcyBhcnJheSBhbGwgb3RoZXIgZWxlbWVudHMgZXhjZXB0XHJcbi8vIGZpcnN0IGFyZSBkZWxldGVkLlxyXG53aW5kb3cuY2xlYXJPYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGtlZXBGaXJzdCkge1xyXG4gICAgaWYgKCEob2JqZWN0IGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcblxyXG4gICAgICAgIHZhciBpbmRleENvdW50ZXIgPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgaW4gb2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleENvdW50ZXIgPT0gMCAmJiBrZWVwRmlyc3QpIHtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0W2ldID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbmRleENvdW50ZXIrKztcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNsZWFyQXJyYXkob2JqZWN0LCBrZWVwRmlyc3QpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuLy8gRGVsZXRlcyBhbGwgb3RoZXIgYXJyYXkgZWxlbWVudHMgZXhwZWN0IGZpcnN0IG9uZSBhbmRcclxuLy8gY2xlYXJzIGFsbCBkYXRhIGZyb20gZmlyc3QgZWxlbWVudC5cclxud2luZG93LmNsZWFyQXJyYXkgPWZ1bmN0aW9uKGFycmF5LCBrZWVwUm93KSB7XHJcbiAgICBmb3IgKHZhciBpID0gYXJyYXkubGVuZ3RoOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgICAgaWYgKGtlZXBSb3cpIHtcclxuICAgICAgICAgICAgY2xlYXJPYmplY3QoYXJyYXlbaV0sIGtlZXBSb3cpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFycmF5LnNwbGljZShpLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjbGVhck9iamVjdChhcnJheVswXSwga2VlcFJvdyk7XHJcblxyXG4gICAgLy8gRm9yIGFycmF5cyB0aGF0IGNvbnRhaW4gcHJpbWl0aXZlcy4gTGFzdCBlbGVtZW50IG11c3QgYmVcclxuICAgIC8vIGxlZnQgYnV0IGhhcyB0byBiZSBlbXB0eSBzbyBlbGVtZW50IGlzIHN0aWxsIHByZXNlbnQgYWZ0ZXJcclxuICAgIC8vIGNvbnZlcnNpb24gdG8geG1sLlxyXG4gICAgaWYgKCEoYXJyYXlbMF0gaW5zdGFuY2VvZiBPYmplY3QpKSB7XHJcbiAgICAgICAgYXJyYXlbMF0gPSBcIlwiO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxufVxyXG5cclxuLy9DbG9uZSBvYmplY3QuXHJcbndpbmRvdy5jbG9uZSA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgLy8gSGFuZGxlIHRoZSAzIHNpbXBsZSB0eXBlcywgYW5kIG51bGwgb3IgdW5kZWZpbmVkXHJcbiAgICBpZiAobnVsbCA9PSBvYmogfHwgXCJvYmplY3RcIiAhPSB0eXBlb2Ygb2JqKSByZXR1cm4gb2JqO1xyXG5cclxuICAgIC8vIEhhbmRsZSBEYXRlXHJcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgICAgIHZhciBjb3B5ID0gbmV3IERhdGUoKTtcclxuICAgICAgICBjb3B5LnNldFRpbWUob2JqLmdldFRpbWUoKSk7XHJcbiAgICAgICAgcmV0dXJuIGNvcHk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFuZGxlIEFycmF5XHJcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICB2YXIgY29weSA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBvYmoubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgY29weVtpXSA9IGNsb25lKG9ialtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb3B5O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhhbmRsZSBPYmplY3RcclxuICAgIGlmIChvYmogaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuICAgICAgICB2YXIgY29weSA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIGF0dHIgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoYXR0cikpIGNvcHlbYXR0cl0gPSBjbG9uZShvYmpbYXR0cl0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29weTtcclxuICAgIH1cclxuXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gY29weSBvYmohIEl0cyB0eXBlIGlzbid0IHN1cHBvcnRlZC5cIik7XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uIGlzIHVzZWQgYmVmb3JlIHNhdmluZyBKU09OIG9iamVjdCBiYWNrIHRvIFhNTCBmaWxlLiBXaGVuIGRlbGV0aW5nIGZpZWxkIG9uIHRoZSBmb3JtXHJcbi8vIGFuZ3VsYXIgc2V0cyBpdCB0byB1bmRlZmluZWQgd2hpY2ggYnJlYWtzIHRoZSBvcmRlciBvZiBlbGVtZW50cyBpZiBjb252ZXJ0ZWQgdG8gWE1MLlxyXG53aW5kb3cuZml4VW5kZWZpbmVkID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICB2YXIgaXNBcnJheSA9IG9iaiBpbnN0YW5jZW9mIEFycmF5O1xyXG4gICAgZm9yICh2YXIgaiBpbiBvYmopIHtcclxuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGopKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Yob2JqW2pdKSA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICBmaXhVbmRlZmluZWQob2JqW2pdKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmKCFpc0FycmF5ICYmIGogIT0gJyQkaGFzaGtleScpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2pdID09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqW2pdID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBnZXR0aW5nIHF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXIgdmFsdWVzLiBBbmd1bGFySlMgc29sdXRpb24gJGxvY2F0aW9uLnNlYXJjaCgpIGRvZXNuJ3Qgd29yayBpbiBJRTguXHJcbndpbmRvdy5nZXRQYXJhbWV0ZXJCeU5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAvLyBGSVhNRSAtIFdlYlEgaW5zdGFuY2UgcGFyYW0gaXMgbm90IGVzY2FwZWRcclxuICAgIHZhciBzZWFyY2hBcnIgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnNwbGl0KCc/Jyk7XHJcbiAgICB2YXIgc2VhcmNoID0gJz8nICsgc2VhcmNoQXJyW3NlYXJjaEFyci5sZW5ndGggLSAxXTtcclxuICAgIHZhciBtYXRjaCA9IG5ldyBSZWdFeHAoJ1s/Jl0nICsgbmFtZSArICc9KFteJl0qKScpLmV4ZWMoc2VhcmNoKTtcclxuICAgIHJldHVybiBtYXRjaCAmJiBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0ucmVwbGFjZSgvXFwrL2csICcgJykpO1xyXG59OyIsIi8qKlxuICogQGxpY2Vuc2UgQW5ndWxhckpTIHYxLjIuMTZcbiAqIChjKSAyMDEwLTIwMTQgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuKGZ1bmN0aW9uKHdpbmRvdywgYW5ndWxhciwgdW5kZWZpbmVkKSB7J3VzZSBzdHJpY3QnO1xuXG4vKiBqc2hpbnQgbWF4bGVuOiBmYWxzZSAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG5nQW5pbWF0ZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogIyBuZ0FuaW1hdGVcbiAqXG4gKiBUaGUgYG5nQW5pbWF0ZWAgbW9kdWxlIHByb3ZpZGVzIHN1cHBvcnQgZm9yIEphdmFTY3JpcHQsIENTUzMgdHJhbnNpdGlvbiBhbmQgQ1NTMyBrZXlmcmFtZSBhbmltYXRpb24gaG9va3Mgd2l0aGluIGV4aXN0aW5nIGNvcmUgYW5kIGN1c3RvbSBkaXJlY3RpdmVzLlxuICpcbiAqXG4gKiA8ZGl2IGRvYy1tb2R1bGUtY29tcG9uZW50cz1cIm5nQW5pbWF0ZVwiPjwvZGl2PlxuICpcbiAqICMgVXNhZ2VcbiAqXG4gKiBUbyBzZWUgYW5pbWF0aW9ucyBpbiBhY3Rpb24sIGFsbCB0aGF0IGlzIHJlcXVpcmVkIGlzIHRvIGRlZmluZSB0aGUgYXBwcm9wcmlhdGUgQ1NTIGNsYXNzZXNcbiAqIG9yIHRvIHJlZ2lzdGVyIGEgSmF2YVNjcmlwdCBhbmltYXRpb24gdmlhIHRoZSBteU1vZHVsZS5hbmltYXRpb24oKSBmdW5jdGlvbi4gVGhlIGRpcmVjdGl2ZXMgdGhhdCBzdXBwb3J0IGFuaW1hdGlvbiBhdXRvbWF0aWNhbGx5IGFyZTpcbiAqIGBuZ1JlcGVhdGAsIGBuZ0luY2x1ZGVgLCBgbmdJZmAsIGBuZ1N3aXRjaGAsIGBuZ1Nob3dgLCBgbmdIaWRlYCwgYG5nVmlld2AgYW5kIGBuZ0NsYXNzYC4gQ3VzdG9tIGRpcmVjdGl2ZXMgY2FuIHRha2UgYWR2YW50YWdlIG9mIGFuaW1hdGlvblxuICogYnkgdXNpbmcgdGhlIGAkYW5pbWF0ZWAgc2VydmljZS5cbiAqXG4gKiBCZWxvdyBpcyBhIG1vcmUgZGV0YWlsZWQgYnJlYWtkb3duIG9mIHRoZSBzdXBwb3J0ZWQgYW5pbWF0aW9uIGV2ZW50cyBwcm92aWRlZCBieSBwcmUtZXhpc3RpbmcgbmcgZGlyZWN0aXZlczpcbiAqXG4gKiB8IERpcmVjdGl2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZCBBbmltYXRpb25zICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0I3VzYWdlX2FuaW1hdGlvbnMgbmdSZXBlYXR9ICAgICAgICAgfCBlbnRlciwgbGVhdmUgYW5kIG1vdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHtAbGluayBuZ1JvdXRlLmRpcmVjdGl2ZTpuZ1ZpZXcjdXNhZ2VfYW5pbWF0aW9ucyBuZ1ZpZXd9ICAgICAgICB8IGVudGVyIGFuZCBsZWF2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luY2x1ZGUjdXNhZ2VfYW5pbWF0aW9ucyBuZ0luY2x1ZGV9ICAgICAgIHwgZW50ZXIgYW5kIGxlYXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU3dpdGNoI3VzYWdlX2FuaW1hdGlvbnMgbmdTd2l0Y2h9ICAgICAgICAgfCBlbnRlciBhbmQgbGVhdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdJZiN1c2FnZV9hbmltYXRpb25zIG5nSWZ9ICAgICAgICAgICAgICAgICB8IGVudGVyIGFuZCBsZWF2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzI3VzYWdlX2FuaW1hdGlvbnMgbmdDbGFzc30gICAgICAgICAgIHwgYWRkIGFuZCByZW1vdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU2hvdyN1c2FnZV9hbmltYXRpb25zIG5nU2hvdyAmIG5nSGlkZX0gICAgfCBhZGQgYW5kIHJlbW92ZSAodGhlIG5nLWhpZGUgY2xhc3MgdmFsdWUpICAgICAgICAgICB8XG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSN1c2FnZV9hbmltYXRpb25zIGZvcm19ICAgICAgICAgICAgICAgICB8IGFkZCBhbmQgcmVtb3ZlIChkaXJ0eSwgcHJpc3RpbmUsIHZhbGlkLCBpbnZhbGlkICYgYWxsIG90aGVyIHZhbGlkYXRpb25zKSAgICAgICAgICAgICAgICB8XG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbCN1c2FnZV9hbmltYXRpb25zIG5nTW9kZWx9ICAgICAgICAgICB8IGFkZCBhbmQgcmVtb3ZlIChkaXJ0eSwgcHJpc3RpbmUsIHZhbGlkLCBpbnZhbGlkICYgYWxsIG90aGVyIHZhbGlkYXRpb25zKSAgICAgICAgICAgICAgICB8XG4gKlxuICogWW91IGNhbiBmaW5kIG91dCBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGFuaW1hdGlvbnMgdXBvbiB2aXNpdGluZyBlYWNoIGRpcmVjdGl2ZSBwYWdlLlxuICpcbiAqIEJlbG93IGlzIGFuIGV4YW1wbGUgb2YgaG93IHRvIGFwcGx5IGFuaW1hdGlvbnMgdG8gYSBkaXJlY3RpdmUgdGhhdCBzdXBwb3J0cyBhbmltYXRpb24gaG9va3M6XG4gKlxuICogYGBgaHRtbFxuICogPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlxuICogLnNsaWRlLm5nLWVudGVyLCAuc2xpZGUubmctbGVhdmUge1xuICogICAtd2Via2l0LXRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqIH1cbiAqXG4gKiAuc2xpZGUubmctZW50ZXIgeyB9ICAgICAgICAvJiM0Mjsgc3RhcnRpbmcgYW5pbWF0aW9ucyBmb3IgZW50ZXIgJiM0MjsvXG4gKiAuc2xpZGUubmctZW50ZXItYWN0aXZlIHsgfSAvJiM0MjsgdGVybWluYWwgYW5pbWF0aW9ucyBmb3IgZW50ZXIgJiM0MjsvXG4gKiAuc2xpZGUubmctbGVhdmUgeyB9ICAgICAgICAvJiM0Mjsgc3RhcnRpbmcgYW5pbWF0aW9ucyBmb3IgbGVhdmUgJiM0MjsvXG4gKiAuc2xpZGUubmctbGVhdmUtYWN0aXZlIHsgfSAvJiM0MjsgdGVybWluYWwgYW5pbWF0aW9ucyBmb3IgbGVhdmUgJiM0MjsvXG4gKiA8L3N0eWxlPlxuICpcbiAqIDwhLS1cbiAqIHRoZSBhbmltYXRlIHNlcnZpY2Ugd2lsbCBhdXRvbWF0aWNhbGx5IGFkZCAubmctZW50ZXIgYW5kIC5uZy1sZWF2ZSB0byB0aGUgZWxlbWVudFxuICogdG8gdHJpZ2dlciB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uc1xuICogLS0+XG4gKiA8QU5ZIGNsYXNzPVwic2xpZGVcIiBuZy1pbmNsdWRlPVwiLi4uXCI+PC9BTlk+XG4gKiBgYGBcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCBpZiBhbiBhbmltYXRpb24gaXMgcnVubmluZywgYW55IGNoaWxkIGVsZW1lbnRzIGNhbm5vdCBiZSBhbmltYXRlZCB1bnRpbCB0aGUgcGFyZW50IGVsZW1lbnQnc1xuICogYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWQuXG4gKlxuICogPGgyPkNTUy1kZWZpbmVkIEFuaW1hdGlvbnM8L2gyPlxuICogVGhlIGFuaW1hdGUgc2VydmljZSB3aWxsIGF1dG9tYXRpY2FsbHkgYXBwbHkgdHdvIENTUyBjbGFzc2VzIHRvIHRoZSBhbmltYXRlZCBlbGVtZW50IGFuZCB0aGVzZSB0d28gQ1NTIGNsYXNzZXNcbiAqIGFyZSBkZXNpZ25lZCB0byBjb250YWluIHRoZSBzdGFydCBhbmQgZW5kIENTUyBzdHlsaW5nLiBCb3RoIENTUyB0cmFuc2l0aW9ucyBhbmQga2V5ZnJhbWUgYW5pbWF0aW9ucyBhcmUgc3VwcG9ydGVkXG4gKiBhbmQgY2FuIGJlIHVzZWQgdG8gcGxheSBhbG9uZyB3aXRoIHRoaXMgbmFtaW5nIHN0cnVjdHVyZS5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGNvZGUgYmVsb3cgZGVtb25zdHJhdGVzIGhvdyB0byBwZXJmb3JtIGFuaW1hdGlvbnMgdXNpbmcgKipDU1MgdHJhbnNpdGlvbnMqKiB3aXRoIEFuZ3VsYXI6XG4gKlxuICogYGBgaHRtbFxuICogPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlxuICogLyYjNDI7XG4gKiAgVGhlIGFuaW1hdGUgY2xhc3MgaXMgYXBhcnQgb2YgdGhlIGVsZW1lbnQgYW5kIHRoZSBuZy1lbnRlciBjbGFzc1xuICogIGlzIGF0dGFjaGVkIHRvIHRoZSBlbGVtZW50IG9uY2UgdGhlIGVudGVyIGFuaW1hdGlvbiBldmVudCBpcyB0cmlnZ2VyZWRcbiAqICYjNDI7L1xuICogLnJldmVhbC1hbmltYXRpb24ubmctZW50ZXIge1xuICogIC13ZWJraXQtdHJhbnNpdGlvbjogMXMgbGluZWFyIGFsbDsgLyYjNDI7IFNhZmFyaS9DaHJvbWUgJiM0MjsvXG4gKiAgdHJhbnNpdGlvbjogMXMgbGluZWFyIGFsbDsgLyYjNDI7IEFsbCBvdGhlciBtb2Rlcm4gYnJvd3NlcnMgYW5kIElFMTArICYjNDI7L1xuICpcbiAqICAvJiM0MjsgVGhlIGFuaW1hdGlvbiBwcmVwYXJhdGlvbiBjb2RlICYjNDI7L1xuICogIG9wYWNpdHk6IDA7XG4gKiB9XG4gKlxuICogLyYjNDI7XG4gKiAgS2VlcCBpbiBtaW5kIHRoYXQgeW91IHdhbnQgdG8gY29tYmluZSBib3RoIENTU1xuICogIGNsYXNzZXMgdG9nZXRoZXIgdG8gYXZvaWQgYW55IENTUy1zcGVjaWZpY2l0eVxuICogIGNvbmZsaWN0c1xuICogJiM0MjsvXG4gKiAucmV2ZWFsLWFuaW1hdGlvbi5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICogIC8mIzQyOyBUaGUgYW5pbWF0aW9uIGNvZGUgaXRzZWxmICYjNDI7L1xuICogIG9wYWNpdHk6IDE7XG4gKiB9XG4gKiA8L3N0eWxlPlxuICpcbiAqIDxkaXYgY2xhc3M9XCJ2aWV3LWNvbnRhaW5lclwiPlxuICogICA8ZGl2IG5nLXZpZXcgY2xhc3M9XCJyZXZlYWwtYW5pbWF0aW9uXCI+PC9kaXY+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFRoZSBmb2xsb3dpbmcgY29kZSBiZWxvdyBkZW1vbnN0cmF0ZXMgaG93IHRvIHBlcmZvcm0gYW5pbWF0aW9ucyB1c2luZyAqKkNTUyBhbmltYXRpb25zKiogd2l0aCBBbmd1bGFyOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj5cbiAqIC5yZXZlYWwtYW5pbWF0aW9uLm5nLWVudGVyIHtcbiAqICAgLXdlYmtpdC1hbmltYXRpb246IGVudGVyX3NlcXVlbmNlIDFzIGxpbmVhcjsgLyYjNDI7IFNhZmFyaS9DaHJvbWUgJiM0MjsvXG4gKiAgIGFuaW1hdGlvbjogZW50ZXJfc2VxdWVuY2UgMXMgbGluZWFyOyAvJiM0MjsgSUUxMCsgYW5kIEZ1dHVyZSBCcm93c2VycyAmIzQyOy9cbiAqIH1cbiAqIEAtd2Via2l0LWtleWZyYW1lcyBlbnRlcl9zZXF1ZW5jZSB7XG4gKiAgIGZyb20geyBvcGFjaXR5OjA7IH1cbiAqICAgdG8geyBvcGFjaXR5OjE7IH1cbiAqIH1cbiAqIEBrZXlmcmFtZXMgZW50ZXJfc2VxdWVuY2Uge1xuICogICBmcm9tIHsgb3BhY2l0eTowOyB9XG4gKiAgIHRvIHsgb3BhY2l0eToxOyB9XG4gKiB9XG4gKiA8L3N0eWxlPlxuICpcbiAqIDxkaXYgY2xhc3M9XCJ2aWV3LWNvbnRhaW5lclwiPlxuICogICA8ZGl2IG5nLXZpZXcgY2xhc3M9XCJyZXZlYWwtYW5pbWF0aW9uXCI+PC9kaXY+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEJvdGggQ1NTMyBhbmltYXRpb25zIGFuZCB0cmFuc2l0aW9ucyBjYW4gYmUgdXNlZCB0b2dldGhlciBhbmQgdGhlIGFuaW1hdGUgc2VydmljZSB3aWxsIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgZHVyYXRpb24gYW5kIGRlbGF5IHRpbWluZy5cbiAqXG4gKiBVcG9uIERPTSBtdXRhdGlvbiwgdGhlIGV2ZW50IGNsYXNzIGlzIGFkZGVkIGZpcnN0IChzb21ldGhpbmcgbGlrZSBgbmctZW50ZXJgKSwgdGhlbiB0aGUgYnJvd3NlciBwcmVwYXJlcyBpdHNlbGYgdG8gYWRkXG4gKiB0aGUgYWN0aXZlIGNsYXNzIChpbiB0aGlzIGNhc2UgYG5nLWVudGVyLWFjdGl2ZWApIHdoaWNoIHRoZW4gdHJpZ2dlcnMgdGhlIGFuaW1hdGlvbi4gVGhlIGFuaW1hdGlvbiBtb2R1bGUgd2lsbCBhdXRvbWF0aWNhbGx5XG4gKiBkZXRlY3QgdGhlIENTUyBjb2RlIHRvIGRldGVybWluZSB3aGVuIHRoZSBhbmltYXRpb24gZW5kcy4gT25jZSB0aGUgYW5pbWF0aW9uIGlzIG92ZXIgdGhlbiBib3RoIENTUyBjbGFzc2VzIHdpbGwgYmVcbiAqIHJlbW92ZWQgZnJvbSB0aGUgRE9NLiBJZiBhIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBDU1MgdHJhbnNpdGlvbnMgb3IgQ1NTIGFuaW1hdGlvbnMgdGhlbiB0aGUgYW5pbWF0aW9uIHdpbGwgc3RhcnQgYW5kIGVuZFxuICogaW1tZWRpYXRlbHkgcmVzdWx0aW5nIGluIGEgRE9NIGVsZW1lbnQgdGhhdCBpcyBhdCBpdHMgZmluYWwgc3RhdGUuIFRoaXMgZmluYWwgc3RhdGUgaXMgd2hlbiB0aGUgRE9NIGVsZW1lbnRcbiAqIGhhcyBubyBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGl0LlxuICpcbiAqIDxoMz5DU1MgU3RhZ2dlcmluZyBBbmltYXRpb25zPC9oMz5cbiAqIEEgU3RhZ2dlcmluZyBhbmltYXRpb24gaXMgYSBjb2xsZWN0aW9uIG9mIGFuaW1hdGlvbnMgdGhhdCBhcmUgaXNzdWVkIHdpdGggYSBzbGlnaHQgZGVsYXkgaW4gYmV0d2VlbiBlYWNoIHN1Y2Nlc3NpdmUgb3BlcmF0aW9uIHJlc3VsdGluZyBpbiBhXG4gKiBjdXJ0YWluLWxpa2UgZWZmZWN0LiBUaGUgbmdBbmltYXRlIG1vZHVsZSwgYXMgb2YgMS4yLjAsIHN1cHBvcnRzIHN0YWdnZXJpbmcgYW5pbWF0aW9ucyBhbmQgdGhlIHN0YWdnZXIgZWZmZWN0IGNhbiBiZVxuICogcGVyZm9ybWVkIGJ5IGNyZWF0aW5nIGEgKipuZy1FVkVOVC1zdGFnZ2VyKiogQ1NTIGNsYXNzIGFuZCBhdHRhY2hpbmcgdGhhdCBjbGFzcyB0byB0aGUgYmFzZSBDU1MgY2xhc3MgdXNlZCBmb3JcbiAqIHRoZSBhbmltYXRpb24uIFRoZSBzdHlsZSBwcm9wZXJ0eSBleHBlY3RlZCB3aXRoaW4gdGhlIHN0YWdnZXIgY2xhc3MgY2FuIGVpdGhlciBiZSBhICoqdHJhbnNpdGlvbi1kZWxheSoqIG9yIGFuXG4gKiAqKmFuaW1hdGlvbi1kZWxheSoqIHByb3BlcnR5IChvciBib3RoIGlmIHlvdXIgYW5pbWF0aW9uIGNvbnRhaW5zIGJvdGggdHJhbnNpdGlvbnMgYW5kIGtleWZyYW1lIGFuaW1hdGlvbnMpLlxuICpcbiAqIGBgYGNzc1xuICogLm15LWFuaW1hdGlvbi5uZy1lbnRlciB7XG4gKiAgIC8mIzQyOyBzdGFuZGFyZCB0cmFuc2l0aW9uIGNvZGUgJiM0MjsvXG4gKiAgIC13ZWJraXQtdHJhbnNpdGlvbjogMXMgbGluZWFyIGFsbDtcbiAqICAgdHJhbnNpdGlvbjogMXMgbGluZWFyIGFsbDtcbiAqICAgb3BhY2l0eTowO1xuICogfVxuICogLm15LWFuaW1hdGlvbi5uZy1lbnRlci1zdGFnZ2VyIHtcbiAqICAgLyYjNDI7IHRoaXMgd2lsbCBoYXZlIGEgMTAwbXMgZGVsYXkgYmV0d2VlbiBlYWNoIHN1Y2Nlc3NpdmUgbGVhdmUgYW5pbWF0aW9uICYjNDI7L1xuICogICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuMXM7XG4gKiAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMXM7XG4gKlxuICogICAvJiM0MjsgaW4gY2FzZSB0aGUgc3RhZ2dlciBkb2Vzbid0IHdvcmsgdGhlbiB0aGVzZSB0d28gdmFsdWVzXG4gKiAgICBtdXN0IGJlIHNldCB0byAwIHRvIGF2b2lkIGFuIGFjY2lkZW50YWwgQ1NTIGluaGVyaXRhbmNlICYjNDI7L1xuICogICAtd2Via2l0LXRyYW5zaXRpb24tZHVyYXRpb246IDBzO1xuICogICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwcztcbiAqIH1cbiAqIC5teS1hbmltYXRpb24ubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAqICAgLyYjNDI7IHN0YW5kYXJkIHRyYW5zaXRpb24gc3R5bGVzICYjNDI7L1xuICogICBvcGFjaXR5OjE7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBTdGFnZ2VyaW5nIGFuaW1hdGlvbnMgd29yayBieSBkZWZhdWx0IGluIG5nUmVwZWF0IChzbyBsb25nIGFzIHRoZSBDU1MgY2xhc3MgaXMgZGVmaW5lZCkuIE91dHNpZGUgb2YgbmdSZXBlYXQsIHRvIHVzZSBzdGFnZ2VyaW5nIGFuaW1hdGlvbnNcbiAqIG9uIHlvdXIgb3duLCB0aGV5IGNhbiBiZSB0cmlnZ2VyZWQgYnkgZmlyaW5nIG11bHRpcGxlIGNhbGxzIHRvIHRoZSBzYW1lIGV2ZW50IG9uICRhbmltYXRlLiBIb3dldmVyLCB0aGUgcmVzdHJpY3Rpb25zIHN1cnJvdW5kaW5nIHRoaXNcbiAqIGFyZSB0aGF0IGVhY2ggb2YgdGhlIGVsZW1lbnRzIG11c3QgaGF2ZSB0aGUgc2FtZSBDU1MgY2xhc3NOYW1lIHZhbHVlIGFzIHdlbGwgYXMgdGhlIHNhbWUgcGFyZW50IGVsZW1lbnQuIEEgc3RhZ2dlciBvcGVyYXRpb25cbiAqIHdpbGwgYWxzbyBiZSByZXNldCBpZiBtb3JlIHRoYW4gMTBtcyBoYXMgcGFzc2VkIGFmdGVyIHRoZSBsYXN0IGFuaW1hdGlvbiBoYXMgYmVlbiBmaXJlZC5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGNvZGUgd2lsbCBpc3N1ZSB0aGUgKipuZy1sZWF2ZS1zdGFnZ2VyKiogZXZlbnQgb24gdGhlIGVsZW1lbnQgcHJvdmlkZWQ6XG4gKlxuICogYGBganNcbiAqIHZhciBraWRzID0gcGFyZW50LmNoaWxkcmVuKCk7XG4gKlxuICogJGFuaW1hdGUubGVhdmUoa2lkc1swXSk7IC8vc3RhZ2dlciBpbmRleD0wXG4gKiAkYW5pbWF0ZS5sZWF2ZShraWRzWzFdKTsgLy9zdGFnZ2VyIGluZGV4PTFcbiAqICRhbmltYXRlLmxlYXZlKGtpZHNbMl0pOyAvL3N0YWdnZXIgaW5kZXg9MlxuICogJGFuaW1hdGUubGVhdmUoa2lkc1szXSk7IC8vc3RhZ2dlciBpbmRleD0zXG4gKiAkYW5pbWF0ZS5sZWF2ZShraWRzWzRdKTsgLy9zdGFnZ2VyIGluZGV4PTRcbiAqXG4gKiAkdGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgLy9zdGFnZ2VyIGhhcyByZXNldCBpdHNlbGZcbiAqICAgJGFuaW1hdGUubGVhdmUoa2lkc1s1XSk7IC8vc3RhZ2dlciBpbmRleD0wXG4gKiAgICRhbmltYXRlLmxlYXZlKGtpZHNbNl0pOyAvL3N0YWdnZXIgaW5kZXg9MVxuICogfSwgMTAwLCBmYWxzZSk7XG4gKiBgYGBcbiAqXG4gKiBTdGFnZ2VyIGFuaW1hdGlvbnMgYXJlIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCB3aXRoaW4gQ1NTLWRlZmluZWQgYW5pbWF0aW9ucy5cbiAqXG4gKiA8aDI+SmF2YVNjcmlwdC1kZWZpbmVkIEFuaW1hdGlvbnM8L2gyPlxuICogSW4gdGhlIGV2ZW50IHRoYXQgeW91IGRvIG5vdCB3YW50IHRvIHVzZSBDU1MzIHRyYW5zaXRpb25zIG9yIENTUzMgYW5pbWF0aW9ucyBvciBpZiB5b3Ugd2lzaCB0byBvZmZlciBhbmltYXRpb25zIG9uIGJyb3dzZXJzIHRoYXQgZG8gbm90XG4gKiB5ZXQgc3VwcG9ydCBDU1MgdHJhbnNpdGlvbnMvYW5pbWF0aW9ucywgdGhlbiB5b3UgY2FuIG1ha2UgdXNlIG9mIEphdmFTY3JpcHQgYW5pbWF0aW9ucyBkZWZpbmVkIGluc2lkZSBvZiB5b3VyIEFuZ3VsYXJKUyBtb2R1bGUuXG4gKlxuICogYGBganNcbiAqIC8vIWFubm90YXRlPVwiWW91ckFwcFwiIFlvdXIgQW5ndWxhckpTIE1vZHVsZXxSZXBsYWNlIHRoaXMgb3IgbmdNb2R1bGUgd2l0aCB0aGUgbW9kdWxlIHRoYXQgeW91IHVzZWQgdG8gZGVmaW5lIHlvdXIgYXBwbGljYXRpb24uXG4gKiB2YXIgbmdNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnWW91ckFwcCcsIFsnbmdBbmltYXRlJ10pO1xuICogbmdNb2R1bGUuYW5pbWF0aW9uKCcubXktY3JhenktYW5pbWF0aW9uJywgZnVuY3Rpb24oKSB7XG4gKiAgIHJldHVybiB7XG4gKiAgICAgZW50ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmUpIHtcbiAqICAgICAgIC8vcnVuIHRoZSBhbmltYXRpb24gaGVyZSBhbmQgY2FsbCBkb25lIHdoZW4gdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZVxuICogICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbmNlbGxlZCkge1xuICogICAgICAgICAvL3RoaXMgKG9wdGlvbmFsKSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBhbmltYXRpb25cbiAqICAgICAgICAgLy9jb21wbGV0ZXMgb3Igd2hlbiB0aGUgYW5pbWF0aW9uIGlzIGNhbmNlbGxlZCAodGhlIGNhbmNlbGxlZFxuICogICAgICAgICAvL2ZsYWcgd2lsbCBiZSBzZXQgdG8gdHJ1ZSBpZiBjYW5jZWxsZWQpLlxuICogICAgICAgfTtcbiAqICAgICB9LFxuICogICAgIGxlYXZlOiBmdW5jdGlvbihlbGVtZW50LCBkb25lKSB7IH0sXG4gKiAgICAgbW92ZTogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSkgeyB9LFxuICpcbiAqICAgICAvL2FuaW1hdGlvbiB0aGF0IGNhbiBiZSB0cmlnZ2VyZWQgYmVmb3JlIHRoZSBjbGFzcyBpcyBhZGRlZFxuICogICAgIGJlZm9yZUFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHsgfSxcbiAqXG4gKiAgICAgLy9hbmltYXRpb24gdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIGFmdGVyIHRoZSBjbGFzcyBpcyBhZGRlZFxuICogICAgIGFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHsgfSxcbiAqXG4gKiAgICAgLy9hbmltYXRpb24gdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIGJlZm9yZSB0aGUgY2xhc3MgaXMgcmVtb3ZlZFxuICogICAgIGJlZm9yZVJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHsgfSxcbiAqXG4gKiAgICAgLy9hbmltYXRpb24gdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIGFmdGVyIHRoZSBjbGFzcyBpcyByZW1vdmVkXG4gKiAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkgeyB9XG4gKiAgIH07XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEphdmFTY3JpcHQtZGVmaW5lZCBhbmltYXRpb25zIGFyZSBjcmVhdGVkIHdpdGggYSBDU1MtbGlrZSBjbGFzcyBzZWxlY3RvciBhbmQgYSBjb2xsZWN0aW9uIG9mIGV2ZW50cyB3aGljaCBhcmUgc2V0IHRvIHJ1blxuICogYSBqYXZhc2NyaXB0IGNhbGxiYWNrIGZ1bmN0aW9uLiBXaGVuIGFuIGFuaW1hdGlvbiBpcyB0cmlnZ2VyZWQsICRhbmltYXRlIHdpbGwgbG9vayBmb3IgYSBtYXRjaGluZyBhbmltYXRpb24gd2hpY2ggZml0c1xuICogdGhlIGVsZW1lbnQncyBDU1MgY2xhc3MgYXR0cmlidXRlIHZhbHVlIGFuZCB0aGVuIHJ1biB0aGUgbWF0Y2hpbmcgYW5pbWF0aW9uIGV2ZW50IGZ1bmN0aW9uIChpZiBmb3VuZCkuXG4gKiBJbiBvdGhlciB3b3JkcywgaWYgdGhlIENTUyBjbGFzc2VzIHByZXNlbnQgb24gdGhlIGFuaW1hdGVkIGVsZW1lbnQgbWF0Y2ggYW55IG9mIHRoZSBKYXZhU2NyaXB0IGFuaW1hdGlvbnMgdGhlbiB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2lsbFxuICogYmUgZXhlY3V0ZWQuIEl0IHNob3VsZCBiZSBhbHNvIG5vdGVkIHRoYXQgb25seSBzaW1wbGUsIHNpbmdsZSBjbGFzcyBzZWxlY3RvcnMgYXJlIGFsbG93ZWQgKGNvbXBvdW5kIGNsYXNzIHNlbGVjdG9ycyBhcmUgbm90IHN1cHBvcnRlZCkuXG4gKlxuICogV2l0aGluIGEgSmF2YVNjcmlwdCBhbmltYXRpb24sIGFuIG9iamVjdCBjb250YWluaW5nIHZhcmlvdXMgZXZlbnQgY2FsbGJhY2sgYW5pbWF0aW9uIGZ1bmN0aW9ucyBpcyBleHBlY3RlZCB0byBiZSByZXR1cm5lZC5cbiAqIEFzIGV4cGxhaW5lZCBhYm92ZSwgdGhlc2UgY2FsbGJhY2tzIGFyZSB0cmlnZ2VyZWQgYmFzZWQgb24gdGhlIGFuaW1hdGlvbiBldmVudC4gVGhlcmVmb3JlIGlmIGFuIGVudGVyIGFuaW1hdGlvbiBpcyBydW4sXG4gKiBhbmQgdGhlIEphdmFTY3JpcHQgYW5pbWF0aW9uIGlzIGZvdW5kLCB0aGVuIHRoZSBlbnRlciBjYWxsYmFjayB3aWxsIGhhbmRsZSB0aGF0IGFuaW1hdGlvbiAoaW4gYWRkaXRpb24gdG8gdGhlIENTUyBrZXlmcmFtZSBhbmltYXRpb25cbiAqIG9yIHRyYW5zaXRpb24gY29kZSB0aGF0IGlzIGRlZmluZWQgdmlhIGEgc3R5bGVzaGVldCkuXG4gKlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCduZ0FuaW1hdGUnLCBbJ25nJ10pXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm92aWRlclxuICAgKiBAbmFtZSAkYW5pbWF0ZVByb3ZpZGVyXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUaGUgYCRhbmltYXRlUHJvdmlkZXJgIGFsbG93cyBkZXZlbG9wZXJzIHRvIHJlZ2lzdGVyIEphdmFTY3JpcHQgYW5pbWF0aW9uIGV2ZW50IGhhbmRsZXJzIGRpcmVjdGx5IGluc2lkZSBvZiBhIG1vZHVsZS5cbiAgICogV2hlbiBhbiBhbmltYXRpb24gaXMgdHJpZ2dlcmVkLCB0aGUgJGFuaW1hdGUgc2VydmljZSB3aWxsIHF1ZXJ5IHRoZSAkYW5pbWF0ZSBzZXJ2aWNlIHRvIGZpbmQgYW55IGFuaW1hdGlvbnMgdGhhdCBtYXRjaFxuICAgKiB0aGUgcHJvdmlkZWQgbmFtZSB2YWx1ZS5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIHtAbGluayBuZ0FuaW1hdGUgYG5nQW5pbWF0ZWB9IG1vZHVsZSB0byBiZSBpbnN0YWxsZWQuXG4gICAqXG4gICAqIFBsZWFzZSB2aXNpdCB0aGUge0BsaW5rIG5nQW5pbWF0ZSBgbmdBbmltYXRlYH0gbW9kdWxlIG92ZXJ2aWV3IHBhZ2UgbGVhcm4gbW9yZSBhYm91dCBob3cgdG8gdXNlIGFuaW1hdGlvbnMgaW4geW91ciBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICovXG5cbiAgLy90aGlzIHByaXZhdGUgc2VydmljZSBpcyBvbmx5IHVzZWQgd2l0aGluIENTUy1lbmFibGVkIGFuaW1hdGlvbnNcbiAgLy9JRTggKyBJRTkgZG8gbm90IHN1cHBvcnQgckFGIG5hdGl2ZWx5LCBidXQgdGhhdCBpcyBmaW5lIHNpbmNlIHRoZXlcbiAgLy9hbHNvIGRvbid0IHN1cHBvcnQgdHJhbnNpdGlvbnMgYW5kIGtleWZyYW1lcyB3aGljaCBtZWFucyB0aGF0IHRoZSBjb2RlXG4gIC8vYmVsb3cgd2lsbCBuZXZlciBiZSB1c2VkIGJ5IHRoZSB0d28gYnJvd3NlcnMuXG4gIC5mYWN0b3J5KCckJGFuaW1hdGVSZWZsb3cnLCBbJyQkckFGJywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCQkckFGLCAkZG9jdW1lbnQpIHtcbiAgICB2YXIgYm9kID0gJGRvY3VtZW50WzBdLmJvZHk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGZuKSB7XG4gICAgICAvL3RoZSByZXR1cm5lZCBmdW5jdGlvbiBhY3RzIGFzIHRoZSBjYW5jZWxsYXRpb24gZnVuY3Rpb25cbiAgICAgIHJldHVybiAkJHJBRihmdW5jdGlvbigpIHtcbiAgICAgICAgLy90aGUgbGluZSBiZWxvdyB3aWxsIGZvcmNlIHRoZSBicm93c2VyIHRvIHBlcmZvcm0gYSByZXBhaW50XG4gICAgICAgIC8vc28gdGhhdCBhbGwgdGhlIGFuaW1hdGVkIGVsZW1lbnRzIHdpdGhpbiB0aGUgYW5pbWF0aW9uIGZyYW1lXG4gICAgICAgIC8vd2lsbCBiZSBwcm9wZXJseSB1cGRhdGVkIGFuZCBkcmF3biBvbiBzY3JlZW4uIFRoaXMgaXNcbiAgICAgICAgLy9yZXF1aXJlZCB0byBwZXJmb3JtIG11bHRpLWNsYXNzIENTUyBiYXNlZCBhbmltYXRpb25zIHdpdGhcbiAgICAgICAgLy9GaXJlZm94LiBETyBOT1QgUkVNT1ZFIFRISVMgTElORS5cbiAgICAgICAgdmFyIGEgPSBib2Qub2Zmc2V0V2lkdGggKyAxO1xuICAgICAgICBmbigpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfV0pXG5cbiAgLmNvbmZpZyhbJyRwcm92aWRlJywgJyRhbmltYXRlUHJvdmlkZXInLCBmdW5jdGlvbigkcHJvdmlkZSwgJGFuaW1hdGVQcm92aWRlcikge1xuICAgIHZhciBub29wID0gYW5ndWxhci5ub29wO1xuICAgIHZhciBmb3JFYWNoID0gYW5ndWxhci5mb3JFYWNoO1xuICAgIHZhciBzZWxlY3RvcnMgPSAkYW5pbWF0ZVByb3ZpZGVyLiQkc2VsZWN0b3JzO1xuXG4gICAgdmFyIEVMRU1FTlRfTk9ERSA9IDE7XG4gICAgdmFyIE5HX0FOSU1BVEVfU1RBVEUgPSAnJCRuZ0FuaW1hdGVTdGF0ZSc7XG4gICAgdmFyIE5HX0FOSU1BVEVfQ0xBU1NfTkFNRSA9ICduZy1hbmltYXRlJztcbiAgICB2YXIgcm9vdEFuaW1hdGVTdGF0ZSA9IHtydW5uaW5nOiB0cnVlfTtcblxuICAgIGZ1bmN0aW9uIGV4dHJhY3RFbGVtZW50Tm9kZShlbGVtZW50KSB7XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZWxtID0gZWxlbWVudFtpXTtcbiAgICAgICAgaWYoZWxtLm5vZGVUeXBlID09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgIHJldHVybiBlbG07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJpcENvbW1lbnRzRnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGFuZ3VsYXIuZWxlbWVudChleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTWF0Y2hpbmdFbGVtZW50KGVsbTEsIGVsbTIpIHtcbiAgICAgIHJldHVybiBleHRyYWN0RWxlbWVudE5vZGUoZWxtMSkgPT0gZXh0cmFjdEVsZW1lbnROb2RlKGVsbTIpO1xuICAgIH1cblxuICAgICRwcm92aWRlLmRlY29yYXRvcignJGFuaW1hdGUnLCBbJyRkZWxlZ2F0ZScsICckaW5qZWN0b3InLCAnJHNuaWZmZXInLCAnJHJvb3RFbGVtZW50JywgJyQkYXN5bmNDYWxsYmFjaycsICckcm9vdFNjb3BlJywgJyRkb2N1bWVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJGRlbGVnYXRlLCAgICRpbmplY3RvciwgICAkc25pZmZlciwgICAkcm9vdEVsZW1lbnQsICAgJCRhc3luY0NhbGxiYWNrLCAgICAkcm9vdFNjb3BlLCAgICRkb2N1bWVudCkge1xuXG4gICAgICB2YXIgZ2xvYmFsQW5pbWF0aW9uQ291bnRlciA9IDA7XG4gICAgICAkcm9vdEVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFLCByb290QW5pbWF0ZVN0YXRlKTtcblxuICAgICAgLy8gZGlzYWJsZSBhbmltYXRpb25zIGR1cmluZyBib290c3RyYXAsIGJ1dCBvbmNlIHdlIGJvb3RzdHJhcHBlZCwgd2FpdCBhZ2FpblxuICAgICAgLy8gZm9yIGFub3RoZXIgZGlnZXN0IHVudGlsIGVuYWJsaW5nIGFuaW1hdGlvbnMuIFRoZSByZWFzb24gd2h5IHdlIGRpZ2VzdCB0d2ljZVxuICAgICAgLy8gaXMgYmVjYXVzZSBhbGwgc3RydWN0dXJhbCBhbmltYXRpb25zIChlbnRlciwgbGVhdmUgYW5kIG1vdmUpIGFsbCBwZXJmb3JtIGFcbiAgICAgIC8vIHBvc3QgZGlnZXN0IG9wZXJhdGlvbiBiZWZvcmUgYW5pbWF0aW5nLiBJZiB3ZSBvbmx5IHdhaXQgZm9yIGEgc2luZ2xlIGRpZ2VzdFxuICAgICAgLy8gdG8gcGFzcyB0aGVuIHRoZSBzdHJ1Y3R1cmFsIGFuaW1hdGlvbiB3b3VsZCByZW5kZXIgaXRzIGFuaW1hdGlvbiBvbiBwYWdlIGxvYWQuXG4gICAgICAvLyAod2hpY2ggaXMgd2hhdCB3ZSdyZSB0cnlpbmcgdG8gYXZvaWQgd2hlbiB0aGUgYXBwbGljYXRpb24gZmlyc3QgYm9vdHMgdXAuKVxuICAgICAgJHJvb3RTY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJvb3RBbmltYXRlU3RhdGUucnVubmluZyA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY2xhc3NOYW1lRmlsdGVyID0gJGFuaW1hdGVQcm92aWRlci5jbGFzc05hbWVGaWx0ZXIoKTtcbiAgICAgIHZhciBpc0FuaW1hdGFibGVDbGFzc05hbWUgPSAhY2xhc3NOYW1lRmlsdGVyXG4gICAgICAgICAgICAgID8gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgICAgICAgIDogZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsYXNzTmFtZUZpbHRlci50ZXN0KGNsYXNzTmFtZSk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIGxvb2t1cChuYW1lKSB7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoZXMgPSBbXSxcbiAgICAgICAgICAgICAgZmxhZ01hcCA9IHt9LFxuICAgICAgICAgICAgICBjbGFzc2VzID0gbmFtZS5zdWJzdHIoMSkuc3BsaXQoJy4nKTtcblxuICAgICAgICAgIC8vdGhlIGVtcHR5IHN0cmluZyB2YWx1ZSBpcyB0aGUgZGVmYXVsdCBhbmltYXRpb25cbiAgICAgICAgICAvL29wZXJhdGlvbiB3aGljaCBwZXJmb3JtcyBDU1MgdHJhbnNpdGlvbiBhbmQga2V5ZnJhbWVcbiAgICAgICAgICAvL2FuaW1hdGlvbnMgc25pZmZpbmcuIFRoaXMgaXMgYWx3YXlzIGluY2x1ZGVkIGZvciBlYWNoXG4gICAgICAgICAgLy9lbGVtZW50IGFuaW1hdGlvbiBwcm9jZWR1cmUgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHNcbiAgICAgICAgICAvL3RyYW5zaXRpb25zIGFuZC9vciBrZXlmcmFtZSBhbmltYXRpb25zLiBUaGUgZGVmYXVsdFxuICAgICAgICAgIC8vYW5pbWF0aW9uIGlzIGFkZGVkIHRvIHRoZSB0b3Agb2YgdGhlIGxpc3QgdG8gcHJldmVudFxuICAgICAgICAgIC8vYW55IHByZXZpb3VzIGFuaW1hdGlvbnMgZnJvbSBhZmZlY3RpbmcgdGhlIGVsZW1lbnQgc3R5bGluZ1xuICAgICAgICAgIC8vcHJpb3IgdG8gdGhlIGVsZW1lbnQgYmVpbmcgYW5pbWF0ZWQuXG4gICAgICAgICAgaWYgKCRzbmlmZmVyLnRyYW5zaXRpb25zIHx8ICRzbmlmZmVyLmFuaW1hdGlvbnMpIHtcbiAgICAgICAgICAgIG1hdGNoZXMucHVzaCgkaW5qZWN0b3IuZ2V0KHNlbGVjdG9yc1snJ10pKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBrbGFzcyA9IGNsYXNzZXNbaV0sXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JGYWN0b3J5TmFtZSA9IHNlbGVjdG9yc1trbGFzc107XG4gICAgICAgICAgICBpZihzZWxlY3RvckZhY3RvcnlOYW1lICYmICFmbGFnTWFwW2tsYXNzXSkge1xuICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goJGluamVjdG9yLmdldChzZWxlY3RvckZhY3RvcnlOYW1lKSk7XG4gICAgICAgICAgICAgIGZsYWdNYXBba2xhc3NdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYW5pbWF0aW9uUnVubmVyKGVsZW1lbnQsIGFuaW1hdGlvbkV2ZW50LCBjbGFzc05hbWUpIHtcbiAgICAgICAgLy90cmFuc2NsdWRlZCBkaXJlY3RpdmVzIG1heSBzb21ldGltZXMgZmlyZSBhbiBhbmltYXRpb24gdXNpbmcgb25seSBjb21tZW50IG5vZGVzXG4gICAgICAgIC8vYmVzdCB0byBjYXRjaCB0aGlzIGVhcmx5IG9uIHRvIHByZXZlbnQgYW55IGFuaW1hdGlvbiBvcGVyYXRpb25zIGZyb20gb2NjdXJyaW5nXG4gICAgICAgIHZhciBub2RlID0gZWxlbWVudFswXTtcbiAgICAgICAgaWYoIW5vZGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXNTZXRDbGFzc09wZXJhdGlvbiA9IGFuaW1hdGlvbkV2ZW50ID09ICdzZXRDbGFzcyc7XG4gICAgICAgIHZhciBpc0NsYXNzQmFzZWQgPSBpc1NldENsYXNzT3BlcmF0aW9uIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25FdmVudCA9PSAnYWRkQ2xhc3MnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25FdmVudCA9PSAncmVtb3ZlQ2xhc3MnO1xuXG4gICAgICAgIHZhciBjbGFzc05hbWVBZGQsIGNsYXNzTmFtZVJlbW92ZTtcbiAgICAgICAgaWYoYW5ndWxhci5pc0FycmF5KGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICBjbGFzc05hbWVBZGQgPSBjbGFzc05hbWVbMF07XG4gICAgICAgICAgY2xhc3NOYW1lUmVtb3ZlID0gY2xhc3NOYW1lWzFdO1xuICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZUFkZCArICcgJyArIGNsYXNzTmFtZVJlbW92ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjdXJyZW50Q2xhc3NOYW1lID0gZWxlbWVudC5hdHRyKCdjbGFzcycpO1xuICAgICAgICB2YXIgY2xhc3NlcyA9IGN1cnJlbnRDbGFzc05hbWUgKyAnICcgKyBjbGFzc05hbWU7XG4gICAgICAgIGlmKCFpc0FuaW1hdGFibGVDbGFzc05hbWUoY2xhc3NlcykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYmVmb3JlQ29tcGxldGUgPSBub29wLFxuICAgICAgICAgICAgYmVmb3JlQ2FuY2VsID0gW10sXG4gICAgICAgICAgICBiZWZvcmUgPSBbXSxcbiAgICAgICAgICAgIGFmdGVyQ29tcGxldGUgPSBub29wLFxuICAgICAgICAgICAgYWZ0ZXJDYW5jZWwgPSBbXSxcbiAgICAgICAgICAgIGFmdGVyID0gW107XG5cbiAgICAgICAgdmFyIGFuaW1hdGlvbkxvb2t1cCA9ICgnICcgKyBjbGFzc2VzKS5yZXBsYWNlKC9cXHMrL2csJy4nKTtcbiAgICAgICAgZm9yRWFjaChsb29rdXAoYW5pbWF0aW9uTG9va3VwKSwgZnVuY3Rpb24oYW5pbWF0aW9uRmFjdG9yeSkge1xuICAgICAgICAgIHZhciBjcmVhdGVkID0gcmVnaXN0ZXJBbmltYXRpb24oYW5pbWF0aW9uRmFjdG9yeSwgYW5pbWF0aW9uRXZlbnQpO1xuICAgICAgICAgIGlmKCFjcmVhdGVkICYmIGlzU2V0Q2xhc3NPcGVyYXRpb24pIHtcbiAgICAgICAgICAgIHJlZ2lzdGVyQW5pbWF0aW9uKGFuaW1hdGlvbkZhY3RvcnksICdhZGRDbGFzcycpO1xuICAgICAgICAgICAgcmVnaXN0ZXJBbmltYXRpb24oYW5pbWF0aW9uRmFjdG9yeSwgJ3JlbW92ZUNsYXNzJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiByZWdpc3RlckFuaW1hdGlvbihhbmltYXRpb25GYWN0b3J5LCBldmVudCkge1xuICAgICAgICAgIHZhciBhZnRlckZuID0gYW5pbWF0aW9uRmFjdG9yeVtldmVudF07XG4gICAgICAgICAgdmFyIGJlZm9yZUZuID0gYW5pbWF0aW9uRmFjdG9yeVsnYmVmb3JlJyArIGV2ZW50LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZXZlbnQuc3Vic3RyKDEpXTtcbiAgICAgICAgICBpZihhZnRlckZuIHx8IGJlZm9yZUZuKSB7XG4gICAgICAgICAgICBpZihldmVudCA9PSAnbGVhdmUnKSB7XG4gICAgICAgICAgICAgIGJlZm9yZUZuID0gYWZ0ZXJGbjtcbiAgICAgICAgICAgICAgLy93aGVuIHNldCBhcyBudWxsIHRoZW4gYW5pbWF0aW9uIGtub3dzIHRvIHNraXAgdGhpcyBwaGFzZVxuICAgICAgICAgICAgICBhZnRlckZuID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyLnB1c2goe1xuICAgICAgICAgICAgICBldmVudCA6IGV2ZW50LCBmbiA6IGFmdGVyRm5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYmVmb3JlLnB1c2goe1xuICAgICAgICAgICAgICBldmVudCA6IGV2ZW50LCBmbiA6IGJlZm9yZUZuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJ1bihmbnMsIGNhbmNlbGxhdGlvbnMsIGFsbENvbXBsZXRlRm4pIHtcbiAgICAgICAgICB2YXIgYW5pbWF0aW9ucyA9IFtdO1xuICAgICAgICAgIGZvckVhY2goZm5zLCBmdW5jdGlvbihhbmltYXRpb24pIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5mbiAmJiBhbmltYXRpb25zLnB1c2goYW5pbWF0aW9uKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgICAgZnVuY3Rpb24gYWZ0ZXJBbmltYXRpb25Db21wbGV0ZShpbmRleCkge1xuICAgICAgICAgICAgaWYoY2FuY2VsbGF0aW9ucykge1xuICAgICAgICAgICAgICAoY2FuY2VsbGF0aW9uc1tpbmRleF0gfHwgbm9vcCkoKTtcbiAgICAgICAgICAgICAgaWYoKytjb3VudCA8IGFuaW1hdGlvbnMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICAgIGNhbmNlbGxhdGlvbnMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWxsQ29tcGxldGVGbigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vVGhlIGNvZGUgYmVsb3cgYWRkcyBkaXJlY3RseSB0byB0aGUgYXJyYXkgaW4gb3JkZXIgdG8gd29yayB3aXRoXG4gICAgICAgICAgLy9ib3RoIHN5bmMgYW5kIGFzeW5jIGFuaW1hdGlvbnMuIFN5bmMgYW5pbWF0aW9ucyBhcmUgd2hlbiB0aGUgZG9uZSgpXG4gICAgICAgICAgLy9vcGVyYXRpb24gaXMgY2FsbGVkIHJpZ2h0IGF3YXkuIERPIE5PVCBSRUZBQ1RPUiFcbiAgICAgICAgICBmb3JFYWNoKGFuaW1hdGlvbnMsIGZ1bmN0aW9uKGFuaW1hdGlvbiwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBwcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBhZnRlckFuaW1hdGlvbkNvbXBsZXRlKGluZGV4KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzd2l0Y2goYW5pbWF0aW9uLmV2ZW50KSB7XG4gICAgICAgICAgICAgIGNhc2UgJ3NldENsYXNzJzpcbiAgICAgICAgICAgICAgICBjYW5jZWxsYXRpb25zLnB1c2goYW5pbWF0aW9uLmZuKGVsZW1lbnQsIGNsYXNzTmFtZUFkZCwgY2xhc3NOYW1lUmVtb3ZlLCBwcm9ncmVzcykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdhZGRDbGFzcyc6XG4gICAgICAgICAgICAgICAgY2FuY2VsbGF0aW9ucy5wdXNoKGFuaW1hdGlvbi5mbihlbGVtZW50LCBjbGFzc05hbWVBZGQgfHwgY2xhc3NOYW1lLCAgICAgcHJvZ3Jlc3MpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAncmVtb3ZlQ2xhc3MnOlxuICAgICAgICAgICAgICAgIGNhbmNlbGxhdGlvbnMucHVzaChhbmltYXRpb24uZm4oZWxlbWVudCwgY2xhc3NOYW1lUmVtb3ZlIHx8IGNsYXNzTmFtZSwgIHByb2dyZXNzKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FuY2VsbGF0aW9ucy5wdXNoKGFuaW1hdGlvbi5mbihlbGVtZW50LCBwcm9ncmVzcykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYoY2FuY2VsbGF0aW9ucyAmJiBjYW5jZWxsYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgYWxsQ29tcGxldGVGbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbm9kZSA6IG5vZGUsXG4gICAgICAgICAgZXZlbnQgOiBhbmltYXRpb25FdmVudCxcbiAgICAgICAgICBjbGFzc05hbWUgOiBjbGFzc05hbWUsXG4gICAgICAgICAgaXNDbGFzc0Jhc2VkIDogaXNDbGFzc0Jhc2VkLFxuICAgICAgICAgIGlzU2V0Q2xhc3NPcGVyYXRpb24gOiBpc1NldENsYXNzT3BlcmF0aW9uLFxuICAgICAgICAgIGJlZm9yZSA6IGZ1bmN0aW9uKGFsbENvbXBsZXRlRm4pIHtcbiAgICAgICAgICAgIGJlZm9yZUNvbXBsZXRlID0gYWxsQ29tcGxldGVGbjtcbiAgICAgICAgICAgIHJ1bihiZWZvcmUsIGJlZm9yZUNhbmNlbCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGJlZm9yZUNvbXBsZXRlID0gbm9vcDtcbiAgICAgICAgICAgICAgYWxsQ29tcGxldGVGbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhZnRlciA6IGZ1bmN0aW9uKGFsbENvbXBsZXRlRm4pIHtcbiAgICAgICAgICAgIGFmdGVyQ29tcGxldGUgPSBhbGxDb21wbGV0ZUZuO1xuICAgICAgICAgICAgcnVuKGFmdGVyLCBhZnRlckNhbmNlbCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGFmdGVyQ29tcGxldGUgPSBub29wO1xuICAgICAgICAgICAgICBhbGxDb21wbGV0ZUZuKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNhbmNlbCA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYoYmVmb3JlQ2FuY2VsKSB7XG4gICAgICAgICAgICAgIGZvckVhY2goYmVmb3JlQ2FuY2VsLCBmdW5jdGlvbihjYW5jZWxGbikge1xuICAgICAgICAgICAgICAgIChjYW5jZWxGbiB8fCBub29wKSh0cnVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJlZm9yZUNvbXBsZXRlKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoYWZ0ZXJDYW5jZWwpIHtcbiAgICAgICAgICAgICAgZm9yRWFjaChhZnRlckNhbmNlbCwgZnVuY3Rpb24oY2FuY2VsRm4pIHtcbiAgICAgICAgICAgICAgICAoY2FuY2VsRm4gfHwgbm9vcCkodHJ1ZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBhZnRlckNvbXBsZXRlKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAgICogQG5hbWUgJGFuaW1hdGVcbiAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogVGhlIGAkYW5pbWF0ZWAgc2VydmljZSBwcm92aWRlcyBhbmltYXRpb24gZGV0ZWN0aW9uIHN1cHBvcnQgd2hpbGUgcGVyZm9ybWluZyBET00gb3BlcmF0aW9ucyAoZW50ZXIsIGxlYXZlIGFuZCBtb3ZlKSBhcyB3ZWxsIGFzIGR1cmluZyBhZGRDbGFzcyBhbmQgcmVtb3ZlQ2xhc3Mgb3BlcmF0aW9ucy5cbiAgICAgICAqIFdoZW4gYW55IG9mIHRoZXNlIG9wZXJhdGlvbnMgYXJlIHJ1biwgdGhlICRhbmltYXRlIHNlcnZpY2VcbiAgICAgICAqIHdpbGwgZXhhbWluZSBhbnkgSmF2YVNjcmlwdC1kZWZpbmVkIGFuaW1hdGlvbnMgKHdoaWNoIGFyZSBkZWZpbmVkIGJ5IHVzaW5nIHRoZSAkYW5pbWF0ZVByb3ZpZGVyIHByb3ZpZGVyIG9iamVjdClcbiAgICAgICAqIGFzIHdlbGwgYXMgYW55IENTUy1kZWZpbmVkIGFuaW1hdGlvbnMgYWdhaW5zdCB0aGUgQ1NTIGNsYXNzZXMgcHJlc2VudCBvbiB0aGUgZWxlbWVudCBvbmNlIHRoZSBET00gb3BlcmF0aW9uIGlzIHJ1bi5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgYCRhbmltYXRlYCBzZXJ2aWNlIGlzIHVzZWQgYmVoaW5kIHRoZSBzY2VuZXMgd2l0aCBwcmUtZXhpc3RpbmcgZGlyZWN0aXZlcyBhbmQgYW5pbWF0aW9uIHdpdGggdGhlc2UgZGlyZWN0aXZlc1xuICAgICAgICogd2lsbCB3b3JrIG91dCBvZiB0aGUgYm94IHdpdGhvdXQgYW55IGV4dHJhIGNvbmZpZ3VyYXRpb24uXG4gICAgICAgKlxuICAgICAgICogUmVxdWlyZXMgdGhlIHtAbGluayBuZ0FuaW1hdGUgYG5nQW5pbWF0ZWB9IG1vZHVsZSB0byBiZSBpbnN0YWxsZWQuXG4gICAgICAgKlxuICAgICAgICogUGxlYXNlIHZpc2l0IHRoZSB7QGxpbmsgbmdBbmltYXRlIGBuZ0FuaW1hdGVgfSBtb2R1bGUgb3ZlcnZpZXcgcGFnZSBsZWFybiBtb3JlIGFib3V0IGhvdyB0byB1c2UgYW5pbWF0aW9ucyBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgICAgICpcbiAgICAgICAqL1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGFuaW1hdGUjZW50ZXJcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBBcHBlbmRzIHRoZSBlbGVtZW50IHRvIHRoZSBwYXJlbnRFbGVtZW50IGVsZW1lbnQgdGhhdCByZXNpZGVzIGluIHRoZSBkb2N1bWVudCBhbmQgdGhlbiBydW5zIHRoZSBlbnRlciBhbmltYXRpb24uIE9uY2VcbiAgICAgICAgICogdGhlIGFuaW1hdGlvbiBpcyBzdGFydGVkLCB0aGUgZm9sbG93aW5nIENTUyBjbGFzc2VzIHdpbGwgYmUgcHJlc2VudCBvbiB0aGUgZWxlbWVudCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBhbmltYXRpb246XG4gICAgICAgICAqXG4gICAgICAgICAqIEJlbG93IGlzIGEgYnJlYWtkb3duIG9mIGVhY2ggc3RlcCB0aGF0IG9jY3VycyBkdXJpbmcgZW50ZXIgYW5pbWF0aW9uOlxuICAgICAgICAgKlxuICAgICAgICAgKiB8IEFuaW1hdGlvbiBTdGVwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgV2hhdCB0aGUgZWxlbWVudCBjbGFzcyBhdHRyaWJ1dGUgbG9va3MgbGlrZSB8XG4gICAgICAgICAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgICAgICAgICogfCAxLiAkYW5pbWF0ZS5lbnRlciguLi4pIGlzIGNhbGxlZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uXCIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMi4gZWxlbWVudCBpcyBpbnNlcnRlZCBpbnRvIHRoZSBwYXJlbnRFbGVtZW50IGVsZW1lbnQgb3IgYmVzaWRlIHRoZSBhZnRlckVsZW1lbnQgZWxlbWVudCAgICAgfCBjbGFzcz1cIm15LWFuaW1hdGlvblwiICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDMuICRhbmltYXRlIHJ1bnMgYW55IEphdmFTY3JpcHQtZGVmaW5lZCBhbmltYXRpb25zIG9uIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZVwiICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCA0LiB0aGUgLm5nLWVudGVyIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctZW50ZXJcIiAgICB8XG4gICAgICAgICAqIHwgNS4gJGFuaW1hdGUgc2NhbnMgdGhlIGVsZW1lbnQgc3R5bGVzIHRvIGdldCB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uIGR1cmF0aW9uIGFuZCBkZWxheSAgfCBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWVudGVyXCIgICAgfFxuICAgICAgICAgKiB8IDYuICRhbmltYXRlIHdhaXRzIGZvciAxMG1zICh0aGlzIHBlcmZvcm1zIGEgcmVmbG93KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1lbnRlclwiICAgIHxcbiAgICAgICAgICogfCA3LiB0aGUgLm5nLWVudGVyLWFjdGl2ZSBhbmQgLm5nLWFuaW1hdGUtYWN0aXZlIGNsYXNzZXMgYXJlIGFkZGVkICh0aGlzIHRyaWdnZXJzIHRoZSBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb24pIHwgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1hbmltYXRlLWFjdGl2ZSBuZy1lbnRlciBuZy1lbnRlci1hY3RpdmVcIiB8XG4gICAgICAgICAqIHwgOC4gJGFuaW1hdGUgd2FpdHMgZm9yIFggbWlsbGlzZWNvbmRzIGZvciB0aGUgYW5pbWF0aW9uIHRvIGNvbXBsZXRlICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWFuaW1hdGUtYWN0aXZlIG5nLWVudGVyIG5nLWVudGVyLWFjdGl2ZVwiIHxcbiAgICAgICAgICogfCA5LiBUaGUgYW5pbWF0aW9uIGVuZHMgYW5kIGFsbCBnZW5lcmF0ZWQgQ1NTIGNsYXNzZXMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uXCIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMTAuIFRoZSBkb25lQ2FsbGJhY2soKSBjYWxsYmFjayBpcyBmaXJlZCAoaWYgcHJvdmlkZWQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz1cIm15LWFuaW1hdGlvblwiICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHRoZSBmb2N1cyBvZiB0aGUgZW50ZXIgYW5pbWF0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50RWxlbWVudCB0aGUgcGFyZW50IGVsZW1lbnQgb2YgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHRoZSBmb2N1cyBvZiB0aGUgZW50ZXIgYW5pbWF0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gYWZ0ZXJFbGVtZW50IHRoZSBzaWJsaW5nIGVsZW1lbnQgKHdoaWNoIGlzIHRoZSBwcmV2aW91cyBlbGVtZW50KSBvZiB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgdGhlIGZvY3VzIG9mIHRoZSBlbnRlciBhbmltYXRpb25cbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbigpPX0gZG9uZUNhbGxiYWNrIHRoZSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZVxuICAgICAgICAqL1xuICAgICAgICBlbnRlciA6IGZ1bmN0aW9uKGVsZW1lbnQsIHBhcmVudEVsZW1lbnQsIGFmdGVyRWxlbWVudCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgICAgICAgdGhpcy5lbmFibGVkKGZhbHNlLCBlbGVtZW50KTtcbiAgICAgICAgICAkZGVsZWdhdGUuZW50ZXIoZWxlbWVudCwgcGFyZW50RWxlbWVudCwgYWZ0ZXJFbGVtZW50KTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBzdHJpcENvbW1lbnRzRnJvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICBwZXJmb3JtQW5pbWF0aW9uKCdlbnRlcicsICduZy1lbnRlcicsIGVsZW1lbnQsIHBhcmVudEVsZW1lbnQsIGFmdGVyRWxlbWVudCwgbm9vcCwgZG9uZUNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNsZWF2ZVxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJ1bnMgdGhlIGxlYXZlIGFuaW1hdGlvbiBvcGVyYXRpb24gYW5kLCB1cG9uIGNvbXBsZXRpb24sIHJlbW92ZXMgdGhlIGVsZW1lbnQgZnJvbSB0aGUgRE9NLiBPbmNlXG4gICAgICAgICAqIHRoZSBhbmltYXRpb24gaXMgc3RhcnRlZCwgdGhlIGZvbGxvd2luZyBDU1MgY2xhc3NlcyB3aWxsIGJlIGFkZGVkIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbjpcbiAgICAgICAgICpcbiAgICAgICAgICogQmVsb3cgaXMgYSBicmVha2Rvd24gb2YgZWFjaCBzdGVwIHRoYXQgb2NjdXJzIGR1cmluZyBsZWF2ZSBhbmltYXRpb246XG4gICAgICAgICAqXG4gICAgICAgICAqIHwgQW5pbWF0aW9uIFN0ZXAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBXaGF0IHRoZSBlbGVtZW50IGNsYXNzIGF0dHJpYnV0ZSBsb29rcyBsaWtlIHxcbiAgICAgICAgICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICAgICAgICAgKiB8IDEuICRhbmltYXRlLmxlYXZlKC4uLikgaXMgY2FsbGVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9XCJteS1hbmltYXRpb25cIiAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCAyLiAkYW5pbWF0ZSBydW5zIGFueSBKYXZhU2NyaXB0LWRlZmluZWQgYW5pbWF0aW9ucyBvbiB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGVcIiAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMy4gdGhlIC5uZy1sZWF2ZSBjbGFzcyBpcyBhZGRlZCB0byB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWxlYXZlXCIgICAgfFxuICAgICAgICAgKiB8IDQuICRhbmltYXRlIHNjYW5zIHRoZSBlbGVtZW50IHN0eWxlcyB0byBnZXQgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvbiBkdXJhdGlvbiBhbmQgZGVsYXkgIHwgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1sZWF2ZVwiICAgIHxcbiAgICAgICAgICogfCA1LiAkYW5pbWF0ZSB3YWl0cyBmb3IgMTBtcyAodGhpcyBwZXJmb3JtcyBhIHJlZmxvdykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctbGVhdmVcIiAgICB8XG4gICAgICAgICAqIHwgNi4gdGhlIC5uZy1sZWF2ZS1hY3RpdmUgYW5kIC5uZy1hbmltYXRlLWFjdGl2ZSBjbGFzc2VzIGlzIGFkZGVkICh0aGlzIHRyaWdnZXJzIHRoZSBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb24pIHwgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1hbmltYXRlLWFjdGl2ZSBuZy1sZWF2ZSBuZy1sZWF2ZS1hY3RpdmVcIiB8XG4gICAgICAgICAqIHwgNy4gJGFuaW1hdGUgd2FpdHMgZm9yIFggbWlsbGlzZWNvbmRzIGZvciB0aGUgYW5pbWF0aW9uIHRvIGNvbXBsZXRlICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWFuaW1hdGUtYWN0aXZlIG5nLWxlYXZlIG5nLWxlYXZlLWFjdGl2ZVwiIHxcbiAgICAgICAgICogfCA4LiBUaGUgYW5pbWF0aW9uIGVuZHMgYW5kIGFsbCBnZW5lcmF0ZWQgQ1NTIGNsYXNzZXMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uXCIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgOS4gVGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCAxMC4gVGhlIGRvbmVDYWxsYmFjaygpIGNhbGxiYWNrIGlzIGZpcmVkIChpZiBwcm92aWRlZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHRoZSBmb2N1cyBvZiB0aGUgbGVhdmUgYW5pbWF0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IGRvbmVDYWxsYmFjayB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGVcbiAgICAgICAgKi9cbiAgICAgICAgbGVhdmUgOiBmdW5jdGlvbihlbGVtZW50LCBkb25lQ2FsbGJhY2spIHtcbiAgICAgICAgICBjYW5jZWxDaGlsZEFuaW1hdGlvbnMoZWxlbWVudCk7XG4gICAgICAgICAgdGhpcy5lbmFibGVkKGZhbHNlLCBlbGVtZW50KTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHBlcmZvcm1BbmltYXRpb24oJ2xlYXZlJywgJ25nLWxlYXZlJywgc3RyaXBDb21tZW50c0Zyb21FbGVtZW50KGVsZW1lbnQpLCBudWxsLCBudWxsLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgJGRlbGVnYXRlLmxlYXZlKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSwgZG9uZUNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNtb3ZlXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogRmlyZXMgdGhlIG1vdmUgRE9NIG9wZXJhdGlvbi4gSnVzdCBiZWZvcmUgdGhlIGFuaW1hdGlvbiBzdGFydHMsIHRoZSBhbmltYXRlIHNlcnZpY2Ugd2lsbCBlaXRoZXIgYXBwZW5kIGl0IGludG8gdGhlIHBhcmVudEVsZW1lbnQgY29udGFpbmVyIG9yXG4gICAgICAgICAqIGFkZCB0aGUgZWxlbWVudCBkaXJlY3RseSBhZnRlciB0aGUgYWZ0ZXJFbGVtZW50IGVsZW1lbnQgaWYgcHJlc2VudC4gVGhlbiB0aGUgbW92ZSBhbmltYXRpb24gd2lsbCBiZSBydW4uIE9uY2VcbiAgICAgICAgICogdGhlIGFuaW1hdGlvbiBpcyBzdGFydGVkLCB0aGUgZm9sbG93aW5nIENTUyBjbGFzc2VzIHdpbGwgYmUgYWRkZWQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uOlxuICAgICAgICAgKlxuICAgICAgICAgKiBCZWxvdyBpcyBhIGJyZWFrZG93biBvZiBlYWNoIHN0ZXAgdGhhdCBvY2N1cnMgZHVyaW5nIG1vdmUgYW5pbWF0aW9uOlxuICAgICAgICAgKlxuICAgICAgICAgKiB8IEFuaW1hdGlvbiBTdGVwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgV2hhdCB0aGUgZWxlbWVudCBjbGFzcyBhdHRyaWJ1dGUgbG9va3MgbGlrZSB8XG4gICAgICAgICAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgICAgICAgICogfCAxLiAkYW5pbWF0ZS5tb3ZlKC4uLikgaXMgY2FsbGVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uXCIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMi4gZWxlbWVudCBpcyBtb3ZlZCBpbnRvIHRoZSBwYXJlbnRFbGVtZW50IGVsZW1lbnQgb3IgYmVzaWRlIHRoZSBhZnRlckVsZW1lbnQgZWxlbWVudCAgICAgICAgfCBjbGFzcz1cIm15LWFuaW1hdGlvblwiICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDMuICRhbmltYXRlIHJ1bnMgYW55IEphdmFTY3JpcHQtZGVmaW5lZCBhbmltYXRpb25zIG9uIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZVwiICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCA0LiB0aGUgLm5nLW1vdmUgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctbW92ZVwiICAgICB8XG4gICAgICAgICAqIHwgNS4gJGFuaW1hdGUgc2NhbnMgdGhlIGVsZW1lbnQgc3R5bGVzIHRvIGdldCB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uIGR1cmF0aW9uIGFuZCBkZWxheSAgfCBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLW1vdmVcIiAgICAgfFxuICAgICAgICAgKiB8IDYuICRhbmltYXRlIHdhaXRzIGZvciAxMG1zICh0aGlzIHBlcmZvcm1zIGEgcmVmbG93KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1tb3ZlXCIgICAgIHxcbiAgICAgICAgICogfCA3LiB0aGUgLm5nLW1vdmUtYWN0aXZlIGFuZCAubmctYW5pbWF0ZS1hY3RpdmUgY2xhc3NlcyBpcyBhZGRlZCAodGhpcyB0cmlnZ2VycyB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uKSB8IGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctYW5pbWF0ZS1hY3RpdmUgbmctbW92ZSBuZy1tb3ZlLWFjdGl2ZVwiIHxcbiAgICAgICAgICogfCA4LiAkYW5pbWF0ZSB3YWl0cyBmb3IgWCBtaWxsaXNlY29uZHMgZm9yIHRoZSBhbmltYXRpb24gdG8gY29tcGxldGUgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctYW5pbWF0ZS1hY3RpdmUgbmctbW92ZSBuZy1tb3ZlLWFjdGl2ZVwiIHxcbiAgICAgICAgICogfCA5LiBUaGUgYW5pbWF0aW9uIGVuZHMgYW5kIGFsbCBnZW5lcmF0ZWQgQ1NTIGNsYXNzZXMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uXCIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMTAuIFRoZSBkb25lQ2FsbGJhY2soKSBjYWxsYmFjayBpcyBmaXJlZCAoaWYgcHJvdmlkZWQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz1cIm15LWFuaW1hdGlvblwiICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHRoZSBmb2N1cyBvZiB0aGUgbW92ZSBhbmltYXRpb25cbiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnRFbGVtZW50IHRoZSBwYXJlbnRFbGVtZW50IGVsZW1lbnQgb2YgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHRoZSBmb2N1cyBvZiB0aGUgbW92ZSBhbmltYXRpb25cbiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBhZnRlckVsZW1lbnQgdGhlIHNpYmxpbmcgZWxlbWVudCAod2hpY2ggaXMgdGhlIHByZXZpb3VzIGVsZW1lbnQpIG9mIHRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSB0aGUgZm9jdXMgb2YgdGhlIG1vdmUgYW5pbWF0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IGRvbmVDYWxsYmFjayB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGVcbiAgICAgICAgKi9cbiAgICAgICAgbW92ZSA6IGZ1bmN0aW9uKGVsZW1lbnQsIHBhcmVudEVsZW1lbnQsIGFmdGVyRWxlbWVudCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FuY2VsQ2hpbGRBbmltYXRpb25zKGVsZW1lbnQpO1xuICAgICAgICAgIHRoaXMuZW5hYmxlZChmYWxzZSwgZWxlbWVudCk7XG4gICAgICAgICAgJGRlbGVnYXRlLm1vdmUoZWxlbWVudCwgcGFyZW50RWxlbWVudCwgYWZ0ZXJFbGVtZW50KTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBzdHJpcENvbW1lbnRzRnJvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICBwZXJmb3JtQW5pbWF0aW9uKCdtb3ZlJywgJ25nLW1vdmUnLCBlbGVtZW50LCBwYXJlbnRFbGVtZW50LCBhZnRlckVsZW1lbnQsIG5vb3AsIGRvbmVDYWxsYmFjayk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGFuaW1hdGUjYWRkQ2xhc3NcbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFRyaWdnZXJzIGEgY3VzdG9tIGFuaW1hdGlvbiBldmVudCBiYXNlZCBvZmYgdGhlIGNsYXNzTmFtZSB2YXJpYWJsZSBhbmQgdGhlbiBhdHRhY2hlcyB0aGUgY2xhc3NOYW1lIHZhbHVlIHRvIHRoZSBlbGVtZW50IGFzIGEgQ1NTIGNsYXNzLlxuICAgICAgICAgKiBVbmxpa2UgdGhlIG90aGVyIGFuaW1hdGlvbiBtZXRob2RzLCB0aGUgYW5pbWF0ZSBzZXJ2aWNlIHdpbGwgc3VmZml4IHRoZSBjbGFzc05hbWUgdmFsdWUgd2l0aCB7QHR5cGUgLWFkZH0gaW4gb3JkZXIgdG8gcHJvdmlkZVxuICAgICAgICAgKiB0aGUgYW5pbWF0ZSBzZXJ2aWNlIHRoZSBzZXR1cCBhbmQgYWN0aXZlIENTUyBjbGFzc2VzIGluIG9yZGVyIHRvIHRyaWdnZXIgdGhlIGFuaW1hdGlvbiAodGhpcyB3aWxsIGJlIHNraXBwZWQgaWYgbm8gQ1NTIHRyYW5zaXRpb25zXG4gICAgICAgICAqIG9yIGtleWZyYW1lcyBhcmUgZGVmaW5lZCBvbiB0aGUgLWFkZCBvciBiYXNlIENTUyBjbGFzcykuXG4gICAgICAgICAqXG4gICAgICAgICAqIEJlbG93IGlzIGEgYnJlYWtkb3duIG9mIGVhY2ggc3RlcCB0aGF0IG9jY3VycyBkdXJpbmcgYWRkQ2xhc3MgYW5pbWF0aW9uOlxuICAgICAgICAgKlxuICAgICAgICAgKiB8IEFuaW1hdGlvbiBTdGVwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBXaGF0IHRoZSBlbGVtZW50IGNsYXNzIGF0dHJpYnV0ZSBsb29rcyBsaWtlIHxcbiAgICAgICAgICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gICAgICAgICAqIHwgMS4gJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgJ3N1cGVyJykgaXMgY2FsbGVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uXCIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMi4gJGFuaW1hdGUgcnVucyBhbnkgSmF2YVNjcmlwdC1kZWZpbmVkIGFuaW1hdGlvbnMgb24gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGVcIiAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMy4gdGhlIC5zdXBlci1hZGQgY2xhc3MgYXJlIGFkZGVkIHRvIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgc3VwZXItYWRkXCIgICB8XG4gICAgICAgICAqIHwgNC4gJGFuaW1hdGUgc2NhbnMgdGhlIGVsZW1lbnQgc3R5bGVzIHRvIGdldCB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uIGR1cmF0aW9uIGFuZCBkZWxheSAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgc3VwZXItYWRkXCIgICB8XG4gICAgICAgICAqIHwgNS4gJGFuaW1hdGUgd2FpdHMgZm9yIDEwbXMgKHRoaXMgcGVyZm9ybXMgYSByZWZsb3cpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgc3VwZXItYWRkXCIgICB8XG4gICAgICAgICAqIHwgNi4gdGhlIC5zdXBlciwgLnN1cGVyLWFkZC1hY3RpdmUgYW5kIC5uZy1hbmltYXRlLWFjdGl2ZSBjbGFzc2VzIGFyZSBhZGRlZCAodGhpcyB0cmlnZ2VycyB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uKSB8IGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctYW5pbWF0ZS1hY3RpdmUgc3VwZXIgc3VwZXItYWRkIHN1cGVyLWFkZC1hY3RpdmVcIiAgICAgICAgICB8XG4gICAgICAgICAqIHwgNy4gJGFuaW1hdGUgd2FpdHMgZm9yIFggbWlsbGlzZWNvbmRzIGZvciB0aGUgYW5pbWF0aW9uIHRvIGNvbXBsZXRlICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uIHN1cGVyIHN1cGVyLWFkZCBzdXBlci1hZGQtYWN0aXZlXCIgIHxcbiAgICAgICAgICogfCA4LiBUaGUgYW5pbWF0aW9uIGVuZHMgYW5kIGFsbCBnZW5lcmF0ZWQgQ1NTIGNsYXNzZXMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCAgICAgICAgICAgICAgIHwgY2xhc3M9XCJteS1hbmltYXRpb24gc3VwZXJcIiAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCA5LiBUaGUgc3VwZXIgY2xhc3MgaXMga2VwdCBvbiB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9XCJteS1hbmltYXRpb24gc3VwZXJcIiAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCAxMC4gVGhlIGRvbmVDYWxsYmFjaygpIGNhbGxiYWNrIGlzIGZpcmVkIChpZiBwcm92aWRlZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9XCJteS1hbmltYXRpb24gc3VwZXJcIiAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSBhbmltYXRlZFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3MgdGhhdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50IGFuZCB0aGVuIGFuaW1hdGVkXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IGRvbmVDYWxsYmFjayB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBvbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGVcbiAgICAgICAgKi9cbiAgICAgICAgYWRkQ2xhc3MgOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGRvbmVDYWxsYmFjaykge1xuICAgICAgICAgIGVsZW1lbnQgPSBzdHJpcENvbW1lbnRzRnJvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgcGVyZm9ybUFuaW1hdGlvbignYWRkQ2xhc3MnLCBjbGFzc05hbWUsIGVsZW1lbnQsIG51bGwsIG51bGwsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJGRlbGVnYXRlLmFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgfSwgZG9uZUNhbGxiYWNrKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNyZW1vdmVDbGFzc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogVHJpZ2dlcnMgYSBjdXN0b20gYW5pbWF0aW9uIGV2ZW50IGJhc2VkIG9mZiB0aGUgY2xhc3NOYW1lIHZhcmlhYmxlIGFuZCB0aGVuIHJlbW92ZXMgdGhlIENTUyBjbGFzcyBwcm92aWRlZCBieSB0aGUgY2xhc3NOYW1lIHZhbHVlXG4gICAgICAgICAqIGZyb20gdGhlIGVsZW1lbnQuIFVubGlrZSB0aGUgb3RoZXIgYW5pbWF0aW9uIG1ldGhvZHMsIHRoZSBhbmltYXRlIHNlcnZpY2Ugd2lsbCBzdWZmaXggdGhlIGNsYXNzTmFtZSB2YWx1ZSB3aXRoIHtAdHlwZSAtcmVtb3ZlfSBpblxuICAgICAgICAgKiBvcmRlciB0byBwcm92aWRlIHRoZSBhbmltYXRlIHNlcnZpY2UgdGhlIHNldHVwIGFuZCBhY3RpdmUgQ1NTIGNsYXNzZXMgaW4gb3JkZXIgdG8gdHJpZ2dlciB0aGUgYW5pbWF0aW9uICh0aGlzIHdpbGwgYmUgc2tpcHBlZCBpZlxuICAgICAgICAgKiBubyBDU1MgdHJhbnNpdGlvbnMgb3Iga2V5ZnJhbWVzIGFyZSBkZWZpbmVkIG9uIHRoZSAtcmVtb3ZlIG9yIGJhc2UgQ1NTIGNsYXNzZXMpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBCZWxvdyBpcyBhIGJyZWFrZG93biBvZiBlYWNoIHN0ZXAgdGhhdCBvY2N1cnMgZHVyaW5nIHJlbW92ZUNsYXNzIGFuaW1hdGlvbjpcbiAgICAgICAgICpcbiAgICAgICAgICogfCBBbmltYXRpb24gU3RlcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBXaGF0IHRoZSBlbGVtZW50IGNsYXNzIGF0dHJpYnV0ZSBsb29rcyBsaWtlICAgICB8XG4gICAgICAgICAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gICAgICAgICAqIHwgMS4gJGFuaW1hdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgJ3N1cGVyJykgaXMgY2FsbGVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9XCJteS1hbmltYXRpb24gc3VwZXJcIiAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCAyLiAkYW5pbWF0ZSBydW5zIGFueSBKYXZhU2NyaXB0LWRlZmluZWQgYW5pbWF0aW9ucyBvbiB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz1cIm15LWFuaW1hdGlvbiBzdXBlciBuZy1hbmltYXRlXCIgICAgICAgfFxuICAgICAgICAgKiB8IDMuIHRoZSAuc3VwZXItcmVtb3ZlIGNsYXNzIGFyZSBhZGRlZCB0byB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uIHN1cGVyIG5nLWFuaW1hdGUgc3VwZXItcmVtb3ZlXCJ8XG4gICAgICAgICAqIHwgNC4gJGFuaW1hdGUgc2NhbnMgdGhlIGVsZW1lbnQgc3R5bGVzIHRvIGdldCB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uIGR1cmF0aW9uIGFuZCBkZWxheSAgIHwgY2xhc3M9XCJteS1hbmltYXRpb24gc3VwZXIgbmctYW5pbWF0ZSBzdXBlci1yZW1vdmVcIiAgIHxcbiAgICAgICAgICogfCA1LiAkYW5pbWF0ZSB3YWl0cyBmb3IgMTBtcyAodGhpcyBwZXJmb3JtcyBhIHJlZmxvdykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz1cIm15LWFuaW1hdGlvbiBzdXBlciBuZy1hbmltYXRlIHN1cGVyLXJlbW92ZVwiICAgfFxuICAgICAgICAgKiB8IDYuIHRoZSAuc3VwZXItcmVtb3ZlLWFjdGl2ZSBhbmQgLm5nLWFuaW1hdGUtYWN0aXZlIGNsYXNzZXMgYXJlIGFkZGVkIGFuZCAuc3VwZXIgaXMgcmVtb3ZlZCAodGhpcyB0cmlnZ2VycyB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uKSB8IGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctYW5pbWF0ZS1hY3RpdmUgc3VwZXItcmVtb3ZlIHN1cGVyLXJlbW92ZS1hY3RpdmVcIiAgICAgICAgICB8XG4gICAgICAgICAqIHwgNy4gJGFuaW1hdGUgd2FpdHMgZm9yIFggbWlsbGlzZWNvbmRzIGZvciB0aGUgYW5pbWF0aW9uIHRvIGNvbXBsZXRlICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1hbmltYXRlLWFjdGl2ZSBzdXBlci1yZW1vdmUgc3VwZXItcmVtb3ZlLWFjdGl2ZVwiICAgfFxuICAgICAgICAgKiB8IDguIFRoZSBhbmltYXRpb24gZW5kcyBhbmQgYWxsIGdlbmVyYXRlZCBDU1MgY2xhc3NlcyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50ICAgICAgICAgICAgICB8IGNsYXNzPVwibXktYW5pbWF0aW9uXCIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgOS4gVGhlIGRvbmVDYWxsYmFjaygpIGNhbGxiYWNrIGlzIGZpcmVkIChpZiBwcm92aWRlZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9XCJteS1hbmltYXRpb25cIiAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICpcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSBhbmltYXRlZFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3MgdGhhdCB3aWxsIGJlIGFuaW1hdGVkIGFuZCB0aGVuIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudFxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk9fSBkb25lQ2FsbGJhY2sgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlXG4gICAgICAgICovXG4gICAgICAgIHJlbW92ZUNsYXNzIDogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lQ2FsbGJhY2spIHtcbiAgICAgICAgICBlbGVtZW50ID0gc3RyaXBDb21tZW50c0Zyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAgIHBlcmZvcm1BbmltYXRpb24oJ3JlbW92ZUNsYXNzJywgY2xhc3NOYW1lLCBlbGVtZW50LCBudWxsLCBudWxsLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRkZWxlZ2F0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgIH0sIGRvbmVDYWxsYmFjayk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAgICAgICAqIEBuYW1lICRhbmltYXRlI3NldENsYXNzXG4gICAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZHMgYW5kL29yIHJlbW92ZXMgdGhlIGdpdmVuIENTUyBjbGFzc2VzIHRvIGFuZCBmcm9tIHRoZSBlbGVtZW50LlxuICAgICAgICAgICAqIE9uY2UgY29tcGxldGUsIHRoZSBkb25lKCkgY2FsbGJhY2sgd2lsbCBiZSBmaXJlZCAoaWYgcHJvdmlkZWQpLlxuICAgICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGl0J3MgQ1NTIGNsYXNzZXMgY2hhbmdlZFxuICAgICAgICAgICAqICAgcmVtb3ZlZCBmcm9tIGl0XG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGFkZCB0aGUgQ1NTIGNsYXNzZXMgd2hpY2ggd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudFxuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdmUgdGhlIENTUyBjbGFzcyB3aGljaCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudFxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBkb25lIHRoZSBjYWxsYmFjayBmdW5jdGlvbiAoaWYgcHJvdmlkZWQpIHRoYXQgd2lsbCBiZSBmaXJlZCBhZnRlciB0aGVcbiAgICAgICAgICAgKiAgIENTUyBjbGFzc2VzIGhhdmUgYmVlbiBzZXQgb24gdGhlIGVsZW1lbnRcbiAgICAgICAgICAgKi9cbiAgICAgICAgc2V0Q2xhc3MgOiBmdW5jdGlvbihlbGVtZW50LCBhZGQsIHJlbW92ZSwgZG9uZUNhbGxiYWNrKSB7XG4gICAgICAgICAgZWxlbWVudCA9IHN0cmlwQ29tbWVudHNGcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgICBwZXJmb3JtQW5pbWF0aW9uKCdzZXRDbGFzcycsIFthZGQsIHJlbW92ZV0sIGVsZW1lbnQsIG51bGwsIG51bGwsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJGRlbGVnYXRlLnNldENsYXNzKGVsZW1lbnQsIGFkZCwgcmVtb3ZlKTtcbiAgICAgICAgICB9LCBkb25lQ2FsbGJhY2spO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRhbmltYXRlI2VuYWJsZWRcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHByb3ZpZGVkIHRoZW4gc2V0IHRoZSBhbmltYXRpb24gb24gb3Igb2ZmLlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSBlbGVtZW50IElmIHByb3ZpZGVkIHRoZW4gdGhlIGVsZW1lbnQgd2lsbCBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aGUgZW5hYmxlL2Rpc2FibGUgb3BlcmF0aW9uXG4gICAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IEN1cnJlbnQgYW5pbWF0aW9uIHN0YXRlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogR2xvYmFsbHkgZW5hYmxlcy9kaXNhYmxlcyBhbmltYXRpb25zLlxuICAgICAgICAgKlxuICAgICAgICAqL1xuICAgICAgICBlbmFibGVkIDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBpZih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNsZWFudXAoZWxlbWVudCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9TVEFURSkgfHwge307XG4gICAgICAgICAgICAgICAgZGF0YS5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUsIGRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICByb290QW5pbWF0ZVN0YXRlLmRpc2FibGVkID0gIXZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHZhbHVlID0gIXJvb3RBbmltYXRlU3RhdGUuZGlzYWJsZWQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICEhdmFsdWU7XG4gICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvKlxuICAgICAgICBhbGwgYW5pbWF0aW9ucyBjYWxsIHRoaXMgc2hhcmVkIGFuaW1hdGlvbiB0cmlnZ2VyaW5nIGZ1bmN0aW9uIGludGVybmFsbHkuXG4gICAgICAgIFRoZSBhbmltYXRpb25FdmVudCB2YXJpYWJsZSByZWZlcnMgdG8gdGhlIEphdmFTY3JpcHQgYW5pbWF0aW9uIGV2ZW50IHRoYXQgd2lsbCBiZSB0cmlnZ2VyZWRcbiAgICAgICAgYW5kIHRoZSBjbGFzc05hbWUgdmFsdWUgaXMgdGhlIG5hbWUgb2YgdGhlIGFuaW1hdGlvbiB0aGF0IHdpbGwgYmUgYXBwbGllZCB3aXRoaW4gdGhlXG4gICAgICAgIENTUyBjb2RlLiBFbGVtZW50LCBwYXJlbnRFbGVtZW50IGFuZCBhZnRlckVsZW1lbnQgYXJlIHByb3ZpZGVkIERPTSBlbGVtZW50cyBmb3IgdGhlIGFuaW1hdGlvblxuICAgICAgICBhbmQgdGhlIG9uQ29tcGxldGUgY2FsbGJhY2sgd2lsbCBiZSBmaXJlZCBvbmNlIHRoZSBhbmltYXRpb24gaXMgZnVsbHkgY29tcGxldGUuXG4gICAgICAqL1xuICAgICAgZnVuY3Rpb24gcGVyZm9ybUFuaW1hdGlvbihhbmltYXRpb25FdmVudCwgY2xhc3NOYW1lLCBlbGVtZW50LCBwYXJlbnRFbGVtZW50LCBhZnRlckVsZW1lbnQsIGRvbU9wZXJhdGlvbiwgZG9uZUNhbGxiYWNrKSB7XG5cbiAgICAgICAgdmFyIHJ1bm5lciA9IGFuaW1hdGlvblJ1bm5lcihlbGVtZW50LCBhbmltYXRpb25FdmVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgaWYoIXJ1bm5lcikge1xuICAgICAgICAgIGZpcmVET01PcGVyYXRpb24oKTtcbiAgICAgICAgICBmaXJlQmVmb3JlQ2FsbGJhY2tBc3luYygpO1xuICAgICAgICAgIGZpcmVBZnRlckNhbGxiYWNrQXN5bmMoKTtcbiAgICAgICAgICBjbG9zZUFuaW1hdGlvbigpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsYXNzTmFtZSA9IHJ1bm5lci5jbGFzc05hbWU7XG4gICAgICAgIHZhciBlbGVtZW50RXZlbnRzID0gYW5ndWxhci5lbGVtZW50Ll9kYXRhKHJ1bm5lci5ub2RlKTtcbiAgICAgICAgZWxlbWVudEV2ZW50cyA9IGVsZW1lbnRFdmVudHMgJiYgZWxlbWVudEV2ZW50cy5ldmVudHM7XG5cbiAgICAgICAgaWYgKCFwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgcGFyZW50RWxlbWVudCA9IGFmdGVyRWxlbWVudCA/IGFmdGVyRWxlbWVudC5wYXJlbnQoKSA6IGVsZW1lbnQucGFyZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmdBbmltYXRlU3RhdGUgID0gZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUpIHx8IHt9O1xuICAgICAgICB2YXIgcnVubmluZ0FuaW1hdGlvbnMgICAgID0gbmdBbmltYXRlU3RhdGUuYWN0aXZlIHx8IHt9O1xuICAgICAgICB2YXIgdG90YWxBY3RpdmVBbmltYXRpb25zID0gbmdBbmltYXRlU3RhdGUudG90YWxBY3RpdmUgfHwgMDtcbiAgICAgICAgdmFyIGxhc3RBbmltYXRpb24gICAgICAgICA9IG5nQW5pbWF0ZVN0YXRlLmxhc3Q7XG5cbiAgICAgICAgLy9vbmx5IGFsbG93IGFuaW1hdGlvbnMgaWYgdGhlIGN1cnJlbnRseSBydW5uaW5nIGFuaW1hdGlvbiBpcyBub3Qgc3RydWN0dXJhbFxuICAgICAgICAvL29yIGlmIHRoZXJlIGlzIG5vIGFuaW1hdGlvbiBydW5uaW5nIGF0IGFsbFxuICAgICAgICB2YXIgc2tpcEFuaW1hdGlvbnMgPSBydW5uZXIuaXNDbGFzc0Jhc2VkID9cbiAgICAgICAgICBuZ0FuaW1hdGVTdGF0ZS5kaXNhYmxlZCB8fCAobGFzdEFuaW1hdGlvbiAmJiAhbGFzdEFuaW1hdGlvbi5pc0NsYXNzQmFzZWQpIDpcbiAgICAgICAgICBmYWxzZTtcblxuICAgICAgICAvL3NraXAgdGhlIGFuaW1hdGlvbiBpZiBhbmltYXRpb25zIGFyZSBkaXNhYmxlZCwgYSBwYXJlbnQgaXMgYWxyZWFkeSBiZWluZyBhbmltYXRlZCxcbiAgICAgICAgLy90aGUgZWxlbWVudCBpcyBub3QgY3VycmVudGx5IGF0dGFjaGVkIHRvIHRoZSBkb2N1bWVudCBib2R5IG9yIHRoZW4gY29tcGxldGVseSBjbG9zZVxuICAgICAgICAvL3RoZSBhbmltYXRpb24gaWYgYW55IG1hdGNoaW5nIGFuaW1hdGlvbnMgYXJlIG5vdCBmb3VuZCBhdCBhbGwuXG4gICAgICAgIC8vTk9URTogSUU4ICsgSUU5IHNob3VsZCBjbG9zZSBwcm9wZXJseSAocnVuIGNsb3NlQW5pbWF0aW9uKCkpIGluIGNhc2UgYW4gYW5pbWF0aW9uIHdhcyBmb3VuZC5cbiAgICAgICAgaWYgKHNraXBBbmltYXRpb25zIHx8IGFuaW1hdGlvbnNEaXNhYmxlZChlbGVtZW50LCBwYXJlbnRFbGVtZW50KSkge1xuICAgICAgICAgIGZpcmVET01PcGVyYXRpb24oKTtcbiAgICAgICAgICBmaXJlQmVmb3JlQ2FsbGJhY2tBc3luYygpO1xuICAgICAgICAgIGZpcmVBZnRlckNhbGxiYWNrQXN5bmMoKTtcbiAgICAgICAgICBjbG9zZUFuaW1hdGlvbigpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBza2lwQW5pbWF0aW9uID0gZmFsc2U7XG4gICAgICAgIGlmKHRvdGFsQWN0aXZlQW5pbWF0aW9ucyA+IDApIHtcbiAgICAgICAgICB2YXIgYW5pbWF0aW9uc1RvQ2FuY2VsID0gW107XG4gICAgICAgICAgaWYoIXJ1bm5lci5pc0NsYXNzQmFzZWQpIHtcbiAgICAgICAgICAgIGlmKGFuaW1hdGlvbkV2ZW50ID09ICdsZWF2ZScgJiYgcnVubmluZ0FuaW1hdGlvbnNbJ25nLWxlYXZlJ10pIHtcbiAgICAgICAgICAgICAgc2tpcEFuaW1hdGlvbiA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvL2NhbmNlbCBhbGwgYW5pbWF0aW9ucyB3aGVuIGEgc3RydWN0dXJhbCBhbmltYXRpb24gdGFrZXMgcGxhY2VcbiAgICAgICAgICAgICAgZm9yKHZhciBrbGFzcyBpbiBydW5uaW5nQW5pbWF0aW9ucykge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnNUb0NhbmNlbC5wdXNoKHJ1bm5pbmdBbmltYXRpb25zW2tsYXNzXSk7XG4gICAgICAgICAgICAgICAgY2xlYW51cChlbGVtZW50LCBrbGFzcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcnVubmluZ0FuaW1hdGlvbnMgPSB7fTtcbiAgICAgICAgICAgICAgdG90YWxBY3RpdmVBbmltYXRpb25zID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYobGFzdEFuaW1hdGlvbi5ldmVudCA9PSAnc2V0Q2xhc3MnKSB7XG4gICAgICAgICAgICBhbmltYXRpb25zVG9DYW5jZWwucHVzaChsYXN0QW5pbWF0aW9uKTtcbiAgICAgICAgICAgIGNsZWFudXAoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZihydW5uaW5nQW5pbWF0aW9uc1tjbGFzc05hbWVdKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHJ1bm5pbmdBbmltYXRpb25zW2NsYXNzTmFtZV07XG4gICAgICAgICAgICBpZihjdXJyZW50LmV2ZW50ID09IGFuaW1hdGlvbkV2ZW50KSB7XG4gICAgICAgICAgICAgIHNraXBBbmltYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uc1RvQ2FuY2VsLnB1c2goY3VycmVudCk7XG4gICAgICAgICAgICAgIGNsZWFudXAoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZihhbmltYXRpb25zVG9DYW5jZWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yRWFjaChhbmltYXRpb25zVG9DYW5jZWwsIGZ1bmN0aW9uKG9wZXJhdGlvbikge1xuICAgICAgICAgICAgICBvcGVyYXRpb24uY2FuY2VsKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZihydW5uZXIuaXNDbGFzc0Jhc2VkICYmICFydW5uZXIuaXNTZXRDbGFzc09wZXJhdGlvbiAmJiAhc2tpcEFuaW1hdGlvbikge1xuICAgICAgICAgIHNraXBBbmltYXRpb24gPSAoYW5pbWF0aW9uRXZlbnQgPT0gJ2FkZENsYXNzJykgPT0gZWxlbWVudC5oYXNDbGFzcyhjbGFzc05hbWUpOyAvL29wcG9zaXRlIG9mIFhPUlxuICAgICAgICB9XG5cbiAgICAgICAgaWYoc2tpcEFuaW1hdGlvbikge1xuICAgICAgICAgIGZpcmVCZWZvcmVDYWxsYmFja0FzeW5jKCk7XG4gICAgICAgICAgZmlyZUFmdGVyQ2FsbGJhY2tBc3luYygpO1xuICAgICAgICAgIGZpcmVEb25lQ2FsbGJhY2tBc3luYygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGFuaW1hdGlvbkV2ZW50ID09ICdsZWF2ZScpIHtcbiAgICAgICAgICAvL3RoZXJlJ3Mgbm8gbmVlZCB0byBldmVyIHJlbW92ZSB0aGUgbGlzdGVuZXIgc2luY2UgdGhlIGVsZW1lbnRcbiAgICAgICAgICAvL3dpbGwgYmUgcmVtb3ZlZCAoZGVzdHJveWVkKSBhZnRlciB0aGUgbGVhdmUgYW5pbWF0aW9uIGVuZHMgb3JcbiAgICAgICAgICAvL2lzIGNhbmNlbGxlZCBtaWR3YXlcbiAgICAgICAgICBlbGVtZW50Lm9uZSgnJGRlc3Ryb3knLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFKTtcbiAgICAgICAgICAgIGlmKHN0YXRlKSB7XG4gICAgICAgICAgICAgIHZhciBhY3RpdmVMZWF2ZUFuaW1hdGlvbiA9IHN0YXRlLmFjdGl2ZVsnbmctbGVhdmUnXTtcbiAgICAgICAgICAgICAgaWYoYWN0aXZlTGVhdmVBbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVMZWF2ZUFuaW1hdGlvbi5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgICBjbGVhbnVwKGVsZW1lbnQsICduZy1sZWF2ZScpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL3RoZSBuZy1hbmltYXRlIGNsYXNzIGRvZXMgbm90aGluZywgYnV0IGl0J3MgaGVyZSB0byBhbGxvdyBmb3JcbiAgICAgICAgLy9wYXJlbnQgYW5pbWF0aW9ucyB0byBmaW5kIGFuZCBjYW5jZWwgY2hpbGQgYW5pbWF0aW9ucyB3aGVuIG5lZWRlZFxuICAgICAgICBlbGVtZW50LmFkZENsYXNzKE5HX0FOSU1BVEVfQ0xBU1NfTkFNRSk7XG5cbiAgICAgICAgdmFyIGxvY2FsQW5pbWF0aW9uQ291bnQgPSBnbG9iYWxBbmltYXRpb25Db3VudGVyKys7XG4gICAgICAgIHRvdGFsQWN0aXZlQW5pbWF0aW9ucysrO1xuICAgICAgICBydW5uaW5nQW5pbWF0aW9uc1tjbGFzc05hbWVdID0gcnVubmVyO1xuXG4gICAgICAgIGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFLCB7XG4gICAgICAgICAgbGFzdCA6IHJ1bm5lcixcbiAgICAgICAgICBhY3RpdmUgOiBydW5uaW5nQW5pbWF0aW9ucyxcbiAgICAgICAgICBpbmRleCA6IGxvY2FsQW5pbWF0aW9uQ291bnQsXG4gICAgICAgICAgdG90YWxBY3RpdmUgOiB0b3RhbEFjdGl2ZUFuaW1hdGlvbnNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9maXJzdCB3ZSBydW4gdGhlIGJlZm9yZSBhbmltYXRpb25zIGFuZCB3aGVuIGFsbCBvZiB0aG9zZSBhcmUgY29tcGxldGVcbiAgICAgICAgLy90aGVuIHdlIHBlcmZvcm0gdGhlIERPTSBvcGVyYXRpb24gYW5kIHJ1biB0aGUgbmV4dCBzZXQgb2YgYW5pbWF0aW9uc1xuICAgICAgICBmaXJlQmVmb3JlQ2FsbGJhY2tBc3luYygpO1xuICAgICAgICBydW5uZXIuYmVmb3JlKGZ1bmN0aW9uKGNhbmNlbGxlZCkge1xuICAgICAgICAgIHZhciBkYXRhID0gZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUpO1xuICAgICAgICAgIGNhbmNlbGxlZCA9IGNhbmNlbGxlZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIWRhdGEgfHwgIWRhdGEuYWN0aXZlW2NsYXNzTmFtZV0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChydW5uZXIuaXNDbGFzc0Jhc2VkICYmIGRhdGEuYWN0aXZlW2NsYXNzTmFtZV0uZXZlbnQgIT0gYW5pbWF0aW9uRXZlbnQpO1xuXG4gICAgICAgICAgZmlyZURPTU9wZXJhdGlvbigpO1xuICAgICAgICAgIGlmKGNhbmNlbGxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY2xvc2VBbmltYXRpb24oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmlyZUFmdGVyQ2FsbGJhY2tBc3luYygpO1xuICAgICAgICAgICAgcnVubmVyLmFmdGVyKGNsb3NlQW5pbWF0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGZpcmVET01DYWxsYmFjayhhbmltYXRpb25QaGFzZSkge1xuICAgICAgICAgIHZhciBldmVudE5hbWUgPSAnJGFuaW1hdGU6JyArIGFuaW1hdGlvblBoYXNlO1xuICAgICAgICAgIGlmKGVsZW1lbnRFdmVudHMgJiYgZWxlbWVudEV2ZW50c1tldmVudE5hbWVdICYmIGVsZW1lbnRFdmVudHNbZXZlbnROYW1lXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAkJGFzeW5jQ2FsbGJhY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQudHJpZ2dlckhhbmRsZXIoZXZlbnROYW1lLCB7XG4gICAgICAgICAgICAgICAgZXZlbnQgOiBhbmltYXRpb25FdmVudCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgOiBjbGFzc05hbWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmaXJlQmVmb3JlQ2FsbGJhY2tBc3luYygpIHtcbiAgICAgICAgICBmaXJlRE9NQ2FsbGJhY2soJ2JlZm9yZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZmlyZUFmdGVyQ2FsbGJhY2tBc3luYygpIHtcbiAgICAgICAgICBmaXJlRE9NQ2FsbGJhY2soJ2FmdGVyJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmaXJlRG9uZUNhbGxiYWNrQXN5bmMoKSB7XG4gICAgICAgICAgZmlyZURPTUNhbGxiYWNrKCdjbG9zZScpO1xuICAgICAgICAgIGlmKGRvbmVDYWxsYmFjaykge1xuICAgICAgICAgICAgJCRhc3luY0NhbGxiYWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBkb25lQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vaXQgaXMgbGVzcyBjb21wbGljYXRlZCB0byB1c2UgYSBmbGFnIHRoYW4gbWFuYWdpbmcgYW5kIGNhbmNlbGluZ1xuICAgICAgICAvL3RpbWVvdXRzIGNvbnRhaW5pbmcgbXVsdGlwbGUgY2FsbGJhY2tzLlxuICAgICAgICBmdW5jdGlvbiBmaXJlRE9NT3BlcmF0aW9uKCkge1xuICAgICAgICAgIGlmKCFmaXJlRE9NT3BlcmF0aW9uLmhhc0JlZW5SdW4pIHtcbiAgICAgICAgICAgIGZpcmVET01PcGVyYXRpb24uaGFzQmVlblJ1biA9IHRydWU7XG4gICAgICAgICAgICBkb21PcGVyYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjbG9zZUFuaW1hdGlvbigpIHtcbiAgICAgICAgICBpZighY2xvc2VBbmltYXRpb24uaGFzQmVlblJ1bikge1xuICAgICAgICAgICAgY2xvc2VBbmltYXRpb24uaGFzQmVlblJ1biA9IHRydWU7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFKTtcbiAgICAgICAgICAgIGlmKGRhdGEpIHtcbiAgICAgICAgICAgICAgLyogb25seSBzdHJ1Y3R1cmFsIGFuaW1hdGlvbnMgd2FpdCBmb3IgcmVmbG93IGJlZm9yZSByZW1vdmluZyBhblxuICAgICAgICAgICAgICAgICBhbmltYXRpb24sIGJ1dCBjbGFzcy1iYXNlZCBhbmltYXRpb25zIGRvbid0LiBBbiBleGFtcGxlIG9mIHRoaXNcbiAgICAgICAgICAgICAgICAgZmFpbGluZyB3b3VsZCBiZSB3aGVuIGEgcGFyZW50IEhUTUwgdGFnIGhhcyBhIG5nLWNsYXNzIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgICBjYXVzaW5nIEFMTCBkaXJlY3RpdmVzIGJlbG93IHRvIHNraXAgYW5pbWF0aW9ucyBkdXJpbmcgdGhlIGRpZ2VzdCAqL1xuICAgICAgICAgICAgICBpZihydW5uZXIgJiYgcnVubmVyLmlzQ2xhc3NCYXNlZCkge1xuICAgICAgICAgICAgICAgIGNsZWFudXAoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkJGFzeW5jQ2FsbGJhY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFKSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgIGlmKGxvY2FsQW5pbWF0aW9uQ291bnQgPT0gZGF0YS5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKGVsZW1lbnQsIGNsYXNzTmFtZSwgYW5pbWF0aW9uRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFLCBkYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlyZURvbmVDYWxsYmFja0FzeW5jKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbENoaWxkQW5pbWF0aW9ucyhlbGVtZW50KSB7XG4gICAgICAgIHZhciBub2RlID0gZXh0cmFjdEVsZW1lbnROb2RlKGVsZW1lbnQpO1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgIHZhciBub2RlcyA9IGFuZ3VsYXIuaXNGdW5jdGlvbihub2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpID9cbiAgICAgICAgICAgIG5vZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShOR19BTklNQVRFX0NMQVNTX05BTUUpIDpcbiAgICAgICAgICAgIG5vZGUucXVlcnlTZWxlY3RvckFsbCgnLicgKyBOR19BTklNQVRFX0NMQVNTX05BTUUpO1xuICAgICAgICAgIGZvckVhY2gobm9kZXMsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFKTtcbiAgICAgICAgICAgIGlmKGRhdGEgJiYgZGF0YS5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgZm9yRWFjaChkYXRhLmFjdGl2ZSwgZnVuY3Rpb24ocnVubmVyKSB7XG4gICAgICAgICAgICAgICAgcnVubmVyLmNhbmNlbCgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbGVhbnVwKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZihpc01hdGNoaW5nRWxlbWVudChlbGVtZW50LCAkcm9vdEVsZW1lbnQpKSB7XG4gICAgICAgICAgaWYoIXJvb3RBbmltYXRlU3RhdGUuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJvb3RBbmltYXRlU3RhdGUucnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgcm9vdEFuaW1hdGVTdGF0ZS5zdHJ1Y3R1cmFsID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9TVEFURSkgfHwge307XG5cbiAgICAgICAgICB2YXIgcmVtb3ZlQW5pbWF0aW9ucyA9IGNsYXNzTmFtZSA9PT0gdHJ1ZTtcbiAgICAgICAgICBpZighcmVtb3ZlQW5pbWF0aW9ucyAmJiBkYXRhLmFjdGl2ZSAmJiBkYXRhLmFjdGl2ZVtjbGFzc05hbWVdKSB7XG4gICAgICAgICAgICBkYXRhLnRvdGFsQWN0aXZlLS07XG4gICAgICAgICAgICBkZWxldGUgZGF0YS5hY3RpdmVbY2xhc3NOYW1lXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZihyZW1vdmVBbmltYXRpb25zIHx8ICFkYXRhLnRvdGFsQWN0aXZlKSB7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKE5HX0FOSU1BVEVfQ0xBU1NfTkFNRSk7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZURhdGEoTkdfQU5JTUFURV9TVEFURSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFuaW1hdGlvbnNEaXNhYmxlZChlbGVtZW50LCBwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIGlmIChyb290QW5pbWF0ZVN0YXRlLmRpc2FibGVkKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBpZihpc01hdGNoaW5nRWxlbWVudChlbGVtZW50LCAkcm9vdEVsZW1lbnQpKSB7XG4gICAgICAgICAgcmV0dXJuIHJvb3RBbmltYXRlU3RhdGUuZGlzYWJsZWQgfHwgcm9vdEFuaW1hdGVTdGF0ZS5ydW5uaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgIC8vdGhlIGVsZW1lbnQgZGlkIG5vdCByZWFjaCB0aGUgcm9vdCBlbGVtZW50IHdoaWNoIG1lYW5zIHRoYXQgaXRcbiAgICAgICAgICAvL2lzIG5vdCBhcGFydCBvZiB0aGUgRE9NLiBUaGVyZWZvcmUgdGhlcmUgaXMgbm8gcmVhc29uIHRvIGRvXG4gICAgICAgICAgLy9hbnkgYW5pbWF0aW9ucyBvbiBpdFxuICAgICAgICAgIGlmKHBhcmVudEVsZW1lbnQubGVuZ3RoID09PSAwKSBicmVhaztcblxuICAgICAgICAgIHZhciBpc1Jvb3QgPSBpc01hdGNoaW5nRWxlbWVudChwYXJlbnRFbGVtZW50LCAkcm9vdEVsZW1lbnQpO1xuICAgICAgICAgIHZhciBzdGF0ZSA9IGlzUm9vdCA/IHJvb3RBbmltYXRlU3RhdGUgOiBwYXJlbnRFbGVtZW50LmRhdGEoTkdfQU5JTUFURV9TVEFURSk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IHN0YXRlICYmICghIXN0YXRlLmRpc2FibGVkIHx8IHN0YXRlLnJ1bm5pbmcgfHwgc3RhdGUudG90YWxBY3RpdmUgPiAwKTtcbiAgICAgICAgICBpZihpc1Jvb3QgfHwgcmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKGlzUm9vdCkgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUocGFyZW50RWxlbWVudCA9IHBhcmVudEVsZW1lbnQucGFyZW50KCkpO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgICRhbmltYXRlUHJvdmlkZXIucmVnaXN0ZXIoJycsIFsnJHdpbmRvdycsICckc25pZmZlcicsICckdGltZW91dCcsICckJGFuaW1hdGVSZWZsb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJHdpbmRvdywgICAkc25pZmZlciwgICAkdGltZW91dCwgICAkJGFuaW1hdGVSZWZsb3cpIHtcbiAgICAgIC8vIERldGVjdCBwcm9wZXIgdHJhbnNpdGlvbmVuZC9hbmltYXRpb25lbmQgZXZlbnQgbmFtZXMuXG4gICAgICB2YXIgQ1NTX1BSRUZJWCA9ICcnLCBUUkFOU0lUSU9OX1BST1AsIFRSQU5TSVRJT05FTkRfRVZFTlQsIEFOSU1BVElPTl9QUk9QLCBBTklNQVRJT05FTkRfRVZFTlQ7XG5cbiAgICAgIC8vIElmIHVucHJlZml4ZWQgZXZlbnRzIGFyZSBub3Qgc3VwcG9ydGVkIGJ1dCB3ZWJraXQtcHJlZml4ZWQgYXJlLCB1c2UgdGhlIGxhdHRlci5cbiAgICAgIC8vIE90aGVyd2lzZSwganVzdCB1c2UgVzNDIG5hbWVzLCBicm93c2VycyBub3Qgc3VwcG9ydGluZyB0aGVtIGF0IGFsbCB3aWxsIGp1c3QgaWdub3JlIHRoZW0uXG4gICAgICAvLyBOb3RlOiBDaHJvbWUgaW1wbGVtZW50cyBgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kYCBhbmQgZG9lc24ndCBpbXBsZW1lbnQgYHdpbmRvdy5vbmFuaW1hdGlvbmVuZGBcbiAgICAgIC8vIGJ1dCBhdCB0aGUgc2FtZSB0aW1lIGRpc3BhdGNoZXMgdGhlIGBhbmltYXRpb25lbmRgIGV2ZW50IGFuZCBub3QgYHdlYmtpdEFuaW1hdGlvbkVuZGAuXG4gICAgICAvLyBSZWdpc3RlciBib3RoIGV2ZW50cyBpbiBjYXNlIGB3aW5kb3cub25hbmltYXRpb25lbmRgIGlzIG5vdCBzdXBwb3J0ZWQgYmVjYXVzZSBvZiB0aGF0LFxuICAgICAgLy8gZG8gdGhlIHNhbWUgZm9yIGB0cmFuc2l0aW9uZW5kYCBhcyBTYWZhcmkgaXMgbGlrZWx5IHRvIGV4aGliaXQgc2ltaWxhciBiZWhhdmlvci5cbiAgICAgIC8vIEFsc28sIHRoZSBvbmx5IG1vZGVybiBicm93c2VyIHRoYXQgdXNlcyB2ZW5kb3IgcHJlZml4ZXMgZm9yIHRyYW5zaXRpb25zL2tleWZyYW1lcyBpcyB3ZWJraXRcbiAgICAgIC8vIHRoZXJlZm9yZSB0aGVyZSBpcyBubyByZWFzb24gdG8gdGVzdCBhbnltb3JlIGZvciBvdGhlciB2ZW5kb3IgcHJlZml4ZXM6IGh0dHA6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zaXRpb25cbiAgICAgIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiYgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIENTU19QUkVGSVggPSAnLXdlYmtpdC0nO1xuICAgICAgICBUUkFOU0lUSU9OX1BST1AgPSAnV2Via2l0VHJhbnNpdGlvbic7XG4gICAgICAgIFRSQU5TSVRJT05FTkRfRVZFTlQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFRSQU5TSVRJT05fUFJPUCA9ICd0cmFuc2l0aW9uJztcbiAgICAgICAgVFJBTlNJVElPTkVORF9FVkVOVCA9ICd0cmFuc2l0aW9uZW5kJztcbiAgICAgIH1cblxuICAgICAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIENTU19QUkVGSVggPSAnLXdlYmtpdC0nO1xuICAgICAgICBBTklNQVRJT05fUFJPUCA9ICdXZWJraXRBbmltYXRpb24nO1xuICAgICAgICBBTklNQVRJT05FTkRfRVZFTlQgPSAnd2Via2l0QW5pbWF0aW9uRW5kIGFuaW1hdGlvbmVuZCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBBTklNQVRJT05fUFJPUCA9ICdhbmltYXRpb24nO1xuICAgICAgICBBTklNQVRJT05FTkRfRVZFTlQgPSAnYW5pbWF0aW9uZW5kJztcbiAgICAgIH1cblxuICAgICAgdmFyIERVUkFUSU9OX0tFWSA9ICdEdXJhdGlvbic7XG4gICAgICB2YXIgUFJPUEVSVFlfS0VZID0gJ1Byb3BlcnR5JztcbiAgICAgIHZhciBERUxBWV9LRVkgPSAnRGVsYXknO1xuICAgICAgdmFyIEFOSU1BVElPTl9JVEVSQVRJT05fQ09VTlRfS0VZID0gJ0l0ZXJhdGlvbkNvdW50JztcbiAgICAgIHZhciBOR19BTklNQVRFX1BBUkVOVF9LRVkgPSAnJCRuZ0FuaW1hdGVLZXknO1xuICAgICAgdmFyIE5HX0FOSU1BVEVfQ1NTX0RBVEFfS0VZID0gJyQkbmdBbmltYXRlQ1NTM0RhdGEnO1xuICAgICAgdmFyIE5HX0FOSU1BVEVfQkxPQ0tfQ0xBU1NfTkFNRSA9ICduZy1hbmltYXRlLWJsb2NrLXRyYW5zaXRpb25zJztcbiAgICAgIHZhciBFTEFQU0VEX1RJTUVfTUFYX0RFQ0lNQUxfUExBQ0VTID0gMztcbiAgICAgIHZhciBDTE9TSU5HX1RJTUVfQlVGRkVSID0gMS41O1xuICAgICAgdmFyIE9ORV9TRUNPTkQgPSAxMDAwO1xuXG4gICAgICB2YXIgbG9va3VwQ2FjaGUgPSB7fTtcbiAgICAgIHZhciBwYXJlbnRDb3VudGVyID0gMDtcbiAgICAgIHZhciBhbmltYXRpb25SZWZsb3dRdWV1ZSA9IFtdO1xuICAgICAgdmFyIGNhbmNlbEFuaW1hdGlvblJlZmxvdztcbiAgICAgIGZ1bmN0aW9uIGFmdGVyUmVmbG93KGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmKGNhbmNlbEFuaW1hdGlvblJlZmxvdykge1xuICAgICAgICAgIGNhbmNlbEFuaW1hdGlvblJlZmxvdygpO1xuICAgICAgICB9XG4gICAgICAgIGFuaW1hdGlvblJlZmxvd1F1ZXVlLnB1c2goY2FsbGJhY2spO1xuICAgICAgICBjYW5jZWxBbmltYXRpb25SZWZsb3cgPSAkJGFuaW1hdGVSZWZsb3coZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZm9yRWFjaChhbmltYXRpb25SZWZsb3dRdWV1ZSwgZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIGZuKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBhbmltYXRpb25SZWZsb3dRdWV1ZSA9IFtdO1xuICAgICAgICAgIGNhbmNlbEFuaW1hdGlvblJlZmxvdyA9IG51bGw7XG4gICAgICAgICAgbG9va3VwQ2FjaGUgPSB7fTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjbG9zaW5nVGltZXIgPSBudWxsO1xuICAgICAgdmFyIGNsb3NpbmdUaW1lc3RhbXAgPSAwO1xuICAgICAgdmFyIGFuaW1hdGlvbkVsZW1lbnRRdWV1ZSA9IFtdO1xuICAgICAgZnVuY3Rpb24gYW5pbWF0aW9uQ2xvc2VIYW5kbGVyKGVsZW1lbnQsIHRvdGFsVGltZSkge1xuICAgICAgICB2YXIgbm9kZSA9IGV4dHJhY3RFbGVtZW50Tm9kZShlbGVtZW50KTtcbiAgICAgICAgZWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudChub2RlKTtcblxuICAgICAgICAvL3RoaXMgaXRlbSB3aWxsIGJlIGdhcmJhZ2UgY29sbGVjdGVkIGJ5IHRoZSBjbG9zaW5nXG4gICAgICAgIC8vYW5pbWF0aW9uIHRpbWVvdXRcbiAgICAgICAgYW5pbWF0aW9uRWxlbWVudFF1ZXVlLnB1c2goZWxlbWVudCk7XG5cbiAgICAgICAgLy9idXQgaXQgbWF5IG5vdCBuZWVkIHRvIGNhbmNlbCBvdXQgdGhlIGV4aXN0aW5nIHRpbWVvdXRcbiAgICAgICAgLy9pZiB0aGUgdGltZXN0YW1wIGlzIGxlc3MgdGhhbiB0aGUgcHJldmlvdXMgb25lXG4gICAgICAgIHZhciBmdXR1cmVUaW1lc3RhbXAgPSBEYXRlLm5vdygpICsgdG90YWxUaW1lO1xuICAgICAgICBpZihmdXR1cmVUaW1lc3RhbXAgPD0gY2xvc2luZ1RpbWVzdGFtcCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICR0aW1lb3V0LmNhbmNlbChjbG9zaW5nVGltZXIpO1xuXG4gICAgICAgIGNsb3NpbmdUaW1lc3RhbXAgPSBmdXR1cmVUaW1lc3RhbXA7XG4gICAgICAgIGNsb3NpbmdUaW1lciA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNsb3NlQWxsQW5pbWF0aW9ucyhhbmltYXRpb25FbGVtZW50UXVldWUpO1xuICAgICAgICAgIGFuaW1hdGlvbkVsZW1lbnRRdWV1ZSA9IFtdO1xuICAgICAgICB9LCB0b3RhbFRpbWUsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2xvc2VBbGxBbmltYXRpb25zKGVsZW1lbnRzKSB7XG4gICAgICAgIGZvckVhY2goZWxlbWVudHMsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgZWxlbWVudERhdGEgPSBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9DU1NfREFUQV9LRVkpO1xuICAgICAgICAgIGlmKGVsZW1lbnREYXRhKSB7XG4gICAgICAgICAgICAoZWxlbWVudERhdGEuY2xvc2VBbmltYXRpb25GbiB8fCBub29wKSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldEVsZW1lbnRBbmltYXRpb25EZXRhaWxzKGVsZW1lbnQsIGNhY2hlS2V5KSB7XG4gICAgICAgIHZhciBkYXRhID0gY2FjaGVLZXkgPyBsb29rdXBDYWNoZVtjYWNoZUtleV0gOiBudWxsO1xuICAgICAgICBpZighZGF0YSkge1xuICAgICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSAwO1xuICAgICAgICAgIHZhciB0cmFuc2l0aW9uRGVsYXkgPSAwO1xuICAgICAgICAgIHZhciBhbmltYXRpb25EdXJhdGlvbiA9IDA7XG4gICAgICAgICAgdmFyIGFuaW1hdGlvbkRlbGF5ID0gMDtcbiAgICAgICAgICB2YXIgdHJhbnNpdGlvbkRlbGF5U3R5bGU7XG4gICAgICAgICAgdmFyIGFuaW1hdGlvbkRlbGF5U3R5bGU7XG4gICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvblN0eWxlO1xuICAgICAgICAgIHZhciB0cmFuc2l0aW9uUHJvcGVydHlTdHlsZTtcblxuICAgICAgICAgIC8vd2Ugd2FudCBhbGwgdGhlIHN0eWxlcyBkZWZpbmVkIGJlZm9yZSBhbmQgYWZ0ZXJcbiAgICAgICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgICB2YXIgZWxlbWVudFN0eWxlcyA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB8fCB7fTtcblxuICAgICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb25TdHlsZSA9IGVsZW1lbnRTdHlsZXNbVFJBTlNJVElPTl9QUk9QICsgRFVSQVRJT05fS0VZXTtcblxuICAgICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBNYXRoLm1heChwYXJzZU1heFRpbWUodHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUpLCB0cmFuc2l0aW9uRHVyYXRpb24pO1xuXG4gICAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wZXJ0eVN0eWxlID0gZWxlbWVudFN0eWxlc1tUUkFOU0lUSU9OX1BST1AgKyBQUk9QRVJUWV9LRVldO1xuXG4gICAgICAgICAgICAgIHRyYW5zaXRpb25EZWxheVN0eWxlID0gZWxlbWVudFN0eWxlc1tUUkFOU0lUSU9OX1BST1AgKyBERUxBWV9LRVldO1xuXG4gICAgICAgICAgICAgIHRyYW5zaXRpb25EZWxheSAgPSBNYXRoLm1heChwYXJzZU1heFRpbWUodHJhbnNpdGlvbkRlbGF5U3R5bGUpLCB0cmFuc2l0aW9uRGVsYXkpO1xuXG4gICAgICAgICAgICAgIGFuaW1hdGlvbkRlbGF5U3R5bGUgPSBlbGVtZW50U3R5bGVzW0FOSU1BVElPTl9QUk9QICsgREVMQVlfS0VZXTtcblxuICAgICAgICAgICAgICBhbmltYXRpb25EZWxheSAgID0gTWF0aC5tYXgocGFyc2VNYXhUaW1lKGFuaW1hdGlvbkRlbGF5U3R5bGUpLCBhbmltYXRpb25EZWxheSk7XG5cbiAgICAgICAgICAgICAgdmFyIGFEdXJhdGlvbiAgPSBwYXJzZU1heFRpbWUoZWxlbWVudFN0eWxlc1tBTklNQVRJT05fUFJPUCArIERVUkFUSU9OX0tFWV0pO1xuXG4gICAgICAgICAgICAgIGlmKGFEdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICAgICAgICBhRHVyYXRpb24gKj0gcGFyc2VJbnQoZWxlbWVudFN0eWxlc1tBTklNQVRJT05fUFJPUCArIEFOSU1BVElPTl9JVEVSQVRJT05fQ09VTlRfS0VZXSwgMTApIHx8IDE7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbiA9IE1hdGgubWF4KGFEdXJhdGlvbiwgYW5pbWF0aW9uRHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRhdGEgPSB7XG4gICAgICAgICAgICB0b3RhbCA6IDAsXG4gICAgICAgICAgICB0cmFuc2l0aW9uUHJvcGVydHlTdHlsZTogdHJhbnNpdGlvblByb3BlcnR5U3R5bGUsXG4gICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb25TdHlsZTogdHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUsXG4gICAgICAgICAgICB0cmFuc2l0aW9uRGVsYXlTdHlsZTogdHJhbnNpdGlvbkRlbGF5U3R5bGUsXG4gICAgICAgICAgICB0cmFuc2l0aW9uRGVsYXk6IHRyYW5zaXRpb25EZWxheSxcbiAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgICAgICAgYW5pbWF0aW9uRGVsYXlTdHlsZTogYW5pbWF0aW9uRGVsYXlTdHlsZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbkRlbGF5OiBhbmltYXRpb25EZWxheSxcbiAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBhbmltYXRpb25EdXJhdGlvblxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYoY2FjaGVLZXkpIHtcbiAgICAgICAgICAgIGxvb2t1cENhY2hlW2NhY2hlS2V5XSA9IGRhdGE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwYXJzZU1heFRpbWUoc3RyKSB7XG4gICAgICAgIHZhciBtYXhWYWx1ZSA9IDA7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBhbmd1bGFyLmlzU3RyaW5nKHN0cikgP1xuICAgICAgICAgIHN0ci5zcGxpdCgvXFxzKixcXHMqLykgOlxuICAgICAgICAgIFtdO1xuICAgICAgICBmb3JFYWNoKHZhbHVlcywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBtYXhWYWx1ZSA9IE1hdGgubWF4KHBhcnNlRmxvYXQodmFsdWUpIHx8IDAsIG1heFZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtYXhWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0Q2FjaGVLZXkoZWxlbWVudCkge1xuICAgICAgICB2YXIgcGFyZW50RWxlbWVudCA9IGVsZW1lbnQucGFyZW50KCk7XG4gICAgICAgIHZhciBwYXJlbnRJRCA9IHBhcmVudEVsZW1lbnQuZGF0YShOR19BTklNQVRFX1BBUkVOVF9LRVkpO1xuICAgICAgICBpZighcGFyZW50SUQpIHtcbiAgICAgICAgICBwYXJlbnRFbGVtZW50LmRhdGEoTkdfQU5JTUFURV9QQVJFTlRfS0VZLCArK3BhcmVudENvdW50ZXIpO1xuICAgICAgICAgIHBhcmVudElEID0gcGFyZW50Q291bnRlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyZW50SUQgKyAnLScgKyBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhbmltYXRlU2V0dXAoYW5pbWF0aW9uRXZlbnQsIGVsZW1lbnQsIGNsYXNzTmFtZSwgY2FsY3VsYXRpb25EZWNvcmF0b3IpIHtcbiAgICAgICAgdmFyIGNhY2hlS2V5ID0gZ2V0Q2FjaGVLZXkoZWxlbWVudCk7XG4gICAgICAgIHZhciBldmVudENhY2hlS2V5ID0gY2FjaGVLZXkgKyAnICcgKyBjbGFzc05hbWU7XG4gICAgICAgIHZhciBpdGVtSW5kZXggPSBsb29rdXBDYWNoZVtldmVudENhY2hlS2V5XSA/ICsrbG9va3VwQ2FjaGVbZXZlbnRDYWNoZUtleV0udG90YWwgOiAwO1xuXG4gICAgICAgIHZhciBzdGFnZ2VyID0ge307XG4gICAgICAgIGlmKGl0ZW1JbmRleCA+IDApIHtcbiAgICAgICAgICB2YXIgc3RhZ2dlckNsYXNzTmFtZSA9IGNsYXNzTmFtZSArICctc3RhZ2dlcic7XG4gICAgICAgICAgdmFyIHN0YWdnZXJDYWNoZUtleSA9IGNhY2hlS2V5ICsgJyAnICsgc3RhZ2dlckNsYXNzTmFtZTtcbiAgICAgICAgICB2YXIgYXBwbHlDbGFzc2VzID0gIWxvb2t1cENhY2hlW3N0YWdnZXJDYWNoZUtleV07XG5cbiAgICAgICAgICBhcHBseUNsYXNzZXMgJiYgZWxlbWVudC5hZGRDbGFzcyhzdGFnZ2VyQ2xhc3NOYW1lKTtcblxuICAgICAgICAgIHN0YWdnZXIgPSBnZXRFbGVtZW50QW5pbWF0aW9uRGV0YWlscyhlbGVtZW50LCBzdGFnZ2VyQ2FjaGVLZXkpO1xuXG4gICAgICAgICAgYXBwbHlDbGFzc2VzICYmIGVsZW1lbnQucmVtb3ZlQ2xhc3Moc3RhZ2dlckNsYXNzTmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiB0aGUgYW5pbWF0aW9uIGl0c2VsZiBtYXkgbmVlZCB0byBhZGQvcmVtb3ZlIHNwZWNpYWwgQ1NTIGNsYXNzZXNcbiAgICAgICAgICogYmVmb3JlIGNhbGN1bGF0aW5nIHRoZSBhbm1hdGlvbiBzdHlsZXMgKi9cbiAgICAgICAgY2FsY3VsYXRpb25EZWNvcmF0b3IgPSBjYWxjdWxhdGlvbkRlY29yYXRvciB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGZuKSB7IHJldHVybiBmbigpOyB9O1xuXG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoY2xhc3NOYW1lKTtcblxuICAgICAgICB2YXIgZm9ybWVyRGF0YSA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX0NTU19EQVRBX0tFWSkgfHwge307XG5cbiAgICAgICAgdmFyIHRpbWluZ3MgPSBjYWxjdWxhdGlvbkRlY29yYXRvcihmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0RWxlbWVudEFuaW1hdGlvbkRldGFpbHMoZWxlbWVudCwgZXZlbnRDYWNoZUtleSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSB0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbjtcbiAgICAgICAgdmFyIGFuaW1hdGlvbkR1cmF0aW9uID0gdGltaW5ncy5hbmltYXRpb25EdXJhdGlvbjtcbiAgICAgICAgaWYodHJhbnNpdGlvbkR1cmF0aW9uID09PSAwICYmIGFuaW1hdGlvbkR1cmF0aW9uID09PSAwKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuZGF0YShOR19BTklNQVRFX0NTU19EQVRBX0tFWSwge1xuICAgICAgICAgIHJ1bm5pbmcgOiBmb3JtZXJEYXRhLnJ1bm5pbmcgfHwgMCxcbiAgICAgICAgICBpdGVtSW5kZXggOiBpdGVtSW5kZXgsXG4gICAgICAgICAgc3RhZ2dlciA6IHN0YWdnZXIsXG4gICAgICAgICAgdGltaW5ncyA6IHRpbWluZ3MsXG4gICAgICAgICAgY2xvc2VBbmltYXRpb25GbiA6IG5vb3BcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy90ZW1wb3JhcmlseSBkaXNhYmxlIHRoZSB0cmFuc2l0aW9uIHNvIHRoYXQgdGhlIGVudGVyIHN0eWxlc1xuICAgICAgICAvL2Rvbid0IGFuaW1hdGUgdHdpY2UgKHRoaXMgaXMgaGVyZSB0byBhdm9pZCBhIGJ1ZyBpbiBDaHJvbWUvRkYpLlxuICAgICAgICB2YXIgaXNDdXJyZW50bHlBbmltYXRpbmcgPSBmb3JtZXJEYXRhLnJ1bm5pbmcgPiAwIHx8IGFuaW1hdGlvbkV2ZW50ID09ICdzZXRDbGFzcyc7XG4gICAgICAgIGlmKHRyYW5zaXRpb25EdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICBibG9ja1RyYW5zaXRpb25zKGVsZW1lbnQsIGNsYXNzTmFtZSwgaXNDdXJyZW50bHlBbmltYXRpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9zdGFnZ2VyaW5nIGtleWZyYW1lIGFuaW1hdGlvbnMgd29yayBieSBhZGp1c3RpbmcgdGhlIGBhbmltYXRpb24tZGVsYXlgIENTUyBwcm9wZXJ0eVxuICAgICAgICAvL29uIHRoZSBnaXZlbiBlbGVtZW50LCBob3dldmVyLCB0aGUgZGVsYXkgdmFsdWUgY2FuIG9ubHkgY2FsY3VsYXRlZCBhZnRlciB0aGUgcmVmbG93XG4gICAgICAgIC8vc2luY2UgYnkgdGhhdCB0aW1lICRhbmltYXRlIGtub3dzIGhvdyBtYW55IGVsZW1lbnRzIGFyZSBiZWluZyBhbmltYXRlZC4gVGhlcmVmb3JlLFxuICAgICAgICAvL3VudGlsIHRoZSByZWZsb3cgb2NjdXJzIHRoZSBlbGVtZW50IG5lZWRzIHRvIGJlIGJsb2NrZWQgKHdoZXJlIHRoZSBrZXlmcmFtZSBhbmltYXRpb25cbiAgICAgICAgLy9pcyBzZXQgdG8gYG5vbmUgMHNgKS4gVGhpcyBibG9ja2luZyBtZWNoYW5pc20gc2hvdWxkIG9ubHkgYmUgc2V0IGZvciB3aGVuIGEgc3RhZ2dlclxuICAgICAgICAvL2FuaW1hdGlvbiBpcyBkZXRlY3RlZCBhbmQgd2hlbiB0aGUgZWxlbWVudCBpdGVtIGluZGV4IGlzIGdyZWF0ZXIgdGhhbiAwLlxuICAgICAgICBpZihhbmltYXRpb25EdXJhdGlvbiA+IDAgJiYgc3RhZ2dlci5hbmltYXRpb25EZWxheSA+IDAgJiYgc3RhZ2dlci5hbmltYXRpb25EdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgIGJsb2NrS2V5ZnJhbWVBbmltYXRpb25zKGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGlzU3RydWN0dXJhbEFuaW1hdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZSA9PSAnbmctZW50ZXInIHx8IGNsYXNzTmFtZSA9PSAnbmctbW92ZScgfHwgY2xhc3NOYW1lID09ICduZy1sZWF2ZSc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJsb2NrVHJhbnNpdGlvbnMoZWxlbWVudCwgY2xhc3NOYW1lLCBpc0FuaW1hdGluZykge1xuICAgICAgICBpZihpc1N0cnVjdHVyYWxBbmltYXRpb24oY2xhc3NOYW1lKSB8fCAhaXNBbmltYXRpbmcpIHtcbiAgICAgICAgICBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkuc3R5bGVbVFJBTlNJVElPTl9QUk9QICsgUFJPUEVSVFlfS0VZXSA9ICdub25lJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKE5HX0FOSU1BVEVfQkxPQ0tfQ0xBU1NfTkFNRSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYmxvY2tLZXlmcmFtZUFuaW1hdGlvbnMoZWxlbWVudCkge1xuICAgICAgICBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkuc3R5bGVbQU5JTUFUSU9OX1BST1BdID0gJ25vbmUgMHMnO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB1bmJsb2NrVHJhbnNpdGlvbnMoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIHZhciBwcm9wID0gVFJBTlNJVElPTl9QUk9QICsgUFJPUEVSVFlfS0VZO1xuICAgICAgICB2YXIgbm9kZSA9IGV4dHJhY3RFbGVtZW50Tm9kZShlbGVtZW50KTtcbiAgICAgICAgaWYobm9kZS5zdHlsZVtwcm9wXSAmJiBub2RlLnN0eWxlW3Byb3BdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBub2RlLnN0eWxlW3Byb3BdID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhOR19BTklNQVRFX0JMT0NLX0NMQVNTX05BTUUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB1bmJsb2NrS2V5ZnJhbWVBbmltYXRpb25zKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHByb3AgPSBBTklNQVRJT05fUFJPUDtcbiAgICAgICAgdmFyIG5vZGUgPSBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCk7XG4gICAgICAgIGlmKG5vZGUuc3R5bGVbcHJvcF0gJiYgbm9kZS5zdHlsZVtwcm9wXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgbm9kZS5zdHlsZVtwcm9wXSA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFuaW1hdGVSdW4oYW5pbWF0aW9uRXZlbnQsIGVsZW1lbnQsIGNsYXNzTmFtZSwgYWN0aXZlQW5pbWF0aW9uQ29tcGxldGUpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCk7XG4gICAgICAgIHZhciBlbGVtZW50RGF0YSA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX0NTU19EQVRBX0tFWSk7XG4gICAgICAgIGlmKG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpLmluZGV4T2YoY2xhc3NOYW1lKSA9PSAtMSB8fCAhZWxlbWVudERhdGEpIHtcbiAgICAgICAgICBhY3RpdmVBbmltYXRpb25Db21wbGV0ZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3RpdmVDbGFzc05hbWUgPSAnJztcbiAgICAgICAgZm9yRWFjaChjbGFzc05hbWUuc3BsaXQoJyAnKSwgZnVuY3Rpb24oa2xhc3MsIGkpIHtcbiAgICAgICAgICBhY3RpdmVDbGFzc05hbWUgKz0gKGkgPiAwID8gJyAnIDogJycpICsga2xhc3MgKyAnLWFjdGl2ZSc7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBzdGFnZ2VyID0gZWxlbWVudERhdGEuc3RhZ2dlcjtcbiAgICAgICAgdmFyIHRpbWluZ3MgPSBlbGVtZW50RGF0YS50aW1pbmdzO1xuICAgICAgICB2YXIgaXRlbUluZGV4ID0gZWxlbWVudERhdGEuaXRlbUluZGV4O1xuICAgICAgICB2YXIgbWF4RHVyYXRpb24gPSBNYXRoLm1heCh0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbiwgdGltaW5ncy5hbmltYXRpb25EdXJhdGlvbik7XG4gICAgICAgIHZhciBtYXhEZWxheSA9IE1hdGgubWF4KHRpbWluZ3MudHJhbnNpdGlvbkRlbGF5LCB0aW1pbmdzLmFuaW1hdGlvbkRlbGF5KTtcbiAgICAgICAgdmFyIG1heERlbGF5VGltZSA9IG1heERlbGF5ICogT05FX1NFQ09ORDtcblxuICAgICAgICB2YXIgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIGNzczNBbmltYXRpb25FdmVudHMgPSBBTklNQVRJT05FTkRfRVZFTlQgKyAnICcgKyBUUkFOU0lUSU9ORU5EX0VWRU5UO1xuXG4gICAgICAgIHZhciBzdHlsZSA9ICcnLCBhcHBsaWVkU3R5bGVzID0gW107XG4gICAgICAgIGlmKHRpbWluZ3MudHJhbnNpdGlvbkR1cmF0aW9uID4gMCkge1xuICAgICAgICAgIHZhciBwcm9wZXJ0eVN0eWxlID0gdGltaW5ncy50cmFuc2l0aW9uUHJvcGVydHlTdHlsZTtcbiAgICAgICAgICBpZihwcm9wZXJ0eVN0eWxlLmluZGV4T2YoJ2FsbCcpID09IC0xKSB7XG4gICAgICAgICAgICBzdHlsZSArPSBDU1NfUFJFRklYICsgJ3RyYW5zaXRpb24tcHJvcGVydHk6ICcgKyBwcm9wZXJ0eVN0eWxlICsgJzsnO1xuICAgICAgICAgICAgc3R5bGUgKz0gQ1NTX1BSRUZJWCArICd0cmFuc2l0aW9uLWR1cmF0aW9uOiAnICsgdGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb25TdHlsZSArICc7JztcbiAgICAgICAgICAgIGFwcGxpZWRTdHlsZXMucHVzaChDU1NfUFJFRklYICsgJ3RyYW5zaXRpb24tcHJvcGVydHknKTtcbiAgICAgICAgICAgIGFwcGxpZWRTdHlsZXMucHVzaChDU1NfUFJFRklYICsgJ3RyYW5zaXRpb24tZHVyYXRpb24nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZihpdGVtSW5kZXggPiAwKSB7XG4gICAgICAgICAgaWYoc3RhZ2dlci50cmFuc2l0aW9uRGVsYXkgPiAwICYmIHN0YWdnZXIudHJhbnNpdGlvbkR1cmF0aW9uID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgZGVsYXlTdHlsZSA9IHRpbWluZ3MudHJhbnNpdGlvbkRlbGF5U3R5bGU7XG4gICAgICAgICAgICBzdHlsZSArPSBDU1NfUFJFRklYICsgJ3RyYW5zaXRpb24tZGVsYXk6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgcHJlcGFyZVN0YWdnZXJEZWxheShkZWxheVN0eWxlLCBzdGFnZ2VyLnRyYW5zaXRpb25EZWxheSwgaXRlbUluZGV4KSArICc7ICc7XG4gICAgICAgICAgICBhcHBsaWVkU3R5bGVzLnB1c2goQ1NTX1BSRUZJWCArICd0cmFuc2l0aW9uLWRlbGF5Jyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoc3RhZ2dlci5hbmltYXRpb25EZWxheSA+IDAgJiYgc3RhZ2dlci5hbmltYXRpb25EdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgc3R5bGUgKz0gQ1NTX1BSRUZJWCArICdhbmltYXRpb24tZGVsYXk6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgcHJlcGFyZVN0YWdnZXJEZWxheSh0aW1pbmdzLmFuaW1hdGlvbkRlbGF5U3R5bGUsIHN0YWdnZXIuYW5pbWF0aW9uRGVsYXksIGl0ZW1JbmRleCkgKyAnOyAnO1xuICAgICAgICAgICAgYXBwbGllZFN0eWxlcy5wdXNoKENTU19QUkVGSVggKyAnYW5pbWF0aW9uLWRlbGF5Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoYXBwbGllZFN0eWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgLy90aGUgZWxlbWVudCBiZWluZyBhbmltYXRlZCBtYXkgc29tZXRpbWVzIGNvbnRhaW4gY29tbWVudCBub2RlcyBpblxuICAgICAgICAgIC8vdGhlIGpxTGl0ZSBvYmplY3QsIHNvIHdlJ3JlIHNhZmUgdG8gdXNlIGEgc2luZ2xlIHZhcmlhYmxlIHRvIGhvdXNlXG4gICAgICAgICAgLy90aGUgc3R5bGVzIHNpbmNlIHRoZXJlIGlzIGFsd2F5cyBvbmx5IG9uZSBlbGVtZW50IGJlaW5nIGFuaW1hdGVkXG4gICAgICAgICAgdmFyIG9sZFN0eWxlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykgfHwgJyc7XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgb2xkU3R5bGUgKyAnICcgKyBzdHlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50Lm9uKGNzczNBbmltYXRpb25FdmVudHMsIG9uQW5pbWF0aW9uUHJvZ3Jlc3MpO1xuICAgICAgICBlbGVtZW50LmFkZENsYXNzKGFjdGl2ZUNsYXNzTmFtZSk7XG4gICAgICAgIGVsZW1lbnREYXRhLmNsb3NlQW5pbWF0aW9uRm4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBvbkVuZCgpO1xuICAgICAgICAgIGFjdGl2ZUFuaW1hdGlvbkNvbXBsZXRlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHN0YWdnZXJUaW1lICAgICAgID0gaXRlbUluZGV4ICogKE1hdGgubWF4KHN0YWdnZXIuYW5pbWF0aW9uRGVsYXksIHN0YWdnZXIudHJhbnNpdGlvbkRlbGF5KSB8fCAwKTtcbiAgICAgICAgdmFyIGFuaW1hdGlvblRpbWUgICAgID0gKG1heERlbGF5ICsgbWF4RHVyYXRpb24pICogQ0xPU0lOR19USU1FX0JVRkZFUjtcbiAgICAgICAgdmFyIHRvdGFsVGltZSAgICAgICAgID0gKHN0YWdnZXJUaW1lICsgYW5pbWF0aW9uVGltZSkgKiBPTkVfU0VDT05EO1xuXG4gICAgICAgIGVsZW1lbnREYXRhLnJ1bm5pbmcrKztcbiAgICAgICAgYW5pbWF0aW9uQ2xvc2VIYW5kbGVyKGVsZW1lbnQsIHRvdGFsVGltZSk7XG4gICAgICAgIHJldHVybiBvbkVuZDtcblxuICAgICAgICAvLyBUaGlzIHdpbGwgYXV0b21hdGljYWxseSBiZSBjYWxsZWQgYnkgJGFuaW1hdGUgc29cbiAgICAgICAgLy8gdGhlcmUgaXMgbm8gbmVlZCB0byBhdHRhY2ggdGhpcyBpbnRlcm5hbGx5IHRvIHRoZVxuICAgICAgICAvLyB0aW1lb3V0IGRvbmUgbWV0aG9kLlxuICAgICAgICBmdW5jdGlvbiBvbkVuZChjYW5jZWxsZWQpIHtcbiAgICAgICAgICBlbGVtZW50Lm9mZihjc3MzQW5pbWF0aW9uRXZlbnRzLCBvbkFuaW1hdGlvblByb2dyZXNzKTtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGFjdGl2ZUNsYXNzTmFtZSk7XG4gICAgICAgICAgYW5pbWF0ZUNsb3NlKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgdmFyIG5vZGUgPSBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCk7XG4gICAgICAgICAgZm9yICh2YXIgaSBpbiBhcHBsaWVkU3R5bGVzKSB7XG4gICAgICAgICAgICBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KGFwcGxpZWRTdHlsZXNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9uQW5pbWF0aW9uUHJvZ3Jlc3MoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB2YXIgZXYgPSBldmVudC5vcmlnaW5hbEV2ZW50IHx8IGV2ZW50O1xuICAgICAgICAgIHZhciB0aW1lU3RhbXAgPSBldi4kbWFudWFsVGltZVN0YW1wIHx8IGV2LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG4gICAgICAgICAgLyogRmlyZWZveCAob3IgcG9zc2libHkganVzdCBHZWNrbykgbGlrZXMgdG8gbm90IHJvdW5kIHZhbHVlcyB1cFxuICAgICAgICAgICAqIHdoZW4gYSBtcyBtZWFzdXJlbWVudCBpcyB1c2VkIGZvciB0aGUgYW5pbWF0aW9uICovXG4gICAgICAgICAgdmFyIGVsYXBzZWRUaW1lID0gcGFyc2VGbG9hdChldi5lbGFwc2VkVGltZS50b0ZpeGVkKEVMQVBTRURfVElNRV9NQVhfREVDSU1BTF9QTEFDRVMpKTtcblxuICAgICAgICAgIC8qICRtYW51YWxUaW1lU3RhbXAgaXMgYSBtb2NrZWQgdGltZVN0YW1wIHZhbHVlIHdoaWNoIGlzIHNldFxuICAgICAgICAgICAqIHdpdGhpbiBicm93c2VyVHJpZ2dlcigpLiBUaGlzIGlzIG9ubHkgaGVyZSBzbyB0aGF0IHRlc3RzIGNhblxuICAgICAgICAgICAqIG1vY2sgYW5pbWF0aW9ucyBwcm9wZXJseS4gUmVhbCBldmVudHMgZmFsbGJhY2sgdG8gZXZlbnQudGltZVN0YW1wLFxuICAgICAgICAgICAqIG9yLCBpZiB0aGV5IGRvbid0LCB0aGVuIGEgdGltZVN0YW1wIGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCBmb3IgdGhlbS5cbiAgICAgICAgICAgKiBXZSdyZSBjaGVja2luZyB0byBzZWUgaWYgdGhlIHRpbWVTdGFtcCBzdXJwYXNzZXMgdGhlIGV4cGVjdGVkIGRlbGF5LFxuICAgICAgICAgICAqIGJ1dCB3ZSdyZSB1c2luZyBlbGFwc2VkVGltZSBpbnN0ZWFkIG9mIHRoZSB0aW1lU3RhbXAgb24gdGhlIDJuZFxuICAgICAgICAgICAqIHByZS1jb25kaXRpb24gc2luY2UgYW5pbWF0aW9ucyBzb21ldGltZXMgY2xvc2Ugb2ZmIGVhcmx5ICovXG4gICAgICAgICAgaWYoTWF0aC5tYXgodGltZVN0YW1wIC0gc3RhcnRUaW1lLCAwKSA+PSBtYXhEZWxheVRpbWUgJiYgZWxhcHNlZFRpbWUgPj0gbWF4RHVyYXRpb24pIHtcbiAgICAgICAgICAgIGFjdGl2ZUFuaW1hdGlvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHByZXBhcmVTdGFnZ2VyRGVsYXkoZGVsYXlTdHlsZSwgc3RhZ2dlckRlbGF5LCBpbmRleCkge1xuICAgICAgICB2YXIgc3R5bGUgPSAnJztcbiAgICAgICAgZm9yRWFjaChkZWxheVN0eWxlLnNwbGl0KCcsJyksIGZ1bmN0aW9uKHZhbCwgaSkge1xuICAgICAgICAgIHN0eWxlICs9IChpID4gMCA/ICcsJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgKGluZGV4ICogc3RhZ2dlckRlbGF5ICsgcGFyc2VJbnQodmFsLCAxMCkpICsgJ3MnO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhbmltYXRlQmVmb3JlKGFuaW1hdGlvbkV2ZW50LCBlbGVtZW50LCBjbGFzc05hbWUsIGNhbGN1bGF0aW9uRGVjb3JhdG9yKSB7XG4gICAgICAgIGlmKGFuaW1hdGVTZXR1cChhbmltYXRpb25FdmVudCwgZWxlbWVudCwgY2xhc3NOYW1lLCBjYWxjdWxhdGlvbkRlY29yYXRvcikpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICBjYW5jZWxsZWQgJiYgYW5pbWF0ZUNsb3NlKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhbmltYXRlQWZ0ZXIoYW5pbWF0aW9uRXZlbnQsIGVsZW1lbnQsIGNsYXNzTmFtZSwgYWZ0ZXJBbmltYXRpb25Db21wbGV0ZSkge1xuICAgICAgICBpZihlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9DU1NfREFUQV9LRVkpKSB7XG4gICAgICAgICAgcmV0dXJuIGFuaW1hdGVSdW4oYW5pbWF0aW9uRXZlbnQsIGVsZW1lbnQsIGNsYXNzTmFtZSwgYWZ0ZXJBbmltYXRpb25Db21wbGV0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYW5pbWF0ZUNsb3NlKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgYWZ0ZXJBbmltYXRpb25Db21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFuaW1hdGUoYW5pbWF0aW9uRXZlbnQsIGVsZW1lbnQsIGNsYXNzTmFtZSwgYW5pbWF0aW9uQ29tcGxldGUpIHtcbiAgICAgICAgLy9JZiB0aGUgYW5pbWF0ZVNldHVwIGZ1bmN0aW9uIGRvZXNuJ3QgYm90aGVyIHJldHVybmluZyBhXG4gICAgICAgIC8vY2FuY2VsbGF0aW9uIGZ1bmN0aW9uIHRoZW4gaXQgbWVhbnMgdGhhdCB0aGVyZSBpcyBubyBhbmltYXRpb25cbiAgICAgICAgLy90byBwZXJmb3JtIGF0IGFsbFxuICAgICAgICB2YXIgcHJlUmVmbG93Q2FuY2VsbGF0aW9uID0gYW5pbWF0ZUJlZm9yZShhbmltYXRpb25FdmVudCwgZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgaWYoIXByZVJlZmxvd0NhbmNlbGxhdGlvbikge1xuICAgICAgICAgIGFuaW1hdGlvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9UaGVyZSBhcmUgdHdvIGNhbmNlbGxhdGlvbiBmdW5jdGlvbnM6IG9uZSBpcyBiZWZvcmUgdGhlIGZpcnN0XG4gICAgICAgIC8vcmVmbG93IGFuaW1hdGlvbiBhbmQgdGhlIHNlY29uZCBpcyBkdXJpbmcgdGhlIGFjdGl2ZSBzdGF0ZVxuICAgICAgICAvL2FuaW1hdGlvbi4gVGhlIGZpcnN0IGZ1bmN0aW9uIHdpbGwgdGFrZSBjYXJlIG9mIHJlbW92aW5nIHRoZVxuICAgICAgICAvL2RhdGEgZnJvbSB0aGUgZWxlbWVudCB3aGljaCB3aWxsIG5vdCBtYWtlIHRoZSAybmQgYW5pbWF0aW9uXG4gICAgICAgIC8vaGFwcGVuIGluIHRoZSBmaXJzdCBwbGFjZVxuICAgICAgICB2YXIgY2FuY2VsID0gcHJlUmVmbG93Q2FuY2VsbGF0aW9uO1xuICAgICAgICBhZnRlclJlZmxvdyhlbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1bmJsb2NrVHJhbnNpdGlvbnMoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICB1bmJsb2NrS2V5ZnJhbWVBbmltYXRpb25zKGVsZW1lbnQpO1xuICAgICAgICAgIC8vb25jZSB0aGUgcmVmbG93IGlzIGNvbXBsZXRlIHRoZW4gd2UgcG9pbnQgY2FuY2VsIHRvXG4gICAgICAgICAgLy90aGUgbmV3IGNhbmNlbGxhdGlvbiBmdW5jdGlvbiB3aGljaCB3aWxsIHJlbW92ZSBhbGwgb2YgdGhlXG4gICAgICAgICAgLy9hbmltYXRpb24gcHJvcGVydGllcyBmcm9tIHRoZSBhY3RpdmUgYW5pbWF0aW9uXG4gICAgICAgICAgY2FuY2VsID0gYW5pbWF0ZUFmdGVyKGFuaW1hdGlvbkV2ZW50LCBlbGVtZW50LCBjbGFzc05hbWUsIGFuaW1hdGlvbkNvbXBsZXRlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbmNlbGxlZCkge1xuICAgICAgICAgIChjYW5jZWwgfHwgbm9vcCkoY2FuY2VsbGVkKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYW5pbWF0ZUNsb3NlKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7XG4gICAgICAgIHZhciBkYXRhID0gZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfQ1NTX0RBVEFfS0VZKTtcbiAgICAgICAgaWYoZGF0YSkge1xuICAgICAgICAgIGlmKGRhdGEucnVubmluZykge1xuICAgICAgICAgICAgZGF0YS5ydW5uaW5nLS07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKCFkYXRhLnJ1bm5pbmcgfHwgZGF0YS5ydW5uaW5nID09PSAwKSB7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZURhdGEoTkdfQU5JTUFURV9DU1NfREFUQV9LRVkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbnRlciA6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbkNvbXBsZXRlZCkge1xuICAgICAgICAgIHJldHVybiBhbmltYXRlKCdlbnRlcicsIGVsZW1lbnQsICduZy1lbnRlcicsIGFuaW1hdGlvbkNvbXBsZXRlZCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbGVhdmUgOiBmdW5jdGlvbihlbGVtZW50LCBhbmltYXRpb25Db21wbGV0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gYW5pbWF0ZSgnbGVhdmUnLCBlbGVtZW50LCAnbmctbGVhdmUnLCBhbmltYXRpb25Db21wbGV0ZWQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1vdmUgOiBmdW5jdGlvbihlbGVtZW50LCBhbmltYXRpb25Db21wbGV0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gYW5pbWF0ZSgnbW92ZScsIGVsZW1lbnQsICduZy1tb3ZlJywgYW5pbWF0aW9uQ29tcGxldGVkKTtcbiAgICAgICAgfSxcblxuICAgICAgICBiZWZvcmVTZXRDbGFzcyA6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZCwgcmVtb3ZlLCBhbmltYXRpb25Db21wbGV0ZWQpIHtcbiAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gc3VmZml4Q2xhc3NlcyhyZW1vdmUsICctcmVtb3ZlJykgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzdWZmaXhDbGFzc2VzKGFkZCwgJy1hZGQnKTtcbiAgICAgICAgICB2YXIgY2FuY2VsbGF0aW9uTWV0aG9kID0gYW5pbWF0ZUJlZm9yZSgnc2V0Q2xhc3MnLCBlbGVtZW50LCBjbGFzc05hbWUsIGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICAvKiB3aGVuIGNsYXNzZXMgYXJlIHJlbW92ZWQgZnJvbSBhbiBlbGVtZW50IHRoZW4gdGhlIHRyYW5zaXRpb24gc3R5bGVcbiAgICAgICAgICAgICAqIHRoYXQgaXMgYXBwbGllZCBpcyB0aGUgdHJhbnNpdGlvbiBkZWZpbmVkIG9uIHRoZSBlbGVtZW50IHdpdGhvdXQgdGhlXG4gICAgICAgICAgICAgKiBDU1MgY2xhc3MgYmVpbmcgdGhlcmUuIFRoaXMgaXMgaG93IENTUzMgZnVuY3Rpb25zIG91dHNpZGUgb2YgbmdBbmltYXRlLlxuICAgICAgICAgICAgICogaHR0cDovL3BsbmtyLmNvL2VkaXQvajhPemdUTnhIVGI0bjN6THlqR1c/cD1wcmV2aWV3ICovXG4gICAgICAgICAgICB2YXIga2xhc3MgPSBlbGVtZW50LmF0dHIoJ2NsYXNzJyk7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKHJlbW92ZSk7XG4gICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKGFkZCk7XG4gICAgICAgICAgICB2YXIgdGltaW5ncyA9IGZuKCk7XG4gICAgICAgICAgICBlbGVtZW50LmF0dHIoJ2NsYXNzJywga2xhc3MpO1xuICAgICAgICAgICAgcmV0dXJuIHRpbWluZ3M7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZihjYW5jZWxsYXRpb25NZXRob2QpIHtcbiAgICAgICAgICAgIGFmdGVyUmVmbG93KGVsZW1lbnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB1bmJsb2NrVHJhbnNpdGlvbnMoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgdW5ibG9ja0tleWZyYW1lQW5pbWF0aW9ucyhlbGVtZW50KTtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uQ29tcGxldGVkKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjYW5jZWxsYXRpb25NZXRob2Q7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFuaW1hdGlvbkNvbXBsZXRlZCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGJlZm9yZUFkZENsYXNzIDogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBhbmltYXRpb25Db21wbGV0ZWQpIHtcbiAgICAgICAgICB2YXIgY2FuY2VsbGF0aW9uTWV0aG9kID0gYW5pbWF0ZUJlZm9yZSgnYWRkQ2xhc3MnLCBlbGVtZW50LCBzdWZmaXhDbGFzc2VzKGNsYXNzTmFtZSwgJy1hZGQnKSwgZnVuY3Rpb24oZm4pIHtcblxuICAgICAgICAgICAgLyogd2hlbiBhIENTUyBjbGFzcyBpcyBhZGRlZCB0byBhbiBlbGVtZW50IHRoZW4gdGhlIHRyYW5zaXRpb24gc3R5bGUgdGhhdFxuICAgICAgICAgICAgICogaXMgYXBwbGllZCBpcyB0aGUgdHJhbnNpdGlvbiBkZWZpbmVkIG9uIHRoZSBlbGVtZW50IHdoZW4gdGhlIENTUyBjbGFzc1xuICAgICAgICAgICAgICogaXMgYWRkZWQgYXQgdGhlIHRpbWUgb2YgdGhlIGFuaW1hdGlvbi4gVGhpcyBpcyBob3cgQ1NTMyBmdW5jdGlvbnNcbiAgICAgICAgICAgICAqIG91dHNpZGUgb2YgbmdBbmltYXRlLiAqL1xuICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhjbGFzc05hbWUpO1xuICAgICAgICAgICAgdmFyIHRpbWluZ3MgPSBmbigpO1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRpbWluZ3M7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZihjYW5jZWxsYXRpb25NZXRob2QpIHtcbiAgICAgICAgICAgIGFmdGVyUmVmbG93KGVsZW1lbnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB1bmJsb2NrVHJhbnNpdGlvbnMoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgdW5ibG9ja0tleWZyYW1lQW5pbWF0aW9ucyhlbGVtZW50KTtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uQ29tcGxldGVkKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjYW5jZWxsYXRpb25NZXRob2Q7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFuaW1hdGlvbkNvbXBsZXRlZCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldENsYXNzIDogZnVuY3Rpb24oZWxlbWVudCwgYWRkLCByZW1vdmUsIGFuaW1hdGlvbkNvbXBsZXRlZCkge1xuICAgICAgICAgIHJlbW92ZSA9IHN1ZmZpeENsYXNzZXMocmVtb3ZlLCAnLXJlbW92ZScpO1xuICAgICAgICAgIGFkZCA9IHN1ZmZpeENsYXNzZXMoYWRkLCAnLWFkZCcpO1xuICAgICAgICAgIHZhciBjbGFzc05hbWUgPSByZW1vdmUgKyAnICcgKyBhZGQ7XG4gICAgICAgICAgcmV0dXJuIGFuaW1hdGVBZnRlcignc2V0Q2xhc3MnLCBlbGVtZW50LCBjbGFzc05hbWUsIGFuaW1hdGlvbkNvbXBsZXRlZCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkQ2xhc3MgOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGFuaW1hdGlvbkNvbXBsZXRlZCkge1xuICAgICAgICAgIHJldHVybiBhbmltYXRlQWZ0ZXIoJ2FkZENsYXNzJywgZWxlbWVudCwgc3VmZml4Q2xhc3NlcyhjbGFzc05hbWUsICctYWRkJyksIGFuaW1hdGlvbkNvbXBsZXRlZCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYmVmb3JlUmVtb3ZlQ2xhc3MgOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGFuaW1hdGlvbkNvbXBsZXRlZCkge1xuICAgICAgICAgIHZhciBjYW5jZWxsYXRpb25NZXRob2QgPSBhbmltYXRlQmVmb3JlKCdyZW1vdmVDbGFzcycsIGVsZW1lbnQsIHN1ZmZpeENsYXNzZXMoY2xhc3NOYW1lLCAnLXJlbW92ZScpLCBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgLyogd2hlbiBjbGFzc2VzIGFyZSByZW1vdmVkIGZyb20gYW4gZWxlbWVudCB0aGVuIHRoZSB0cmFuc2l0aW9uIHN0eWxlXG4gICAgICAgICAgICAgKiB0aGF0IGlzIGFwcGxpZWQgaXMgdGhlIHRyYW5zaXRpb24gZGVmaW5lZCBvbiB0aGUgZWxlbWVudCB3aXRob3V0IHRoZVxuICAgICAgICAgICAgICogQ1NTIGNsYXNzIGJlaW5nIHRoZXJlLiBUaGlzIGlzIGhvdyBDU1MzIGZ1bmN0aW9ucyBvdXRzaWRlIG9mIG5nQW5pbWF0ZS5cbiAgICAgICAgICAgICAqIGh0dHA6Ly9wbG5rci5jby9lZGl0L2o4T3pnVE54SFRiNG4zekx5akdXP3A9cHJldmlldyAqL1xuICAgICAgICAgICAgdmFyIGtsYXNzID0gZWxlbWVudC5hdHRyKCdjbGFzcycpO1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xuICAgICAgICAgICAgdmFyIHRpbWluZ3MgPSBmbigpO1xuICAgICAgICAgICAgZWxlbWVudC5hdHRyKCdjbGFzcycsIGtsYXNzKTtcbiAgICAgICAgICAgIHJldHVybiB0aW1pbmdzO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYoY2FuY2VsbGF0aW9uTWV0aG9kKSB7XG4gICAgICAgICAgICBhZnRlclJlZmxvdyhlbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdW5ibG9ja1RyYW5zaXRpb25zKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICAgIHVuYmxvY2tLZXlmcmFtZUFuaW1hdGlvbnMoZWxlbWVudCk7XG4gICAgICAgICAgICAgIGFuaW1hdGlvbkNvbXBsZXRlZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY2FuY2VsbGF0aW9uTWV0aG9kO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhbmltYXRpb25Db21wbGV0ZWQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmVDbGFzcyA6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgYW5pbWF0aW9uQ29tcGxldGVkKSB7XG4gICAgICAgICAgcmV0dXJuIGFuaW1hdGVBZnRlcigncmVtb3ZlQ2xhc3MnLCBlbGVtZW50LCBzdWZmaXhDbGFzc2VzKGNsYXNzTmFtZSwgJy1yZW1vdmUnKSwgYW5pbWF0aW9uQ29tcGxldGVkKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gc3VmZml4Q2xhc3NlcyhjbGFzc2VzLCBzdWZmaXgpIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuICAgICAgICBjbGFzc2VzID0gYW5ndWxhci5pc0FycmF5KGNsYXNzZXMpID8gY2xhc3NlcyA6IGNsYXNzZXMuc3BsaXQoL1xccysvKTtcbiAgICAgICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbihrbGFzcywgaSkge1xuICAgICAgICAgIGlmKGtsYXNzICYmIGtsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSArPSAoaSA+IDAgPyAnICcgOiAnJykgKyBrbGFzcyArIHN1ZmZpeDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xhc3NOYW1lO1xuICAgICAgfVxuICAgIH1dKTtcbiAgfV0pO1xuXG5cbn0pKHdpbmRvdywgd2luZG93LmFuZ3VsYXIpO1xuIl19
